
Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.
Abstractionis the process ofrepresentingreal-life problems and objects into your programs.
Suppose a novelist, a painter and a programmer were asked toabstract(i.e.,represent) a real-life object in their work. Suppose, the real-life object that needs to be abstracted isan animal. Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal – but what about a computer programmer?
The Java programming language uses a programming paradigm calledobject-oriented programming (OOP), which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.

Thinking in objects[edit]

In OOP, every abstraction of a real-life object is simply called anobjectwithin your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):



The code above creates a space within your code where you can startdefiningan object; this space is called aclass (ortype) definition. All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets – anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition calledAnimalfor objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e.,class). Such predefined words in the Java language are known askeywordsand make up the grammar for the language (known asprogramming syntax).

Note:Class definitions have different names in different languages. They are sometimes calledtype definitions,object specificationsortemplatesas well

Understanding class definitions and types[edit]

Aristotlewas perhaps the first person to think of abstract types or typologies of objects. He started calling them classes – e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:


The code above effectively creates an object calleddogbased on the class definition forAnimal. In non-programmer parlance, the code above would translate into something akin to saying, "Create a new objectdogof typeAnimal." A single class definition enables you to create multiple objects as the code below indicates:


Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).

Expanding your class definitions[edit]

Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simplyfields) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields:name(a common name given to any one of these animals) andlegs(the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:



In the code above you defined two object fields:

a field callednameof typeString; and,a field calledlegsof typeint.

These special pre-defined types are calleddata types. TheStringdata type is used for fields that can holdtextualvalues like names, while theint(integer) data type is used for fields that can holdnumericvalues

Note:Fields are called different things in different languages. They may be calledstate identifiers,propertiesormember variablesin other programming language syntax. Java uses the wordsfieldsandpropertiesin different contexts, as would be understood from upcoming sections.

Figure 3:In order to denote theAnimalobject as a system within the Java Environment,you present it as such. Note how fields are presented.

In order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:


You can access the fields of your created objects by using the.(dot) ormembership operator. In the example above, we created two objects:animal1andanimal2of typeAnimal. And since, we had established that eachAnimalhas two fields namelynameandlegs, we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their currentstate. So, for instance:

theanimal1object is a"dog"with4legs to walk with; while,theanimal2object is a"duck"with2legs to walk with.

What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.

Adding behavior to objects[edit]

At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct calledmethod.
In the case of theAnimal, you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want yourAnimalobject to be able to walk in its environment. Thus, you need to add a method namedwalkto our object. To do so, we need to write the following code:



As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (orscope) within your object. So the first set of curly brackets defined a scope for your class definition called theclass-level scope. This new set of curly brackets alongside a method defines a scope for the further definition of your method called themethod-level scope.
In this instance, the name of our method iswalk. Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information calledarguments.
A method therefore enables an object to:

Accept input: Receive some argument(s);Process information: work on the received argument(s) within its curly brackets; and,Generate ouput:occasionally, return something back.

In essence, methods are what makes an object behave more like a system.
Notice the keywordvoidbefore the name of the method – this tells us that the methodwalkreturnsnothing. You can set a method to return any data type – it can be aStringor anintas well.

Note:Methods are known by different names in different programming language. They might be calledfunctions,procedures,routinesorbehaviors.

Figure 4:TheAnimalobject can now be denoted as having an interaction behavior within the Java Environmentas illustrated here. Note the difference between the presentation of fields and methods.



