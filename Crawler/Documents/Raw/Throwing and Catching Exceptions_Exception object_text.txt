
The preceding exception could have been created explicitly by the developer as it is the case in the following code:


Note that whenbequals zero, there is no return value. Instead of ajava.lang.ArithmeticExceptiongenerated by the Java interpreter itself, it is an exception created by the coder. The result is the same. It shows you that an exception is an object. Its main particularity is that it can be thrown. An exception object must inherit fromjava.lang.Exception. Standard exceptions have two constructors:

The default constructor; and,A constructor taking a string argument so that you can place pertinent information in the exception.



This string can later be extracted using various methods, as you can see in thecode listing 6.2.
You can throw any type ofThrowableobject using the keywordthrow. It interrupts the method. Anything after thethrowstatement would not be executed, unless thethrownexception ishandled. The exception object is notreturnedfrom the method, it isthrownfrom the method. That means that the exception object is not the return value of the method and the calling method can be interrupted too and so on and so on...
Typically, you'll throw a different class of exception for each different type of error. The information about the error is represented both inside the exception object and implicitly in the name of the exception class, so someone in the bigger context can figure out what to do with your exception. Often, the only information is the type of exception, and nothing meaningful is stored within the exception object.

Oracle standard exception classes[edit]

The box 6.1 below talks about the various exception classes within thejava.langpackage.

Box 6.1: The Java exception classesThrowableThe Throwable class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java throw statement.A throwable contains a snapshot of the execution stack of its thread at the time it was created. It can also contain a message string that gives more information about the error. Finally, it can contain a cause: another throwable that caused this throwable to get thrown. The cause facility was added in release 1.4. It is also known as the chained exception facility, as the cause can, itself, have a cause, and so on, leading to a "chain" of exceptions, each caused by another.ErrorAn Error indicates serious problems that a reasonable application should not try to handle. Most such errors are abnormal conditions.ExceptionThe class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application might want to handle. Also this is the class that a programmer may want to extend when adding business logic exceptions.RuntimeExceptionRuntimeException is the superclass of those exceptions that can be thrown during the normal operation of the Java Virtual Machine. A method is not required to declare in its throws clause any subclasses of RuntimeException that might be thrown during the execution of the method but not caught.Figure 6.2:The exception classes and their inheritance model in the JCL.

