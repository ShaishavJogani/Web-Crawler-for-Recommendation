
As promised, we will now provide a detailed description of this Java program. We will discuss the syntax and structure of the program and the meaning of that structure.

Introduction to Java Syntax[edit]

publicclassDistance{privatejava.awt.Pointpoint0,point1;publicDistance(intx0,inty0,intx1,inty1) {point0=newjava.awt.Point(x0,y0);point1=newjava.awt.Point(x1,y1);
   }publicvoidprintDistance() {System.out.println("Distance between "+point0+" and "+point1+" is "+point0.distance(point1));
   }publicstaticvoidmain(String[]args) {Distancedist=newDistance(intValue(args[0]),intValue(args[1]),intValue(args[2]),intValue(args[3]));dist.printDistance();
   }privatestaticintintValue(Stringdata) {returnInteger.parseInt(data);
   }
}

Figure 2.1: Basic Java syntax.For a further treatment of the syntax elements of Java, see alsoSyntax.

Thesyntaxof a Java class is the characters, symbols and their structure used to code the class. Java programs consist of a sequence of tokens. There are different kinds of tokens. For example, there are word tokens such asclassandpublicwhich representkeywords(in purpleabove)— special words with reserved meaning in Java. Other words such asDistance,point0,x1, andprintDistanceare not keywords butidentifiers(in grey). Identifiers have many different uses in Java but primarily they are used as names. Java also has tokens to represent numbers, such as1and3; these are known asliterals(in orange).String literals(in blue), such as"Distance between ", consist of zero or more characters embedded in double quotes, andoperators(in red)such as+and=are used to express basic computation such as addition or String concatenation or assignment. There are also left and right braces ({and}) which encloseblocks. The body of a class is one such block. Some tokens are punctuation, such as periods.and commas,and semicolons;. You usewhitespacesuch as spaces, tabs, and newlines, to separate tokens. For example, whitespace is required between keywords and identifiers:publicstaticis a single identifier with twelve characters, not two Java keywords.

Declarations and Definitions[edit]

public class Distance {private java.awt.Point point0, point1;public Distance(int x0, int y0, int x1, int y1) {point0 = new java.awt.Point(x0, y0);point1 = new java.awt.Point(x1, y1);}public void printDistance() {System.out.println("Distance between " + point0 + " and " + point1+ " is " + point0.distance(point1));}public static void main(String[] args) {Distance dist = new Distance(intValue(args[0]), intValue(args[1]),intValue(args[2]), intValue(args[3]));dist.printDistance();}private static int intValue(String data) {return Integer.parseInt(data);}}

Figure 2.2: Declarations and Definitions.

Sequences of tokens are used to construct the next building blocks of Java classes as shownabove: declarations and definitions. A class declaration provides the name and visibility of a class. In our example,public class Distanceis the class declaration. It consists (in this case) of two keywords,publicandclassfollowed by the identifierDistance.
This means that we are defining a class namedDistance. Other classes, or in our case, the command line, can refer to the class by this name. Thepublickeyword is anaccess modifierwhich declares that this class and its members may be accessed from other classes. Theclasskeyword, obviously, identifies this declaration as a class. Java also allows declarations ofinterfacesandannotations.
The class declaration is then followed by a block (surrounded by curly braces) which provides the class's definition(in blue infigure 2.2). The definition is the implementation of the class – the declaration and definitions of the class's members. This class contains exactly six members, which we will explain in turn.

Two field declarations, namedpoint0andpoint1(in green)A constructor declaration(in orange)Three method declarations(in red)

Example: Instance Fields[edit]

The declaration


...declares twoinstance fields. Instance fields represent named values that are allocated whenever an instance of the class is constructed. When a Java program creates aDistanceinstance, that instance will contain space forpoint0andpoint1. When anotherDistanceobject is created, it will contain space for itsownpoint0andpoint1values. The value ofpoint0in the firstDistanceobject can vary independently of the value ofpoint0in the secondDistanceobject.
This declaration consists of:

Theprivateaccess modifier,which means these instance fields are not visible to other classes.The type of the instance fields. In this case, the type isjava.awt.Point.This is the classPointin thejava.awtpackage.The names of the instance fields in a comma separated list.

These two fields could also have been declared with two separate but more verbose declarations,


Since the type of these fields is a reference type (i.e. a field thatrefers toor can hold areference toan object value), Java will implicitly initialize the values ofpoint0andpoint1to null when aDistanceinstance is created. The null value means that a reference value does not refer to an object. The special Java literalnullis used to represent the null value in a program. While you can explicitly assign null values in a declaration, as in


It is not necessary and most programmers omit such default assignments.

Example: Constructor[edit]

Aconstructoris a special method in a class which is used to construct an instance of the class. The constructor can perform initialization for the object, beyond that which the Java VM does automatically. For example, Java will automatically initialize the fieldspoint0andpoint1to null.


The constructor above consists of five parts:

The optionalaccess modifier(s).In this case, the constructor is declaredpublicThe constructor name, which must match the class name exactly:Distancein this case.The constructor parameters.The parameter list is required. Even if a constructor does not have any parameters, you must specify the empty list(). The parameter list declares the type and name of each of the method's parameters.An optionalthrowsclause which declares theexceptionsthat the constructor may throw. This constructor does not declare any exceptions.The constructor body, which is a Java block (enclosed in{}).  This constructor's body contains two statements.

This constructor accepts four parameters, namedx0, y0, x1andy1. Each parameter requires a parameter type declaration, which in this example isintfor all four parameters. The parameters in the parameter list are separated by commas.
The two assignments in this constructor use Java'snewoperatorto allocate twojava.awt.Pointobjects. The first allocates an object representing the first point,(x0, y0), and assigns it to thepoint0instance variable (replacing the null value that the instance variable was initialized to). The second statement allocates a secondjava.awt.Pointinstance with(x1, y1)and assigns it to thepoint1instance variable.
This is the constructor for the Distance class. Distance implicitly extends fromjava.lang.Object. Java inserts a call to the super constructor as the first executable statement of the constructor if there is not one explicitly coded. The above constructor body is equivalent to the following body with the explicit super constructor call:


While it is true that this class could be implemented in other ways, such as simply storing the coordinates of the two points and computing the distance as(x1−x0)2+(y1−y0)2{\displaystyle {\sqrt {(x_{1}-x_{0})^{2}+(y_{1}-y_{0})^{2}}}}, this class instead uses the existingjava.awt.Pointclass. This choice matches the abstract definition of this class: to print the distance between two points on the plane. We take advantage of existing behavior already implemented in the Java platform rather than implementing it again. We will see later how to make the program more flexible without adding much complexity, because we choose to use object abstractions here. However, the key point is that this class uses information hiding. That is,howthe class stores its state or how it computes the distance is hidden. We can change this implementation without altering how clients use and invoke the class.

Example: Methods[edit]

Methodsare the third and most important type of class member. This class contains threemethodsin which the behavior of theDistanceclass is defined:printDistance(),main(), andintValue()

The printDistance() method[edit]

TheprintDistance()method prints the distance between the two points to the standard output (normally the console).


Thisinstance methodexecutes within the context of an implicitDistanceobject. The instance field references,point0andpoint1, refer to instance fields of that implicit object. You can also use the special variablethisto explicitly reference the current object. Within an instance method, Java binds the namethisto the object on which the method is executing, and the type ofthisis that of the current class. The body of theprintDistancemethod could also be coded as


to make the instance field references more explicit.
This method both computes the distance and prints it in one statement. The distance is computed withpoint0.distance(point1);distance()is an instance method of thejava.awt.Pointclass (of whichpoint0andpoint1are instances). The method operates onpoint0(bindingthisto the object thatpoint0refers to during the execution of the method) and accepting another Point as a parameter. Actually, it is slightly more complicated than that, but we'll explain later. The result of thedistance()method is a double precision floating point number.
This method uses the syntax


to construct a String to pass to theSystem.out.println(). This expression is a series ofString concatenationmethods which concatenates Strings or the String representation of primitive types (such as doubles) or objects, and returns a long string. For example, the result of this expression for the points (0,3) and (4,0) is the String

Output"Distance between java.awt.Point[x=0,y=3] and java.awt.Point[x=4,y=0] is 5.0"

which the method then prints toSystem.out.
In order to print, we invoke theprintln(). This is an instance method fromjava.io.PrintStream, which is the type of the static fieldoutin the classjava.lang.System. The Java VM bindsSystem.outto the standard output stream when it starts a program.

The main() method[edit]

Themain()method is the main entry point which Java invokes when you start a Java program from the command line. The command

Outputjava Distance 0 3 4 0

instructs Java to locate the Distance class, put the four command line arguments into an array of String values, then pass those arguments to thepublic static main(String[])method of the class. We will introduce arrays shortly. Any Java class that you want to invoke from the command line or desktop shortcut must have a main method with this signature or the following signature:public static main(String...).


Themain()method invokes the final method,intValue(), four times. TheintValue()takes a single string parameter and returns the integer value represented in the string. For example,intValue("3")will return the integer 3.
People who do test-first programming or perform regression testing
write
a main() method in every Java class, and
amain() function in every Python module,
to run automated tests.
When a person executes the file directly,
the main() method executes and runs the automated tests for that file.
When a person executes some other Java file
that in turn imports many other Java classes,
only one main() method is executed --
the main() method of the directly-executed file.

TheintValue()method[edit]

TheintValue()method delegates its job to theInteger.parseInt()method. The main method could have calledInteger.parseInt()directly; theintValue()method simply makes themain()method slightly more readable.


This method isprivatesince, like the fieldspoint0andpoint1, it is part of the internal implementation of the class and is not part of the external programming interface of theDistanceclass.

Static vs. Instance Methods[edit]

Both themain()andintValue()methods arestatic methods. Thestatickeyword tells the compiler to create a single memory space associated with the class.  Each individual object instantiated has its own private state variables and methods but use the samestaticmethods and members common to the single class object created by the compiler when the first class object is instantiated or created.  This means that the method executes in a static or non-object context — there is no implicit separate instance available when the static methods run from various objects, and the special variablethisis not available. As such, static methods cannot access instance methods or instance fields (such asprintDistance()) orpoint0) directly. Themain()method can only invoke the instance methodprintDistance()method via an instance reference such asdist.

Data Types[edit]

Most declarations have a data type. Java has several categories of data types: reference types, primitive types, array types, and a special type, void.

Primitive Types[edit]

Theprimitive typesare used to represent boolean, character, and numeric values. This program uses only one primitive type explicitly,int, which represents 32 bit signed integer values. The program also implicitly usesdouble, which is the return type of thedistance()method ofjava.awt.Point.doublevalues are 64 bit IEEE floating point values. Themain()method uses integer values 0, 1, 2, and 3 to access elements of the command line arguments. TheDistance()constructor's four parameters also have the typeint. Also, theintValue()method has a return type ofint. This means a call to that method, such asintValue(args[0]), is an expression of typeint. This helps explain why the main method cannot call:


Since the type of theargsarray element is String, and our constructor's parameters must beint, such a call would result in an error because Java will not automatically convert values of type String intointvalues.
Java's primitive types areboolean,byte,char,short,int,long,floatanddouble. Each of which are also Java language keywords.

Reference Types[edit]

In addition to primitive types, Java supportsreference type. A reference type is a Java data type which is defined by a Java class or interface. Reference types derive this name because such valuesrefer toan object or contain areference toan object. The idea is similar to pointers in other languages like C.
Java represents sequences of character data, orString, with the reference typejava.lang.Stringwhich is most commonly referred to asString.String literals, such as"Distance between "are constants whose type is String.
This program uses three separate reference types:

java.lang.String (or simply String)Distancejava.awt.Point

For more information see chapter:Java Programming/Classes, Objects and Types.

Array Types[edit]

Java supportsarrays, which are aggregate types which have a fixed element type (which can be any Java type) and an integral size. This program uses only one array,String[] args. This indicates thatargshas an array type and that the element type isString. The Java VM constructs and initializes the array that is passed to themainmethod. Seearraysfor more details on how to create arrays and access their size.
The elements of arrays are accessed with integer indices. The first element of an array is always element 0. This program accesses the first four elements of theargsarray explicitly with the indices 0, 1, 2, and 3. This program doesnotperform any input validation, such as verifying that the user passed at least four arguments to the program. We will fix that later.

void[edit]

voidis not a type in Java; it represents the absence of a type. Methods which do not return values are declared asvoid methods.
This class defines two void methods:


