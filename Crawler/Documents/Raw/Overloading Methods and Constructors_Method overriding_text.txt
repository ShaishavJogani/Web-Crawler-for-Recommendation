
To easily remember what can be done in method overriding, keep in mind that all you can do in an object of a class, you can also do in an object of a subclass, only the behavior can change. A subclass should becovariant.
Although a method signature has to be unique inside a class, the same method signature can be defined in different classes.  If we define a method that exists in the super class then we override the super class method.  It is calledmethod overriding.  This is different from method overloading. Method overloading happens with methods with the same name but different signature.  Method overriding happens with methods with the same name and same signature between inherited classes.
The return type can cause the same problem we saw above.  When we override a super class method the return type also must be the same.  If that is not the same, the compiler will give you an error.
Beware! If a class declares two public methods with the same name, and a subclass overrides one of them, the subclass still inherits the other method. In this respect, the Java programming language differs from C++.
Method overriding is related todynamic linking, orruntime binding. In order for the Method Overriding to work, the method call that is going to be called can not be determined at compilation time. It will be decided at runtime, and will be looked up in a table.


In thecode section 4.31, the expression at line 3 is true if it is executed during a morning and false if it is executed during an afternoon. Thus, the instance ofobjwill be aMyClassor aSubOfMyClassdepending on the execution time. So it is impossible to determine the method address at compile time. Because theobjreference can point to an object and all its sub objects, and that will be known only at runtime, a table is kept with all the possible method addresses to be called. Do not confuse:


The implementation of this method is searched using theinstantiatedtype of the called object (obj) and thedeclaredtype of the parameter object (myParameter).
Also another rule is that when you do an override, the visibility of the new method that overrides the super class method can not be reduced.  The visibility can be increased, however.  So if the super class method visibility ispublic, the override method can not bepackage, orprivate. An override method must throw the same exceptions as the super class, or their subexceptions.
superreferences to the parent class (i.e.super.someMethod()). It can be used in a subclass to access inherited methods that the subclass has overridden or inherited fields that the subclass has hidden.

A common mistake is to think that if we can override methods, we could also override member variables. This is not the case, as it is useless. You can not redefine a variable that is private in the super class as such a variable is not visible.





To do:Add some exercises like the ones inVariables



InterfacesJava ProgrammingOverloading Methods and ConstructorsObject Lifecycle




