
In a class, there can be several methods with the same name. However they must have a differentsignature. The signature of a method is comprised of its name, its parameter types and the order of its parameters. The signature of a method isnotcomprised of its return type nor its visibility nor the exceptions it may throw.
The practice of defining two or more methods within the same class that share the same name but have different parameters is calledoverloading methods.
Methods with the same name in a class are calledoverloaded methods. Overloading methods offers no specific benefit to the JVM but it is useful to the programmer to have several methods do the same things but with different parameters. For example, we may have the operationrunAroundTherepresented as two methods with the same name, but different input parameter types:


One type can be the subclass of the other:


Although both methods would be fit to call the method with theStringparameter, it is the method with the nearest type that will be called instead. To be more accurate, it will call the method whose parameter type is a subclass of the parameter type of the other method. So,aObjectwill outputObject. Beware! The parameter type is defined by thedeclaredtype of an object,notitsinstantiatedtype!
The following two method definitions are valid


because the type order is different. If both input parameters were type String, that would be a problem since the compiler would not be able to distinguish between the two:


The compiler would give an error for the following method definitions as well:


Note, the return type is not part of the unique signature.  Why not?  The reason is that a method can be called without assigning its return value to a variable.  This feature came from C and C++. So for the call:


the compiler would not know which method to call. It is also the case for the thrown exceptions.


