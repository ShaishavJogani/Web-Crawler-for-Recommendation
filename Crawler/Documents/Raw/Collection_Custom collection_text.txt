
The Java JDK collection implementations are quite powerful and good, so it is unlikely that you will need to write your own. The usage of the different collections are the same but the implementations are different. If the existing collection implementations do not meet your needs, you can write your version of the implementation. Your version of the implementation just needs to implement the samejava.util.Collectioninterface, then you can switch to using your implementation and the code that is using the collection does not need to be changed.
Use the Collection interface if you need to keep related (usually the same type of) objects together in a collection where you can:

Search for a particular elementList the elementsMaintain and/or change the order of the elements by using the collection basic operations (Add, Remove, Update,..)Access the elements by an index number

The advantages of using theCollectioninterface are:

Gives a generic usage, as we talked about above, it is easy to switch implementationIt makes it easy to convert one type of collection to another.

TheCollectioninterface defines the following basic operations:

boolean add(E o);Using Element type Eboolean addAll(Collection c);boolean remove(Objecto);boolean removeAll(Collection c);boolean retainAll(Collection c);Returntrueif the collection has changed due to the operation.

Note that inaddAll()we can add any type of collection.  This is the beauty of using the Collection interface. You can have aLinkedListand just call theaddAll(list)method, passing in a list.  You can pass in aVector, anArrayList, aHashSet, aTreeSet, aYourImpOfCollection, ...
All those different types of collection will bemagicallyconverted to aLinkedList.
Let's have a closer look at thismagic.  The conversion is easy because theCollectioninterface defines  a standard way of looping through the elements.  The following code is a possible implementation ofaddAll()method of theLinkedList.


The above code just iterates through the passed in collection and adds the elements to the linked list. You do not have to do that, since that is already defined. What you might need to code for is to loop through aCustomercollection:


Notice two things:

The above code will work for all type of collections.We have to know the type of objects inside the collection, because we call a method on it.





To do:Add some exercises like the ones inVariables



AggregateJava ProgrammingCollectionArrayList






