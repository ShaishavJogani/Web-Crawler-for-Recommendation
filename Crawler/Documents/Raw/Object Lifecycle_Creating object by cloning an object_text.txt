
Cloning is not automatically available to classes. There is some help though, as all Java objects inherit theprotected Object clone()method. This base method would allocate the memory and do the bit by bit copying of the object's states.
You may ask why we need this clone method. Can't we create a constructor, pass in the same object and do the copying variable by variable? An example would be (note that accessing the privatememberVarvariable ofobjis legal as this is in the same class):


This method works but object creation with thenewkeyword is time-consuming. Theclone()method copies the whole object's memory in one operation and this is much faster than using the new keyword and copying each variable so if you need to create lots of objects with the same type, performance will be better if you create one object and clone new ones from it. See below a factory method that will return a new object using cloning.


Now, let's see how to make the Customer object cloneable.

First theCustomerclass needs to implement theCloneableInterface.Override and make theclone()methodpublic, as that isprotectedin the Object class.Call thesuper.clone()method at the beginning of yourclonemethod.Override theclone()method in all the subclasses ofCustomer.


In thecode listing 4.15we used cloning for speed up object creation. Another use of cloning could be to take a snapshot of an object that can change in time. Let's say we want to store Customer objects in a collection, but we want to disassociate them from the 'live' objects.  So before adding the object, we clone them, so if the original object changes from that point forward, the added object won't.  Also let's say that the Customer object has a reference to an Activity object that contains the customer activities.  Now we are facing a problem, it is not enough to clone the Customer object, we also need to clone the referenced objects.  The solution:

Make the Activity class also cloneableMake sure that if the Activity class has other 'changeable' object references, those have to be cloned as well, as seen belowChange the Customer classclone()method as follows:


Note that only mutable objects need to be cloned. References to unchangeable objects such as a String can be used in the cloned object without worry.

