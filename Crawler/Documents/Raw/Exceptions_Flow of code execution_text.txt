
In Java, there are two main flows of code executions.

Normal main sequential code execution, the program doing what it meant to accomplish.Exception handling code execution, the main program flow was interrupted by an error or some other condition that prevent the continuation of the normal main sequential code execution.

ExceptionExceptions are Java's way of error handling.  Whenever an unexpected condition occurs, an exception can be thrown with an exception object as a parameter. It means that the normal program control flow stops and the search for acatchblock begins. If that is not found at the current method level the search continues at the caller method level, until a matchingcatchblock is found. If none is found the exception will be handled by the JVM, and usually the java program terminates.

When acatch"matching" block is found, that block will be executed, the exception object is passed to the block as a parameter. Then normal program execution continues after thecatchblock.See Javaexception handling syntax.

Exception ObjectThis is the object that is "thrown" as a parameter from the error, and passed to thecatchblock. Exception object encapsulates the information about the error's location and its nature.  All Exception objects must be inherited from thejava.lang.Throwable. See theUML diagrambelow.

Figure6.1:Java exception classes



Matching ruleA thrown exception object can be caught by thecatchkeyword and specifying the exception object's class or its super-class.

Naming conventionIt is good practice to add Exception to all exception classes. The name of the exception should be meaningful, and should represent the problem. For example,CustomerNotFoundExceptionmay indicate that a customer was not found.



Comparing ObjectsJava ProgrammingExceptionsThrowing and Catching Exceptions






