
Understanding coordinates[edit]

To start off your drawing experience, consider drawing the most basic shape â€” a line. A canvas when viewed upon with regards to drawing routines can be expressed as an invertedCartesian coordinate system. A plane expressed by an x- and a y-axis. The origin point or(0,0){\displaystyle (0,0)}being the top-left corner of a canvas and the visible area of the canvas being theCartesian quadrant Ior the positive-positive(+,+) quadrant. The further you go down from the top, the greater the value of y-coordinate on the y-axis, vice-versa for the x-axis as you move toward the right from the left. And unlike the values on a normal graph, the values appear to be positive. So a point at(10,20){\displaystyle (10,20)}would be 10 pixels away from the left and 20 pixels away from the top, hence the format(x,y){\displaystyle (x,y)}.

Figure 9.2: A simple line form displayed across the canvas from Code section 9.4

Drawing a simple line across the screen[edit]

Now, we already know that a line is a connection of two discreet points atop a canvas. So, if one point is at(x1,y1){\displaystyle (x1,y1)}and the other is at(x2,y2){\displaystyle (x2,y2)}, drawing a line would require you to write a syntax like code below. For the sake of brevity, we will skim out the rest of the method unused in the example.


In the above example, a simple method is used to define precisely where to place the line on the Cartesian scale of the canvas. ThedrawLine(int,int,int,int)asks you to put four arguments, appearing in order, thex1 coordinate, they1 coordinate, thex2 coordinateand they2 coordinate. Running the program will show a simple black line diagonally going across the canvas.

Figure 9.3: A simple black-outlined rectangle drawn

