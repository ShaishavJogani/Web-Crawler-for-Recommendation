
Sometimes we may want to change the ordering of a collection of objects from the same class. We may want to order descending or ascending order. We may want to sort bynameor byaddress.
We need to create a class for each way of ordering. It has to implement theComparatorinterface.
Since Java 5.0, theComparatorinterface is generic; that means when you implement it, you can specify what type of objects your comparator can compare.


The above class then can be associated with a SortedSet or other collections that support sorting.


Using the Iterator theorderedCustomerscollection can be iterated in order of sorted byname.
A List can be sorted by theCollections'sortmethod.


Sorts the specified list according to the order induced by the specified comparator. All elements in the list must be mutually comparable using the specified comparator.
An array of objects can also be sorted with the help of aComparator.


Sorts the specified array ofCustomerobjects (customerArray) according to the order induced by the specified comparator. All elements in the array must be mutually comparable by the specified comparator.




To do:Add some exercises like the ones inVariables



MapJava ProgrammingComparing ObjectsExceptions






