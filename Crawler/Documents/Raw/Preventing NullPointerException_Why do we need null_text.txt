
The reason we need it is because many times we need to create an object reference before the object itself is created. Object references cannot exist without a value, so we assign thenullvalue to it.


Incode section 6.14we want to create thePersoninside the if-else, but we also want to return the object reference to the caller, so we need to create the object reference outside of the if-else, because of thescoping rulein Java. Incorrect error-handling and poor contract design can be a pitfall with any programming language. This is also true for Java.
Now we will describe how to preventNullPointerException. We do not describe general techniques for how you should program Java, we just hope to make you more aware of null values, and to be more careful about generating them yourself.
This list is not complete â€” there are no rules for preventingNullPointerExceptionentirely in Java, because the standard libraries have to be used, and they can causeNullPointerExceptions.  Also, it is possible to observe an uninitialized final field in Java, so you can't even treat a final field as being completely trusted during the object's creation.
A good approach is to learn how to deal withNullPointerExceptions first, and become competent with that.  These suggestions will help you to cause lessNullPointerExceptions, but they don't replace the need to know aboutNullPointerExceptions.

