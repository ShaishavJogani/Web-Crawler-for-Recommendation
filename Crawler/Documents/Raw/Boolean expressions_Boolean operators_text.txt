
The Java boolean operators are based on the operations of theboolean algebra. The boolean operators operate directly on boolean values.
Here is a list of four common boolean operators in Java:

!: Boolean NOT&&: Boolean AND||: Boolean inclusive OR^: Boolean exclusive XOR

The boolean NOT operator ("!") inverts the value of a boolean expression.  The boolean AND operator ("&&") will result in true if and only if the values on both sides of the operator are true.  The boolean inclusive OR operator ("||") will result in true if either or both of the values on the sides of the operator is true.  The boolean exclusive XOR operator ("^") will result in true if one and only of the values on the sides of the operator is true.
To show how these operators are used, here is an example:


Here are the truth tables for the boolean operators:

a!atruefalsefalsetrue

aba && ba || ba ^ btruetruetruetruefalsetruefalsefalsetruetruefalsetruefalsetruetruefalsefalsefalsefalsefalse

For help on simplifying complex logic, seeDe Morgan's laws.

In Java, boolean logic has a useful property calledshort circuiting.  This means that expressions will only be evaluated as far as necessary.  In the expression(a && b), if a is false, then b will not be evaluated because the expression will be false no matter what. Here is an example that shows that the second expression is not automatically checked:


To disable this property, you can use&instead of&&and|instead of||but it's not recommended.

For the bitwise operations on&and|, seeArithmetic expressions.



Loop blocksJava ProgrammingBoolean expressionsVariables






