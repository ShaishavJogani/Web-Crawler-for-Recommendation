
One way to understand how reflection works is to use reflection to model how the Java Runtime Environment (JRE) loads and executes a class. When you invoke a Java program

Consolejavafully-qualified-class-namearg0... argn

and pass it command line arguments, the JRE must

put the command line argumentsarg0... argninto aString[] arraydynamically load the target class named byfully-qualified-class-nameaccess thepublicstaticvoidmain(String[])methodinvoke themainmethod, passing the string array mainString[].

Steps 2, 3, and 4 can be accomplished with Java reflection.
Below is an example of loading theDistanceclass, locating themainmethod, (seeUnderstanding a Java Program) and invoking it via reflection.


This code is obviously more complicated than simply calling


However, the main Java runtime does not know about theDistanceclass. The name of the class to execute is a runtime value. Reflection allows a Java program to work with classes even though the classes are not known when the program was written.
Let's explore what theinvokeMainmethod is doing.
The first statement at line 9 is an example ofdynamic class loading. TheforName()method will load a Java class and return an instance ofjava.lang.Classthat results from loading the class. In this case, we are loading the class"Distance"from the default package. We store the class object in the local variabledistanceClass; its type isClass<?>.
The second statement at line 10 simply creates aStringarray with the four command line arguments we wish to pass to themainmethod of theDistanceclass.
The third statement at line 11 performs a reflection operation on theDistanceclass. ThegetMethod()method is defined for theClassclass. It takes a variable number of parameters: the method name is the first parameter and the remaining parameters are the types of each ofmain's parameters. The method name is trivial: we want to invoke themainmethod, so we pass in the name"main". We then add aClassvariable for each of the method parameters.mainaccepts one parameter (String[] args)so we add a singleClasselement representing the String[]. ThegetMethodmethod has a return type ofjava.lang.reflect.Method; we store the result in a local variable namedmainMethod.
Finally, we invoke the method by calling theinvoke()method of theMethodinstance. This method's first parameter is the instance to invoke on, and the remaining parameters are for the invokee's parameters. Since we are invoking a static method and not an instance method, we passnullas the instance argument. Since we only have a single parameter we pass it as the second argument. However, we must cast the parameter to Object to indicate that the array is the parameter, and not that the parameters are in the array. See varargs for more details on this.


Theinvoke()method returns anObjectthat will contain the result that the reflected method returns. In this case, ourmainmethod is avoidmethod, so we ignore the return type.
Most of the methods in this shortinvokeMainmethod may throw various exceptions. The method declares all of them in its signatures. Here is a brief rundown of what might throw an exception:

Class.forName(String)will throwClassNotFoundException, if the named class cannot be located.Class.forName(String)will throwExceptionInInitializerError, if the class could not be loaded due the static initializer throwing an exception or a static field's initialization throwing an exception.Class.getMethod(String name, Class parameterTypes[])will throwNoSuchMethodException, if a matching method is not found, or is not public (usegetDeclaredMethodto get a non-public method).SecurityException, if a security manager is installed and calling the method would result in an access violation (for example, the method is in thesun.*package designed for internal use only).Method.invoke(Object instance, Object... arguments)may throw:IllegalAccessException, if this method is invoked in a manner that violates its access modifiers.IllegalArgumentExceptionfor various reasons, includingpassing an instance that does not implement this method.the actual arguments do not match the method's argumentsInvocationTargetException, if the underlying method (mainin this case) throws an exception.

In addition to these exceptions, there are also errors and runtime exceptions that these methods may throw.



To do:Add some exercises like the ones inVariables








