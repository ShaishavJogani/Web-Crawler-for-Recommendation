
In the JNI framework, native functions are implemented in separate .c or .cpp files. C++ provides a slightly simpler interface with JNI. When the JVM invokes the function, it passes aJNIEnvpointer, ajobjectpointer, and any Java arguments declared by the Java method. A JNI function may look like this:

JNIEXPORTvoidJNICALLJava_ClassName_MethodName(JNIEnv*env,jobjectobj){/*Implement Native Method Here*/}

Theenvpointer is a structure that contains the interface to the JVM.  It includes all of the functions necessary to interact with the JVM and to work with Java objects.  Example JNI functions are converting native arrays to/from Java arrays, converting native strings to/from Java strings, instantiating objects, throwing exceptions, etc.  Basically, anything that Java code can do can be done usingJNIEnv, albeit with considerably less ease.
On Linux and Solaris platforms, if the native code registers itself as a signal handler, it could intercept signals intended for the JVM.  Signal chaining should be used to allow native code to better interoperate with JVM. On Windows platforms, Structured Exception Handling (SEH) may be employed to wrap native code in SEH try/catch blocks so as to capture machine (CPU/FPU) generated software interrupts (such as NULL pointer access violations and divide-by-zero operations), and to handle these situations before the interrupt is propagated back up into the JVM (i.e. Java side code), in all likelihood resulting in an unhandled exception.

C++ code[edit]

For example, the following converts a Java string to a native string:

extern"C"JNIEXPORTvoidJNICALLJava_ClassName_MethodName(JNIEnv*env,jobjectobj,jstringjavaString){//Get the native string from javaStringconstchar*nativeString=env->GetStringUTFChars(javaString,0);//Do something with the nativeString//DON'T FORGET THIS LINE!!!env->ReleaseStringUTFChars(javaString,nativeString);}

The JNI framework does not provide any automatic garbage collection for non-JVM memory resources allocated by code executing on the native side. Consequently, native side code (such as C, C++, or assembly language) must assume the responsibility for explicitly releasing any such memory resources that it itself acquires.

C code[edit]

JNIEXPORTvoidJNICALLJava_ClassName_MethodName(JNIEnv*env,jobjectobj,jstringjavaString){/*Get the native string from javaString*/constchar*nativeString=(*env)->GetStringUTFChars(env,javaString,0);/*Do something with the nativeString*//*DON'T FORGET THIS LINE!!!*/(*env)->ReleaseStringUTFChars(env,javaString,nativeString);}

Note that C++ JNI code is syntactically slightly cleaner than C JNI code because like Java, C++ uses object method invocation semantics.  That means that in C, theenvparameter is dereferenced using(*env)->andenvhas to be explicitly passed toJNIEnvmethods. In C++, theenvparameter is dereferenced usingenv->and theenvparameter is implicitly passed as part of the object method invocation semantics.

Objective-C code[edit]

JNIEXPORTvoidJNICALLJava_ClassName_MethodName(JNIEnv*env,jobjectobj,jstringjavaString){/*DON'T FORGET THIS LINE!!!*/JNF_COCOA_ENTER(env);/*Get the native string from javaString*/NSString*nativeString=JNFJavaToNSString(env,javaString);/*Do something with the nativeString*//*DON'T FORGET THIS LINE!!!*/JNF_COCOA_EXIT(env);}

JNI also allows direct access to assembly code, without even going through a C bridge.

Mapping types[edit]

Native data types can be mapped to/from Java data types. For compound types such as objects, arrays and strings the native code must explicitly convert the data by calling methods in theJNIEnv. The following table shows the mapping of types between Java (JNI) and native code.

Native TypeJNI TypeDescriptionType signatureunsigned charjbooleanunsigned 8 bitsZsigned charjbytesigned 8 bitsBunsigned shortjcharunsigned 16 bitsCshortjshortsigned 16 bitsSlongjintsigned 32 bitsIlong long__int64jlongsigned 64 bitsJfloatjfloat32 bitsFdoublejdouble64 bitsD

In addition, the signature"L fully-qualified-classÂ ;"would mean the class uniquely specified by that name; e.g., the signature"Ljava/lang/String;"refers to the classjava.lang.String. Also, prefixing[to the signature makes the array of that type; for example,[Imeans the int array type. Finally, avoidsignature uses theVcode.
Here, these types are interchangeable. You can usejintwhere you normally use anint, and vice-versa, without any typecasting required.
However, mapping between Java Strings and arrays to native strings and arrays is different. If you use ajstringin where achar *would be, your code could crash the JVM.

JNIEXPORTvoidJNICALLJava_ClassName_MethodName(JNIEnv*env,jobjectobj,jstringjavaString){// printf("%s", javaString);        // INCORRECT: Could crash VM!// Correct way: Create and release native string from Java stringconstchar*nativeString=(*env)->GetStringUTFChars(env,javaString,0);printf("%s",nativeString);(*env)->ReleaseStringUTFChars(env,javaString,nativeString);}

The encoding used for theNewStringUTF,GetStringUTFLength,GetStringUTFChars,ReleaseStringUTFChars,GetStringUTFRegionfunctions is not standard UTF-8, but modified UTF-8. The null character (U+0000) and codepoints greater than or equal to U+10000 are encoded differently in modified UTF-8. Many programs actually use these functions incorrectly and treat the UTF-8 strings returned or passed into the functions as standard UTF-8 strings instead of modified UTF-8 strings. Programs should use theNewString,GetStringLength,GetStringChars,ReleaseStringChars,GetStringRegion,GetStringCritical, andReleaseStringCriticalfunctions, which use UTF-16LE encoding on little-endian architectures and UTF-16BE on big-endian architectures, and then use a UTF-16 to standard UTF-8 conversion routine.
The code is similar with Java arrays, as illustrated in the example below that takes the sum of all the elements in an array.

JNIEXPORTjintJNICALLJava_IntArray_sumArray(JNIEnv*env,jobjectobj,jintArrayarr){jintbuf[10];jinti,sum=0;// This line is necessary, since Java arrays are not guaranteed// to have a continuous memory layout like C arrays.env->GetIntArrayRegion(arr,0,10,buf);for(i=0;i<10;i++){sum+=buf[i];}returnsum;}

Of course, there is much more to it than this.

JNIEnv*[edit]

A JNI environment pointer (JNIEnv*) is passed as an argument for each native function mapped to a Java method, allowing for interaction with the JNI environment within the native method. This JNI interface pointer can be stored, but remains valid only in the current thread. Other threads must first callAttachCurrentThread()to attach themselves to the VM and obtain a JNI interface pointer. Once attached, a native thread works like a regular Java thread running within a native method. The native thread remains attached to the VM until it callsDetachCurrentThread()to detach itself.
To attach to the current thread and get a JNI interface pointer:

JNIEnv *env;
(*g_vm)->AttachCurrentThread (g_vm, (void **) &env, NULL);

To detach from the current thread:

(*g_vm)->DetachCurrentThread (g_vm);

