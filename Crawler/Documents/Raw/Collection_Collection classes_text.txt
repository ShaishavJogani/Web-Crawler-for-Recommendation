
There is no direct implementation for thejava.util.Collectioninterface.  The Collection interface has five sub interfaces.

Figure 1:The five sub interfaces of thejava.util.Collectioninterface.



Set[edit]

A set collection contains unique elements, so duplicates are not allowed. It is similar to a mathematical Set. When adding a new item to a set, the set calls the methodint hashCode()of the item and compares its result to the hash code of all the already inserted items. If the hash code is not found, the item is added. If the hash code is found, the set calls theboolean equals(Object obj);method for all the set items with the same hashcode as the new item. If all equal-calls return false, the new item is inserted in the set. If an equal-call returns true, the new item is not inserted in the set.

Figure 2:Set class diagram.



java.util.HashSet<E>This is the basic implementation of theSetinterface. Not synchronized. Allows thenullelementsjava.util.TreeSet<E>Elements are sorted, not synchronized.nullnot allowedjava.util.CopyOnWriteArraySet<E>Thread safe, a fresh copy is created during modification operation. Add, update, delete are expensive.java.util.EnumSet<E extends Enum<E>>All of the elements in an enum set must come from a single enum type that is specified, explicitly or implicitly, when the set is created. Enum sets are represented internally as bit vectors.java.util.LinkedHashSet<E>Same as HashSet, plus defines the iteration ordering, which is the order in which elements were inserted into the set.

Detecting duplicate objects in Sets[edit]

Setcannot have duplicates in it. You may wonder how duplicates are detected when we are adding an object to theSet. We have to see if that object exists in the Set or not. It is not enough to check the object references, the objects' values have to be checked as well.
To do that, fortunately, each java object has theboolean equals(Object obj), method available inherited fromObject. You need to override it. That method will be called by the Set implementation to compare the two objects to see if they are equal or not.
There is a problem, though. What if I put two different type of objects to the Set. I put an Apple and an Orange. They can not be compared.  Calling theequals()method would cause aClassCastException. There are two solutions to this:

Solution one: Override theint hashCode()method and return the same values for the same type of objects and return different values for different type of objects.  Theequals()method is used to compare objects only with the same value of hashCode. So before an object is added, the Set implementation needs to:find all the objects in the Set that have the same hashCode as the candidate object hashCodeand for those, call theequals()methods passing in the candidate objectif any of them returns true, the object is not added to the Set.

Solution two: Create a super class for the Apple and Orange, let's call it Fruit class. Put Fruits in the Set. You need to do the following:Do not override theequals()andhashCode()methods in the Apple and Orange classesCreateappleEquals()method in the Apple class, and createorangeEquals()method in the Orange classOverride thehashCode()method in the Fruit class and return the same value, so theequals()is called by the Set implementationOverride theequals()method in the Fruit class for something like this.


Note:

Only the objects that have the same hashCode will be compared.You are responsible to override theequals()andhashCode()methods. The default implementations in Object won't work.Only override thehashCode()method if you want to eliminate value duplicates.Do not override thehashCode()method if you know that the values of your objects are different, or if you only want to prevent adding the exactly same object.Beware that thehashCode()may be used in other collection implementations, like in a Hashtable to find an object fast. Overriding the defaulthashCode()method may affect performance there.The default hashCodes are unique for each object created, so if you decide not to override thehashCode()method, there is no point overriding theequals()method, as it won't be called.

SortedSet[edit]

TheSortedSetinterface is the same as the Set interface plus the elements in the SortedSet are sorted. It extends the Set Interface. All elements in the SortedSet must implement the Comparable Interface, furthermore all elements must be mutually comparable.
Note that the ordering maintained by a sorted set must be consistent with equals if the sorted set is to correctly implement the Set interface. This is so because the Set interface is defined in terms of the equals operation, but a sorted set performs all element comparisons using its compare method, so two elements that are deemed equal by this method are, from the standpoint of the sorted set, equal.
The SortedSet interface has additional methods due to the sorted nature of the 'Set'.  Those are:

E first();returns the first elementE last();returns the last elementSortedSet headSet(E toElement);returns from the first, to the exclusive toElementSortedSet tailSet(E fromElement);returns from the inclusive fromElement to the endSortedSet subSet(E fromElement, E toElement);returns elements range from fromElement, inclusive, to toElement, exclusive. (If fromElement and toElement are equal, the returned sorted set is empty.)

List[edit]

In a list collection, the elements are put in a certain order, and can be accessed by an index.  Duplicates are allowed, the same element can be added twice to a list. It has the following implementations:

Figure 3:List class diagram.



java.util.Vector<E>Synchronized, use in multiple thread access, otherwise useArrayList.java.util.Stack<E>It extends class Vector with five operations that allow a vector to be treated as a stack. It represents a last-in-first-out (LIFO) stack of objects.java.util.ArrayList<E>The basic implementation of theListinterface is theArrayList. The ArrayList is not synchronized, not thread safe.Vectoris synchronized, and thread safe.Vectoris slower, because of the extra overhead to make it thread safe.  When only one thread is accessing the list, use the ArrayList. Whenever you insert or remove an element from the list, there are extra overhead to reindex the list. When you have a large list, and you have lots of insert and remove, consider using theLinkedList.java.util.LinkedList<E>Non-synchronized, update operation is faster than other lists, easy to use for stacks, queues, double-ended queues. The nameLinkedListimplies a special data structure where the elements/nodes are connected by pointers.

Head               Node 1                   Node 2                     Node n
  ______
 | Size |          _________________        _______________            _____________
 |______|         |      | point   |       |      | point  |          |      |      |  
 | First|-------->| Data | to next |------>| Data | to next|-- ... -->| Data | null |
 | elem |         |______|_________|       |______|________|          |______|______|
 |______|                                                                 ^
 | Last |                                                                 |
 | elem |-----------------------------------------------------------------
 |______|

Each node is related to an item of the linked list. To remove an element from the linked list the pointers need to be rearranged. After removing Node 2:

Head               Node 1                   Node 2                     Node n
  ______                                 _____________________
 | Size |          _________________    |   _______________   |       ______________
 |_- 1__|         |      | point   |    |  |      | point  |  |       |      |      |  
 | First|-------->| Data | to next |----   | Data | to next|   -...-->| Data | null |
 | elem |         |______|_________|       |______|________|          |______|______|
 |______|                                                                 ^
 | Last |                                                                 |
 | elem |-----------------------------------------------------------------
 |______|

javax.management.AtributeList<E>Represents a list of values for attributes of an MBean. The methods used for the insertion of Attribute objects in the AttributeList overrides the corresponding methods in the superclass ArrayList. This is needed in order to insure that the objects contained in the AttributeList are only Attribute objects.javax.management.relation.RoleList<E>A RoleList represents a list of roles (Role objects). It is used as parameter when creating a relation, and when trying to set several roles in a relation (via 'setRoles()' method). It is returned as part of a RoleResult, to provide roles successfully retrieved.javax.management.relation.RoleUnresolvedList<E>A RoleUnresolvedList represents a list of RoleUnresolved objects, representing roles not retrieved from a relation due to a problem encountered when trying to access (read or write to roles).

