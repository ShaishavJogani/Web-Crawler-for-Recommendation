
Input streams acquire bytes for our programmed java application/program (e.g. a file, an array, a keyboard or monitor, etc.).InputStreamis an abstract class that represents a source of byte data.  It has aread()method, which returns the next byte in the stream and aclose()method, which should be called by a program when that program is done with the stream.  Theread()method is overloaded, and can take a byte array to read to.  It has askip()method that can skip a number of bytes, and anavailable()method that a program can use to determine the number of bytes immediately available to be read, as not all the data is necessarily ready immediately.  As an abstract class, it cannot be instantiated, but describes the general behavior of an input stream.  A few examples of concrete subclasses would beByteArrayInputStream, which reads from a byte array, andFileInputStream, which reads byte data from a file.
In thefollowing example, we print "Hello world!" on the screen several times. The number of times the message is printed is stored in a file namedsource.txt. This file should only contain a integer and should be placed in the same folder of theConfiguredApplicationclass.


Theclose()method is not always mandatory but can avoid some inter-process concurrency conflicts. However if it occurs before aread()orwrite()(in the same process) they return the warningStream closed.
The class start to identify the filename with aFileobject. TheFileobject is used by an input stream as the source of the stream. We create a buffer and a character to prepare the data loading. The buffer will contain all the file content and the character will temporary contain each character present in the file, one after one. This is donewhile{}in the loop. Each iteration of the loop will copy a character from the stream to the buffer. The loop ends when no more character is present in the stream. Then we close the stream. The last part of the code use the data we have loaded in from the file. It is transformed into string and then into an integer (so the data must be an integer). If it works, the integer is used to determine the number of time we print "Hello world!" on the screen. No try/catch block has been defined for readability but the thrown exceptions should be caught.
Let's try with the following source file:

Code listing 9.2: source.txt4

We should obtain this:

Output for ConfiguredApplication$ java ConfiguredApplication
Hello world!
Hello world!
Hello world!
Hello world!

If it shows aFileNotFoundExceptionor anIOException, the source may not be placed in the right folder or its name is badly spelled.If it shows aNumberFormatException, the content of the file may not be an integer.

There is alsoReaderwhich is an abstract class that represents a source of character data.  It is analogous toInputStream, except that it deals with characters instead of bytes (remember that Java uses Unicode, so that a character is 2 bytes, not one).  Its methods are generally similar to those ofInputStream.  Concrete subclasses include classes likeFileReader, which reads characters from files, andStringReader, which reads characters from strings.  You can also convert anInputStreamobject to a Reader object with theInputStreamReaderclass, which can be "wrapped around" anInputStreamobject (by passing it as an argument in its constructor).  It uses a character encoding scheme (which can be changed by the programmer) to translate a byte into a 16-bit Unicode character.

