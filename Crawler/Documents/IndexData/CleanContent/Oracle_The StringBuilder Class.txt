StringBuilder object like String object , except modify . Internally , object treat like variable-length array contain sequence character . At point , length content sequence change method invocation . Strings always use unless string builder offer advantage term simpler code ( see sample program end section ) good performance . For example , need concatenate large number string , append StringBuilder object efficient . Length Capacity The StringBuilder class , like String class , length ( ) method return length character sequence builder . Unlike string , every string builder also capacity , number character space allocate . The capacity , return capacity ( ) method , always great equal length ( usually great ) automatically expand necessary accommodate addition string builder . StringBuilder Constructors Constructor Description StringBuilder ( ) Creates empty string builder capacity 16 ( 16 empty element ) . StringBuilder ( CharSequence c ) Constructs string builder contain character specified CharSequence , plus extra 16 empty element trail CharSequence . StringBuilder ( int initCapacity ) Creates empty string builder specified initial capacity . StringBuilder ( String ) Creates string builder whose value initialize specified string , plus extra 16 empty element trail string . For example , following code // create empty builder , capacity 16 StringBuilder sb = new StringBuilder ( ) ; // add 9 character string begin sb.append ( `` Greetings '' ) ; produce string builder length 9 capacity 16 : The StringBuilder class method relate length capacity String class : Length Capacity Methods Method Description void setLength ( int newLength ) Sets length character sequence . If newLength less length ( ) , last character character sequence truncate . If newLength great length ( ) , null character add end character sequence . void ensureCapacity ( int minCapacity ) Ensures capacity least equal specify minimum . A number operation ( example , append ( ) , insert ( ) , setLength ( ) ) increase length character sequence string builder resultant length ( ) would great current capacity ( ) . When happen , capacity automatically increase . StringBuilder Operations The principal operation StringBuilder available String append ( ) insert ( ) method , overload accept data type . Each convert argument string append insert character string character sequence string builder . The append method always add character end exist character sequence , insert method add character specified point . Here number method StringBuilder class . Various StringBuilder Methods Method Description StringBuilder append ( boolean b ) StringBuilder append ( char c ) StringBuilder append ( char [ ] str ) StringBuilder append ( char [ ] str , int offset , int len ) StringBuilder append ( double ) StringBuilder append ( float f ) StringBuilder append ( int ) StringBuilder append ( long lng ) StringBuilder append ( Object obj ) StringBuilder append ( String ) Appends argument string builder . The data convert string append operation take place . StringBuilder delete ( int start , int end ) StringBuilder deleteCharAt ( int index ) The first method delete subsequence start end-1 ( inclusive ) StringBuilder 's char sequence . The second method delete character locate index . StringBuilder insert ( int offset , boolean b ) StringBuilder insert ( int offset , char c ) StringBuilder insert ( int offset , char [ ] str ) StringBuilder insert ( int index , char [ ] str , int offset , int len ) StringBuilder insert ( int offset , double ) StringBuilder insert ( int offset , float f ) StringBuilder insert ( int offset , int ) StringBuilder insert ( int offset , long lng ) StringBuilder insert ( int offset , Object obj ) StringBuilder insert ( int offset , String ) Inserts second argument string builder . The first integer argument indicate index data insert . The data convert string insert operation take place . StringBuilder replace ( int start , int end , String ) void setCharAt ( int index , char c ) Replaces specified character ( ) string builder . StringBuilder reverse ( ) Reverses sequence character string builder . String toString ( ) Returns string contain character sequence builder . Note : You use String method StringBuilder object first convert string builder string toString ( ) method StringBuilder class . Then convert string back string builder use StringBuilder ( String str ) constructor . An Example The StringDemo program list section title `` Strings '' example program would efficient StringBuilder use instead String . StringDemo reverse palindrome . Here , , listing : public class StringDemo { public static void main ( String [ ] args ) { String palindrome = `` Dot saw I Tod '' ; int len = palindrome.length ( ) ; char [ ] tempCharArray = new char [ len ] ; char [ ] charArray = new char [ len ] ; // put original string // array char ( int = 0 ; < len ; i++ ) { tempCharArray [ ] = palindrome.charAt ( ) ; } // reverse array char ( int j = 0 ; j < len ; j++ ) { charArray [ j ] = tempCharArray [ len - 1 - j ] ; } String reversePalindrome = new String ( charArray ) ; System.out.println ( reversePalindrome ) ; } } Running program produce output : doT saw I toD To accomplish string reversal , program convert string array character ( first loop ) , reverse array second array ( second loop ) , convert back string . If convert palindrome string string builder , use reverse ( ) method StringBuilder class . It make code simpler easy read : public class StringBuilderDemo { public static void main ( String [ ] args ) { String palindrome = `` Dot saw I Tod '' ; StringBuilder sb = new StringBuilder ( palindrome ) ; sb.reverse ( ) ; // reverse System.out.println ( sb ) ; } } Running program produce output : doT saw I toD Note println ( ) print string builder , : System.out.println ( sb ) ; sb.toString ( ) call implicitly , object println ( ) invocation . Note : There also StringBuffer class exactly StringBuilder class , except thread-safe virtue method synchronize . Threads discuss lesson concurrency .