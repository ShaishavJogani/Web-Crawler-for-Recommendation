An application create instance Thread must provide code run thread . There two way : Provide Runnable object . The Runnable interface define single method , run , mean contain code execute thread . The Runnable object pass Thread constructor , HelloRunnable example : public class HelloRunnable implement Runnable { public void run ( ) { System.out.println ( `` Hello thread ! `` ) ; } public static void main ( String args [ ] ) { ( new Thread ( new HelloRunnable ( ) ) ) .start ( ) ; } } Subclass Thread . The Thread class implement Runnable , though run method nothing . An application subclass Thread , provide implementation run , HelloThread example : public class HelloThread extend Thread { public void run ( ) { System.out.println ( `` Hello thread ! `` ) ; } public static void main ( String args [ ] ) { ( new HelloThread ( ) ) .start ( ) ; } } Notice example invoke Thread.start order start new thread . Which idiom use ? The first idiom , employ Runnable object , general , Runnable object subclass class Thread . The second idiom easy use simple application , limit fact task class must descendant Thread . This lesson focus first approach , separate Runnable task Thread object execute task . Not approach flexible , applicable high-level thread management APIs cover later . The Thread class define number method useful thread management . These include static method , provide information , affect status , thread invoke method . The method invoke thread involve manage thread Thread object . We 'll examine method following section .