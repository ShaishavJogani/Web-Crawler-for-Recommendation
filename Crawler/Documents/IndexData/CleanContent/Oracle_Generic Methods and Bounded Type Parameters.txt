Bounded type parameter key implementation generic algorithm . Consider follow method count number element array T [ ] great specified element elem . public static < T > int countGreaterThan ( T [ ] anArray , T elem ) { int count = 0 ; ( T e : anArray ) ( e > elem ) // compiler error ++count ; return count ; } The implementation method straightforward , compile great operator ( > ) apply primitive type short , int , double , long , float , byte , char . You use > operator compare object . To fix problem , use type parameter bound Comparable < T > interface : public interface Comparable < T > { public int compareTo ( T ) ; } The result code : public static < T extend Comparable < T > > int countGreaterThan ( T [ ] anArray , T elem ) { int count = 0 ; ( T e : anArray ) ( e.compareTo ( elem ) > 0 ) ++count ; return count ; }