The URLConnection class contain many method let communicate URL network . URLConnection HTTP-centric class ; , many method useful work HTTP URLs . However , URL protocols allow read write connection . This section describe function . Reading URLConnection The following program perform function URLReader program show Reading Directly URL . However , rather get input stream directly URL , program explicitly retrieve URLConnection object get input stream connection . The connection open implicitly call getInputStream . Then , like URLReader , program create BufferedReader input stream read . The bold statement highlight difference example previous : import java.net . * ; import java.io . * ; public class URLConnectionReader { public static void main ( String [ ] args ) throw Exception { URL oracle = new URL ( `` http : //www.oracle.com/ '' ) ; URLConnection yc = oracle.openConnection ( ) ; BufferedReader = new BufferedReader ( new InputStreamReader ( yc.getInputStream ( ) ) ) ; String inputLine ; ( ( inputLine = in.readLine ( ) ) ! = null ) System.out.println ( inputLine ) ; in.close ( ) ; } } The output program identical output program open stream directly URL . You use either way read URL . However , read URLConnection instead read directly URL might useful . This use URLConnection object task ( like write URL ) time . Again , program hang see error message , may set proxy host program find Oracle server . Writing URLConnection Many HTML page contain form — text field GUI object let enter data send server . After type required information initiate query click button , Web browser write data URL network . At end server receive data , process , send response , usually form new HTML page . Many HTML form use HTTP POST METHOD send data server . Thus write URL often call post URL . The server recognize POST request read data sent client . For Java program interact server-side process simply must able write URL , thus provide data server . It follow step : Create URL . Retrieve URLConnection object . Set output capability URLConnection . Open connection resource . Get output stream connection . Write output stream . Close output stream . Here small servlet name ReverseServlet ( prefer cgi-bin script ) . You use servlet test following example program . The servlet run container read InputStream , reverse string , write OutputStream . The servlet require input form string=string_to_reverse , string_to_reverse string whose character want display reverse order . Here 's example program run ReverseServlet network URLConnection : import java.io . * ; import java.net . * ; public class Reverse { public static void main ( String [ ] args ) throw Exception { ( args.length ! = 2 ) { System.err.println ( `` Usage : java Reverse `` + `` http : // < location servlet/script > '' + `` string_to_reverse '' ) ; System.exit ( 1 ) ; } String stringToReverse = URLEncoder.encode ( args [ 1 ] , `` UTF-8 '' ) ; URL url = new URL ( args [ 0 ] ) ; URLConnection connection = url.openConnection ( ) ; connection.setDoOutput ( true ) ; OutputStreamWriter = new OutputStreamWriter ( connection.getOutputStream ( ) ) ; out.write ( `` string= '' + stringToReverse ) ; out.close ( ) ; BufferedReader = new BufferedReader ( new InputStreamReader ( connection.getInputStream ( ) ) ) ; String decodedString ; ( ( decodedString = in.readLine ( ) ) ! = null ) { System.out.println ( decodedString ) ; } in.close ( ) ; } } Let 's examine program see work . First , program process command-line argument : ( args.length ! = 2 ) { System.err.println ( `` Usage : java Reverse `` + `` http : // < location servlet/script > '' + `` string_to_reverse '' ) ; System.exit ( 1 ) ; } String stringToReverse = URLEncoder.encode ( args [ 1 ] , `` UTF-8 '' ) ; These statement ensure user provide two two command-line argument program . The command-line argument location ReverseServlet string reverse . It may contain space non-alphanumeric character . These character must encode string process way server . The URLEncoder class method encode character . Next , program create URL object , set connection write : URL url = new URL ( args [ 0 ] ) ; URLConnection connection = url.openConnection ( ) ; connection.setDoOutput ( true ) ; The program create output stream connection open OutputStreamWriter : OutputStreamWriter = new OutputStreamWriter ( connection.getOutputStream ( ) ) ; If URL support output , getOutputStream method throw UnknownServiceException . If URL support output , method return output stream connect input stream URL server side — client 's output server 's input . Next , program write required information output stream close stream : out.write ( `` string= '' + stringToReverse ) ; out.close ( ) ; This code write output stream use write method . So see write data URL easy write data stream . The data write output stream client side input servlet server side . The Reverse program construct input form require script prepending string= encode string reverse . The servlet read information write , perform reverse operation string value , send back . You need read string server send back . The Reverse program like : BufferedReader = new BufferedReader ( new InputStreamReader ( connection.getInputStream ( ) ) ) ; String decodedString ; ( ( decodedString = in.readLine ( ) ) ! = null ) { System.out.println ( decodedString ) ; } in.close ( ) ; If ReverseServlet locate http : //example.com/servlet/ReverseServlet , run Reverse program use http : //example.com/servlet/ReverseServlet `` Reverse Me '' argument ( include double quote mark ) , see output : Reverse Me reverse : eM esreveR