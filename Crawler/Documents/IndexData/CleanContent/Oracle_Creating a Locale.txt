There several way create Locale object . Regardless technique use , creation simple specify language code . However , far distinguish locale set region ( also refer `` country '' ) variant code . If use JDK 7 release later , also specify script code Unicode locale extension . The four way create Locale object : Locale.Builder Class Locale Constructors Locale.forLanguageTag Factory Method Locale Constants Version Note : The Locale.Builder class forLanguageTag method add Java SE 7 release . LocaleBuilder Class The Locale.Builder utility class use construct Locale object conform IETF BCP 47 syntax . For example , specify French language country Canada , could invoke Locale.Builder constructor chain setter method follow : Locale aLocale = new Locale.Builder ( ) .setLanguage ( `` fr '' ) .setRegion ( `` CA '' ) .build ( ) ; The next example create Locale object English language United States Great Britain : Locale bLocale = new Locale.Builder ( ) .setLanguage ( `` en '' ) .setRegion ( `` US '' ) .build ( ) ; Locale cLocale = new Locale.Builder ( ) .setLanguage ( `` en '' ) .setRegion ( `` GB '' ) .build ( ) ; The final example create Locale object Russian language : Locale dLocale = new Locale.Builder ( ) .setLanguage ( `` ru '' ) .setScript ( `` Cyrl '' ) .build ( ) ; Locale Constructors There three constructor available Locale class create Locale object : Locale ( String language ) Locale ( String language , String country ) Locale ( String language , String country , String variant ) The following example create Locale object French language Canada , English language U.S. Great Britain , Russian language . aLocale = new Locale ( `` fr '' , `` CA '' ) ; bLocale = new Locale ( `` en '' , `` US '' ) ; cLocale = new Locale ( `` en '' , `` GB '' ) ; dLocale = new Locale ( `` ru '' ) ; It possible set script code Locale object release earlier JDK 7. forLanguageTag Factory Method If language tag string conform IETF BCP 47 standard , use forLanguageTag ( String ) factory method , introduce Java SE 7 release . For example : Locale aLocale = Locale.forLanguageTag ( `` en-US '' ) ; Locale bLocale = Locale.forLanguageTag ( `` ja-JP-u-ca-japanese '' ) ; Locale Constants For convenience Locale class provide constant language country . For example : cLocale = Locale.JAPAN ; dLocale = Locale.CANADA_FRENCH ; When specify language constant , region portion Locale undefined . The next three statement create equivalent Locale object : j1Locale = Locale.JAPANESE ; j2Locale = new Locale.Builder ( ) .setLanguage ( `` ja '' ) .build ( ) ; j3Locale = new Locale ( `` ja '' ) ; The Locale object create following three statement also equivalent : j4Locale = Locale.JAPAN ; j5Locale = new Locale.Builder ( ) .setLanguage ( `` ja '' ) .setRegion ( `` JP '' ) .build ( ) ; j6Locale = new Locale ( `` ja '' , `` JP '' ) ; Codes The following section discuss language code optional script , region , variant code . Language Code The language code either two three lowercase letter conform ISO 639 standard . You find full list ISO 639 code http : //www.loc.gov/standards/iso639-2/php/code_list.php . The following table list language code . Sample Language Codes Language Code Description de German en English fr French ru Russian ja Japanese jv Javanese ko Korean zh Chinese Script Code The script code begin uppercase letter follow three lowercase letter conforms ISO 15924 standard . You find full list ISO 15924 code http : //unicode.org/iso15924/iso15924-codes.html . The following table list script code . Sample Script Codes Script Code Description Arab Arabic Cyrl Cyrillic Kana Katakana Latn Latin There three method retrieve script information Locale : getScript ( ) – return 4-letter script code Locale object . If script define locale , empty string return . getDisplayScript ( ) – return name locale 's script appropriate display user . If possible , name localize default locale . So , example , script code `` Latn , '' diplay script name return would string `` Latin '' English language locale . getDisplayScript ( Locale ) – return display name specify Locale localize , possible , locale . Region Code The region ( country ) code consist either two three uppercase letter conform ISO 3166 standard , three number conform UN M.49 standard . A copy code find http : //www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html . The follow table contains several sample country region code . Sample Region Codes A-2 Code A-3 Code Numeric Code Description AU AUS 036 Australia BR BRA 076 Brazil CA CAN 124 Canada CN CHN 156 China DE DEU 276 Germany FR FRA 250 France IN IND 356 India RU RUS 643 Russian Federation US USA 840 United States Variant Code The optional variant code use far distinguish Locale . For example , variant code use indicate dialectical difference cover region code . Version Note : Prior Java SE 7 release , variant code sometimes use identify difference specific language region . For example , might use identify difference compute platform , Windows UNIX . Under IETF BCP 47 standard , use discourage . To define non-language-specific variation relevant environment , use extension mechanism , explain BCP 47 Extensions . As Java SE 7 release , conform IETF BCP 47 standard , variant code use specifically indicate additional variation define language dialect . The IETF BCP 47 standard imposes syntactic restriction variant subtag . You see list variant code ( search variant ) http : //www.iana.org/assignments/language-subtag-registry . For example , Java SE use variant code support Thai language . By convention , NumberFormat object th th_TH locale use common Arabic digit shape , Arabic numeral , format Thai number . However , NumberFormat th_TH_TH locale us Thai digit shape . The excerpt ThaiDigits.java demonstrate : String outputString = new String ( ) ; Locale [ ] thaiLocale = { new Locale ( `` th '' ) , new Locale ( `` th '' , `` TH '' ) , new Locale ( `` th '' , `` TH '' , `` TH '' ) } ; ( Locale locale : thaiLocale ) { NumberFormat nf = NumberFormat.getNumberInstance ( locale ) ; outputString = outputString + locale.toString ( ) + `` : `` ; outputString = outputString + nf.format ( 573.34 ) + `` \n '' ; } The following screenshot sample :