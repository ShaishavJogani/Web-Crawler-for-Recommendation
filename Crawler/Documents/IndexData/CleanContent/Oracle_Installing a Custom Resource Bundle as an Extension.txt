The section Customizing Resource Bundle Loading show change resource bundle load . This involve derive new class class ResourceBundle.Control , retrieve resource bundle invoke following method : ResourceBundle getBundle ( String baseName , Locale targetLocale , ResourceBundle.Control control ) The parameter control implementation ResourceBundle.Control . The java.util.spi.ResourceBundleControlProvider interface enable change following method load resource bundle : ResourceBundle getBundle ( String baseName , Locale targetLocale ) Note version ResourceBundle.getBundle method require instance ResourceBundle.Control class . ResourceBundleControlProvider service provider interface ( SPI ) . SPIs enable create extensible application , extend easily without modify original code base . See Creating Extensible Applications information . To use SPIs , first create service provider implement SPI like ResourceBundleControlProvider . When implement SPI , specify provide service . The service ResourceBundleControlProvider SPI provide obtain appropriate ResourceBundle.Control instance application invoke method ResourceBundle.getBundle ( String baseName , Locale targetLocale ) . You package service provider Java Extension Mechanism installed extension . When run application , name extension class path ; runtime environment find load extension . An installed implementation ResourceBundleControlProvider SPI replace default ResourceBundle.Control class ( define default bundle load process ) . Consequently , ResourceBundleControlProvider interface enable use custom ResourceBundle.Control class without additional change source code application . In addition , interface enable write application without refer custom ResourceBundle.Control class . The RBCPTest.java sample show implement ResourceBundleControlProvider interface package installed extension . This sample , package zip file RBCPTest.zip , consist following file : src java.util.spi.ResourceBundleControlProvider RBCPTest.java rbcp PropertiesResourceBundleControl.java PropertiesResourceBundleControlProvider.java XMLResourceBundleControl.java XMLResourceBundleControlProvider.java resource RBControl.properties RBControl_zh.properties RBControl_zh_CN.properties RBControl_zh_HK.properties RBControl_zh_TW.properties XmlRB.xml XmlRB_ja.xml lib rbcontrolprovider.jar build : Contains file package rbcontrolprovider.jar well class file RBCPTest.class build.xml The following step show re-create content file RBCPTest.zip , RBCPTest sample work , run : Create implementation ResourceBundle.Control class . Implement ResourceBundleControlProvider interface . In application , invoke method ResourceBundle.getBundle . Register service provider create configuration file . Package provider , required class , configuration file JAR file . Run RBCPTest program . 1 . Create implementation ResourceBundle.Control class . The RBCPTest.java sample use two implementation ResourseBundle.Control : PropertiesResourceBundleControlProvider.java : This ResourceBundle.Control implementation define Customizing Resource Bundle Loading . XMLResourceBundleControl.java : This ResourceBundle.Control implementation load XML-based bundle method Properties.loadFromXML . XML Properties Files As describe section Backing ResourceBundle Properties Files , property file simple text file . They contain one key-value pair line . XML property file like property file : contain key-value pair except XML structure . The following XML property file XmlRB.xml : < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < ! DOCTYPE property [ < ! ELEMENT property ( comment ? , entry* ) > < ! ATTLIST property version CDATA # FIXED `` 1.0 '' > < ! ELEMENT comment ( # PCDATA ) > < ! ELEMENT entry ( # PCDATA ) > < ! ATTLIST entry key CDATA # REQUIRED > ] > < property > < comment > Test data RBCPTest.java < /comment > < entry key= '' type '' > XML < /entry > < /properties > The following property text file equivalent : # Test data RBCPTest.java type = XML All XML property text file structure : A DOCTYPE declaration specify Document Type Definition ( DTD ) : The DTD define structure XML file . Note : You use following DOCTYPE declaration instead XML property file : < ! DOCTYPE property SYSTEM `` http : //java.sun.com/dtd/properties.dtd '' > The system URI ( http : //java.sun.com/dtd/properties.dtd ) access export import property ; string uniquely identify DTD XML property file . Root element < property > : This element contain element . Any number < comment > element : These use comment . Any number < entry > element : Use attribute key specify key ; specify value key < entry > tag . See Properties class information XML property file . 2 . Implement ResourceBundleControlProvider interface . This interface contain one method , ResourceBundle.Control getControl ( String baseName ) method . The parameter baseName name resource bundle . In method definition getBundle , specify instance ResourceBundle.Control return give name resource bundle . The RBCPTest sample contain two implementation ResourceBundleControlProvider interface , PropertiesResourceBundleControlProvider.java XMLResourceBundleControlProvider.java . The method PropertiesResourceBundleControlProvider.getBundle return instance PropertiesResourceBundleControl base name resource bundle start resources.RBControl ( example , resource file contain package resource ) : package rbcp ; import java.util.ResourceBundle ; import java.util.spi.ResourceBundleControlProvider ; public class PropertiesResourceBundleControlProvider implement ResourceBundleControlProvider { static final ResourceBundle.Control PROPERTIESCONTROL = new PropertiesResourceBundleControl ( ) ; public ResourceBundle.Control getControl ( String baseName ) { System.out.println ( `` Class : `` + getClass ( ) .getName ( ) + `` .getControl '' ) ; System.out.println ( `` call `` + baseName ) ; // Throws NPE baseName null . ( baseName.startsWith ( `` resources.RBControl '' ) ) { System.out.println ( `` return `` + PROPERTIESCONTROL ) ; return PROPERTIESCONTROL ; } System.out.println ( `` return null '' ) ; System.out.println ( ) ; return null ; } } Similarly , method XMLResourceBundleControlProvider.getControl return instance XMLResourceBundleControl base name resource bundle start resources.Xml . Note : You create one implementation ResourceBundleControlProvider interface return either instance PropertiesResourceBundleControl XMLResourceBundleControl depend base name . 3 . In application , invoke method ResourceBundle.getBundle . The class RBCPTest retrieve resource bundle method ResourceBundle.getBundle : import java.io . * ; import java.net . * ; import java.util . * ; public class RBCPTest { public static void main ( String [ ] args ) { ResourceBundle rb = ResourceBundle.getBundle ( `` resources.XmlRB '' , Locale.ROOT ) ; String type = rb.getString ( `` type '' ) ; System.out.println ( `` Root locale . Key , type : `` + type ) ; System.out.println ( ) ; rb = ResourceBundle.getBundle ( `` resources.XmlRB '' , Locale.JAPAN ) ; type = rb.getString ( `` type '' ) ; System.out.println ( `` Japan locale . Key , type : `` + type ) ; System.out.println ( ) ; test ( Locale.CHINA ) ; test ( new Locale ( `` zh '' , `` HK '' ) ) ; test ( Locale.TAIWAN ) ; test ( Locale.CANADA ) ; } private static void test ( Locale locale ) { ResourceBundle rb = ResourceBundle.getBundle ( `` resources.RBControl '' , locale ) ; System.out.println ( `` locale : `` + locale ) ; System.out.println ( `` region : `` + rb.getString ( `` region '' ) ) ; System.out.println ( `` language : `` + rb.getString ( `` language '' ) ) ; System.out.println ( ) ; } } Note implementation ResourceBundle.Control ResourceBundleControlProvider appear class . Because ResourceBundleControlProvider interface use Java Extension Mechanism , runtime environment find load implementation . However , ResourceBundleControlProvider implementation service provider instal Java Extension Mechanism load use ServiceLoaderclass . Using class mean register service provider configuration file , describe next step . 4 . Register service provider create configuration file . The name configuration file fully qualified name interface class provider implement . The configuration file contain fully qualified class name provider . The file java.util.spi.ResourceBundleControlProvider contain fully qualified name PropertiesResourceBundleControlProvider XMLResourceBundleControlProvider , one name per line : rbcp.XMLResourceBundleControlProvider rbcp.PropertiesResourceBundleControlProvider 5 . Package provider , required class , configuration file JAR file . Compile source file . From directory contain file build.xml , run following command : javac -d build src/java . * src/rbcp/*.java This command compile source file contain src directory put class file build directory . On Windows , ensure use backslash ( \ ) separate directory file name . Create JAR file contain compiled class file , resource file , configuration file following directory structure : META-INF service java.util.spi.ResourceBundleControlProvider rbcp PropertiesResourceBundleControl.class PropertiesResourceBundleControlProvider.class XMLResourceBundleControl.class XMLResourceBundleControlProvider.class resource RBControl.properties RBControl_zh.properties RBControl_zh_CN.properties RBControl_zh_HK.properties RBControl_zh_TW.properties XmlRB.xml XmlRB_ja.xml Note configuration file java.util.spi.ResourceBundleControlProvider must package directory /META-INF/services . This sample package file JAR file rbcontrolprovider.jar lib directory . See Packaging Programs JAR Files information create JAR file . Alternatively , download install Apache Ant , tool enable automate build process , compile Java file create JAR file . Ensure Apache Ant executable file PATH environment variable run directory . Once instal Apache Ant , follow step : Edit file build.xml change $ { JAVAC } full path name Java compiler , javac , $ { JAVA } full path name Java runtime executable , java . Run following command directory contain file build.xml : ant jar This command compile Java source file package , along required resource configuration file , JAR file rbcontrolprovider.jar lib directory . 6 . Run RBCPTest program . At command prompt , run following command directory contain build.xml file : java -Djava.ext.dirs=lib -cp build RBCPTest This command assume following : The JAR file contain compiled code RBCPTest sample directory lib . The compiled class , RBCPTest.class , build directory . Alternatively , use Apache Ant run following command directory contain build.xml file : ant run When install Java extension , typically put JAR file extension lib/ext directory JRE . However , command specify directory contain Java extension system property java.ext.dirs . The RBCPTest program first attempt retrieve resource bundle base name resources.XmlRB locale Locale.ROOT Local.JAPAN . The output program retrieve resource bundle similar following : Class : rbcp.XMLResourceBundleControlProvider.getControl call resources.XmlRB return rbcp.XMLResourceBundleControl @ 16c1857 Root locale . Key , type : XML Class : rbcp.XMLResourceBundleControlProvider.getControl call resources.XmlRB return rbcp.XMLResourceBundleControl @ 16c1857 Japan locale . Key , type : Value Japan locale The program successfully obtain instance XMLResourceBundleControl access property file XmlRB.xml XmlRB_ja.xml . When RBCPTest program try retrieve resource bundle , call class define configuration file java.util.spi.ResourceBundleControlProvider . For example , program retrieve resource bundle base name resources.RBControl locale Locale.CHINA , print following output : Class : rbcp.XMLResourceBundleControlProvider.getControl call resources.RBControl return null Class : rbcp.PropertiesResourceBundleControlProvider.getControl call resources.RBControl return rbcp.PropertiesResourceBundleControl @ 1ad2911 locale : zh_CN region : China language : Simplified Chinese