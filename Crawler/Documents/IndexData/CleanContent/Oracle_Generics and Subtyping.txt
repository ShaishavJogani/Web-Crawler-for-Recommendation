Let 's test understanding generic . Is following code snippet legal ? List < String > ls = new ArrayList < String > ( ) ; // 1 List < Object > lo = l ; // 2 Line 1 certainly legal . The tricky part question line 2 . This boil question : List String List Object . Most people instinctively answer , `` Sure ! '' Well , take look next line : lo.add ( new Object ( ) ) ; // 3 String = ls.get ( 0 ) ; // 4 : Attempts assign Object String ! Here 've aliased l lo . Accessing l , list String , alias lo , insert arbitrary object . As result l hold Strings anymore , try get something , get rude surprise . The Java compiler prevent happen course . Line 2 cause compile time error . In general , Foo subtype ( subclass subinterface ) Bar , G generic type declaration , case G < Foo > subtype G < Bar > . This probably hard thing need learn generic , go deeply hold intuition . We assume collection n't change . Our instinct may lead u think thing immutable . For example , department motor vehicle supply list driver census bureau , seem reasonable . We think List < Driver > List < Person > , assume Driver subtype Person . In fact , pass copy registry driver . Otherwise , census bureau could add new people driver list , corrupt DMV 's record . To cope sort situation , 's useful consider flexible generic type . The rule 've see far quite restrictive .