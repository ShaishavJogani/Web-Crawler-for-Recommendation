Next , VerSig need import encoded public key byte file specify first command line argument convert PublicKey . A PublicKey need Signature initVerify method require order initialize Signature object verification . First , read encoded public key byte . FileInputStream keyfis = new FileInputStream ( args [ 0 ] ) ; byte [ ] encKey = new byte [ keyfis.available ( ) ] ; keyfis.read ( encKey ) ; keyfis.close ( ) ; Now byte array encKey contain encoded public key byte . You use KeyFactory class order instantiate DSA public key encoding . The KeyFactory class provide conversion opaque key ( type Key ) key specification , transparent representation underlie key material . With opaque key obtain algorithm name , format name , encode key byte , key material , , example , may consist key algorithm parameter use calculate key . ( Note PublicKey , extend Key , Key . ) So , first need key specification . You obtain one via following , assume key encode accord X.509 standard , case , example , key generate built-in DSA key-pair generator supply SUN provider : X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec ( encKey ) ; Now need KeyFactory object conversion . That object must one work DSA key . KeyFactory keyFactory = KeyFactory.getInstance ( `` DSA '' , `` SUN '' ) ; Finally , use KeyFactory object generate PublicKey key specification . PublicKey pubKey = keyFactory.generatePublic ( pubKeySpec ) ;