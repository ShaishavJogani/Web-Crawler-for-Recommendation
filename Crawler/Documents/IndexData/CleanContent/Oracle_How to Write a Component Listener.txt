The Component listener listener interface receive component event . A component object graphical representation display screen interact user . Some example component button , checkboxes , scrollbars typical graphical user interface . The class interested process component event either implement interface method contain , extend abstract ComponentAdapter class override method interest . The listener object create class register component use component 's addComponentListener method . When component 's size , location , visibility change , relevant method listener object invoke , ComponentEvent pass . One component event fire Component object component hide , make visible , move , resize . The component-hidden component-shown event occur result call Component 's setVisible method . For example , window might miniaturize icon ( iconified ) without component-hidden event fire . To write simple Component listener program , follow step mention : Declare class implement Component listener . For example : public class ComponentEventDemo ... implement ComponentListener Identify component would like catch event . For example : pane , label , checkbox , etc . Add Component Listener identified component . For example : ... . label.addComponentListener ( ) ; ... .. checkbox.addComponentListener ( ) ; ... . panel.addComponentListener ( ) ; ... frame.addComponentListener ( ) ; Finally , catch different event component use four method Component Listener show : public void componentHidden ( ComponentEvent e ) { displayMessage ( e.getComponent ( ) .getClass ( ) .getName ( ) + `` -- - Hidden '' ) ; } public void componentMoved ( ComponentEvent e ) { displayMessage ( e.getComponent ( ) .getClass ( ) .getName ( ) + `` -- - Moved '' ) ; } public void componentResized ( ComponentEvent e ) { displayMessage ( e.getComponent ( ) .getClass ( ) .getName ( ) + `` -- - Resized `` ) ; } public void componentShown ( ComponentEvent e ) { displayMessage ( e.getComponent ( ) .getClass ( ) .getName ( ) + `` -- - Shown '' ) ; } The following example demonstrate component event . The window contain panel label check box . The check box control whether label visible . A text area display message every time window , panel , label , check box fire component event . Try : Click Launch button run ComponentEventDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . When window appear , one component-shown event fire . Click check box hide label . The label fire component-hidden event . The panel fire component-moved component-resized event . The check box fire component-moved event . Click check box show label . The label fire component-shown event . The panel fire component-moved component-resized event . The check box fire component-moved event . Iconify deiconify window . You get component-hidden -shown event . If want notify iconification event , use window listener window state listener . Resize window . You see component-resized ( possibly component-moved ) event four component — label , check box , panel , frame . If frame panel 's layout manager make every component wide possible , panel , label , check box would resize . You find demo 's code ComponentEventDemo.java . Here code relate handle component event : public class ComponentEventDemo ... implement ComponentListener { static JFrame frame ; JLabel label ; ... public ComponentEventDemo ( ) { ... JPanel panel = new JPanel ( new BorderLayout ( ) ) ; label = new JLabel ( `` This label '' , JLabel.CENTER ) ; label.addComponentListener ( ) ; panel.add ( label , BorderLayout.CENTER ) ; JCheckBox checkbox = new JCheckBox ( `` Label visible '' , true ) ; checkbox.addComponentListener ( ) ; panel.add ( checkbox , BorderLayout.PAGE_END ) ; panel.addComponentListener ( ) ; ... frame.addComponentListener ( ) ; } ... public void componentHidden ( ComponentEvent e ) { displayMessage ( e.getComponent ( ) .getClass ( ) .getName ( ) + `` -- - Hidden '' ) ; } public void componentMoved ( ComponentEvent e ) { displayMessage ( e.getComponent ( ) .getClass ( ) .getName ( ) + `` -- - Moved '' ) ; } public void componentResized ( ComponentEvent e ) { displayMessage ( e.getComponent ( ) .getClass ( ) .getName ( ) + `` -- - Resized `` ) ; } public void componentShown ( ComponentEvent e ) { displayMessage ( e.getComponent ( ) .getClass ( ) .getName ( ) + `` -- - Shown '' ) ; } public static void main ( String [ ] args ) { ... //Create set window . frame = new JFrame ( `` ComponentEventDemo '' ) ; ... JComponent newContentPane = new ComponentEventDemo ( ) ; frame.setContentPane ( newContentPane ) ; ... } } The Component Listener API The ComponentListener Interface All method also adapter class , ComponentAdapter . Method Purpose componentHidden ( ComponentEvent ) Called listened-to component hide result setVisible method call . componentMoved ( ComponentEvent ) Called listened-to component move , relative container . For example , window move , window fire component-moved event , component contain . componentResized ( ComponentEvent ) Called listened-to component 's size ( rectangular bound ) change . componentShown ( ComponentEvent ) Called listened-to component become visible result setVisible method call . The ComponentEvent Class Method Purpose Component getComponent ( ) Returns component fire event . You use instead getSource method . Examples Use Component Listeners The follow table list example use component listener . Example Where Described Notes ComponentEventDemo This section Reports component event occur several component demonstrate circumstance component event fire .