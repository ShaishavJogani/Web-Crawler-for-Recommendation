Introduction [ edit ] One interesting thing support event-driven programming Java platform none , . Or , depend point view , many different individual piece platform offer support event-driven programming . The reason Java platform n't offer one general implementation event-driven programming link origin support platform offer . Back 1996 Java programming language get start world still try gain foothold conquer place software development . Part early development concentrate software development tool likeIDEs . One trend software development around time reusable software component gear towards user interface : component would encapsulate sort interesting , reusable functionality single package could handle single entity rather loose collection individual class . Sun Microsystems try get component bandwagon introduce call aJavaBean , software component geared towards UI could also configure easily IDE . In order make happen Sun come large specification JavaBeans ( JavaBeans Spec ) deal mostly naming convention ( make component easy handle IDE ) . But Sun also realize time UI-centric component would need support event-driven way connect event component business logic would write individual developer . So JavaBeans Spec also include small specification event Model Java platform . When start work Event Model , Sun engineer face choice : try come huge specification encompass possible us event model , specify abstract , generic framework could expand individual use specific situation . They choose latter option , love hate , Java Platform generic support event-driven programming general Event Model framework . The Event Model framework [ edit ] The basic Event Model framework The Event Model framework really simple , consist three class ( one abstract ) interface . Most consist name convention programmer must obey . The framework depict image right . Speaking term class interface , important part framework thejava.util.EventObjectabstract class thejava.util.EventListenerinterface . These two type centerpiece rule convention Java Platform Event Model , : A class notify event occurs , call anevent listener . An event listener one distinct method type event notification interested in.Event notification method declaration group together category . Each category represent event listener interface , must extendjava.util.EventListener . By convention event listener interface name < Event category name > Listener . Any class notify event must implement least one listener interface.Any state relate event occurrence capture state object . The class object must subclass ofjava.util.EventObjectand must record least object source event . Such class call event class convention name < Event category name > Event.Usually ( necessarily ! ) event listener interface relate single event class . An event listener may multiple event notification method take event class argument.An event notification method usually ( necessarily ! ) conventional signaturepublicvoid < specific event > ( < Event category name > Event evt ) .A class source event must method allow registration listener , one possible listener interface type . These method must convention signaturepublicvoidadd < Event category name > Listener ( < Event category name > Listener listener ) .A class source event may method allow deregistration listener , one possible listener interface type . These method must convention signaturepublicvoidremove < Event category name > Listener ( < Event category name > Listener listener ) . A general example framework use That seem like lot , 's pretty simple get use . Take look image left , contain general example might use framework . In example class calledEventSourceClassthat publish interesting event . Following rule Event Model , event represent theInterestingEventclass reference back theEventSourceClassobject ( source , inherit fromjava.util.EventObject ) . Whenever interesting event occurs , theEventSourceClassmust notify listener event know call notification method exist purpose . All notification method ( example one , interestingEventOccurred ) group together topic listener interface : InterestingEventListener , implementsjava.util.EventListenerand name accord Event Model convention . This interface must implement event listener class ( case onlyInterestingEventListenerImpl ) . BecauseEventSourceClassmust able notify interested listener , must possible register . For purpose theEventSourceClasshas anaddInterestingEventListenermethod . And since require , aremoveInterestingEventListenermethod well . As clearly see example , use Event Model mostly follow naming convention . This might seem little cumbersome first , point naming convention allow automated tooling access use event model . And indeed many tool , IDEs framework base naming convention . Degrees freedom Model [ edit ] There 's one thing notice Event Model isnotin Model . The Event Model design allow implementation large degree freedom implementation choice make , mean Event Model serve basis wide range specific , purpose-built event handle system . Aside name convention base class interface , Event Model specify following : It must possible register deregister listeners.An event source must publish event call correct notification method register listeners.A call event notification method normal , synchronous Java call method must execute thread call . But Event Model n't specifyhowany must . There rule regard class exactly must event source , must keep track registered event listener . So one class might publish event , responsible publish event relate entire collection object ( like entire component ) . And event source might allow listener deregistered time ( even middle handle event ) might limit certain time ( relevant multithreading ) . Also , Event Model n't specify must embed within program . So , model specify call event handle method synchronous call , Model prescribe event handle method hand task another thread entire event model implementation must run main thread application . In fact , Java Platform 's standard user interface framework ( Swing ) include event handle implementation run complete subsystem desktop application , thread . Event notification method , unicast event handling event adaptor [ edit ] In previous section mention event notification method usually take single argument . This preferred convention , specification allow exception rule application really need exception . A typical case exception event notification must send across network remote system though non-Java mean , like theCORBAstandard . In case require multiple argument Event Model allow . However , general rule correct format notification method Another thing mention earlier , general rule , Event Model allow many event listener register single event source event . In case event source must broadcast relevant event registered listener . However , Event Model specification allow exception rule . If necessary design point view may limit event source register single listener ; calledunicast event listener registration . When unicast registration use , registration method must declare throw thejava.util.TooManyListenersExceptionexception many listener register : An event adaptor event source event listener . Finally , specification allow one extension : event adaptor . An event adaptor implementation event listener interface insert event source actual event listener class . This register adaptor event source object use regular registration method . Adaptors use add additional functionality event handle mechanism , routing event object , event filtering enriching event object processing actual event handler class .