This section present example straightforward , standard MBean . A standard MBean define write Java interface call SomethingMBean Java class call Something implement interface . Every method interface define either attribute operation MBean . By default , every method define operation . Attributes operation method follow certain design pattern . A standard MBean compose MBean interface class . The MBean interface list method expose attribute operation . The class implement interface provide functionality instrumented resource . The following section examine example standard MBean simple JMX technology-enabled agent ( JMX agent ) manage MBean . MBean Interface An example basic MBean interface , HelloMBean , follow : package com.example ; public interface HelloMBean { public void sayHello ( ) ; public int add ( int x , int ) ; public String getName ( ) ; public int getCacheSize ( ) ; public void setCacheSize ( int size ) ; } By convention , MBean interface take name Java class implement , suffix MBean add . In case , interface call HelloMBean . The Hello class implement interface describe next section . According JMX specification , MBean interface consist name type attribute readable possibly writable , addition name type operation invoke application manage MBean . The HelloMBean interface declare two operation : Java method add ( ) sayHello ( ) . HelloMBean declare two attribute : Name read-only string , CacheSize integer read write . Getter setter method declare allow managed application access possibly change attribute value . As define JMX specification , getter public method return void whose name begin get . A getter enable manager read value attribute , whose type returned object . A setter public method take single parameter whose name begin set . A setter enable manager write new value attribute , whose type parameter . The implementation operation attribute show following section . MBean Implementation The Hello Java class follow implement HelloMBean MBean interface : package com.example ; public class Hello ... implement HelloMBean { public void sayHello ( ) { System.out.println ( `` hello , world '' ) ; } public int add ( int x , int ) { return x + ; } public String getName ( ) { return this.name ; } public int getCacheSize ( ) { return this.cacheSize ; } public synchronize void setCacheSize ( int size ) { ... this.cacheSize = size ; System.out.println ( `` Cache size `` + this.cacheSize ) ; } ... private final String name = `` Reginald '' ; private int cacheSize = DEFAULT_CACHE_SIZE ; private static final int DEFAULT_CACHE_SIZE = 200 ; } The straightforward Hello class provide definition operation attribute declare HelloMBean . The sayHello ( ) add ( ) operation extremely simple , real-life operation simple sophisticated need . The method get Name attribute get set CacheSize attribute also define . In example , Name attribute value never change . However , real scenario attribute might change manage resource run . For example , attribute might represent statistic uptime memory usage . Here , attribute merely name Reginald . Calling setCacheSize method enable alter CacheSize attribute declare default value 200 . In real scenario , change CacheSize attribute could require operation perform , discard entry allocate new entry . This example merely print message confirm cache size change . However , sophisticated operation could define instead simple call println ( ) . With Hello MBean interface thus define , use manage resource represent , show following section . Creating JMX Agent Manage Resource Once resource instrument MBeans , management resource perform JMX agent . The core component JMX agent MBean server . An MBean server managed object server MBeans register . A JMX agent also include set service manage MBeans . See API documentation MBeanServer interface detail MBean server implementation . The Main class follow represent basic JMX agent : package com.example ; import java.lang.management . * ; import javax.management . * ; public class Main { public static void main ( String [ ] args ) throw Exception { MBeanServer mbs = ManagementFactory.getPlatformMBeanServer ( ) ; ObjectName name = new ObjectName ( `` com.example : type=Hello '' ) ; Hello mbean = new Hello ( ) ; mbs.registerMBean ( mbean , name ) ; ... System.out.println ( `` Waiting forever ... '' ) ; Thread.sleep ( Long.MAX_VALUE ) ; } } The JMX agent Main begin obtain MBean server create initialize platform , call getPlatformMBeanServer ( ) method java.lang.management.ManagementFactory class . If MBean server create platform already , getPlatformMBeanServer ( ) create MBean server automatically call JMX method MBeanServerFactory.createMBeanServer ( ) . The MBeanServer instance obtain Main name mb . Next , Main define object name MBean instance create . Every JMX MBean must object name . The object name instance JMX class ObjectName must conform syntax define JMX specification . Namely , object name must contain domain list key-properties . In object name define Main , domain com.example ( package example MBean contain ) . In addition , key-property declares object type Hello . An instance Hello object , name mbean , create . The Hello object name mbean register MBean MBean server mb object name name , pass object object name call JMX method MBeanServer.registerMBean ( ) . With Hello MBean register MBean server , Main simply wait management operation perform Hello . In example , management operation invoke sayHello ( ) add ( ) , get set attribute value . Running Standard MBean Example Having examine example class , run example . In example , JConsole use interact MBean . To run example , follow step : Save bundle JMX API sample class , jmx_examples.zip , work directory , work_dir . Unzip bundle sample class use following command terminal window . unzip jmx_examples.zip Compile example Java class within work_dir directory . javac com/example/*.java If run Java Development Kit ( JDK ) version 6 , start Main application following command . java com.example.Main If run JDK version old version 6 , need start Main application follow option specify , expose application monitoring management . java -Dcom.sun.management.jmxremote example.Main A confirmation Main wait something happen display . Start JConsole different terminal window machine . jconsole The New Connection dialog box display , present list run JMX agent connect . In New Connection dialog box , select com.example.Main list click Connect . A summary platform 's current activity display . Click MBeans tab . This panel show MBeans currently register MBean server . In left frame , expand com.example node MBean tree . You see example MBean Hello create register Main . If click Hello , see associate Attributes Operations node MBean tree . Expand Attributes node Hello MBean MBean tree . The MBean attribute define Hello class display . Change value CacheSize attribute 150 . In terminal window start Main , confirmation attribute change generate . Expand Operations node Hello MBean MBean tree . The two operation declare Hello MBean , sayHello ( ) add ( ) , visible . Invoke sayHello ( ) operation click sayHello button . A JConsole dialog box informs method invoke successfully . The message `` hello , world '' generate terminal window Main run . Provide two integer add ( ) operation add click add button . The answer display JConsole dialog box . To close JConsole , select Connection - > Exit .