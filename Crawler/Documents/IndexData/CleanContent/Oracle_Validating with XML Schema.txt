This section look process XML Schema validation . Although full treatment XML Schema beyond scope tutorial , section show step take validate XML document use XML Schema definition . ( To learn XML Schema , review online tutorial , XML Schema Part 0 : Primer . At end section , also learn use XML Schema definition validate document contain element multiple namespaces . Overview Validation Process To notify validation error XML document , following must true : The factory must configure , appropriate error handler set . The document must associate least one schema , possibly . Configuring DocumentBuilder Factory It helpful start define constant use configure factory . These constant define use XML Schema SAX parsing , declare beginning DOMEcho example program . static final String JAXP_SCHEMA_LANGUAGE = `` http : //java.sun.com/xml/jaxp/properties/schemaLanguage '' ; static final String W3C_XML_SCHEMA = `` http : //www.w3.org/2001/XMLSchema '' ; Next , configure DocumentBuilderFactory generate namespace-aware , validate parser use XML Schema . This call setValidating method DocumentBuilderFactory instance dbf , create Instantiate Factory . // ... dbf.setNamespaceAware ( true ) ; dbf.setValidating ( dtdValidate || xsdValidate ) ; ( xsdValidate ) { try { dbf.setAttribute ( JAXP_SCHEMA_LANGUAGE , W3C_XML_SCHEMA ) ; } catch ( IllegalArgumentException x ) { System.err.println ( `` Error : JAXP DocumentBuilderFactory attribute `` + `` recognize : `` + JAXP_SCHEMA_LANGUAGE ) ; System.err.println ( `` Check see parser conforms JAXP spec . `` ) ; System.exit ( 1 ) ; } } // ... Because JAXP-compliant parser namespace-aware default , necessary set property schema validation work . You also set factory attribute specify parser language use . ( For SAX parsing , hand , set property parser generate factory ) . Associating Document Schema Now program ready validate XML Schema definition , necessary ensure XML document associate ( least ) one . There two way : With schema declaration XML document By specify schema ( ) use application Note - When application specify schema ( ) use , override schema declaration document . To specify schema definition document , would create XML like : < documentRoot xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : noNamespaceSchemaLocation='YourSchemaDefinition.xsd ' > [ ... ] The first attribute define XML namespace ( xmlns ) prefix , xsi , stand `` XML Schema instance . '' The second line specify schema use element document namespace prefix-that , element typically define simple , uncomplicated XML document . ( You see deal multiple namespaces next section . ) You also specify schema file application , case DOMEcho . static final String JAXP_SCHEMA_SOURCE = `` http : //java.sun.com/xml/jaxp/properties/schemaSource '' ; // ... dbf.setValidating ( dtdValidate || xsdValidate ) ; ( xsdValidate ) { // ... } ( schemaSource ! = null ) { dbf.setAttribute ( JAXP_SCHEMA_SOURCE , new File ( schemaSource ) ) ; } Here , , mechanism disposal let specify multiple schema . We take look next . Validating Multiple Namespaces Namespaces let combine element serve different purpose document without worry overlap name . Note - The material discuss section also apply validate use SAX parser . You see , point learn enough namespaces discussion make sense . To contrive example , consider XML data set keep track personnel data . The data set may include information tax declaration form well information employee 's hiring form , element name form respective schema . If prefix define tax namespace , another prefix define hiring namespace , personnel data could include segment like following . < employee id= '' ... '' > < name > ... . < /name > < tax : form > ... w2 tax form data ... < /tax : form > < hiring : form > ... employment history , etc ... . < /hiring : form > < /employee > The content tax : form element would obviously different content hiring : form element would validate differently . Note , , example default namespace unqualified element name employee name belong . For document properly validate , schema namespace must declare , well schema tax hiring namespaces . Note - The default namespace actually specific namespace . It define `` namespace name . '' So simply use one namespace default week , another namespace default later . This `` unnamed namespace '' ( `` null namespace '' ) like number zero . It value speak ( name ) , still precisely define . So namespace name never use default namespace . When parse , element data set validate appropriate schema , long schema declare . Again , schema declare either part XML data set program . ( It also possible mix declaration . In general , though , good idea keep declaration together one place . ) Declaring Schemas XML Data Set To declare schema use precede example data set , XML code would look something like following . < documentRoot xmlns : xsi= `` http : //www.w3.org/2001/XMLSchema-instance '' xsi : noNamespaceSchemaLocation= `` employeeDatabase.xsd '' xsi : schemaLocation= `` http : //www.irs.gov.example.com/ fullpath/w2TaxForm.xsd http : //www.ourcompany.example.com/ relpath/hiringForm.xsd '' xmlns : tax= `` http : //www.irs.gov.example.com/ '' xmlns : hiring= `` http : //www.ourcompany.example.com/ '' > The noNamespaceSchemaLocation declaration something see , last two entry , define namespace prefix tax hiring . What new entry middle , define location schema use namespace reference document . The xsi : schemaLocation declaration consist entry pair , first entry pair fully qualify URI specify namespace , second entry contain full path relative path schema definition . In general , fully qualify path recommend . In way , one copy schema tend exist . Note use namespace prefix define schema location . The xsi : schemaLocation declaration understand namespace name prefix . Declaring Schemas Application To declare equivalent schema application , code would look something like following . static final String employeeSchema = `` employeeDatabase.xsd '' ; static final String taxSchema = `` w2TaxForm.xsd '' ; static final String hiringSchema = `` hiringForm.xsd '' ; static final String [ ] schema = { employeeSchema , taxSchema , hiringSchema , } ; static final String JAXP_SCHEMA_SOURCE = `` http : //java.sun.com/xml/jaxp/properties/schemaSource '' ; // ... DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance ( ) // ... factory.setAttribute ( JAXP_SCHEMA_SOURCE , schema ) ; Here , array string point schema definition ( .xsd file ) pass argument factory.setAttribute method . Note difference declare schema use part XML data set . There special declaration default ( unnamed ) schema . You specify namespace name . Instead , give pointer .xsd file . To make namespace assignment , parser read .xsd file , find name target namespace apply . Because file specify URIs , parser use EntityResolver ( one define ) find local copy schema . If schema definition define target namespace , apply default ( unnamed , null ) namespace . So , example , would expect see target namespace declaration schema : A string point URI schema An InputStream content schema A SAX InputSource A File An array Objects , one type define An array Objects use schema language ability assemble schema runtime . Also , array Objects pass illegal two schema share namespace . Running DOMEcho Sample With Schema Validation To run DOMEcho sample schema validation , follow step . Navigate sample directory. % cd install-dir/jaxp-1_4_2-release-date/samples . Compile example class , use class path set. % javac dom/* Run DOMEcho program XML file , specify schema validation . Choose one XML file data directory run DOMEcho program -xsd option specify . Here , choose run program file personal-schema.xml . % java dom/DOMEcho -xsd data/personal-schema.xml As saw Configuring Factory , -xsd option tell DOMEcho perform validation XML schema define personal-schema.xml file . In case , schema file personal.xsd , also locate sample/data directory . Open personal-schema.xml text editor delete schema declaration . Remove follow opening < personnel > tag . xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : noNamespaceSchemaLocation='personal.xsd' Do forget save file . Run DOMEcho , specify -xsd option more. % java dom/DOMEcho -xsd data/personal-schema.xml This time , see stream error . Run DOMEcho one time , time specify -xsdss option specify schema definition file . As saw Configuring Factory , -xsdss option tell DOMEcho perform validation XML schema definition specify program run . Once , use file personal.xsd . % java dom/DOMEcho -xsdss data/personal.xsd data/personal-schema.xml You see output , mean XML file successfully validate schema .