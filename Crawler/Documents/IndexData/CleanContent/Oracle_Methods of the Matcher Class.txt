This section describe additional useful method Matcher class . For convenience , method list group accord functionality . Index Methods Index method provide useful index value show precisely match find input string : public int start ( ) : Returns start index previous match . public int start ( int group ) : Returns start index subsequence capture give group previous match operation . public int end ( ) : Returns offset last character match . public int end ( int group ) : Returns offset last character subsequence capture give group previous match operation . Study Methods Study method review input string return boolean indicating whether pattern find . public boolean lookingAt ( ) : Attempts match input sequence , start beginning region , pattern . public boolean find ( ) : Attempts find next subsequence input sequence match pattern . public boolean find ( int start ) : Resets matcher attempt find next subsequence input sequence match pattern , start specified index . public boolean match ( ) : Attempts match entire region pattern . Replacement Methods Replacement method useful method replace text input string . public Matcher appendReplacement ( StringBuffer sb , String replacement ) : Implements non-terminal append-and-replace step . public StringBuffer appendTail ( StringBuffer sb ) : Implements terminal append-and-replace step . public String replaceAll ( String replacement ) : Replaces every subsequence input sequence match pattern give replacement string . public String replaceFirst ( String replacement ) : Replaces first subsequence input sequence match pattern give replacement string . public static String quoteReplacement ( String ) : Returns literal replacement String specified String . This method produce String work literal replacement appendReplacement method Matcher class . The String produce match sequence character treat literal sequence . Slashes ( '\ ' ) dollar sign ( ' $ ' ) give special meaning . Using start end Methods Here 's example , MatcherDemo.java , count number time word `` dog '' appear input string . import java.util.regex.Pattern ; import java.util.regex.Matcher ; public class MatcherDemo { private static final String REGEX = `` \\bdog\\b '' ; private static final String INPUT = `` dog dog dog doggie dogg '' ; public static void main ( String [ ] args ) { Pattern p = Pattern.compile ( REGEX ) ; // get matcher object Matcher = p.matcher ( INPUT ) ; int count = 0 ; ( m.find ( ) ) { count++ ; System.out.println ( `` Match number `` + count ) ; System.out.println ( `` start ( ) : `` + m.start ( ) ) ; System.out.println ( `` end ( ) : `` + m.end ( ) ) ; } } } OUTPUT : Match number 1 start ( ) : 0 end ( ) : 3 Match number 2 start ( ) : 4 end ( ) : 7 Match number 3 start ( ) : 8 end ( ) : 11 You see example use word boundary ensure letter `` '' `` '' `` g '' merely substring long word . It also give useful information input string match occur . The start method return start index subsequence capture give group previous match operation , end return index last character match , plus one . Using match lookingAt Methods The match lookingAt method attempt match input sequence pattern . The difference , however , match require entire input sequence match , lookingAt . Both method always start beginning input string . Here 's full code , MatchesLooking.java : import java.util.regex.Pattern ; import java.util.regex.Matcher ; public class MatchesLooking { private static final String REGEX = `` foo '' ; private static final String INPUT = `` fooooooooooooooooo '' ; private static Pattern pattern ; private static Matcher matcher ; public static void main ( String [ ] args ) { // Initialize pattern = Pattern.compile ( REGEX ) ; matcher = pattern.matcher ( INPUT ) ; System.out.println ( `` Current REGEX : `` + REGEX ) ; System.out.println ( `` Current INPUT : `` + INPUT ) ; System.out.println ( `` lookingAt ( ) : `` + matcher.lookingAt ( ) ) ; System.out.println ( `` match ( ) : `` + matcher.matches ( ) ) ; } } Current REGEX : foo Current INPUT : fooooooooooooooooo lookingAt ( ) : true match ( ) : false Using replaceFirst ( String ) replaceAll ( String ) The replaceFirst replaceAll method replace text match give regular expression . As name indicate , replaceFirst replace first occurrence , replaceAll replaces occurences . Here 's ReplaceDemo.java code : import java.util.regex.Pattern ; import java.util.regex.Matcher ; public class ReplaceDemo { private static String REGEX = `` dog '' ; private static String INPUT = `` The dog say meow . All dog say meow . `` ; private static String REPLACE = `` cat '' ; public static void main ( String [ ] args ) { Pattern p = Pattern.compile ( REGEX ) ; // get matcher object Matcher = p.matcher ( INPUT ) ; INPUT = m.replaceAll ( REPLACE ) ; System.out.println ( INPUT ) ; } } OUTPUT : The cat say meow . All cat say meow . In first version , occurrence dog replace cat . But stop ? Rather replace simple literal like dog , replace text match regular expression . The API method state `` give regular expression a*b , input aabfooaabfooabfoob , replacement string - , invocation method matcher expression would yield string -foo-foo-foo- . '' Here 's ReplaceDemo2.java code : import java.util.regex.Pattern ; import java.util.regex.Matcher ; public class ReplaceDemo2 { private static String REGEX = `` a*b '' ; private static String INPUT = `` aabfooaabfooabfoob '' ; private static String REPLACE = `` - '' ; public static void main ( String [ ] args ) { Pattern p = Pattern.compile ( REGEX ) ; // get matcher object Matcher = p.matcher ( INPUT ) ; INPUT = m.replaceAll ( REPLACE ) ; System.out.println ( INPUT ) ; } } OUTPUT : -foo-foo-foo- To replace first occurrence pattern , simply call replaceFirst instead replaceAll . It accept parameter . Using appendReplacement ( StringBuffer , String ) appendTail ( StringBuffer ) The Matcher class also provide appendReplacement appendTail method text replacement . The following example , RegexDemo.java , use two method achieve effect replaceAll . import java.util.regex.Pattern ; import java.util.regex.Matcher ; public class RegexDemo { private static String REGEX = `` a*b '' ; private static String INPUT = `` aabfooaabfooabfoob '' ; private static String REPLACE = `` - '' ; public static void main ( String [ ] args ) { Pattern p = Pattern.compile ( REGEX ) ; Matcher = p.matcher ( INPUT ) ; // get matcher object StringBuffer sb = new StringBuffer ( ) ; ( m.find ( ) ) { m.appendReplacement ( sb , REPLACE ) ; } m.appendTail ( sb ) ; System.out.println ( sb.toString ( ) ) ; } } OUTPUT : -foo-foo-foo- Matcher Method Equivalents java.lang.String For convenience , String class mimic couple Matcher method well : public String replaceFirst ( String regex , String replacement ) : Replaces first substring string match give regular expression give replacement . An invocation method form str.replaceFirst ( regex , repl ) yield exactly result expression Pattern.compile ( regex ) .matcher ( str ) .replaceFirst ( repl ) public String replaceAll ( String regex , String replacement ) : Replaces substring string match give regular expression give replacement . An invocation method form str.replaceAll ( regex , repl ) yield exactly result expression Pattern.compile ( regex ) .matcher ( str ) .replaceAll ( repl )