Methods thejava.lang.Objectclass inherit , thus share common class . Theclonemethod [ edit ] Thejava.lang.Object.clone ( ) method return new object copy current object . Classes must implement marker interfacejava.lang.Cloneableto indicate clone . Theequalsmethod [ edit ] Thejava.lang.Object.equals ( java.lang.Object ) method compare object another object return abooleanresult indicate two object equal . Semantically , method compare content object whereas equality comparison operator `` == '' compare object reference . Theequalsmethod use many data structure class thejava.utilpackage . Some data structure class also rely theObject.hashCodemethodâ€”see thehashCodemethod detail contract betweenequalsandhashCode . Implementing equal ( ) n't always easy seem , see 'Secrets equal ( ) ' information . Thefinalizemethod [ edit ] Thejava.lang.Object.finalize ( ) method call exactly garbage collector free memory object . A class overridesfinalizeto perform clean must perform object reclaim . Most object need overridefinalize . There guarantee thefinalizemethod call , order thefinalizemethod call multiple object . If JVM exit without perform garbage collection , OS may free object , case thefinalizemethod n't get call . Thefinalizemethod always declaredprotectedto prevent class call thefinalizemethod . protect void finalize ( ) throw Throwable { ... } ThegetClassmethod [ edit ] Thejava.lang.Object.getClass ( ) method return thejava.lang.Classobject class use instantiate object . The class object base class ofreflectionin Java . Additional reflection support provide thejava.lang.reflectpackage . ThehashCodemethod [ edit ] Thejava.lang.Object.hashCode ( ) method return integer ( int ) . This integer use distinguish object although completely . It quickly separate object samehash codeare separate later another way . It use class provide associative array , instance , implement thejava.util.Mapinterface . They use thehash codeto store object associative array . A goodhashCodeimplementation return hash code : Stable : changeEvenly distribute : hash code unequal object tend unequal hash code evenly distribute across integer value . The second point mean two different object samehash codeso two object samehash codearenot necessarily ! Since associative array depend theequalsandhashCodemethods , important contract two method must maintain object insert aMap : For two objectsaandba.equals ( b ) == b.equals ( ) ifa.equals ( b ) thena.hashCode ( ) == b.hashCode ( ) butifa.hashCode ( ) == b.hashCode ( ) thena.equals ( b ) In order maintain contract , class override theequalsmethod must also override thehashCodemethod , vice versa , thathashCodeis base property ( subset property ) asequals . A contract map object result thehashCodeandequalsmethods change object insert map . For reason , generally good practice base hash function immutable property object . ThetoStringmethod [ edit ] Thejava.lang.Object.toString ( ) method return ajava.lang.Stringthat contain text representation object . ThetoStringmethod implicitly call compiler object operand use string concatenation operator ( +and+= ) . The wait notify thread signal method [ edit ] Every object two wait list thread associate . One wait list use thesynchronizedkeyword acquire mutex lock associate object . If mutex lock currently hold another thread , current thread add list blocked thread wait mutex lock . The wait list use signal thread accomplish thewaitandnotifyandnotifyAllmethods . Use wait/notify allows efficient coordination task thread . When one thread need wait another thread complete operation , need wait event occurs , thread suspend execution wait notify event occur . This contrast polling , thread repeatedly sleep short period time check flag condition indicator . Polling computationally expensive , thread continue checking , less responsive since thread wo n't notice condition change next time check . Thewaitmethods [ edit ] There three overloaded version thewaitmethod support different way specify timeout value : java.lang.Object.wait ( ) , java.lang.Object.wait ( long ) andjava.lang.Object.wait ( long , int ) . The first method use timeout value zero ( 0 ) , mean wait timeout ; second method take number millisecond timeout ; third method take number nanosecond timeout , calculate as1000000 * timeout + nanos . The thread callingwaitis block ( remove set executable thread ) add object 's wait list . The thread remain object 's wait list one three event occur : another thread call object'snotifyornotifyAllmethod ; another thread call thread'sjava.lang.Thread.interruptmethod ; os non-zero timeout specify call towaitexpires . Thewaitmethod must call inside block method synchronize object . This insure race condition betweenwaitandnotify . When thread place wait list , thread release object 's mutex lock . After thread remove wait list add set executable thread , must acquire object 's mutex lock continuing execution . ThenotifyandnotifyAllmethods [ edit ] Thejava.lang.Object.notify ( ) andjava.lang.Object.notifyAll ( ) method remove one thread object 's wait list add set executable threads.notifyremoves single thread wait list , whilenotifyAllremoves thread wait list . Which thread remove bynotifyis unspecified dependent JVM implementation . The notify method must call inside block method synchronize object . This insure race condition betweenwaitandnotify . API/java.lang.StringJava ProgrammingClasses , Objects TypesPackages