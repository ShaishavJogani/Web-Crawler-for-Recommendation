In addition SASL authentication , LDAP server allow service access SSL . SSL especially useful LDAP v2 server v2 protocol support SASL authentication . An SSL-enabled server often support SSL two way . In basic way , server support SSL port addition normal ( unprotected ) port . The way server support SSL via use Start TLS Extension ( RFC 2830 ) . This option available LDAP v3 server describe detail section . Using SSL Socket Property By default , LDAP service provider JDK use plain socket communicate LDAP server . To request SSL socket use , set Context.SECURITY_PROTOCOL property `` ssl '' . In following example , LDAP server offer SSL port 636 . To run program , must enable SSL port 636 LDAP server . This procedure typically carry directory 's administrator . Server Requirements : The LDAP server must set X.509 SSL server certificate SSL enable . Typically , must first obtain signed certificate server certificate authority ( CA ) . Then , follow instruction directory vendor enable SSL . Different vendor different tool . For Oracle Directory Server , v5.2 , use Manage Certificates tool Administration Console generate Certificate Signing Request ( CSR ) . Submit CSR CA obtain X.509 SSL server certificate . Using Administration Console , add certificate server 's list certificate . Also install CA 's certificate already server 's list trusted CAs . Enable SSL use Configuration tab Administration Console . Select server left pane . Select Encryption tab right pane . Click checkboxes `` Enable SSL server '' `` Use cipher family : RSA '' , ensure server certificate add list certificate . Client Requirements : You need ensure client trust LDAP server 'll use . You must install server 's certificate ( CA 's certificate ) JRE 's database trusted certificate . Here example . # cd JAVA_HOME/lib/security # keytool -import -file server_cert.cer -keystore jssecacerts For information use security tool , see Security trail . For information JSSE , see Java Secure Socket Extension ( JSSE ) Reference Guide . // Set environment create initial context Hashtable < String , Object > env = new Hashtable < String , Object > ( ) ; env.put ( Context.INITIAL_CONTEXT_FACTORY , `` com.sun.jndi.ldap.LdapCtxFactory '' ) ; env.put ( Context.PROVIDER_URL , `` ldap : //localhost:636/o=JNDITutorial '' ) ; // Specify SSL env.put ( Context.SECURITY_PROTOCOL , `` ssl '' ) ; // Authenticate S. User password `` mysecret '' env.put ( Context.SECURITY_AUTHENTICATION , `` simple '' ) ; env.put ( Context.SECURITY_PRINCIPAL , `` cn=S . User , ou=NewHires , o=JNDITutorial '' ) ; env.put ( Context.SECURITY_CREDENTIALS , `` mysecret '' ) ; // Create initial context DirContext ctx = new InitialDirContext ( env ) ; // ... something useful ctx Note : If use SSL connect server port use SSL , program hang . Similarly , use plain socket connect server 's SSL socket , application hang . This characteristic SSL protocol . Using LDAPS URL Instead request use SSL via use Context.SECURITY_PROTOCOL property , also request use SSL via use LDAPS URLs . An LDAPS URL similar LDAP URL except URL scheme `` ldaps '' instead `` ldap '' . It specify use SSL communicate LDAP server . In following example , LDAP server offer SSL port 636 . To run program , must enable SSL port 636 LDAP server . // Set environment create initial context Hashtable < String , Object > env = new Hashtable < String , Object > ( ) ; env.put ( Context.INITIAL_CONTEXT_FACTORY , `` com.sun.jndi.ldap.LdapCtxFactory '' ) ; // Specify LDAPS URL env.put ( Context.PROVIDER_URL , `` ldaps : //localhost:636/o=JNDITutorial '' ) ; // Authenticate S. User password `` mysecret '' env.put ( Context.SECURITY_AUTHENTICATION , `` simple '' ) ; env.put ( Context.SECURITY_PRINCIPAL , `` cn=S . User , ou=NewHires , o=JNDITutorial '' ) ; env.put ( Context.SECURITY_CREDENTIALS , `` mysecret '' ) ; // Create initial context DirContext ctx = new InitialDirContext ( env ) ; // ... something useful ctx LDAPS URLs accept anywhere LDAP URLs accept . Check JNDI Tutorial detail LDAP LDAPS URLs . Client Authentication : Using SSL External SASL Mechanism SSL provide authentication security service low layer LDAP . If authentication already SSL , LDAP layer use authentication information SSL use External SASL mechanism . The following example like previous SSL example , except instead use simple authentication , use External SASL authentication . By use External , need supply principal password information , get pick SSL . Server Requirements : This example require LDAP server allow certificate-based client authentication . In addition , LDAP server must trust ( CAs ) client certificate receive , must able map owner distinguish name client certificate principal know . Follow instruction directory vendor perform task . Client Requirements : This example require client X.509 SSL client certificate . Moreover , certificate must store first key entry keystore file . If entry password-protected , must password keystore . For information JSSE keystores , see Java Secure Socket Extension ( JSSE ) Reference Guide . // Set environment create initial context Hashtable < String , Object > env = new Hashtable < String , Object > ( 11 ) ; env.put ( Context.INITIAL_CONTEXT_FACTORY , `` com.sun.jndi.ldap.LdapCtxFactory '' ) ; env.put ( Context.PROVIDER_URL , `` ldap : //localhost:636/o=JNDITutorial '' ) ; // Principal credential obtain connection env.put ( Context.SECURITY_AUTHENTICATION , `` EXTERNAL '' ) ; // Specify SSL env.put ( Context.SECURITY_PROTOCOL , `` ssl '' ) ; // Create initial context DirContext ctx = new InitialDirContext ( env ) ; ... To run program client 's certificate use authentication , must provide ( system property ) location password keystore contain client 's certificate . Here example run program . java -Djavax.net.ssl.keyStore=MyKeystoreFile \ -Djavax.net.ssl.keyStorePassword=mysecret \ External If supply keystore , program run use anonymous authentication client credential exists SSL . This example show basic way accomplish certificate-based client authentication . More advanced way accomplish write use custom socket factory access client certificate flexible manner , perhaps use LDAP directory . The next section show use custom socket factory JNDI application . Using Custom Sockets When use SSL , LDAP provider , default , use socket factory , javax.net.ssl.SSLSocketFactory , create SSL socket communicate server , use default JSSE configuration . The JSSE customize variety way , detail Java Secure Socket Extension ( JSSE ) Reference Guide . However , time customizations sufficient need control SSL socket , socket general , use LDAP service provider . For example , might need socket bypass firewall , JSSE socket use nondefault caching/retrieval policy trust key store . To set socket factory implementation use LDAP service provider , set `` java.naming.ldap.factory.socket '' property fully qualified class name socket factory . This class must implement javax.net.SocketFactory abstract class provide implementation getDefault ( ) method return instance socket factory . See Java Secure Socket Extension ( JSSE ) Reference Guide . Here example custom socket factory produce plain socket . public class CustomSocketFactory extend SocketFactory { public static SocketFactory getDefault ( ) { System.out.println ( `` [ acquire default socket factory ] '' ) ; return new CustomSocketFactory ( ) ; } ... } Note example create new instance CustomSocketFactory time new LDAP connection create . This might appropriate application socket factory . If want reuse socket factory , getDefault ( ) return singleton . To use custom socket factory JNDI program , set `` java.naming.ldap.factory.socket '' property , show following example . // Set environment create initial context Hashtable < String , Object > env = new Hashtable < String , Object > ( ) ; env.put ( Context.INITIAL_CONTEXT_FACTORY , `` com.sun.jndi.ldap.LdapCtxFactory '' ) ; env.put ( Context.PROVIDER_URL , `` ldap : //localhost:389/o=JNDITutorial '' ) ; // Specify socket factory env.put ( `` java.naming.ldap.factory.socket '' , `` CustomSocketFactory '' ) ; // Create initial context DirContext ctx = new InitialDirContext ( env ) ; // ... something useful ctx The `` java.naming.ldap.factory.socket '' property useful set socket factory per context basis . Another way control socket use LDAP service provider set socket factory socket use entire program , use java.net.Socket.setSocketImplFactory ( ) . Use method less flexible affect socket connection , LDAP connection therefore , use care .