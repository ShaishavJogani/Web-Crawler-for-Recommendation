Fields store enums set retrieve reference type , use Field.set ( ) Field.get ( ) . For information access field , see Fields section trail . Consider application need dynamically modify trace level server application normally allow change runtime . Assume instance server object available . The SetTrace example show code translate String representation enum enum type retrieve set value field store enum . import java.lang.reflect.Field ; import static java.lang.System.out ; enum TraceLevel { OFF , LOW , MEDIUM , HIGH , DEBUG } class MyServer { private TraceLevel level = TraceLevel.OFF ; } public class SetTrace { public static void main ( String ... args ) { TraceLevel newLevel = TraceLevel.valueOf ( args [ 0 ] ) ; try { MyServer svr = new MyServer ( ) ; Class < ? > c = svr.getClass ( ) ; Field f = c.getDeclaredField ( `` level '' ) ; f.setAccessible ( true ) ; TraceLevel oldLevel = ( TraceLevel ) f.get ( svr ) ; out.format ( `` Original trace level : % % n '' , oldLevel ) ; ( oldLevel ! = newLevel ) { f.set ( svr , newLevel ) ; out.format ( `` New trace level : % % n '' , f.get ( svr ) ) ; } // production code handle exception gracefully } catch ( IllegalArgumentException x ) { x.printStackTrace ( ) ; } catch ( IllegalAccessException x ) { x.printStackTrace ( ) ; } catch ( NoSuchFieldException x ) { x.printStackTrace ( ) ; } } } Since enum constant singleton , == ! = operator may use compare enum constant type . $ java SetTrace OFF Original trace level : OFF $ java SetTrace DEBUG Original trace level : OFF New trace level : DEBUG