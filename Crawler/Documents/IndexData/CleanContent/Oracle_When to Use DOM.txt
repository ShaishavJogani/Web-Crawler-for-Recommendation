The Document Object Model standard , , design document ( example , article book ) . In addition , JAXP 1.4.2 implementation support XML Schema , something important consideration give application . On hand , deal simple data structure XML Schema big part plan , may find one object-oriented standard , JDOM dom4j , well suit purpose . From start , DOM intend language-neutral . Because design use language C Perl , DOM take advantage Java 's object-oriented feature . That fact , addition distinction document data , also help account way process DOM differs process JDOM dom4j structure . In section , examine difference model underlie standard help choose one appropriate application . Documents Versus Data The major point departure document model use DOM data model use JDOM dom4j lie : The kind node exist hierarchy The capacity mixed content It difference constitute `` node '' data hierarchy primarily account difference program two model . However , capacity mixed content , anything else , account difference standard define node . So start examine DOM 's mixed-content model . Mixed-Content Model Text element freely intermix DOM hierarchy . That kind structure call mixed content DOM model . Mixed content occur frequently document . For example , suppose want represent structure : < sentence > This < bold > important < /bold > idea. < /sentence > The hierarchy DOM node would look something like , line represent one node : ELEMENT : sentence + TEXT : This + ELEMENT : bold + TEXT : important + TEXT : idea . Note sentence element contain text , follow sub-element , follow additional text . It intermixing text element define mixed-content model . Types Nodes To provide capacity mixed content , DOM node inherently simple . In foregoing example , `` content '' first element ( value ) simply identify kind node . First-time user DOM usually throw fact . After navigate < sentence > node , ask node 's `` content '' , expect get something useful . Instead , find name element , sentence . Note - The DOM Node API define nodeValue ( ) , nodeType ( ) , nodeName ( ) method . For first element node , nodeName ( ) return sentence , nodeValue ( ) return null . For first text node , nodeName ( ) return # text , nodeValue ( ) return “ This ” . The important point value element content . In example , mean ask `` text '' sentence ? Any following could reasonable , depend application : This This idea . This important idea . This < bold > important < /bold > idea . A Simpler Model With DOM , free create semantics need . However , also require processing necessary implement semantics . Standards JDOM dom4j , hand , make easy simple thing , node hierarchy object . Although JDOM dom4j make allowance element mixed content , primarily design situation . Instead , target application XML structure contain data . The element data structure typically contain either text element , . For example , XML represent simple address book : < addressbook > < entry > < name > Fred < /name > < email > fred @ home < /email > < /entry > ... < /addressbook > Note - For simple XML data structure like one , could also use regular-expression package ( java.util.regex ) build Java platform version 1.4 . In JDOM dom4j , navigate element contain text , invoke method text ( ) get content . When process DOM , though , must inspect list sub-elements `` put together '' text node , saw early - even list contain one item ( TEXT node ) . So simple data structure address book , save bit work use JDOM dom4j . It may make sense use one model even data technically `` mixed '' always one ( one ) segment text give node . Here example kind structure , would also easily process JDOM dom4j : < addressbook > < entry > Fred < email > fred @ home < /email > < /entry > ... < /addressbook > Here , entry bit identify text , follow element . With structure , program could navigate entry , invoke text ( ) find belong , process < email > sub-element correct node . Increasing Complexity But get full understanding kind processing need search manipulate DOM , important know kind node DOM conceivably contain . Here example illustrate point . It representation data : < sentence > The & projectName ; < ! [ CDATA [ < > project < /i > ] ] > < ? editor : red > < bold > important < /bold > < ? editor : normal > . < /sentence > This sentence contain entity reference - pointer entity define elsewhere . In case , entity contain name project . The example also contain CDATA section ( uninterpreted data , like < pre > data HTML ) well processing instruction ( < ? ... ? > ) , case tell editor color use render text . Here DOM structure data . It representative kind structure robust application prepare handle : + ELEMENT : sentence + TEXT : The + ENTITY REF : projectName + COMMENT : The late name use + TEXT : Eagle + CDATA : < > project < /i > + TEXT : + PI : editor : red + ELEMENT : bold + TEXT : important + PI : editor : normal This example depict kind node may occur DOM . Although application may able ignore time , truly robust implementation need recognize deal . Similarly , process navigate node involve process sub-elements , ignore one interested inspect one , find node interested . A program work fix , internally generate data afford make simplifying assumption : process instruction , comment , CDATA node , entity reference exist data structure . But truly robust application work variety data - especially data come outside world - must prepare deal possible XML entity . ( A `` simple '' application work long input data contain simplified XML structure expect . But validation mechanisms ensure complex structure exist . After , XML specifically design allow . ) To robust , DOM application must thing : When search element : Ignore comment , attribute , process instruction . Allow possibility sub-elements occur expected order . Skip TEXT node contain ignorable white space , validate . When extract text node : Extract text CDATA node well text node . Ignore comment , attribute , process instruction gather text . If entity reference node another element node encounter , recurse ( , apply text-extraction procedure sub-nodes ) . Of course , many application worry thing , kind data see strictly control . But data come variety external source , application probably need take possibility account . The code need carry function give near end lesson Searching Nodesand Obtaining Node Content . Right , goal simply determine whether DOM suitable application . Choosing Your Model As see , use DOM , even simple operation get text node take bit programming . So program handle simple data structure , JDOM , dom4j , even 1.4 regular-expression package ( java.util.regex ) may appropriate need . For fully-fledged document complex application , hand , DOM give lot flexibility . And need use XML Schema , DOM way go - , least . If process document data application develop , DOM may still best choice . After , write code examine process DOM structure , fairly easy customize specific purpose . So choose everything DOM mean deal one set APIs , rather two . In addition , DOM standard codified standard in-memory document model . It powerful robust , many implementation . That significant decision-making factor many large installation , particularly large-scale application need minimize cost result API change . Finally , even though text address book may permit bold , italic , color , font size today , one day may want handle thing . Because DOM handle virtually anything throw , choose DOM make easy future-proof application .