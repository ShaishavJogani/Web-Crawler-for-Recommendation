The architecture Swing design may change `` look feel '' ( L & F ) application 's GUI ( see A Swing Architecture Overview ) . `` Look '' refers appearance GUI widget ( formally , JComponents ) `` feel '' refers way widget behave . Swing 's architecture enable multiple L & Fs separate every component two distinct class : JComponent subclass corresponding ComponentUI subclass . For example , every JList instance concrete implementation ListUI ( ListUI extend ComponentUI ) . The ComponentUI subclass refer various name Swing 's documentation— '' UI , '' `` component UI , '' `` UI delegate , '' `` look feel delegate '' use identify ComponentUI subclass . Most developer never need interact UI delegate directly . For part , UI delegate use internally JComponent subclass crucial functionality , cover method provide JComponent subclass access UI delegate . For example , painting JComponent subclass delegate UI delegate . By delegate painting , 'look ' vary depend upon L & F . It responsibility L & F provide concrete implementation ComponentUI subclass define Swing . For example , Java Look Feel create instance MetalTabbedPaneUI provide L & F JTabbedPane . The actual creation UI delegate handle Swing you—for part never need interact directly UI delegate . The rest section discuss following subject : Available Look Feels Programatically Setting Look Feel Specifying Look Feel : Command Line Specifying Look Feel : swing.properties How UI Manager Chooses Look Feel Changing Look Feel After Startup An Example Themes The SwingSet2 Demonstration Program Available Look Feels Sun 's JRE provide follow L & Fs : CrossPlatformLookAndFeel—this `` Java L & F '' ( also call `` Metal '' ) look platform . It part Java API ( javax.swing.plaf.metal ) default use nothing code set different L & F . SystemLookAndFeel—here , application use L & F native system run . The System L & F determine runtime , application ask system return name appropriate L & F . Synth—the basis create look feel XML file . Multiplexing— way UI method delegate number different look feel implementation time . For Linux Solaris , System L & Fs `` GTK+ '' GTK+ 2.2 later instal , `` Motif '' otherwise . For Windows , System L & F `` Windows , '' mimic L & F particular Windows OS running—classic Windows , XP , Vista . The GTK+ , Motif , Windows L & Fs provide Sun ship Java SDK JRE , although part Java API . Apple provide JVM include proprietary L & F . In summary , use SystemLookAndFeel , see : Platform Look Feel Solaris , Linux GTK+ 2.2 later GTK+ Other Solaris , Linux Motif IBM UNIX IBM* HP UX HP* Classic Windows Windows Windows XP Windows XP Windows Vista Windows Vista Macintosh Macintosh* * Supplied system vendor . You n't see System L & F API . The GTK+ , Motif , Windows package require ship Java SDK : com.sun.java.swing.plaf.gtk.GTKLookAndFeel com.sun.java.swing.plaf.motif.MotifLookAndFeel com.sun.java.swing.plaf.windows.WindowsLookAndFeel Note path include java , javax . Note : The GTK+ L & F run UNIX Linux system GTK+ 2.2 later instal , Windows L & F run Windows system . Like Java ( Metal ) L & F , Motif L & F run platform . All Sun 's L & Fs great deal commonality . This commonality define Basic look feel API ( javax.swing.plaf.basic ) . The Motif Windows L & Fs build extend UI delegate class javax.swing.plaf.basic ( custom L & F build thing ) . The `` Basic '' L & F use without extend . In API see four L & F package : javax.swing.plaf.basic—basic UI Delegates extend create custom L & F javax.swing.plaf.metal—the Java L & F , also know CrossPlatform L & F ( `` Metal '' Sun project name L & F ) The current default `` theme '' ( discuss ) L & F `` Ocean , often refer Ocean L & F . javax.swing.plaf.multi—a multiplexing look feel allow UI method delegate number look feel implementation time . It use augment behavior particular look feel , example L & F provide audio cue top Windows look feel . This way create handicapped-accessible look feel . javax.swing.plaf.synth—an easily configure L & F use XML file ( discuss next section lesson ) You n't limit L & Fs supply Java platform . You use L & F program 's class path . External L & Fs usually provide one JAR file add program 's class path runtime . For example : java -classpath . ; C : \java\lafdir\customlaf.jar YourSwingApplication Once external L & F program 's class path , program use like L & Fs ship Java platform . Programatically Setting Look Feel Note : If go set L & F , first step application . Otherwise run risk initialize Java L & F regardless L & F 've request . This happen inadvertently static field reference Swing class , cause L & F load . If L & F yet specify , default L & F JRE load . For Sun 's JRE default Java L & F , Apple 's JRE Apple L & F , forth . The L & F Swing component use specify way UIManager class javax.swing package . Whenever Swing component create , component ask UI manager UI delegate implement component 's L & F . For example , JLabel constructor query UI manager UI delegate object appropriate label . It use UI delegate object implement drawing event handling . To programatically specify L & F , use UIManager.setLookAndFeel ( ) method fully qualified name appropriate subclass LookAndFeel argument . For example , bold code following snippet make program use cross-platform Java L & F : public static void main ( String [ ] args ) { try { // Set cross-platform Java L & F ( also call `` Metal '' ) UIManager.setLookAndFeel ( UIManager.getCrossPlatformLookAndFeelClassName ( ) ) ; } catch ( UnsupportedLookAndFeelException e ) { // handle exception } catch ( ClassNotFoundException e ) { // handle exception } catch ( InstantiationException e ) { // handle exception } catch ( IllegalAccessException e ) { // handle exception } new SwingApplication ( ) ; //Create show GUI. } Alternatively , code make program use System L & F : public static void main ( String [ ] args ) { try { // Set System L & F UIManager.setLookAndFeel ( UIManager.getSystemLookAndFeelClassName ( ) ) ; } catch ( UnsupportedLookAndFeelException e ) { // handle exception } catch ( ClassNotFoundException e ) { // handle exception } catch ( InstantiationException e ) { // handle exception } catch ( IllegalAccessException e ) { // handle exception } new SwingApplication ( ) ; //Create show GUI. } You also use actual class name Look Feel argument UIManager.setLookAndFeel ( ) . For example , // Set cross-platform Java L & F ( also call `` Metal '' ) UIManager.setLookAndFeel ( `` javax.swing.plaf.metal.MetalLookAndFeel '' ) ; // Set Motif L & F platform UIManager.setLookAndFeel ( `` com.sun.java.swing.plaf.motif.MotifLookAndFeel '' ) ; You n't limit precede argument . You specify name L & F program 's class path . Specifying Look Feel : Command Line You specify L & F command line use -D flag set swing.defaultlaf property . For example : java -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel MyApp java -Dswing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel MyApp Specifying Look Feel : swing.properties File Yet another way specify current L & F use swing.properties file set swing.defaultlaf property . This file , may need create , locate lib directory Sun 's Java release ( vendor Java may use different location ) . For example , 're use Java interpreter javaHomeDirectory\bin , swing.properties file ( exist ) javaHomeDirectory\lib . Here example content swing.properties file : # Swing property swing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel How UI Manager Chooses Look Feel Here look-and-feel determination step occur UI manager need set L & F : If program set L & F look feel need , UI manager try create instance specify look-and-feel class . If successful , component use L & F . If program n't successfully specify L & F , UI manager use L & F specify swing.defaultlaf property . If property specify swing.properties file command line , command-line definition take precedence . If none step result valid L & F , Sun 's JRE use Java L & F . Other vendor , Apple , use default L & F . Changing Look Feel After Startup You change L & F setLookAndFeel even program 's GUI visible . To make existing component reflect new L & F , invoke SwingUtilities updateComponentTreeUI method per top-level container . Then might wish resize top-level container reflect new size contained component . For example : UIManager.setLookAndFeel ( lnfName ) ; SwingUtilities.updateComponentTreeUI ( frame ) ; frame.pack ( ) ; An Example In following example , LookAndFeelDemo.java , experiment different Look Feels . The program create simple GUI button label . Every time click button , label increment . You change L & F change LOOKANDFEEL constant line 18 . The comment precede line tell value acceptable : // Specify look feel use define LOOKANDFEEL constant // Valid value : null ( use default ) , `` Metal '' , `` System '' , `` Motif '' , // `` GTK '' final static String LOOKANDFEEL = `` Motif '' ; Here constant set `` Motif '' , L & F run platform ( default , `` Metal '' ) . `` GTK+ '' run Windows , `` Windows '' run Windows . If choose L & F run , get Java , Metal , L & F . In section code L & F actually set , see several different way set , discuss : ( LOOKANDFEEL.equals ( `` Metal '' ) ) { lookAndFeel = UIManager.getCrossPlatformLookAndFeelClassName ( ) ; // alternative way set Metal L & F replace // previous line : // lookAndFeel = `` javax.swing.plaf.metal.MetalLookAndFeel '' ; You verify argument work commenting/un-commenting two alternative . Here listing LookAndFeelDemo source file : package lookandfeel ; import javax.swing . * ; import java.awt . * ; import java.awt.event . * ; import javax.swing.plaf.metal . * ; public class LookAndFeelDemo implement ActionListener { private static String labelPrefix = `` Number button click : `` ; private int numClicks = 0 ; final JLabel label = new JLabel ( labelPrefix + `` 0 `` ) ; // Specify look feel use define LOOKANDFEEL constant // Valid value : null ( use default ) , `` Metal '' , `` System '' , `` Motif '' , // `` GTK '' final static String LOOKANDFEEL = `` Metal '' ; // If choose Metal L & F , also choose theme . // Specify theme use define THEME constant // Valid value : `` DefaultMetal '' , `` Ocean '' , `` Test '' final static String THEME = `` Test '' ; public Component createComponents ( ) { JButton button = new JButton ( `` I 'm Swing button ! `` ) ; button.setMnemonic ( KeyEvent.VK_I ) ; button.addActionListener ( ) ; label.setLabelFor ( button ) ; JPanel pane = new JPanel ( new GridLayout ( 0 , 1 ) ) ; pane.add ( button ) ; pane.add ( label ) ; pane.setBorder ( BorderFactory.createEmptyBorder ( 30 , //top 30 , //left 10 , //bottom 30 ) //right ) ; return pane ; } public void actionPerformed ( ActionEvent e ) { numClicks++ ; label.setText ( labelPrefix + numClicks ) ; } private static void initLookAndFeel ( ) { String lookAndFeel = null ; ( LOOKANDFEEL ! = null ) { ( LOOKANDFEEL.equals ( `` Metal '' ) ) { lookAndFeel = UIManager.getCrossPlatformLookAndFeelClassName ( ) ; // alternative way set Metal L & F replace // previous line : // lookAndFeel = `` javax.swing.plaf.metal.MetalLookAndFeel '' ; } else ( LOOKANDFEEL.equals ( `` System '' ) ) { lookAndFeel = UIManager.getSystemLookAndFeelClassName ( ) ; } else ( LOOKANDFEEL.equals ( `` Motif '' ) ) { lookAndFeel = `` com.sun.java.swing.plaf.motif.MotifLookAndFeel '' ; } else ( LOOKANDFEEL.equals ( `` GTK '' ) ) { lookAndFeel = `` com.sun.java.swing.plaf.gtk.GTKLookAndFeel '' ; } else { System.err.println ( `` Unexpected value LOOKANDFEEL specify : `` + LOOKANDFEEL ) ; lookAndFeel = UIManager.getCrossPlatformLookAndFeelClassName ( ) ; } try { UIManager.setLookAndFeel ( lookAndFeel ) ; // If L & F = `` Metal '' , set theme ( LOOKANDFEEL.equals ( `` Metal '' ) ) { ( THEME.equals ( `` DefaultMetal '' ) ) MetalLookAndFeel.setCurrentTheme ( new DefaultMetalTheme ( ) ) ; else ( THEME.equals ( `` Ocean '' ) ) MetalLookAndFeel.setCurrentTheme ( new OceanTheme ( ) ) ; else MetalLookAndFeel.setCurrentTheme ( new TestTheme ( ) ) ; UIManager.setLookAndFeel ( new MetalLookAndFeel ( ) ) ; } } catch ( ClassNotFoundException e ) { System.err.println ( `` Could n't find class specified look feel : '' + lookAndFeel ) ; System.err.println ( `` Did include L & F library class path ? `` ) ; System.err.println ( `` Using default look feel . `` ) ; } catch ( UnsupportedLookAndFeelException e ) { System.err.println ( `` Ca n't use specified look feel ( `` + lookAndFeel + `` ) platform . `` ) ; System.err.println ( `` Using default look feel . `` ) ; } catch ( Exception e ) { System.err.println ( `` Could n't get specify look feel ( `` + lookAndFeel + `` ) , reason . `` ) ; System.err.println ( `` Using default look feel . `` ) ; e.printStackTrace ( ) ; } } } private static void createAndShowGUI ( ) { //Set look feel . initLookAndFeel ( ) ; //Make sure nice window decoration . JFrame.setDefaultLookAndFeelDecorated ( true ) ; //Create set window . JFrame frame = new JFrame ( `` SwingApplication '' ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; LookAndFeelDemo app = new LookAndFeelDemo ( ) ; Component content = app.createComponents ( ) ; frame.getContentPane ( ) .add ( content , BorderLayout.CENTER ) ; //Display window . frame.pack ( ) ; frame.setVisible ( true ) ; } public static void main ( String [ ] args ) { //Schedule job event dispatch thread : //creating show application 's GUI . javax.swing.SwingUtilities.invokeLater ( new Runnable ( ) { public void run ( ) { createAndShowGUI ( ) ; } } ) ; } } Themes Themes introduce way easily change color font cross-platform Java ( Metal ) Look Feel . In sample program , LookAndfeelDemo.java , list , change theme Metal L & F set THEME constant line 23 one three value : DefaultMetal Ocean Test Ocean , bit soft pure Metal look , default theme Metal ( Java ) L & F since Java SE 5 . Despite name , DefaultMetal default theme Metal ( Java SE 5 , explain name ) . The Test theme theme define TestTheme.java , must compile LookAndfeelDemo.java . As write , TestTheme.java set three primary color ( somewhat bizarre result ) . You modify TestTheme.java test color like . The section code theme set find begin line 92 LookAndfeelDemo.java . Note must use Metal L & F set theme . ( LOOKANDFEEL.equals ( `` Metal '' ) ) { ( THEME.equals ( `` DefaultMetal '' ) ) MetalLookAndFeel.setCurrentTheme ( new DefaultMetalTheme ( ) ) ; else ( THEME.equals ( `` Ocean '' ) ) MetalLookAndFeel.setCurrentTheme ( new OceanTheme ( ) ) ; else MetalLookAndFeel.setCurrentTheme ( new TestTheme ( ) ) ; UIManager.setLookAndFeel ( new MetalLookAndFeel ( ) ) ; } The SwingSet2 Demonstration Program When download JDK JavaFX Demos Samples bundle open , demo\jfc folder contain demonstration program call SwingSet2 . This program graphically rich GUI allow change Look Feel menu . Further , use Java ( Metal ) Look Feel , choose variety different theme . The file various theme ( example , RubyTheme.java ) find SwingSet2\src folder . This `` Ocean '' theme , default cross-platform Java ( Metal ) Look Feel : This `` Steel '' theme , original theme cross-platform Java ( Metal ) Look Feel : To run SwingSet2 demo program system JDK instal , use command : java -jar SwingSet2.jar This give default theme Ocean . To get metal L & F , run : java -Dswing.metalTheme=steel -jar SwingSet2.jar