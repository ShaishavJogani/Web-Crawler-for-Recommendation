The Equality Relational Operators The equality relational operator determine one operand great , less , equal , equal another operand . The majority operator probably look familiar well . Keep mind must use `` == '' , `` = '' , test two primitive value equal . == equal ! = equal > great > = great equal < less < = less equal The following program , ComparisonDemo , test comparison operator : class ComparisonDemo { public static void main ( String [ ] args ) { int value1 = 1 ; int value2 = 2 ; ( value1 == value2 ) System.out.println ( `` value1 == value2 '' ) ; ( value1 ! = value2 ) System.out.println ( `` value1 ! = value2 '' ) ; ( value1 > value2 ) System.out.println ( `` value1 > value2 '' ) ; ( value1 < value2 ) System.out.println ( `` value1 < value2 '' ) ; ( value1 < = value2 ) System.out.println ( `` value1 < = value2 '' ) ; } } Output : value1 ! = value2 value1 < value2 value1 < = value2 The Conditional Operators The & & || operator perform Conditional-AND Conditional-OR operation two boolean expression . These operator exhibit `` short-circuiting '' behavior , mean second operand evaluate need . & & Conditional-AND || Conditional-OR The following program , ConditionalDemo1 , test operator : class ConditionalDemo1 { public static void main ( String [ ] args ) { int value1 = 1 ; int value2 = 2 ; ( ( value1 == 1 ) & & ( value2 == 2 ) ) System.out.println ( `` value1 1 AND value2 2 '' ) ; ( ( value1 == 1 ) || ( value2 == 1 ) ) System.out.println ( `` value1 1 OR value2 1 '' ) ; } } Another conditional operator ? : , think shorthand if-then-else statement ( discuss Control Flow Statements section lesson ) . This operator also know ternary operator use three operand . In following example , operator read : `` If someCondition true , assign value value1 result . Otherwise , assign value value2 result . '' The following program , ConditionalDemo2 , test ? : operator : class ConditionalDemo2 { public static void main ( String [ ] args ) { int value1 = 1 ; int value2 = 2 ; int result ; boolean someCondition = true ; result = someCondition ? value1 : value2 ; System.out.println ( result ) ; } } Because someCondition true , program print `` 1 '' screen . Use ? : operator instead if-then-else statement make code readable ; example , expression compact without side-effects ( assignment ) . The Type Comparison Operator instanceof The instanceof operator compare object specify type . You use test object instance class , instance subclass , instance class implement particular interface . The following program , InstanceofDemo , define parent class ( name Parent ) , simple interface ( name MyInterface ) , child class ( name Child ) inherit parent implement interface . class InstanceofDemo { public static void main ( String [ ] args ) { Parent obj1 = new Parent ( ) ; Parent obj2 = new Child ( ) ; System.out.println ( `` obj1 instanceof Parent : `` + ( obj1 instanceof Parent ) ) ; System.out.println ( `` obj1 instanceof Child : `` + ( obj1 instanceof Child ) ) ; System.out.println ( `` obj1 instanceof MyInterface : `` + ( obj1 instanceof MyInterface ) ) ; System.out.println ( `` obj2 instanceof Parent : `` + ( obj2 instanceof Parent ) ) ; System.out.println ( `` obj2 instanceof Child : `` + ( obj2 instanceof Child ) ) ; System.out.println ( `` obj2 instanceof MyInterface : `` + ( obj2 instanceof MyInterface ) ) ; } } class Parent { } class Child extend Parent implement MyInterface { } interface MyInterface { } Output : obj1 instanceof Parent : true obj1 instanceof Child : false obj1 instanceof MyInterface : false obj2 instanceof Parent : true obj2 instanceof Child : true obj2 instanceof MyInterface : true When use instanceof operator , keep mind null instance anything .