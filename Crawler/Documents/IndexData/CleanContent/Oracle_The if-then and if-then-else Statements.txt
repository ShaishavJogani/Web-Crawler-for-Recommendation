The if-then Statement The if-then statement basic control flow statement . It tell program execute certain section code particular test evaluate true . For example , Bicycle class could allow brake decrease bicycle 's speed bicycle already motion . One possible implementation applyBrakes method could follow : void applyBrakes ( ) { // `` '' clause : bicycle must move ( isMoving ) { // `` '' clause : decrease current speed currentSpeed -- ; } } If test evaluate false ( mean bicycle motion ) , control jump end if-then statement . In addition , opening closing brace optional , provide `` '' clause contain one statement : void applyBrakes ( ) { // , without brace ( isMoving ) currentSpeed -- ; } Deciding omit brace matter personal taste . Omitting make code brittle . If second statement later add `` '' clause , common mistake would forget add newly require brace . The compiler catch sort error ; 'll get wrong result . The if-then-else Statement The if-then-else statement provide secondary path execution `` '' clause evaluate false . You could use if-then-else statement applyBrakes method take action brake apply bicycle motion . In case , action simply print error message state bicycle already stop . void applyBrakes ( ) { ( isMoving ) { currentSpeed -- ; } else { System.err.println ( `` The bicycle already stop ! `` ) ; } } The following program , IfElseDemo , assign grade base value test score : A score 90 % , B score 80 % , . class IfElseDemo { public static void main ( String [ ] args ) { int testscore = 76 ; char grade ; ( testscore > = 90 ) { grade = 'A ' ; } else ( testscore > = 80 ) { grade = 'B ' ; } else ( testscore > = 70 ) { grade = 'C ' ; } else ( testscore > = 60 ) { grade = 'D ' ; } else { grade = 'F ' ; } System.out.println ( `` Grade = `` + grade ) ; } } The output program : Grade = C You may notice value testscore satisfy one expression compound statement : 76 > = 70 76 > = 60 . However , condition satisfied , appropriate statement execute ( grade = 'C ' ; ) remain condition evaluate .