Most program avail Java Sound API 's MIDI package synthesize sound . The entire apparatus MIDI file , event , sequence , sequencer , previously discuss , nearly always goal eventually send musical data synthesizer convert audio . ( Possible exception include program convert MIDI musical notation read musician , program send message external MIDI-controlled device mix console . ) The Synthesizer interface therefore fundamental MIDI package . This page show manipulate synthesizer play sound . Many program simply use sequencer send MIDI file data synthesizer , wo n't need invoke many Synthesizer method directly . However , 's possible control synthesizer directly , without use sequencer even MidiMessage object , explain near end page . The synthesis architecture might seem complex reader unfamiliar MIDI . Its API include three interface : Synthesizer MidiChannel Soundbank four class : Instrument Patch SoundbankResource VoiceStatus As orientation API , next section explain basic MIDI synthesis 're reflect Java Sound API . Subsequent section give detailed look API . Understanding MIDI Synthesis How synthesizer generate sound ? Depending implementation , may use one sound-synthesis technique . For example , many synthesizer use wavetable synthesis . A wavetable synthesizer read store snippet audio memory , play different sample rate loop create note different pitch duration . For example , synthesize sound saxophone play note C # 4 ( MIDI note number 61 ) , synthesizer might access short snippet recording saxophone play note Middle C ( MIDI note number 60 ) , cycle repeatedly snippet slightly faster sample rate record , create long note slightly high pitch . Other synthesizer use technique frequency modulation ( FM ) , additive synthesis , physical modeling , n't make use stored audio instead generate audio scratch use different algorithm . Instruments What synthesis technique common ability create many sort sound . Different algorithm , different setting parameter within algorithm , create different-sounding result . An instrument specification synthesize certain type sound . That sound may emulate traditional musical instrument , piano violin ; may emulate kind sound source , instance , telephone helicopter ; may emulate `` real-world '' sound . A specification call General MIDI define standard list 128 instrument , synthesizer allow instrument well . Many synthesizer provide collection built-in instrument always available use ; synthesizer also support mechanism load additional instrument . An instrument may vendor-specificâin word , applicable one synthesizer several model vendor . This incompatibility result two different synthesizer use different sound-synthesis technique , different internal algorithm parameter even fundamental technique . Because detail synthesis technique often proprietary , incompatibility common . The Java Sound API include way detect whether give synthesizer support give instrument . An instrument usually consider preset ; n't know anything detail synthesis technique produce sound . However , still vary aspect sound . Each Note On message specifies pitch volume individual note . You also alter sound MIDI command controller message system-exclusive message . Channels Many synthesizer multimbral ( sometimes call polytimbral ) , mean play note different instrument simultaneously . ( Timbre characteristic sound quality enable listener distinguish one kind musical instrument kind . ) Multimbral synthesizer emulate entire ensemble real-world instrument , instead one instrument time . MIDI synthesizer normally implement feature take advantage different MIDI channel MIDI specification allow data transmit . In case , synthesizer actually collection sound-generating unit , emulate different instrument respond independently message receive different MIDI channel . Since MIDI specification provide 16 channel , typical MIDI synthesizer play 16 different instrument . The synthesizer receive stream MIDI command , many channel command . ( Channel command target particular MIDI channel ; information , see MIDI specification . ) If synthesizer multitimbral , rout channel command correct sound-generating unit , accord channel number indicate command . In Java Sound API , sound-generating unit instance class implement MidiChannel interface . A synthesizer object least one MidiChannel object . If synthesizer multimbral , one , normally 16 . Each MidiChannel represent independent sound-generating unit . Because synthesizer 's MidiChannel object less independent , assignment instrument channel n't unique . For example , 16 channel could play piano timbre , though ensemble 16 piano . Any grouping possibleâfor instance , channel 1 , 5 , 8 could play guitar sound , channel 2 3 play percussion channel 12 bass timbre . The instrument play give MIDI channel change dynamically ; know program change . Even though synthesizer allow 16 instrument active give time , instrument generally choose much large selection assign particular channel require . Soundbanks Patches Instruments organize hierarchically synthesizer , bank number program number . Banks program think row column two-dimensional table instrument . A bank collection program . The MIDI specification allow 128 program bank , 128 bank . However , particular synthesizer might support one bank , bank , might support 128 program per bank . In Java Sound API , 's high level hierarchy : soundbank . Soundbanks contain 128 bank , contain 128 instrument . Some synthesizer load entire soundbank memory . To select instrument current soundbank , specify bank number program number . The MIDI specification accomplish two MIDI command : bank select program change . In Java Sound API , combination bank number program number encapsulate Patch object . You change MIDI channel 's current instrument specify new patch . The patch consider two-dimensional index instrument current soundbank . You might wonder soundbanks , , index numerically . The answer ; MIDI specification provide . In Java Sound API , Soundbank object obtain read soundbank file . If soundbank support synthesizer , instrument load synthesizer individually desire , . Many synthesizer built-in default soundbank ; instrument contain soundbank always available synthesizer . Voices It 's important distinguish number timbre synthesizer play simultaneously number note play simultaneously . The former describe `` Channels . '' The ability play multiple note refer polyphony . Even synthesizer n't multitimbral generally play one note time ( timbre , different pitch ) . For example , play chord , G major triad B minor seventh chord , require polyphony . Any synthesizer generate sound real time limitation number note synthesize . In Java Sound API , synthesizer report limitation getMaxPolyphony method . A voice succession single note , melody person sing . Polyphony consist multiple voice , part sing choir . A 32-voice synthesizer , example , play 32 note simultaneously . ( However , MIDI literature use word `` voice '' different sense , similar meaning `` instrument '' `` timbre . '' ) The process assign incoming MIDI note specific voice know voice allocation . A synthesizer maintain list voice , keep track one active ( mean currently note sound ) . When note stop sound , voice become inactive , mean 's free accept next note-on request synthesizer receive . An incoming stream MIDI command easily request simultaneous note synthesizer capable generate . When synthesizer 's voice active , next Note On request handle ? Synthesizers implement different strategy : recently request note ignore ; play discontinue another note , least recently start one . Although MIDI specification require , synthesizer make public content voice . The Java Sound API include VoiceStatus class purpose . A VoiceStatus report voice 's current active inactive status , MIDI channel , bank program number , MIDI note number , MIDI volume . With background , let 's examine specific Java Sound API synthesis . Managing Instruments Soundbanks In many case , program make use Synthesizer object without explicitly invoke almost synthesis API . For example , suppose 're play standard MIDI file . You load Sequence object , play sequencer send data default synthesizer . The data sequence control synthesizer intend , play right note right time . However , case simple scenario inadequate . The sequence contain right music , instrument sound wrong ! This unfortunate situation probably arose creator MIDI file different instrument mind one currently load synthesizer . The MIDI 1.0 Specification provide bank-select program-change command , affect instrument currently play MIDI channel . However , specification define instrument reside patch location ( bank program number ) . The recent General MIDI specification address problem define bank contain 128 program correspond specific instrument sound . A General MIDI synthesizer use 128 instrument match specify set . Different General MIDI synthesizer sound quite different , even play 's suppose instrument . However , MIDI file part sound similar ( even identical ) , matter General MIDI synthesizer play . Nonetheless , creator MIDI file want limit set 128 timbre define General MIDI . This section show change instrument default set synthesizer come . ( If default , mean instrument load access synthesizer , 'll use API start case . ) Learning What Instruments Are Loaded To learn whether instrument currently load synthesizer one want , invoke Synthesizer method : Instrument [ ] getLoadedInstruments ( ) iterate returned array see exactly instrument currently load . Most likely , would display instrument ' name user interface ( use getName method Instrument ) , let user decide whether use instrument load others . The Instrument API include method report soundbank instrument belong . The soundbank 's name might help program user ascertain exactly instrument . This Synthesizer method : Soundbank getDefaultSoundbank ( ) give default soundbank . The Soundbank API include method retrieve soundbank 's name , vendor , version number , program user verify bank 's identity . However , ca n't assume first get synthesizer instrument default soundbank load synthesizer . For example , synthesizer might large assortment built-in instrument available use , limited memory might load automatically . Loading Different Instruments The user might decide load instrument different current one ( might make decision programmatically ) . The following method tell instrument come synthesizer ( versus load soundbank file ) : Instrument [ ] getAvailableInstruments ( ) You load instrument invoke : boolean loadInstrument ( Instrument instrument ) The instrument get load synthesizer location specify instrument 's Patch object ( retrieve use getPatch method Instrument ) . To load instrument soundbanks , first invoke Synthesizer 's isSupportedSoundbank method make sure soundbank compatible synthesizer ( n't , iterate system 's synthesizer try find one support soundbank ) . You invoke one method load instrument soundbank : boolean loadAllInstruments ( Soundbank soundbank ) boolean loadInstruments ( Soundbank soundbank , Patch [ ] patchList ) As name suggest , first load entire set instrument give soundbank , second load select instrument soundbank . You could also use Soundbank 's getInstruments method access instrument , iterate load select instrument one time use loadInstrument . It 's necessary instrument load soundbank . You could use loadInstrument loadInstruments load certain instrument one soundbank , another set different soundbank , . Each instrument Patch object specify location synthesizer instrument load . The location define bank number program number . There 's API change location change patch 's bank program number . However , possible load instrument location one specify patch , use following method Synthesizer : boolean remapInstrument ( Instrument , Instrument ) This method unload first argument synthesizer , place second argument whatever synthesizer patch location occupy first argument . Unloading Instruments Loading instrument program location automatically unloads whatever instrument already location , . You also explicitly unload instrument without necessarily replace new one . Synthesizer include three unload method correspond three load method . If synthesizer receive program-change message select program location instrument currently load , wo n't sound MIDI channel program-change message send . Accessing Soundbank Resources Some synthesizer store information besides instrument soundbanks . For example , wavetable synthesizer store audio sample one instrument access . Because sample might share multiple instrument , 're store soundbank independently instrument . Both Soundbank interface Instrument class provide method call getSoundbankResources , return list SoundbankResource object . The detail object specific synthesizer soundbank design . In case wavetable synthesis , resource might object encapsulate series audio sample , take one snippet sound recording . Synthesizers use synthesis technique might store kind object synthesizer 's SoundbankResources array . Querying Synthesizer 's Capabilities Current State The Synthesizer interface include method return information synthesizer 's capability : public long getLatency ( ) public int getMaxPolyphony ( ) The latency measure worst-case delay time MIDI message deliver synthesizer time synthesizer actually produce corresponding result . For example , might take synthesizer millisecond begin generate audio receive note-on event . The getMaxPolyphony method indicate many note synthesizer sound simultaneously , discuss earlier Voices . As mention discussion , synthesizer provide information voice . This accomplish following method : public VoiceStatus [ ] getVoiceStatus ( ) Each VoiceStatus returned array report voice 's current active inactive status , MIDI channel , bank program number , MIDI note number , MIDI volume . The array 's length normally number return getMaxPolyphony . If synthesizer n't play , VoiceStatus object active field set false . You learn additional information current status synthesizer retrieve MidiChannel object query state . This discuss next section . Using Channels Sometimes 's useful necessary access synthesizer 's MidiChannel object directly . This section discuss situation . Controlling Synthesizer without Using Sequencer When use sequence , one read MIDI file , n't need send MIDI command synthesizer . Instead , load sequence sequencer , connect sequencer synthesizer , let run . The sequencer take care schedule event , result predictable musical performance . This scenario work fine desire music know advance , true 's read file . In situation , however , music generate fly 's playing . For example , user interface might display musical keyboard guitar fretboard let user play note click mouse . As another example , application might use synthesizer play music per se , generate sound effect response user 's action . This scenario typical game . As final example , application might indeed play music 's read file , user interface allow user interact music , alter dynamically . In case , application send command directly synthesizer , since MIDI message need deliver immediately , instead schedule determinate point future . There least two way send MIDI message synthesizer without use sequencer . The first construct MidiMessage pas synthesizer use send method Receiver . For example , produce Middle C ( MIDI note number 60 ) MIDI channel 5 ( one-based ) immediately , could following : ShortMessage myMsg = new ShortMessage ( ) ; // Play note Middle C ( 60 ) moderately loud // ( velocity = 93 ) channel 4 ( zero-based ) . myMsg.setMessage ( ShortMessage.NOTE_ON , 4 , 60 , 93 ) ; Synthesizer synth = MidiSystem.getSynthesizer ( ) ; Receiver synthRcvr = synth.getReceiver ( ) ; synthRcvr.send ( myMsg , -1 ) ; // -1 mean time stamp The second way bypass message-passing layer ( , MidiMessage Receiver API ) altogether , interact synthesizer 's MidiChannel object directly . You first need retrieve synthesizer 's MidiChannel object , use following Synthesizer method : public MidiChannel [ ] getChannels ( ) invoke desired MidiChannel method directly . This immediate route send corresponding MidiMessages synthesizer 's Receiver let synthesizer handle communication MidiChannels . For example , code correspond precede example would : Synthesizer synth = MidiSystem.getSynthesizer ( ) ; MidiChannel chan [ ] = synth.getChannels ( ) ; // Check null ; maybe 16 channel exist . ( chan [ 4 ] ! = null ) { chan [ 4 ] .noteOn ( 60 , 93 ) ; } Getting Channel 's Current State The MidiChannel interface provide method correspond one-to-one `` channel voice '' `` channel mode '' message define MIDI specification . We saw one case use noteOn method previous example . However , addition canonical method , Java Sound API 's MidiChannel interface add `` get '' method retrieve value recently set correspond voice mode `` set '' method : int getChannelPressure ( ) int getController ( int controller ) boolean getMono ( ) boolean getOmni ( ) int getPitchBend ( ) int getPolyPressure ( int noteNumber ) int getProgram ( ) These method might useful display channel state user , decide value send subsequently channel . Muting Soloing Channel The Java Sound API add notion per-channel solo mute , require MIDI specification . These similar solo mute track MIDI sequence . If mute , channel sound , channel unaffected . If solo , channel , soloed channel , sound ( n't mute ) , channel sound . A channel soloed mute sound . The MidiChannel API include four method : boolean getMute ( ) boolean getSolo ( ) void setMute ( boolean muteState ) void setSolo ( boolean soloState ) Permission Play Synthesized Sound The audio produce installed MIDI synthesizer typically rout sampled-audio system . If program n't permission play audio , synthesizer 's sound wo n't hear , security exception throw . For information audio permission , see previous discussion Permission Use Audio Resources Permission Use Audio Resources .