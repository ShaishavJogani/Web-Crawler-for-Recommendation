The Java programming language statically-typed , mean variable must first declare use . This involve state variable 's type name , 've already see : int gear = 1 ; Doing tell program field name `` gear '' exists , hold numerical data , initial value `` 1 '' . A variable 's data type determine value may contain , plus operation may perform . In addition int , Java programming language support seven primitive data type . A primitive type predefined language name reserve keyword . Primitive value share state primitive value . The eight primitive data type support Java programming language : byte : The byte data type 8-bit sign two 's complement integer . It minimum value -128 maximum value 127 ( inclusive ) . The byte data type useful save memory large array , memory saving actually matter . They also use place int limit help clarify code ; fact variable 's range limit serve form documentation . short : The short data type 16-bit signed two 's complement integer . It minimum value -32,768 maximum value 32,767 ( inclusive ) . As byte , guideline apply : use short save memory large array , situation memory saving actually matter . int : By default , int data type 32-bit signed two 's complement integer , minimum value -231 maximum value 231-1 . In Java SE 8 later , use int data type represent unsigned 32-bit integer , minimum value 0 maximum value 232-1 . Use Integer class use int data type unsigned integer . See section The Number Classes information . Static method like compareUnsigned , divideUnsigned etc add Integer class support arithmetic operation unsigned integer . long : The long data type 64-bit two 's complement integer . The sign long minimum value -263 maximum value 263-1 . In Java SE 8 later , use long data type represent unsigned 64-bit long , minimum value 0 maximum value 264-1 . Use data type need range value wider provide int . The Long class also contain method like compareUnsigned , divideUnsigned etc support arithmetic operation unsigned long . float : The float data type single-precision 32-bit IEEE 754 float point . Its range value beyond scope discussion , specify Floating-Point Types , Formats , Values section Java Language Specification . As recommendation byte short , use float ( instead double ) need save memory large array float point number . This data type never use precise value , currency . For , need use java.math.BigDecimal class instead . Numbers Strings cover BigDecimal useful class provide Java platform . double : The double data type double-precision 64-bit IEEE 754 float point . Its range value beyond scope discussion , specify Floating-Point Types , Formats , Values section Java Language Specification . For decimal value , data type generally default choice . As mention , data type never use precise value , currency . boolean : The boolean data type two possible value : true false . Use data type simple flag track true/false condition . This data type represent one bit information , `` size '' n't something 's precisely define . char : The char data type single 16-bit Unicode character . It minimum value '\u0000 ' ( 0 ) maximum value '\uffff ' ( 65,535 inclusive ) . In addition eight primitive data type list , Java programming language also provide special support character string via java.lang.String class . Enclosing character string within double quote automatically create new String object ; example , String = `` string '' ; . String object immutable , mean create , value change . The String class technically primitive data type , consider special support give language , 'll probably tend think . You 'll learn String class Simple Data Objects Default Values It 's always necessary assign value field declare . Fields declare initialize set reasonable default compiler . Generally speak , default zero null , depend data type . Relying default value , however , generally consider bad programming style . The following chart summarize default value data type . Data Type Default Value ( field ) byte 0 short 0 int 0 long 0L float 0.0f double 0.0d char '\u0000' String ( object ) null boolean false Local variable slightly different ; compiler never assign default value uninitialized local variable . If initialize local variable declare , make sure assign value attempt use . Accessing uninitialized local variable result compile-time error . Literals You may notice new keyword n't use initialize variable primitive type . Primitive type special data type build language ; object create class . A literal source code representation fixed value ; literal represent directly code without require computation . As show , 's possible assign literal variable primitive type : boolean result = true ; char capitalC = 'C ' ; byte b = 100 ; short = 10000 ; int = 100000 ; Integer Literals An integer literal type long end letter L l ; otherwise type int . It recommend use upper case letter L low case letter l hard distinguish digit 1 . Values integral type byte , short , int , long create int literal . Values type long exceed range int create long literal . Integer literal express number system : Decimal : Base 10 , whose digit consist number 0 9 ; number system use every day Hexadecimal : Base 16 , whose digit consist number 0 9 letter A F Binary : Base 2 , whose digit consist number 0 1 ( create binary literal Java SE 7 later ) For general-purpose programming , decimal system likely number system 'll ever use . However , need use another number system , following example show correct syntax . The prefix 0x indicate hexadecimal 0b indicates binary : // The number 26 , decimal int decVal = 26 ; // The number 26 , hexadecimal int hexVal = 0x1a ; // The number 26 , binary int binVal = 0b11010 ; Floating-Point Literals A floating-point literal type float end letter F f ; otherwise type double optionally end letter D d. The float point type ( float double ) also express use E e ( scientific notation ) , F f ( 32-bit float literal ) D ( 64-bit double literal ; default convention omit ) . double d1 = 123.4 ; // value d1 , scientific notation double d2 = 1.234e2 ; float f1 = 123.4f ; Character String Literals Literals type char String may contain Unicode ( UTF-16 ) character . If editor file system allow , use character directly code . If , use `` Unicode escape '' '\u0108 ' ( capital C circumflex ) , `` S\u00ED Se\u00F1or '' ( Sí Señor Spanish ) . Always use 'single quote ' char literal `` double quote '' String literal . Unicode escape sequence may use elsewhere program ( field name , example ) , char String literal . The Java programming language also support special escape sequence char String literal : \b ( backspace ) , \t ( tab ) , \n ( line feed ) , \f ( form feed ) , \r ( carriage return ) , \ '' ( double quote ) , \ ' ( single quote ) , \\ ( backslash ) . There 's also special null literal use value reference type . null may assign variable , except variable primitive type . There 's little null value beyond test presence . Therefore , null often use program marker indicate object unavailable . Finally , 's also special kind literal call class literal , form take type name append `` .class '' ; example , String.class . This refer object ( type Class ) represent type . Using Underscore Characters Numeric Literals In Java SE 7 later , number underscore character ( _ ) appear anywhere digit numerical literal . This feature enable , example . separate group digit numeric literal , improve readability code . For instance , code contain number many digit , use underscore character separate digit group three , similar would use punctuation mark like comma , space , separator . The following example show way use underscore numeric literal : long creditCardNumber = 1234_5678_9012_3456L ; long socialSecurityNumber = 999_99_9999L ; float pi = 3.14_15F ; long hexBytes = 0xFF_EC_DE_5E ; long hexWords = 0xCAFE_BABE ; long maxLong = 0x7fff_ffff_ffff_ffffL ; byte nybble = 0b0010_0101 ; long byte = 0b11010010_01101001_10010100_10010010 ; You place underscore digit ; place underscore following place : At beginning end number Adjacent decimal point floating point literal Prior F L suffix In position string digit expect The following example demonstrate valid invalid underscore placement ( highlight ) numeric literal : // Invalid : put underscore // adjacent decimal point float pi1 = 3_.1415F ; // Invalid : put underscore // adjacent decimal point float pi2 = 3._1415F ; // Invalid : put underscore // prior L suffix long socialSecurityNumber1 = 999_99_9999_L ; // OK ( decimal literal ) int x1 = 5_2 ; // Invalid : put underscore // At end literal int x2 = 52_ ; // OK ( decimal literal ) int x3 = 5_______2 ; // Invalid : put underscore // 0x radix prefix int x4 = 0_x52 ; // Invalid : put underscore // beginning number int x5 = 0x_52 ; // OK ( hexadecimal literal ) int x6 = 0x5_2 ; // Invalid : put underscore // end number int x7 = 0x52_ ;