As mention , Swing provide three generally useful top-level container class : JFrame , JDialog , JApplet . When use class , keep fact mind : To appear onscreen , every GUI component must part containment hierarchy . A containment hierarchy tree component top-level container root . We 'll show one bit . Each GUI component contain . If component already container try add another container , component remove first container add second . Each top-level container content pane , generally speak , contains ( directly indirectly ) visible component top-level container 's GUI . You optionally add menu bar top-level container . The menu bar convention position within top-level container , outside content pane . Some look feel , Mac OS look feel , give option place menu bar another place appropriate look feel , top screen . Note : Although JInternalFrame mimic JFrame , internal frame n't actually top-level container . Here 's picture frame create application . The frame contain green menu bar ( menu ) , frame 's content pane , large blank , yellow label . You find entire source example TopLevelDemo.java . Although example use JFrame standalone application , concept apply JApplets JDialogs . Here 's containment hierarchy example 's GUI : As ellipsis imply , leave detail diagram . We reveal miss detail bit later . Here topic section discuss : Top-Level Containers Containment Hierarchies Adding Components Content Pane Adding Menu Bar The Root Pane ( a.k.a . The Missing Details ) Top-Level Containers Containment Hierarchies Each program use Swing component least one top-level container . This top-level container root containment hierarchy — hierarchy contain Swing component appear inside top-level container . As rule , standalone application Swing-based GUI least one containment hierarchy JFrame root . For example , application one main window two dialog , application three containment hierarchy , thus three top-level container . One containment hierarchy JFrame root , two JDialog object root . A Swing-based applet least one containment hierarchy , exactly one root JApplet object . For example , applet bring dialog two containment hierarchy . The component browser window containment hierarchy root JApplet object . The dialog containment hierarchy root JDialog object . Adding Components Content Pane Here 's code precede example us get frame 's content pane add yellow label : frame.getContentPane ( ) .add ( yellowLabel , BorderLayout.CENTER ) ; As code show , find content pane top-level container call getContentPane method . The default content pane simple intermediate container inherit JComponent , use BorderLayout layout manager . It 's easy customize content pane — set layout manager add border , example . However , one tiny gotcha . The getContentPane method return Container object , JComponent object . This mean want take advantage content pane 's JComponent feature , need either typecast return value create component content pane . Our example generally take second approach , since 's little cleaner . Another approach sometimes take simply add customized component content pane , cover content pane completely . Note default layout manager JPanel FlowLayout ; 'll probably want change . To make component content pane , use top-level container 's setContentPane method . For example : //Create panel add component . JPanel contentPane = new JPanel ( new BorderLayout ( ) ) ; contentPane.setBorder ( someBorder ) ; contentPane.add ( someComponent , BorderLayout.CENTER ) ; contentPane.add ( anotherComponent , BorderLayout.PAGE_END ) ; topLevelContainer.setContentPane ( contentPane ) ; Note : As convenience , add method variant , remove setLayout override forward contentPane necessary . This mean write frame.add ( child ) ; child add contentPane . Note three method . This mean getLayout ( ) return layout set setLayout ( ) . Adding Menu Bar In theory , top-level container hold menu bar . In practice , however , menu bar usually appear frame applet . To add menu bar top-level container , create JMenuBar object , populate menu , call setJMenuBar . The TopLevelDemo add menu bar frame code : frame.setJMenuBar ( greenMenuBar ) ; For information implement menu menu bar , see How Use Menus . The Root Pane Each top-level container relies reclusive intermediate container call root pane . The root pane manage content pane menu bar , along couple container . You generally n't need know root pane use Swing component . However , ever need intercept mouse click paint multiple component , get acquaint root pane . Here 's list component root pane provide frame ( every top-level container ) : We 've already tell content pane optional menu bar . The two component root pane add layered pane glass pane . The layered pane contain menu bar content pane , enable Z-ordering component . The glass pane often use intercept input event occur top-level container , also use paint multiple component . For detail , see How Use Root Panes .