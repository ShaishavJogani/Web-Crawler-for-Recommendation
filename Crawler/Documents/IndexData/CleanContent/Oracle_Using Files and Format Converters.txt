Most application program deal sound need read sound file audio stream . This common functionality , regardless program may subsequently data read ( play , mix , process ) . Similarly , many program need write sound file ( stream ) . In case , data read ( write ) need convert different format . As briefly mention Accessing Audio System Resources , Java Sound API provide application developer various facility file input/output format translation . Application program read , write , translate variety sound file format audio data format . Overview Sampled Package introduce main class relate sound file audio data format . As review : A stream audio data , might read write file , represent AudioInputStream object . ( AudioInputStream inherit java.io.InputStream . ) The format audio data represent AudioFormat object . This format specify audio sample arrange , structure file might store . In word , AudioFormat describe `` raw '' audio data , system might hand program capture microphone input parse sound file . An AudioFormat include information encoding , byte order , number channel , sample rate , number bit per sample . There several well-known , standard format sound file , WAV , AIFF , AU . The different type sound file different structure store audio data well store descriptive information audio data . A sound file format represent Java Sound API AudioFileFormat object . The AudioFileFormat include AudioFormat object describe format audio data store file , also include information file type length data file . The AudioSystem class provide method ( 1 ) store stream audio data AudioInputStream audio file particular type ( word , write file ) , ( 2 ) extract stream audio byte ( AudioInputStream ) audio file ( word , read file ) , ( 3 ) convert audio data one data format another . This page , divide three section , explain three kind activity . Note : implementation Java Sound API necessarily provide comprehensive facility reading , writing , convert audio different data file format . It might support common data file format . However , service provider develop distribute conversion service extend set , 'll later see Providing Sampled-Audio Services . The AudioSystem class supply method allow application program learn conversion available , describe later Converting File Data Formats . Reading Sound Files The AudioSystem class provide two type file-reading service : Information format audio data store sound file A stream formatted audio data read sound file The first give three variant getAudioFileFormat method : static AudioFileFormat getAudioFileFormat ( java.io.File file ) static AudioFileFormat getAudioFileFormat ( java.io.InputStream stream ) static AudioFileFormat getAudioFileFormat ( java.net.URL url ) As mention , return AudioFileFormat object tell file type , length data file , encode , byte order , number channel , sample rate , number bit per sample . The second type file-reading functionality give AudioSystem method static AudioInputStream getAudioInputStream ( java.io.File file ) static AudioInputStream getAudioInputStream ( java.net.URL url ) static AudioInputStream getAudioInputStream ( java.io.InputStream stream ) These method give object ( AudioInputStream ) let read file 's audio data , use one read method AudioInputStream . We 'll see example momentarily . Suppose 're write sound-editing application allow user load sound data file , display corresponding waveform spectrogram , edit sound , play back edit data , save result new file . Or perhaps program read data store file , apply kind signal processing ( algorithm slow sound without change pitch ) , play processed audio . In either case , need get access data contain audio file . Assuming program provide mean user select specify input sound file , read file 's audio data involves three step : Get AudioInputStream object file . Create byte array 'll store successive chunk data file . Repeatedly read byte audio input stream array . On iteration , something useful byte array ( example , might play , filter , analyze , display , write another file ) . The following code snippet outline step : int totalFramesRead = 0 ; File fileIn = new File ( somePathName ) ; // somePathName pre-existing string whose value // base user selection . try { AudioInputStream audioInputStream = AudioSystem.getAudioInputStream ( fileIn ) ; int bytesPerFrame = audioInputStream.getFormat ( ) .getFrameSize ( ) ; ( bytesPerFrame == AudioSystem.NOT_SPECIFIED ) { // audio format may unspecified frame size // case may read amount byte bytesPerFrame = 1 ; } // Set arbitrary buffer size 1024 frame . int numBytes = 1024 * bytesPerFrame ; byte [ ] audioBytes = new byte [ numBytes ] ; try { int numBytesRead = 0 ; int numFramesRead = 0 ; // Try read numBytes byte file . ( ( numBytesRead = audioInputStream.read ( audioBytes ) ) ! = -1 ) { // Calculate number frame actually read . numFramesRead = numBytesRead / bytesPerFrame ; totalFramesRead += numFramesRead ; // Here , something useful audio data 's // audioBytes array ... } } catch ( Exception ex ) { // Handle error ... } } catch ( Exception e ) { // Handle error ... } Let 's take look 's happen code sample . First , outer try clause instantiate AudioInputStream object call AudioSystem.getAudioInputStream ( File ) method . This method transparently perform testing require determine whether specify file actually sound file type support Java Sound API . If file inspect ( fileIn example ) sound file , sound file unsupported type , UnsupportedAudioFileException exception throw . This behavior convenient , application programmer need bother test file attribute , adhere file-naming convention . Instead , getAudioInputStream method take care low-level parsing verification require validate input file . The outer try clause create byte array , audioBytes , arbitrary fixed length . We make sure length byte equal integral number frame , wo n't end read part frame , even bad , part sample . This byte array serve buffer temporarily hold chunk audio data 's read stream . If know would read nothing short sound file , could make array length data file , derive length byte length frame , return AudioInputStream 's getFrameLength method . ( Actually , 'd probably use Clip object instead . ) But avoid run memory general case , instead read file chunk , one buffer time . The inner try clause contain loop , read audio data AudioInputStream byte array . You add code loop handle audio data array whatever way appropriate program 's need . If 're apply kind signal processing data , 'll probably need query AudioInputStream 's AudioFormat far , learn number bit per sample . Note method AudioInputStream.read ( byte [ ] ) return number byte readânot number sample frame . This method return -1 's data read . Upon detect condition , break loop . Writing Sound Files The previous section describe basic read sound file , use specific method AudioSystem AudioInputStream class . This section describe write audio data new file . The following AudioSystem method create disk file specify file type . The file contain audio data 's specified AudioInputStream : static int write ( AudioInputStream , AudioFileFormat.Type fileType , File ) Note second argument must one file type support system ( example , AU , AIFF , WAV ) , otherwise write method throw IllegalArgumentException . To avoid , test whether particular AudioInputStream may write particular type file , invoke AudioSystem method : static boolean isFileTypeSupported ( AudioFileFormat.Type fileType , AudioInputStream stream ) return true particular combination support . More generally , learn type file system write invoke one AudioSystem method : static AudioFileFormat.Type [ ] getAudioFileTypes ( ) static AudioFileFormat.Type [ ] getAudioFileTypes ( AudioInputStream stream ) The first return type file system write , second return system write give audio input stream . The following excerpt demonstrate one technique create output file AudioInputStream use write method mention . File fileOut = new File ( someNewPathName ) ; AudioFileFormat.Type fileType = fileFormat.getType ( ) ; ( AudioSystem.isFileTypeSupported ( fileType , audioInputStream ) ) { AudioSystem.write ( audioInputStream , fileType , fileOut ) ; } The first statement , create new File object , fileOut , user- program-specified pathname . The second statement get file type pre-existing AudioFileFormat object call fileFormat , might obtain another sound file , one read Reading Sound Files . ( You could instead supply whatever support file type want , instead get file type elsewhere . For example , might delete second statement replace two occurrence fileType code AudioFileFormat.Type.WAVE . ) The third statement test whether file designated type write desired AudioInputStream . Like file format , stream might derive sound file previously read . ( If , presumably 've process alter data way , otherwise easy way simply copy file . ) Or perhaps stream contain byte freshly capture microphone input . Finally , stream , file type , output file pass AudioSystem.write method , accomplish goal write file . Converting File Data Formats Recall What Formatted Audio Data ? , Java Sound API distinguishes audio file format audio data format . The two less independent . Roughly speaking , data format refers way computer represent raw data point ( sample ) , file format refers organization sound file store disk . Each sound file format particular structure define , example , information store file 's header . In case , file format also include structure contain form meta-data , addition actual `` raw '' audio sample . The remainder page examine method Java Sound API enable variety file-format data-format conversion . Converting One File Format Another This section cover fundamental convert audio file type Java Sound API . Once pose hypothetical program whose purpose , time , read audio data arbitrary input file write file whose type AIFF . Of course , input file must type system capable reading , output file must type system capable writing . ( In example , assume system capable write AIFF file . ) The example program n't data format conversion . If input file 's data format ca n't represent AIFF file , program simply notify user problem . On hand , input sound file already AIFF file , program notify user need convert . The following function implement logic describe : public void ConvertFileToAIFF ( String inputPath , String outputPath ) { AudioFileFormat inFileFormat ; File inFile ; File outFile ; try { inFile = new File ( inputPath ) ; outFile = new File ( outputPath ) ; } catch ( NullPointerException ex ) { System.out.println ( `` Error : one ConvertFileToAIFF '' + '' parameter null ! `` ) ; return ; } try { // query file type inFileFormat = AudioSystem.getAudioFileFormat ( inFile ) ; ( inFileFormat.getType ( ) ! = AudioFileFormat.Type.AIFF ) { // inFile AIFF , let 's try convert . AudioInputStream inFileAIS = AudioSystem.getAudioInputStream ( inFile ) ; inFileAIS.reset ( ) ; // rewind ( AudioSystem.isFileTypeSupported ( AudioFileFormat.Type.AIFF , inFileAIS ) ) { // inFileAIS convert AIFF . // write AudioInputStream // output file . AudioSystem.write ( inFileAIS , AudioFileFormat.Type.AIFF , outFile ) ; System.out.println ( `` Successfully make AIFF file , `` + outFile.getPath ( ) + `` , `` + inFileFormat.getType ( ) + `` file , `` + inFile.getPath ( ) + `` . `` ) ; inFileAIS.close ( ) ; return ; // All } else System.out.println ( `` Warning : AIFF conversion `` + inFile.getPath ( ) + `` currently support AudioSystem . `` ) ; } else System.out.println ( `` Input file `` + inFile.getPath ( ) + `` AIFF . '' + `` Conversion unnecessary . `` ) ; } catch ( UnsupportedAudioFileException e ) { System.out.println ( `` Error : `` + inFile.getPath ( ) + `` supported audio file type ! `` ) ; return ; } catch ( IOException e ) { System.out.println ( `` Error : failure attempt read `` + inFile.getPath ( ) + `` ! `` ) ; return ; } } As mention , purpose example function , ConvertFileToAIFF , query input file determine whether 's AIFF sound file , n't , try convert one , produce new copy whose pathname specify second argument . ( As exercise , might try make function general , instead always convert AIFF , function convert file type specify new function argument . ) Note audio data format copyâthat , new file-mimics audio data format original input file . Most function self-explanatory specific Java Sound API . There , however , Java Sound API method use routine crucial sound file-type conversion . These method invocation find second try clause , , include following : AudioSystem.getAudioFileFormat : use determine whether input file already AIFF type . If , function quickly return ; otherwise conversion attempt proceeds . AudioSystem.isFileTypeSupported : Indicates whether system write file specify type contain audio data specify AudioInputStream . In example , method return true specified audio input file convert AIFF audio file format . If AudioFileFormat.Type.AIFF n't support , ConvertFileToAIFF issue warning input file ca n't convert , return . AudioSystem.write : use write audio data AudioInputStream inFileAIS output file outFile . The second method , isFileTypeSupported , help determine , advance write , whether particular input sound file convert particular output sound file type . In next section see , modification ConvertFileToAIFF sample routine , convert audio data format , well sound file type . Converting Audio Different Data Formats The previous section show use Java Sound API convert file one file format ( , one type sound file ) another . This section explore method enable audio data format conversion . In previous section , read data file arbitrary type , save AIFF file . Note although change type file use store data , n't change format audio data . ( Most common audio file type , include AIFF , contain audio data various format . ) So original file contain CD-quality audio data ( 16-bit sample size , 44.1-kHz sample rate , two channel ) , would output AIFF file . Now suppose want specify data format output file , well file type . For example , perhaps save many long file use Internet , concern amount disk space download time require file . We might choose create small AIFF file contain lower-resolution data-for example , data 8-bit sample size , 8-kHz sample rate , single channel . Without go much cod detail , let 's explore method use data format conversion , consider modification would need make ConvertFileToAIFF function accomplish new goal . The principal method audio data conversion , , find AudioSystem class . This method variant getAudioInputStream : AudioInputStream getAudioInputStream ( AudioFormat format , AudioInputStream stream ) This function return AudioInputStream result convert AudioInputStream , stream , use indicated AudioFormat , format . If conversion n't support AudioSystem , function throw IllegalArgumentException . To avoid , first check whether system perform required conversion invoke AudioSystem method : boolean isConversionSupported ( AudioFormat targetFormat , AudioFormat sourceFormat ) In case , 'd pass stream.getFormat ( ) second argument . To create specific AudioFormat object , use one two AudioFormat constructor show , either : AudioFormat ( float sampleRate , int sampleSizeInBits , int channel , boolean sign , boolean bigEndian ) construct AudioFormat linear PCM encoding give parameter , : AudioFormat ( AudioFormat.Encoding encoding , float sampleRate , int sampleSizeInBits , int channel , int frameSize , float frameRate , boolean bigEndian ) also construct AudioFormat , let specify encoding , frame size , frame rate , addition parameter . Now , arm method , let 's see might extend ConvertFileToAIFF function perform desired `` low-res '' audio data format conversion . First , would construct AudioFormat object describe desire output audio data format . The following statement would suffice could insert near top function : AudioFormat outDataFormat = new AudioFormat ( ( float ) 8000.0 , ( int ) 8 , ( int ) 1 , true , false ) ; Since AudioFormat constructor describe format 8-bit sample , last parameter constructor , specify whether sample big little endian , irrelevant . ( Big versus little endian issue sample size great single byte . ) The following example show would use new AudioFormat convert AudioInputStream , inFileAIS , create input file : AudioInputStream lowResAIS ; ( AudioSystem.isConversionSupported ( outDataFormat , inFileAIS.getFormat ( ) ) ) { lowResAIS = AudioSystem.getAudioInputStream ( outDataFormat , inFileAIS ) ; } It would n't matter much insert code , long construction inFileAIS . Without isConversionSupported test , call would fail throw IllegalArgumentException particular conversion request unsupported . ( In case , control would transfer appropriate catch clause function . ) So point process , would produce new AudioInputStream , result conversion original input file ( AudioInputStream form ) desire low-resolution audio data format define outDataFormat . The final step produce desired low-resolution , AIFF sound file would replace AudioInputStream parameter call AudioSystem.write ( , first parameter ) converted stream , lowResAIS , follow : AudioSystem.write ( lowResAIS , AudioFileFormat.Type.AIFF , outFile ) ; These modification early function produce something convert audio data file format specified input file , assume course system support conversion . Learning What Conversions Are Available Several AudioSystem method test parameter determine whether system support particular data format conversion file-writing operation . ( Typically , method pair another perform data conversion write file . ) One query method , AudioSystem.isFileTypeSupported , use example function , ConvertFileToAIFF , determine whether system capable write audio data AIFF file . A related AudioSystem method , getAudioFileTypes ( AudioInputStream ) , return complete list support file type give stream , array AudioFileFormat.Type instance . The method : BEGINCODE boolean isConversionSupported ( AudioFormat.Encoding encoding , AudioFormat format )