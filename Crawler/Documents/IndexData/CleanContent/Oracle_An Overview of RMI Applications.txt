RMI application often comprise two separate program , server client . A typical server program create remote object , make reference object accessible , wait client invoke method object . A typical client program obtain remote reference one remote object server invokes method . RMI provide mechanism server client communicate pas information back forth . Such application sometimes refer distributed object application . Distributed object application need following : Locate remote object . Applications use various mechanism obtain reference remote object . For example , application register remote object RMI 's simple naming facility , RMI registry . Alternatively , application pass return remote object reference part remote invocation . Communicate remote object . Details communication remote object handle RMI . To programmer , remote communication look similar regular Java method invocation . Load class definition object pass around . Because RMI enable object pass back forth , provide mechanism load object 's class definition well transmit object 's data . The following illustration depict RMI distribute application use RMI registry obtain reference remote object . The server call registry associate ( bind ) name remote object . The client look remote object name server 's registry invoke method . The illustration also show RMI system use exist web server load class definition , server client client server , object need . Advantages Dynamic Code Loading One central unique feature RMI ability download definition object 's class class define receiver 's Java virtual machine . All type behavior object , previously available single Java virtual machine , transmit another , possibly remote , Java virtual machine . RMI pass object actual class , behavior object change send another Java virtual machine . This capability enable new type behavior introduce remote Java virtual machine , thus dynamically extend behavior application . The compute engine example trail use capability introduce new behavior distribute program . Remote Interfaces , Objects , Methods Like Java application , distributed application build use Java RMI make interface class . The interface declare method . The class implement method declare interface , perhaps , declare additional method well . In distributed application , implementation might reside Java virtual machine others . Objects method invoke across Java virtual machine call remote object . An object becomes remote implement remote interface , following characteristic : A remote interface extend interface java.rmi.Remote . Each method interface declare java.rmi.RemoteException throw clause , addition application-specific exception . RMI treat remote object differently non-remote object object pass one Java virtual machine another Java virtual machine . Rather make copy implementation object receiving Java virtual machine , RMI pass remote stub remote object . The stub act local representative , proxy , remote object basically , client , remote reference . The client invoke method local stub , responsible carry method invocation remote object . A stub remote object implement set remote interface remote object implement . This property enable stub cast interface remote object implement . However , method define remote interface available call receive Java virtual machine . Creating Distributed Applications Using RMI Using RMI develop distributed application involve general step : Designing implement component distributed application . Compiling source . Making class network accessible . Starting application . Designing Implementing Application Components First , determine application architecture , include component local object component remotely accessible . This step include : Defining remote interface . A remote interface specify method invoke remotely client . Clients program remote interface , implementation class interface . The design interface include determination type object use parameter return value method . If interface class yet exist , need define well . Implementing remote object . Remote object must implement one remote interface . The remote object class may include implementation interface method available locally . If local class use parameter return value method , must implement well . Implementing client . Clients use remote object implement time remote interface define , include remote object deploy . Compiling Sources As Java program , use javac compiler compile source file . The source file contain declaration remote interface , implementation , server class , client class . Note : With version prior Java Platform , Standard Edition 5.0 , additional step require build stub class , use rmic compiler . However , step longer necessary . Making Classes Network Accessible In step , make certain class definition network accessible , definition remote interface associated type , definition class need download client server . Classes definition typically make network accessible web server . Starting Application Starting application include run RMI remote object registry , server , client . The rest section walk step use create compute engine . Building Generic Compute Engine This trail focus simple , yet powerful , distributed application call compute engine . The compute engine remote object server take task client , run task , return result . The task run machine server run . This type distributed application enable number client machine make use particularly powerful machine machine specialize hardware . The novel aspect compute engine task run need define compute engine write start . New kind task create time give compute engine run . The requirement task class implement particular interface . The code need accomplish task download RMI system compute engine . Then , compute engine run task , use resource machine compute engine run . The ability perform arbitrary task enable dynamic nature Java platform , extend network RMI . RMI dynamically load task code compute engine 's Java virtual machine run task without prior knowledge class implement task . Such application , ability download code dynamically , often call behavior-based application . Such application usually require full agent-enabled infrastructure . With RMI , application part basic mechanism distributed compute Java platform .