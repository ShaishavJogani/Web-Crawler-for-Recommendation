If paragraph styled text would like fit within specific width , use LineBreakMeasurer class . This class enable style text break line fit within particular visual advance . Each line return TextLayout object , represent unchangeable , styled character data . However , class also enable access layout information . The getAscent getDescent method TextLayout return information font use position line component . The text store AttributedCharacterIterator object font point size attribute store text . The following applet position paragraph styled text within component , use LineBreakMeasurer , TextLayout AttributedCharacterIterator . Note : If n't see applet running , need install least Java SE Development Kit ( JDK ) 7 release . The complete code applet LineBreakSample.java . The following code create iterator string vanGogh . The start end iterator retrieve new LineBreakMeasurer create iterator . AttributedCharacterIterator paragraph = vanGogh.getIterator ( ) ; paragraphStart = paragraph.getBeginIndex ( ) ; paragraphEnd = paragraph.getEndIndex ( ) ; FontRenderContext frc = g2d.getFontRenderContext ( ) ; lineMeasurer = new LineBreakMeasurer ( paragraph , frc ) ; The size window use determine line break . Also TextLayout object create line paragraph . // Set break width width Component . float breakWidth = ( float ) getSize ( ) .width ; float drawPosY = 0 ; // Set position index first // character paragraph . lineMeasurer.setPosition ( paragraphStart ) ; // Get line entire paragraph // display . ( lineMeasurer.getPosition ( ) < paragraphEnd ) { TextLayout layout = lineMeasurer.nextLayout ( breakWidth ) ; // Compute pen x position . If paragraph // right-to-left align // TextLayouts right edge panel . float drawPosX = layout.isLeftToRight ( ) ? 0 : breakWidth - layout.getAdvance ( ) ; // Move y-coordinate ascent // layout . drawPosY += layout.getAscent ( ) ; // Draw TextLayout ( drawPosX , drawPosY ) . layout.draw ( g2d , drawPosX , drawPosY ) ; // Move y-coordinate preparation next // layout . drawPosY += layout.getDescent ( ) + layout.getLeading ( ) ; } The TextLayout class frequently create directly application . However , class useful application need work directly text style ( text attribute ) apply specific position text . For example , draw single word italicize paragraph , application would need perform measurement set font substring . If text bidirectional , task easy correctly . Creating TextLayout object AttributedString object handle problem . Consult Java SE specification information TextLayout .