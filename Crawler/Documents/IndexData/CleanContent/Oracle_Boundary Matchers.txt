Until , 've interested whether match find location within particular input string . We never care string match take place . You make pattern match precise specify information boundary matcher . For example , maybe 're interested find particular word , appear beginning end line . Or maybe want know match take place word boundary , end previous match . The following table list explain boundary matcher . Boundary Construct Description ^ The beginning line $ The end line \b A word boundary \B A non-word boundary \A The beginning input \G The end previous match \Z The end input final terminator , \z The end input The following example demonstrate use boundary matcher ^ $ . As note , ^ match beginning line , $ match end . Enter regex : ^dog $ Enter input string search : dog I find text `` dog '' start index 0 end index 3 . Enter regex : ^dog $ Enter input string search : dog No match find . Enter regex : \s*dog $ Enter input string search : dog I find text `` dog '' start index 0 end index 15 . Enter regex : ^dog\w* Enter input string search : dogblahblah I find text `` dogblahblah '' start index 0 end index 11 . The first example successful pattern occupy entire input string . The second example fails input string contains extra whitespace beginning . The third example specifies expression allow unlimited white space , follow `` dog '' end line . The fourth example require `` dog '' present beginning line follow unlimited number word character . To check pattern begin end word boundary ( oppose substring within longer string ) , use \b either side ; example , \bdog\b Enter regex : \bdog\b Enter input string search : The dog play yard . I find text `` dog '' start index 4 end index 7 . Enter regex : \bdog\b Enter input string search : The doggie play yard . No match find . To match expression non-word boundary , use \B instead : Enter regex : \bdog\B Enter input string search : The dog play yard . No match find . Enter regex : \bdog\B Enter input string search : The doggie play yard . I find text `` dog '' start index 4 end index 7 . To require match occur end previous match , use \G : Enter regex : dog Enter input string search : dog dog I find text `` dog '' start index 0 end index 3 . I find text `` dog '' start index 4 end index 7 . Enter regex : \Gdog Enter input string search : dog dog I find text `` dog '' start index 0 end index 3 . Here second example find one match , second occurrence `` dog '' start end previous match .