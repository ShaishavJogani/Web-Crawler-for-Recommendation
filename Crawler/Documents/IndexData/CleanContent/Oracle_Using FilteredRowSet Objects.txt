A FilteredRowSet object let cut number row visible RowSet object work data relevant . You decide limit want set data ( want `` filter '' data ) apply filter FilteredRowSet object . In word , FilteredRowSet object make visible row data fit within limit set . A JdbcRowSet object , always connection data source , filtering query data source select column row want see . The query 's WHERE clause define filtering criterion . A FilteredRowSet object provide way disconnected RowSet object filtering without execute query data source , thus avoid get connection data source send query . For example , assume Coffee Break chain coffee house grow hundred store throughout United States America , list table call COFFEE_HOUSES . The owner want measure success store California coffee house comparison application require persistent connection database system . This comparison look profitability sell merchandise versus sell coffee drink plus various measure success , rank California store coffee drink sale , merchandise sale , total sale . Because table COFFEE_HOUSES hundred row , comparison faster easy amount data search cut row value column STORE_ID indicate California . This exactly kind problem FilteredRowSet object address provide following capability : Ability limit row visible accord set criterion Ability select data visible without connect data source The following topic cover : Defining Filtering Criteria Predicate Objects Creating FilteredRowSet Objects Creating Setting Predicate Objects Setting FilteredRowSet Objects New Predicate Objects Filter Data Further Updating FilteredRowSet Objects Inserting Updating Rows Removing All Filters All Rows Are Visible Deleting Rows Defining Filtering Criteria Predicate Objects To set criterion row FilteredRowSet object visible , define class implement Predicate interface . An object create class initialize following : The high end range within value must fall The low end range within value must fall The column name column number column value must fall within range value set high low boundary Note range value inclusive , mean value boundary include range . For example , range high 100 low 50 , value 50 consider within range . A value 49 . Likewise , 100 within range , 101 . In line scenario owner want compare California store , implementation Predicate interface filter Coffee Break coffee house locate California must write . There one right way , mean lot latitude implementation write . For example , could name class member whatever want implement constructor three evaluate method way accomplish desired result . The table list coffee house , name COFFEE_HOUSES , hundred row . To make thing manageable , example use table far row , enough demonstrate filtering . A value column STORE_ID int value indicate , among thing , state coffee house locate . A value begin 10 , example , mean state California . STORE_ID value begin 32 indicate Oregon , begin 33 indicate state Washington . The following class StateFilter implement Predicate interface : public class StateFilter implement Predicate { private int lo ; private int hi ; private String colName = null ; private int colNumber = -1 ; public StateFilter ( int lo , int hi , int colNumber ) { this.lo = lo ; this.hi = hi ; this.colNumber = colNumber ; } public StateFilter ( int lo , int hi , String colName ) { this.lo = lo ; this.hi = hi ; this.colName = colName ; } public boolean evaluate ( Object value , String columnName ) { boolean evaluation = true ; ( columnName.equalsIgnoreCase ( this.colName ) ) { int columnValue = ( ( Integer ) value ) .intValue ( ) ; ( ( columnValue > = this.lo ) & & ( columnValue < = this.hi ) ) { evaluation = true ; } else { evaluation = false ; } } return evaluation ; } public boolean evaluate ( Object value , int columnNumber ) { boolean evaluation = true ; ( this.colNumber == columnNumber ) { int columnValue = ( ( Integer ) value ) .intValue ( ) ; ( ( columnValue > = this.lo ) & & ( columnValue < = this.hi ) ) { evaluation = true ; } else { evaluation = false ; } } return evaluation ; } public boolean evaluate ( RowSet r ) { CachedRowSet fr = ( CachedRowSet ) r ; boolean evaluation = false ; try { int columnValue = -1 ; ( this.colNumber > 0 ) { columnValue = frs.getInt ( this.colNumber ) ; } else ( this.colName ! = null ) { columnValue = frs.getInt ( this.colName ) ; } else { return false ; } ( ( columnValue > = this.lo ) & & ( columnValue < = this.hi ) ) { evaluation = true ; } } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; return false ; } catch ( NullPointerException npe ) { System.err.println ( `` NullPointerException caught '' ) ; return false ; } return evaluation ; } } This simple implementation check value column specify either colName colNumber see range lo hi , inclusive . The following line code , FilteredRowSetSample , create filter allow row STORE_ID column value indicate value 10000 10999 , indicate California location : StateFilter myStateFilter = new StateFilter ( 10000 , 10999 , 1 ) ; Note StateFilter class define applies one column . It possible apply two column make parameter array instead single value . For example , constructor Filter object could look like following : public Filter2 ( Object [ ] lo , Object [ ] hi , Object [ ] colNumber ) { this.lo = lo ; this.hi = hi ; this.colNumber = colNumber ; } The first element colNumber object give first column value check first element lo first element hi . The value second column indicate colNumber check second element lo hi , . Therefore , number element three array . The following code implementation method evaluate ( RowSet r ) might look like Filter2 object , parameter array : public boolean evaluate ( RowSet r ) { CachedRowSet cr = ( CachedRowSet ) r ; boolean bool1 ; boolean bool2 ; ( int = 0 ; < colNumber.length ; i++ ) { ( ( rs.getObject ( colNumber [ ] > = lo [ ] ) & & ( rs.getObject ( colNumber [ ] < = hi [ ] ) { bool1 = true ; } else { bool2 = true ; } ( bool2 ) { return false ; } else { return true ; } } } The advantage use Filter2 implementation use parameter Object type check one column multiple column without write another implementation . However , must pass Object type , mean must convert primitive type Object type . For example , use int value lo hi , must convert int value Integer object pass constructor . String object already Object type , convert . Creating FilteredRowSet Objects The reference implementation FilteredRowSet interface , FilteredRowSetImpl , include default constructor , use following line code create empty FilteredRowSet object fr : . FilteredRowSet fr = new FilteredRowSetImpl ( ) ; The implementation extend BaseRowSet abstract class , fr object default property define BaseRowSet . This mean fr scrollable , updatable , show deleted row , escape processing turn , . Also , FilteredRowSet interface subinterface CachedRowSet , Joinable , WebRowSet , fr object capability . It operate disconnected RowSet object , part JoinRowSet object , read write XML format . Note : Alternatively , use constructor WebRowSet implementation JDBC driver . However , implementation RowSet interface differ reference implementation . These implementation different name constructor . For example , Oracle JDBC driver 's implementation WebRowSet interface name oracle.jdbc.rowset.OracleWebRowSet . You use instance RowSetFactory , create class RowSetProvider , create FilteredRowSet object . See Using RowSetFactory Interface Using JdbcRowSet Objects information . Like disconnected RowSet object , fr object must populate data tabular data source , relational database reference implementation . The following code fragment FilteredRowSetSample set property necessary connect database execute command . Note code use DriverManager class make connection , convenience . Usually , well use DataSource object register naming service implement Java Naming Directory Interface ( JNDI ) : frs.setCommand ( `` SELECT * FROM COFFEE_HOUSES '' ) ; frs.setUsername ( settings.userName ) ; frs.setPassword ( settings.password ) ; frs.setUrl ( settings.urlString ) ; The following line code populate fr objectwith data store COFFEE_HOUSE table : frs.execute ( ) ; The method execute kind thing background call RowSetReader object fr , create connection , execute command fr , populate frs data ResultSet object produce , close connection . Note table COFFEE_HOUSES row fr object could hold memory one time , CachedRowSet paging method would use . In scenario , Coffee Break owner would precede task office import download information store fr object coffee house comparison application . From , fr object operate independently without benefit connection data source . Creating Setting Predicate Objects Now FilteredRowSet object fr contain list Coffee Break establishment , set selection criterion narrow number row fr object visible . The following line code use StateFilter class define previously create object myStateFilter , check column STORE_ID determine store California ( store California ID number 10000 10999 , inclusive ) : StateFilter myStateFilter = new StateFilter ( 10000 , 10999 , 1 ) ; The following line set myStateFilter filter fr . frs.setFilter ( myStateFilter ) ; To actual filtering , call method next , reference implementation call appropriate version Predicate.evaluate method implement previously . If return value true , row visible ; return value false , row visible . Setting FilteredRowSet Objects New Predicate Objects Filter Data Further You set multiple filter serially . The first time call method setFilter pas Predicate object , apply filter criterion filter . After call method next row , make visible row satisfy filter , call setFilter , pass different Predicate object . Even though one filter set time , effect filter apply cumulatively . For example , owner retrieve list Coffee Break store California set stateFilter Predicate object fr . Now owner want compare store two California city , San Francisco ( SF table COFFEE_HOUSES ) Los Angeles ( LA table ) . The first thing write Predicate implementation filter store either SF LA : public class CityFilter implement Predicate { private String [ ] city ; private String colName = null ; private int colNumber = -1 ; public CityFilter ( String [ ] citiesArg , String colNameArg ) { this.cities = citiesArg ; this.colNumber = -1 ; this.colName = colNameArg ; } public CityFilter ( String [ ] citiesArg , int colNumberArg ) { this.cities = citiesArg ; this.colNumber = colNumberArg ; this.colName = null ; } public boolean evaluate Object valueArg , String colNameArg ) { ( colNameArg.equalsIgnoreCase ( this.colName ) ) { ( int = 0 ; < this.cities.length ; i++ ) { ( this.cities [ ] .equalsIgnoreCase ( ( String ) valueArg ) ) { return true ; } } } return false ; } public boolean evaluate ( Object valueArg , int colNumberArg ) { ( colNumberArg == this.colNumber ) { ( int = 0 ; < this.cities.length ; i++ ) { ( this.cities [ ] .equalsIgnoreCase ( ( String ) valueArg ) ) { return true ; } } } return false ; } public boolean evaluate ( RowSet r ) { ( rs == null ) return false ; try { ( int = 0 ; < this.cities.length ; i++ ) { String cityName = null ; ( this.colNumber > 0 ) { cityName = ( String ) rs.getObject ( this.colNumber ) ; } else ( this.colName ! = null ) { cityName = ( String ) rs.getObject ( this.colName ) ; } else { return false ; } ( cityName.equalsIgnoreCase ( city [ ] ) ) { return true ; } } } catch ( SQLException e ) { return false ; } return false ; } } The following code fragment FilteredRowSetSample set new filter iterate row fr , print row CITY column contain either SF LA . Note frs currently contain row store California , criterion Predicate object state still effect filter change another Predicate object . The code follow set filter CityFilter object city . The CityFilter implementation use array parameter constructor illustrate : public void testFilteredRowSet ( ) { FilteredRowSet frs = null ; StateFilter myStateFilter = new StateFilter ( 10000 , 10999 , 1 ) ; String [ ] cityArray = { `` SF '' , `` LA '' } ; CityFilter myCityFilter = new CityFilter ( cityArray , 2 ) ; try { frs = new FilteredRowSetImpl ( ) ; frs.setCommand ( `` SELECT * FROM COFFEE_HOUSES '' ) ; frs.setUsername ( settings.userName ) ; frs.setPassword ( settings.password ) ; frs.setUrl ( settings.urlString ) ; frs.execute ( ) ; System.out.println ( `` \nBefore filter : '' ) ; FilteredRowSetSample.viewTable ( this.con ) ; System.out.println ( `` \nSetting state filter : '' ) ; frs.beforeFirst ( ) ; frs.setFilter ( myStateFilter ) ; this.viewFilteredRowSet ( fr ) ; System.out.println ( `` \nSetting city filter : '' ) ; frs.beforeFirst ( ) ; frs.setFilter ( myCityFilter ) ; this.viewFilteredRowSet ( fr ) ; } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } } The output contain row store San Francisco , California Los Angeles , California . If row CITY column contain LA STORE_ID column contain 40003 , would include list already filter filter set state . ( 40003 range 10000 10999 . ) Updating FilteredRowSet Objects You make change FilteredRowSet object change violate filter criterion currently effect . For example , insert new row change one value exist row new value value within filtering criterion . Inserting Updating Rows Assume two new Coffee Break coffee house open owner want add list coffee house . If row insert meet cumulative filtering criterion effect , block add . The current state fr object StateFilter object set CityFilter object set . As result , fr currently make visible row satisfy criterion filter . And , equally important , add row fr object unless satisfy criterion filter . The following code fragment attempt insert two new row fr object , one row value STORE_ID CITY columns meet criterion , one row value STORE_ID pass filter value CITY column : frs.moveToInsertRow ( ) ; frs.updateInt ( `` STORE_ID '' , 10101 ) ; frs.updateString ( `` CITY '' , `` SF '' ) ; frs.updateLong ( `` COF_SALES '' , 0 ) ; frs.updateLong ( `` MERCH_SALES '' , 0 ) ; frs.updateLong ( `` TOTAL_SALES '' , 0 ) ; frs.insertRow ( ) ; frs.updateInt ( `` STORE_ID '' , 33101 ) ; frs.updateString ( `` CITY '' , `` SF '' ) ; frs.updateLong ( `` COF_SALES '' , 0 ) ; frs.updateLong ( `` MERCH_SALES '' , 0 ) ; frs.updateLong ( `` TOTAL_SALES '' , 0 ) ; frs.insertRow ( ) ; frs.moveToCurrentRow ( ) ; If iterate fr object use method next , would find row new coffee house San Francisco , California , store San Francisco , Washington . Removing All Filters All Rows Are Visible The owner add store Washington nullify filter . With filter set , row fr object visible , store location add list store . The following line code unsets current filter , effectively nullify Predicate implementation previously set fr object . frs.setFilter ( null ) ; Deleting Rows If owner decide close sell one Coffee Break coffee house , owner want delete COFFEE_HOUSES table . The owner delete row underperforming coffee house long row visible . For example , give method setFilter call argument null , filter set fr object . This mean row visible therefore delete . However , StateFilter object myStateFilter set , filter state California , store locate California could delete . When CityFilter object myCityFilter set fr object , coffee house San Francisco , California Los Angeles , California could delete row visible .