In order able create digital signature , need private key . ( Its correspond public key need order verify authenticity signature . ) In case key pair ( private key correspond public key ) already available file . In case program import use private key signing , show Weaknesses Alternatives . In case program need generate key pair . A key pair generate use KeyPairGenerator class . In example generate public/private key pair Digital Signature Algorithm ( DSA ) . You generate key 1024-bit length . Generating key pair require several step : Create Key Pair Generator The first step get key-pair generator object generate key DSA signature algorithm . As engine class , way get KeyPairGenerator object particular type algorithm call getInstance static factory method KeyPairGenerator class . This method two form , hava String algorithm first argument ; one form also String provider second argument . A caller may thus optionally specify name provider , guarantee implementation algorithm request name provider . The sample code lesson always specify default SUN provider build JDK . Put following statement else try { line file create previous step , Prepare Initial Program Structure : KeyPairGenerator keyGen = KeyPairGenerator.getInstance ( `` DSA '' , `` SUN '' ) ; Initialize Key Pair Generator The next step initialize key pair generator . All key pair generator share concept keysize source randomness . The KeyPairGenerator class initialize method take two type argument . The keysize DSA key generator key length ( bit ) , set 1024 . The source randomness must instance SecureRandom class provide cryptographically strong random number generator ( RNG ) . For information SecureRandom , see SecureRandom API Specification Java Cryptography Architecture Reference Guide . The following example request instance SecureRandom use SHA1PRNG algorithm , provide built-in SUN provider . The example pass SecureRandom instance key-pair generator initialization method . SecureRandom random = SecureRandom.getInstance ( `` SHA1PRNG '' , `` SUN '' ) ; keyGen.initialize ( 1024 , random ) ; Some situation require strong random value , create high-value long-lived secret like RSA public private key . To help guide application select suitable strong SecureRandom implementation , start JDK 8 Java distribution include list know strong SecureRandom implementation securerandom.strongAlgorithms property java.security.Security class . When create data , consider use SecureRandom.getInstanceStrong ( ) , obtain instance know strong algorithm . Generate Pair Keys The final step generate key pair store key PrivateKey PublicKey object . KeyPair pair = keyGen.generateKeyPair ( ) ; PrivateKey priv = pair.getPrivate ( ) ; PublicKey pub = pair.getPublic ( ) ;