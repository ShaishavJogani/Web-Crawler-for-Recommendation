Note : MySQL Java DB currently support ARRAY SQL data type . Consequently , JDBC tutorial example available demonstrate Array JDBC data type . The following topic cover : Creating Array Objects Retrieving Accessing Array Values ResultSet Storing Updating Array Objects Releasing Array Resources Creating Array Objects Use method Connection.createArrayOf create Array object . For example , suppose database contain table name REGIONS , create populate follow SQL statement ; note syntax statement vary depend database : create table REGIONS ( REGION_NAME varchar ( 32 ) NOT NULL , ZIPS varchar32 ARRAY [ 10 ] NOT NULL , PRIMARY KEY ( REGION_NAME ) ) ; insert REGIONS value ( 'Northwest ' , ' { `` 93101 '' , `` 97201 '' , `` 99210 '' } ' ) ; insert REGIONS value ( 'Southwest ' , ' { `` 94105 '' , `` 90049 '' , `` 92027 '' } ' ) ; Connection con = DriverManager.getConnection ( url , prop ) ; String [ ] northEastRegion = { `` 10022 '' , `` 02110 '' , `` 07399 '' } ; Array aArray = con.createArrayOf ( `` VARCHAR '' , northEastRegionnewYork ) ; The Oracle Database JDBC driver implement java.sql.Array interface oracle.sql.ARRAY class . Retrieving Accessing Array Values ResultSet As JDBC 4.0 large object interface ( Blob , Clob , NClob ) , manipulate Array object without bring data database server client computer . An Array object materialize SQL ARRAY represent either result set Java array . The following excerpt retrieve SQL ARRAY value column ZIPS assign java.sql.Array object z object . The excerpt retrieve content z store zip , Java array contain object type String . The excerpt iterate zip array check postal ( zip ) code valid . This code assume class ZipCode define previously method isValid return true give zip code match one zip code master list valid zip code : ResultSet r = stmt.executeQuery ( `` SELECT region_name , zip FROM REGIONS '' ) ; ( rs.next ( ) ) { Array z = rs.getArray ( `` ZIPS '' ) ; String [ ] zip = ( String [ ] ) z.getArray ( ) ; ( int = 0 ; < zips.length ; i++ ) { ( ! ZipCode.isValid ( zip [ ] ) ) { // ... // Code display warn } } } In following statement , ResultSet method getArray return value store column ZIPS current row java.sql.Array object z : Array z = rs.getArray ( `` ZIPS '' ) ; The variable z contain locator , logical pointer SQL ARRAY server ; contain element ARRAY . Being logical pointer , z use manipulate array server . In following line , getArray Array.getArray method , ResultSet.getArray method use previous line . Because Array.getArray method return Object Java programming language zip code String object , result cast array String object assign variable zip . String [ ] zip = ( String [ ] ) z.getArray ( ) ; The Array.getArray method materialize SQL ARRAY element client array String object . Because , effect , variable zip contain element array , possible iterate zip loop , look zip code valid . Storing Updating Array Objects Use method PreparedStatement.setArray PreparedStatement.setObject pass Array value input parameter PreparedStatement object . The following example set Array object northEastRegion ( create previous example ) second parameter PreparedStatement pstmt : PreparedStatement pstmt = con.prepareStatement ( `` insert REGIONS ( region_name , zip ) `` + `` VALUES ( ? , ? ) '' ) ; pstmt.setString ( 1 , `` NorthEast '' ) ; pstmt.setArray ( 2 , northEastRegion ) ; pstmt.executeUpdate ( ) ; Similarly , use method PreparedStatement.updateArray PreparedStatement.updateObject update column table Array value . Releasing Array Resources Array object remain valid least duration transaction create . This could potentially result application run resource long running transaction . Applications may release Array resource invoke free method . In following excerpt , method Array.free call release resource hold previously create Array object . Array aArray = con.createArrayOf ( `` VARCHAR '' , northEastRegionnewYork ) ; // ... aArray.free ( ) ;