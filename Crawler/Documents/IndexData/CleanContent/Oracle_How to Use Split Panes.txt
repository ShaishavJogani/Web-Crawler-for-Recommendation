A JSplitPane display two component , either side side one top . By drag divider appear component , user specify much split pane 's total area go component . You divide screen space among three component put split pane inside split pane , describe Nesting Split Panes . Instead add component interest directly split pane , often put component scroll pane . You put scroll pan split pane . This allow user view part component interest , without require component take lot screen space adapt display vary amount screen space . Here 's picture application use split pane display list image side side : Try : Click Launch button run SplitPaneDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Drag dimpled line divide list image left right . Try drag divider way window 's edge . Click tiny arrow divider hide/expand left right component . Below code SplitPaneDemo create set split pane . //Create split pane two scroll pane . splitPane = new JSplitPane ( JSplitPane.HORIZONTAL_SPLIT , listScrollPane , pictureScrollPane ) ; splitPane.setOneTouchExpandable ( true ) ; splitPane.setDividerLocation ( 150 ) ; //Provide minimum size two component split pane Dimension minimumSize = new Dimension ( 100 , 50 ) ; listScrollPane.setMinimumSize ( minimumSize ) ; pictureScrollPane.setMinimumSize ( minimumSize ) ; The constructor use example take three argument . The first indicate split direction . The argument two component put split pane . Refer Setting Components Split Pane information JSplitPane method set component dynamically . The split pane example split horizontally — two component appear side side — specify JSplitPane.HORIZONTAL_SPLIT argument constructor . Split pane provide one option , specify JSplitPane.VERTICAL_SPLIT , place one component . You change split direction split pane create setOrientation method . Two small arrow appear top divider example 's split pane . These arrow let user collapse ( expand ) either component single click . The current look feel determines whether control appear default . In Java look feel , turn default . ( Note look feel support . ) The example turn use setOneTouchExpandable method . The range split pane 's divider determine part minimum size component within split pane . See Positioning Divider Restricting Range detail . The rest section cover topic : Setting Components Split Pane Positioning Divider Restricting Range Nesting Split Panes The Split Pane API Examples Use Split Panes Setting Components Split Pane A program set split pane 's two component dynamically four method : setLeftComponent setRightComponent setTopComponent setBottomComponent You use method time regardless split pane 's current split direction . Calls setLeftComponent setTopComponent equivalent set specified component top left position , depend split pane 's current split orientation . Similarly , call setRightComponent setBottomComponent equivalent . These method replace whatever component already position new one . Like container , JSplitPane support add method . Split pane put first component add left top position . The danger use add inadvertantly call many time , case split pane 's layout manager throw rather esoteric-looking exception . If use add method split pane already populate , first need remove exist component remove . If put one component split pane , divider stick right side bottom split pane , depend split direction . Positioning Divider Restricting Its Range To make split pane work well , often need set minimum size component split pane , well preferred size either split pane contained component . Choosing size set art require understand split pane 's preferred size divider location determine . Before get detail , let 's take another look SplitPaneDemo . Or , 're hurry , skip list rule . Try : Click Launch button run SplitPaneDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Because size demo 's frame set use pack method , split pane preferred size , SplitPaneDemo happen set explicitly . The divider automatically place left component preferred width remain space go right component . Make window wider . The divider stay , extra space go component right . Make window noticeably narrow first come — perhaps twice wide left component . Again , left component 's size divider position stay . Only size right component change . Make window narrow possible . Assuming window use Java look feel-provided decoration , size window small split pane 's minimum size , determine minimum size component contain split pane . SplitPaneDemo set minimum size contain component explicitly . Make window wider , drag divider far go right . The divider go far right component 's minimum size allows . If drag divider left , 'll see also respect left component 's minimum size . Now 've see default behavior split pane , tell 's happen behind scene affect . In discussion , refer component 's prefer minimum size , often mean preferred minimum width component split pane horizontal , preferred minimum height split pane vertical . By default , split pane 's preferred size divider location initialize two component split pane preferred size . If split pane n't display preferred size program n't set divider 's location explicitly , initial position divider ( thus size two component ) depend split pane property call resize weight . If split pane initially preferred size big , contain component start preferred size , adjust resize weight . If split pane initially small display component preferred size , start minimum size , adjust resize weight . A split pane 's resize weight value 0.0 1.0 determine space distribute two contain component split pane 's size set — whether programmatically user resize split pane ( enlarge containing window , example ) . The resize weight split pane 0.0 default , indicate left top component 's size fix , right bottom component adjust size fit remain space . Setting resize weight 0.5 split extra miss space evenly two component . Setting resize weight 1.0 make right bottom component 's size remain fixed . The resize weight effect , however , user drag divider . The user drag divider position long neither contain component go minimum size . If divider one-touch button , user use make divider move completely one side — matter minimum size component . Now know factor affect split pane 's size divider location , rule make work well : To ensure divider drag split pane preferred size , make sure minimum size one contained component small contained component 's preferred size . You set minimum size component either invoke setMinimumSize override getMinimumSize method . For example , want user able drag divider way side : Dimension minimumSize = new Dimension ( 0 , 0 ) ; leftComponent.setMinimumSize ( minimumSize ) ; rightComponent.setMinimumSize ( minimumSize ) ; To guarantee contained component appear , make sure either split pane initially preferred size , minimum size contained component great zero . This usually happen splitpane give preferred size , depend upon layout manager contain split pane . Another option explicitly set preferred size split pane large size contained component . If want bottom right component stay size top left component flexible split pane get big , set resize weight 1.0 . You invoke setResizeWeight : splitPane.setResizeWeight ( 1.0 ) ; If want half split pane share split pane 's extra removed space , set resize weight 0.5 : splitPane.setResizeWeight ( 0.5 ) ; Make sure component contain split pane reasonable preferred size . If component panel use layout manager , generally use value return . If component scroll pane , choice . You invoke setPreferredSize method scroll pane , invoke appropriate method component scroll pane ( setVisibleRowCount method JList JTree ) . Make sure component contain split pane display reasonably vary amount space . For example , panel contain multiple component use layout manager use extra space reasonable way . If want set size contained component something preferred size , use setDividerLocation method . For example , make left component 150 pixel wide : splitPane.setDividerLocation ( 150 + splitPane.getInsets ( ) .left ) ; Although split pane best honor initial divider location ( 150 case ) , user drag divider may longer possible drag programmatically specify size . To make right component 150 pixel wide : splitPane.setDividerLocation ( splitPane.getSize ( ) .width - splitPane.getInsets ( ) .right - splitPane.getDividerSize ( ) - 150 ) ; If split pane already visible , set divider location percentage split pane . For example , make 25 % space go left/top : splitPane.setDividerLocation ( 0.25 ) ; Note implement term current size therefore really ony useful split pane visible . To lay split pane come , likely reposition divider process , invoke resetToPreferredSizes ( ) split pane . Note : Just change contained component ' prefer size — even invoke revalidate afterwards — enough cause split pane lay . You must invoke resetToPreferredSizes well . The following snapshot show example name SplitPaneDividerDemo demonstrate split pane component size divider placement . Like SplitPaneDemo , SplitPaneDividerDemo feature horizontal split pane one-touch button . SplitPaneDividerDemo following additional feature : The split pane 's resize weight explicitly set ( 0.5 ) . The split pane display default preferred size . A Reset button bottom window invoke resetToPreferredSizes split pane . The component split pane instance custom JComponent subclass call SizeDisplayer . A SizeDisplayer display optional text background fade ( also optional ) image . More importantly , rectangle show preferred minimum size . SplitPaneDividerDemo set SizeDisplayers equal prefer size ( due equally large image show ) unequal minimum size . Try : Click Launch button run SplitPaneDividerDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Because size demo 's frame set use pack method , split pane preferred size , default big enough SizeDisplayers preferred size . The preferred size SizeDisplayer indicate red rectangle . The divider automatically place component preferred width . Make window wider . Because split pane 's resize weight 0.5 , extra space divide evenly left right component . The divider move accordingly . Make window narrow possible . Assuming window use Java look feel-provided decoration , let size window small split pane 's minimum size , determine minimum size SizeDisplayers contain . The minimum size SizeDisplayer indicate bright blue rectangle . Make window bit wider , drag divider far go right . The divider go far right component 's minimum size allows . After make sure split pane small preferred size , click Reset button . Note two SizeDisplayers display different size , even though application come equal size . The reason although preferred size equal , minimum size . Because split pane display preferred size large , lay use minimum size . The leftover space divide equally component , since split pane 's resize weight 0.5 . Widen split pane large enough SizeDisplayers show preferred size , click Reset button . The divider place middle , component size . Here code create GUI SplitPaneDividerDemo : public class SplitPaneDividerDemo extend JPanel ... { private JSplitPane splitPane ; public SplitPaneDividerDemo ( ) { super ( new BorderLayout ( ) ) ; Font font = new Font ( `` Serif '' , Font.ITALIC , 24 ) ; ImageIcon icon = createImageIcon ( `` images/Cat.gif '' ) ; SizeDisplayer sd1 = new SizeDisplayer ( `` leave '' , icon ) ; sd1.setMinimumSize ( new Dimension ( 30,30 ) ) ; sd1.setFont ( font ) ; icon = createImageIcon ( `` images/Dog.gif '' ) ; SizeDisplayer sd2 = new SizeDisplayer ( `` right '' , icon ) ; sd2.setMinimumSize ( new Dimension ( 60,60 ) ) ; sd2.setFont ( font ) ; splitPane = new JSplitPane ( JSplitPane.HORIZONTAL_SPLIT , sd1 , sd2 ) ; splitPane.setResizeWeight ( 0.5 ) ; splitPane.setOneTouchExpandable ( true ) ; splitPane.setContinuousLayout ( true ) ; add ( splitPane , BorderLayout.CENTER ) ; add ( createControlPanel ( ) , BorderLayout.PAGE_END ) ; } ... } The code fairly self explanatory , except perhaps call setContinuousLayout . Setting continuousLayout property true make split pane 's content paint continuously user move divider . Continuous layout , default , negative performance impact . However , make sense use demo , split pane 's component up-to-date possible improve user experience . Nesting Split Panes Here 's picture program achieve three-way split nest one split pane inside another : If top portion split pane look familiar , program put split pane create SplitPaneDemo inside second split pane . A simple JLabel component second split pane . This practical use nested split pane , get point across . Click Launch button run SplitPaneDemo2 use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Here 's interesting part code , find SplitPaneDemo2.java : //Create instance SplitPaneDemo SplitPaneDemo splitPaneDemo = new SplitPaneDemo ( ) ; JSplitPane top = splitPaneDemo.getSplitPane ( ) ; ... //Create regular old label label = new JLabel ( `` Click image name list . `` , JLabel.CENTER ) ; //Create split pane put `` top '' ( split pane ) //and JLabel instance . JSplitPane splitPane = new JSplitPane ( JSplitPane.VERTICAL_SPLIT , top , label ) ; Refer Solving Common Component Problems information fix border problem appear nest split pane . The Split Pane API The following table list commonly use JSplitPane constructor method . Other method likely invoke JSplitPane object setPreferredSize superclass provide . See The JComponent API table commonly use inherit method . The API use list fall category : Setting Split Pane Managing Split Pane 's Contents Positioning Divider Setting Up Split Pane Method Constructor Purpose JSplitPane ( ) JSplitPane ( int ) JSplitPane ( int , boolean ) JSplitPane ( int , Component , Component ) JSplitPane ( int , boolean , Component , Component ) Create split pane . When present , int parameter indicate split pane 's orientation , either HORIZONTAL_SPLIT ( default ) VERTICAL_SPLIT . The boolean parameter , present , set whether component continually repaint user drag split pane . If leave unspecified , option ( call continuous layout ) turn . The Component parameter set initial left right , top bottom component , respectively . void setOrientation ( int ) int getOrientation ( ) Set get split pane 's orientation . Use either HORIZONTAL_SPLIT VERTICAL_SPLIT define JSplitPane . If leave unspecified , split pane horizontally split . void setDividerSize ( int ) int getDividerSize ( ) Set get size divider pixel . void setContinuousLayout ( boolean ) boolean isContinuousLayout ( ) Set get whether split pane 's component continually lay paint user drag divider . By default , continuous layout turn . void setOneTouchExpandable ( boolean ) boolean isOneTouchExpandable ( ) Set get whether split pane display control divider expand/collapse divider . The default depend look feel . In Java look feel , default . Managing Split Pane 's Contents Method Purpose void setTopComponent ( Component ) void setBottomComponent ( Component ) void setLeftComponent ( Component ) void setRightComponent ( Component ) Component getTopComponent ( ) Component getBottomComponent ( ) Component getLeftComponent ( ) Component getRightComponent ( ) Set get indicated component . Each method work regardless split pane 's orientation . Top leave equivalent , bottom right equivalent . void remove ( Component ) void removeAll ( ) Remove indicated component ( ) split pane . void add ( Component ) Add component split pane . You add two component split pane . The first component add top/left component . The second component add bottom/right component . Any attempt add component result exception . Positioning Divider Method Purpose void setDividerLocation ( double ) void setDividerLocation ( int ) int getDividerLocation ( ) Set get current divider location . When set divider location , specify new location percentage ( double ) pixel location ( int ) . void resetToPreferredSizes ( ) Move divider component preferred size . This split pane divide startup , unless specify otherwise . void setLastDividerLocation ( int ) int getLastDividerLocation ( ) Set get previous position divider . int getMaximumDividerLocation ( ) int getMinimumDividerLocation ( ) Get minimum maximum location divider . These set implicitly set minimum size split pane 's two component . void setResizeWeight ( float ) float getResizeWeight ( ) Set get resize weight split pane , value 0.0 ( default ) 1.0 . See Positioning Divider Restricting Its Range explanation example use resize weight . Examples Use Split Panes This table show example use JSplitPane example describe . Example Where Described Notes SplitPaneDemo This page How Use Lists Shows split pane horizontal split . SplitPaneDividerDemo This page Demonstrates component size information resize weight use position divider . SplitPaneDemo2 This page Puts split pane within split pane create three-way split . TreeDemo How Use Trees Uses split pane vertical split separate tree ( scroll pane ) editor pane ( scroll pane ) . Does use one-touch expandable feature . TextComponentDemo Text Component Features Uses split pane vertical split separate text pane text area , scroll pane . TextSamplerDemo Text Component Features Uses split pane vertical split resize weight 0.5 separate text pane editor pane , scroll pane . The split pane right half container fairly complicate layout . Layout manager GridLayout BorderLayout use , along split pane 's resize weight , ensure component scroll pane share extra space . ListSelectionDemo How Write List Selection Listener Uses split pane vertical split separate upper pane , contain list table ( scroll pane ) , low pane contain combo box scroll pane . The low pane use border layout keep combo box small scroll pane greedy space .