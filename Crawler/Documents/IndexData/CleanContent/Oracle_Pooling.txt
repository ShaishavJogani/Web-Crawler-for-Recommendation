The Connection Creation section describe connection create . It describe several Context instance share connection . Another type connection share support LDAP service provider call connection pooling . In type sharing , LDAP service provider maintain pool ( possibly ) previously use connection assign Context instance need . When Context instance connection ( close garbage collect ) , connection return pool future use . Note form sharing sequential : connection retrieve pool , use , return pool , , retrieve pool another Context instance . The pool connection maintain per Java runtime system . For situation , connection pooling improve performance significantly . For example , one connection require process search response contain four referral reference LDAP server connection pooling use . Without connection pooling , scenario would require four separate connection . The rest lesson describe detail use connection pooling . How Use Connection Pooling You request connection pooling add property , `` com.sun.jndi.ldap.connect.pool '' environment property pass initial context constructor . Here example . // Set environment create initial context Hashtable env = new Hashtable ( 11 ) ; env.put ( Context.INITIAL_CONTEXT_FACTORY , `` com.sun.jndi.ldap.LdapCtxFactory '' ) ; env.put ( Context.PROVIDER_URL , `` ldap : //localhost:389/o=JNDITutorial '' ) ; // Enable connection pool env.put ( `` com.sun.jndi.ldap.connect.pool '' , `` true '' ) ; // Create one initial context ( Get connection pool ) DirContext ctx = new InitialDirContext ( env ) ; // something useful ctx // Close context 're ctx.close ( ) ; // Return connection pool // Create another initial context ( Get connection pool ) DirContext ctx2 = new InitialDirContext ( env ) ; // something useful ctx2 // Close context 're ctx2.close ( ) ; // Return connection pool This example create two initial context succession . The second initial context reuse connection use first . To run program observe connection retrieve return pool , use following command line . # java -Dcom.sun.jndi.ldap.connect.pool.debug=fine UsePool This produce output look follow . Create com.sun.jndi.ldap.LdapClient @ 5d173 [ localhost:389 ] Use com.sun.jndi.ldap.LdapClient @ 5d173 { ou=ou : NewHires , objectclass=objectClass : top , organizationalUnit } Release com.sun.jndi.ldap.LdapClient @ 5d173 Use com.sun.jndi.ldap.LdapClient @ 5d173 { ou=ou : People , objectclass=objectClass : top , organizationalunit } Release com.sun.jndi.ldap.LdapClient @ 5d173 You decide use pooling include omit `` com.sun.jndi.ldap.connect.pool '' property , thus control pool per-context basis . In previous example , remove property environment property create second initial context , second initial context would use pooled connection . The LDAP provider keep track whether connection use indication application . It assume application maintain open context handle use connection . Therefore , order LDAP provider properly manage pooled connection , must diligent invoke Context.close ( ) context long need . Bad connection automatically detect remove pool LDAP provider . The probability context end bad connection regardless whether connection pooling use . Creation Timeout The pool connection maintain LDAP service provider may limit size ; describe detail Connection Pooling Configuration section . When connection pooling enable pooled connection available , client application block , wait available connection . You use `` com.sun.jndi.ldap.connect.timeout '' environment property specify long wait pooled connection . If omit property , application wait indefinitely . This property also use specify timeout period establishment LDAP connection , describe Connection Creation section . When Not Use Pooling ! ! Pooled connection intend reuse . Therefore , plan perform operation Context instance might alter underlying connection 's state , use connection pool Context instance . For example , plan invoke Start TLS extend operation Context instance , plan change security-related property ( `` java.naming.security.principal '' `` java.naming.security.protocol '' ) initial context create , use connection pool Context instance LDAP provider track state change . If use connection pool situation , might compromise security application .