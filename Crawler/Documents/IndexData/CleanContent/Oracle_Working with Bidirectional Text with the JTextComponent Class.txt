This section discuss work bidirectional text JTextComponent class . Bidirectional text text contain text run two direction , left-to-right right-to-left . An example bidirectional text Arabic text ( run right-to-left ) contain number ( run left-to-right ) . It difficult display manage bidirectional text ; however JTextComponent handle issue . The following topic cover : Determining Directionality Bidirectional Text Displaying Moving Carets Hit Testing Highlighting Selections Setting Component Orientation For information issue , want control handle issue , see Working Bidirectional Text 2D Graphics trail . Determining Directionality Bidirectional Text The sample BidiTextComponentDemo.java , base TextComponentDemo.java , display bidirectional text JTextPane object . In case , Java platform determine directionality bidirectional Unicode text : Explicitly Specifying Text Run Direction JTextComponent Objects You specify run direction Document object JTextComponent object . For example , following statement specifies text JTextPane object textPane run right-to-left : textPane.getDocument ( ) .putProperty ( TextAttribute.RUN_DIRECTION , TextAttribute.RUN_DIRECTION_RTL ) ; Alternatively , specify component orientation particular Swing component base locale . For example , following statement specify component orientation object textPane base ar-SA locale : Locale arabicSaudiArabia = new Locale.Builder ( ) .setLanguage ( `` ar '' ) .setRegion ( `` SA '' ) .build ( ) ; textPane.setComponentOrientation ( ComponentOrientation.getOrientation ( arabicSaudiArabia ) ) ; Because run direction Arabic language right-to-left , run direction text contain textPane object right-to-left also . See section Setting Component Orientation information . Displaying Moving Carets In editable text , caret use graphically represent current insertion point , position text new character insert . In BidiTextComponentDemo.java sample , caret contain small triangle point toward direction inserted character display . By default , JTextComponent object create keymap ( type Keymap ) share JTextComponent instance default keymap . A keymap let application bind key stroke action . A default keymap ( JTextComponent object support caret movement ) include binding caret movement forward backward left right arrow key , support caret movement bidirectional text . Hit Testing Often , location device space must convert text offset . For example , user click mouse selectable text , location mouse convert text offset use one end selection range . Logically , inverse position caret . You attach caret listener instance JTextComponent . A caret listener enables handle caret event , occur caret move selection text component change . You attach caret listener addCaretListener method . See How Write Caret Listener information . Highlighting Selections A select range character represent graphically highlight region , area glyph display inverse video different background color . JTextComponent object implement logical highlighting . This mean select character always contiguous text model , highlight region allow discontiguous . The following example logical highlighting : Setting Component Orientation Swing 's layout manager understand locale affect UI ; necessary create new layout locale . For example , locale text flow right leave , layout manager arrange component orientation . The sample InternationalizedMortgageCalculator.java localize English , United States ; English , United Kingdom ; French , France ; French , Canada ; Arabic , Saudi Arabia . The following use en-US locale : The following use ar-SA locale : Note component lay direction corresponding locale : left-to-right en-US right-to-left ar-SA . The InternationalizedMortgageCalculator.java sample call method applyComponentOrientation getOrientation specify direction component locale : private static JFrame frame ; // ... private static void createAndShowGUI ( Locale currentLocale ) { // Create set window . // ... // Add content window . // ... frame.applyComponentOrientation ( ComponentOrientation.getOrientation ( currentLocale ) ) ; // ... } The sample InternationalizedMortgageCalculator.java require following resource file : resources/Resources.properties resources/Resources_ar.properties resources/Resources_fr.properties