The Simple Assignment Operator One common operator 'll encounter simple assignment operator `` = '' . You saw operator Bicycle class ; assign value right operand left : int cadence = 0 ; int speed = 0 ; int gear = 1 ; This operator also use object assign object reference , discuss Creating Objects . The Arithmetic Operators The Java programming language provide operator perform addition , subtraction , multiplication , division . There 's good chance 'll recognize counterpart basic mathematics . The symbol might look new `` % '' , divide one operand another return remainder result . Operator Description +Additive operator ( also use String concatenation ) -Subtraction operator *Multiplication operator /Division operator % Remainder operator The following program , ArithmeticDemo , test arithmetic operator . class ArithmeticDemo { public static void main ( String [ ] args ) { int result = 1 + 2 ; // result 3 System.out.println ( `` 1 + 2 = `` + result ) ; int original_result = result ; result = result - 1 ; // result 2 System.out.println ( original_result + `` - 1 = `` + result ) ; original_result = result ; result = result * 2 ; // result 4 System.out.println ( original_result + `` * 2 = `` + result ) ; original_result = result ; result = result / 2 ; // result 2 System.out.println ( original_result + `` / 2 = `` + result ) ; original_result = result ; result = result + 8 ; // result 10 System.out.println ( original_result + `` + 8 = `` + result ) ; original_result = result ; result = result % 7 ; // result 3 System.out.println ( original_result + `` % 7 = `` + result ) ; } } This program print following : 1 + 2 = 3 3 - 1 = 2 2 * 2 = 4 4 / 2 = 2 2 + 8 = 10 10 % 7 = 3 You also combine arithmetic operator simple assignment operator create compound assignment . For example , x+=1 ; x=x+1 ; increment value x 1 . The + operator also use concatenate ( join ) two string together , show following ConcatDemo program : class ConcatDemo { public static void main ( String [ ] args ) { String firstString = `` This '' ; String secondString = `` concatenated string . `` ; String thirdString = firstString+secondString ; System.out.println ( thirdString ) ; } } By end program , variable thirdString contain `` This concatenated string . `` , get print standard output . The Unary Operators The unary operator require one operand ; perform various operation incrementing/decrementing value one , negate expression , invert value boolean . Operator Description +Unary plus operator ; indicate positive value ( number positive without , however ) -Unary minus operator ; negate expression ++Increment operator ; increments value 1 -- Decrement operator ; decrements value 1 ! Logical complement operator ; invert value boolean The following program , UnaryDemo , test unary operator : class UnaryDemo { public static void main ( String [ ] args ) { int result = +1 ; // result 1 System.out.println ( result ) ; result -- ; // result 0 System.out.println ( result ) ; result++ ; // result 1 System.out.println ( result ) ; result = -result ; // result -1 System.out.println ( result ) ; boolean success = false ; // false System.out.println ( success ) ; // true System.out.println ( ! success ) ; } } The increment/decrement operator apply ( prefix ) ( postfix ) operand . The code result++ ; ++result ; end result incremented one . The difference prefix version ( ++result ) evaluate incremented value , whereas postfix version ( result++ ) evaluate original value . If perform simple increment/decrement , n't really matter version choose . But use operator part large expression , one choose may make significant difference . The following program , PrePostDemo , illustrate prefix/postfix unary increment operator : class PrePostDemo { public static void main ( String [ ] args ) { int = 3 ; i++ ; // print 4 System.out.println ( ) ; ++i ; // print 5 System.out.println ( ) ; // print 6 System.out.println ( ++i ) ; // print 6 System.out.println ( i++ ) ; // print 7 System.out.println ( ) ; } }