How ResourceBundle Related Locale Conceptually ResourceBundle set related subclass share base name . The list follow show set related subclass . ButtonLabel base name . The character follow base name indicate language code , country code , variant Locale . ButtonLabel_en_GB , example , match Locale specify language code English ( en ) country code Great Britain ( GB ) . ButtonLabel ButtonLabel_de ButtonLabel_en_GB ButtonLabel_fr_CA_UNIX To select appropriate ResourceBundle , invoke ResourceBundle.getBundle method . The following example select ButtonLabel ResourceBundle Locale match French language , country Canada , UNIX platform . Locale currentLocale = new Locale ( `` fr '' , `` CA '' , `` UNIX '' ) ; ResourceBundle introLabels = ResourceBundle.getBundle ( `` ButtonLabel '' , currentLocale ) ; If ResourceBundle class specified Locale exist , getBundle try find close match . For example , ButtonLabel_fr_CA_UNIX desired class default Locale en_US , getBundle look class following order : ButtonLabel_fr_CA_UNIX ButtonLabel_fr_CA ButtonLabel_fr ButtonLabel_en_US ButtonLabel_en ButtonLabel Note getBundle look class base default Locale select base class ( ButtonLabel ) . If getBundle fails find match preceding list class , throw MissingResourceException . To avoid throw exception , always provide base class suffix . The ListResourceBundle PropertyResourceBundle Subclasses The abstract class ResourceBundle two subclass : PropertyResourceBundle ListResourceBundle . A PropertyResourceBundle back property file . A property file plain-text file contain translatable text . Properties file part Java source code , contain value String object . If need store type object , use ListResourceBundle instead . The section Backing ResourceBundle Properties Files show use PropertyResourceBundle . The ListResourceBundle class manage resource convenient list . Each ListResourceBundle back class file . You store locale-specific object ListResourceBundle . To add support additional Locale , create another source file compile class file . The section Using ListResource Bundle cod example may find helpful . The ResourceBundle class flexible . If first put locale-specific String object PropertyResourceBundle later decide use ListResourceBundle instead , impact code . For example , follow call getBundle retrieve ResourceBundle appropriate Locale , whether ButtonLabel back class property file : ResourceBundle introLabels = ResourceBundle.getBundle ( `` ButtonLabel '' , currentLocale ) ; Key-Value Pairs ResourceBundle object contain array key-value pair . You specify key , must String , want retrieve value ResourceBundle . The value locale-specific object . The key following example OkKey CancelKey string : class ButtonLabel_en extend ListResourceBundle { // English version public Object [ ] [ ] getContents ( ) { return content ; } static final Object [ ] [ ] content = { { `` OkKey '' , `` OK '' } , { `` CancelKey '' , `` Cancel '' } , } ; } To retrieve OK String ResourceBundle , would specify appropriate key invoke getString : String okLabel = ButtonLabel.getString ( `` OkKey '' ) ; A property file contain key-value pair . The key left side equal sign , value right . Each pair separate line . The value may represent String object . The following example show content property file name ButtonLabel.properties : OkKey = OK CancelKey = Cancel