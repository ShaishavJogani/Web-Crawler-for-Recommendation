As see , often provide initial value field declaration : public class BedAndBreakfast { // initialize 10 public static int capacity = 10 ; // initialize false private boolean full = false ; } This work well initialization value available initialization put one line . However , form initialization limitation simplicity . If initialization require logic ( example , error handling loop fill complex array ) , simple assignment inadequate . Instance variable initialize constructor , error handling logic use . To provide capability class variable , Java programming language include static initialization block . Note : It necessary declare field beginning class definition , although common practice . It necessary declare initialize use . Static Initialization Blocks A static initialization block normal block code enclose brace , { } , precede static keyword . Here example : static { // whatever code need initialization go } A class number static initialization block , appear anywhere class body . The runtime system guarantee static initialization block call order appear source code . There alternative static block â€” write private static method : class Whatever { public static varType myVar = initializeClassVariable ( ) ; private static varType initializeClassVariable ( ) { // initialization code go } } The advantage private static method reuse later need reinitialize class variable . Initializing Instance Members Normally , would put code initialize instance variable constructor . There two alternative use constructor initialize instance variable : initializer block final method . Initializer block instance variable look like static initializer block , without static keyword : { // whatever code need initialization go } The Java compiler copy initializer block every constructor . Therefore , approach use share block code multiple constructor . A final method override subclass . This discuss lesson interface inheritance . Here example use final method initialize instance variable : class Whatever { private varType myVar = initializeInstanceVariable ( ) ; protect final varType initializeInstanceVariable ( ) { // initialization code go } } This especially useful subclass might want reuse initialization method . The method final call non-final method instance initialization cause problem .