Although possible without layout manager , use layout manager possible . A layout manager make easy adjust look-and-feel-dependent component appearance , different font size , container 's change size , different locale . Layout manager also reuse easily container , well program . Note : This lesson cover write layout code hand , challenge . If interested learn detail layout management , might prefer use GroupLayout layout manager combine builder tool lay GUI . One builder tool NetBeans IDE . Otherwise , want code hand want use GroupLayout , GridBagLayout recommend next flexible powerful layout manager . If interested use JavaFX create GUI , see Working With Layouts JavaFX . If container hold component whose size affect container 's size font , look-and-feel , language change , absolute position might make sense . Desktop pane , contain internal frame , category . The size position internal frame depend directly desktop pane 's size . The programmer determine initial size placement internal frame within desktop pane , user move resize frame . A layout manager unnecessary situation . Another situation absolute position might make sense custom container perform size position calculation particular container , perhaps require knowledge container 's specialized state . This situation split pane . Creating container without layout manager involve following step . Set container 's layout manager null call setLayout ( null ) . Call Component class 's setbounds method container 's child . Call Component class 's repaint method . However , create container absolutely position container cause problem window contain container resize . Here snapshot frame whose content pane use absolute positioning . Click Launch button run AbsoluteLayoutDemo use Javaâ„¢ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Its code AbsoluteLayoutDemo.java . The following code snippet show component content pane create lay . pane.setLayout ( null ) ; JButton b1 = new JButton ( `` one '' ) ; JButton b2 = new JButton ( `` two '' ) ; JButton b3 = new JButton ( `` three '' ) ; pane.add ( b1 ) ; pane.add ( b2 ) ; pane.add ( b3 ) ; Insets inset = pane.getInsets ( ) ; Dimension size = b1.getPreferredSize ( ) ; b1.setBounds ( 25 + insets.left , 5 + insets.top , size.width , size.height ) ; size = b2.getPreferredSize ( ) ; b2.setBounds ( 55 + insets.left , 40 + insets.top , size.width , size.height ) ; size = b3.getPreferredSize ( ) ; b3.setBounds ( 150 + insets.left , 15 + insets.top , size.width + 50 , size.height + 20 ) ; ... //In main method : Insets inset = frame.getInsets ( ) ; frame.setSize ( 300 + insets.left + insets.right , 125 + insets.top + insets.bottom ) ;