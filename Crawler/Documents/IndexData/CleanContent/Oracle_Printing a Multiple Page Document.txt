You already learn use Printable interface print single page document . However , document usually one physical page length . Pagination process identify location document page break print accordingly . In case print several graphic image , one per page , use page index iterate page print one page . For example , several image represent following array : BufferedImage [ ] image = new BufferedImage [ 10 ] ; use print ( ) method show following code fragment : public int print ( Graphics graphic , PageFormat pageFormat , int pageIndex ) throw PrinterException { ( pageIndex < images.length ) { graphics.drawImage ( image [ pageIndex ] , 100 , 100 , null ) ; return PAGE_EXISTS ; } else { return NO_SUCH_PAGE : } } If document continuous , application must calculate much content fit page , break page point . If text document consist many line , application must calculate many line fit entirely page . The Point class create point represent location ( x , ) To calculate height single line text , use FontMetrics class . Font font = new Font ( `` Serif '' , Font.PLAIN , 10 ) ; FontMetrics metric = graphics.getFontMetrics ( font ) ; int lineHeight = metrics.getHeight ( ) ; The PageFormat parameter describe printable area page . In particular , find vertical span page use following code fragment : double pageHeight = pageFormat.getImageableHeight ( ) ; Use following code fragment calculate number line fit page number page break : int linesPerPage = ( ( int ) pageHeight ) /lineHeight ) ; int numBreaks = ( textLines.length-1 ) /linesPerPage ; int [ ] pageBreaks = new int [ numBreaks ] ; ( int b=0 ; b < numBreaks ; b++ ) { pageBreaks [ b ] = ( b+1 ) *linesPerPage ; } Use print ( ) method calculate printable area following reason : Text measurement depend FontRenderContext implicit FontMetrics object return printer graphic available except inside print ( ) method . The page format may disclosured print occurs . Since user select landscape mode print dialog , set need account . The PageFormat object pass print ( ) method provide information . The page break position use represent following code fragment : /* Draw line page . * Increment 'y ' position lineHeight * line . */ int = 0 ; int start = ( pageIndex == 0 ) ? 0 : pageBreaks [ pageIndex-1 ] ; int end = ( pageIndex == pageBreaks.length ) ? textLines.length : pageBreaks [ pageIndex ] ; ( int line=start ; line < end ; line++ ) { += lineHeight ; g.drawString ( textLines [ line ] , 0 , ) ; } If document contain 100 line 48 line fit page , application print 3 page page break 48 96 line text . The remain 4 line print last page . The complete code example PaginationExample.java . The following simplifying factor use PaginationExample code : Each page height . The font use .