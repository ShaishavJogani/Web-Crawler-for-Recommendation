There several way connection create . The common way creation initial context . When create InitialContext , InitialDirContext , InitialLdapContext use LDAP service provider , connection set immediately target LDAP server name Context.PROVIDER_URL property . Each time initial context create , new LDAP connection create . See Pooling section information change behavior . If property value contain one URL , URL try turn one use create successful connection . The property value update successful URL . See JNDI Tutorial example create initial context use list URLs . There three direct way connection create . By pass URL name argument initial context . When LDAP LDAPS URL pass name parameter initial context , information URL use create new connection LDAP server , regardless whether initial context instance connection LDAP server . In fact , initial context might connect server . See JNDI Tutorial information URLs use name . Another way connection create use Reference . When Reference contain LDAP LDAPS URL pass NamingManager.getObjectInstance ( ) DirectoryManager.getObjectInstance ( ) , new connection create use information specify URL . Finally , referral follow manually automatically , information referral use create new connection . See JNDI Tutorial information referral . Shared Connections Context instance NamingEnumerations derive one Context instance share connection change one Context instance make share longer possible . For example , invoke Context.lookup ( ) , Context.listBindings ( ) DirContext.search ( ) initial context get back Context instance , Context instance share connection . Here example . // Create initial context DirContext ctx = new InitialDirContext ( env ) ; // Get copy context Context ctx2 = ( Context ) ctx.lookup ( `` '' ) ; // Get child context Context ctx3 = ( Context ) ctx.lookup ( `` ou=NewHires '' ) ; In example , ctx , ctx2 , ctx3 share connection . Sharing regardless Context instance come existence . For example , Context instance obtain follow referral share connection referral . When change Context instance 's environment property relate connection , principal name credential user , Context instance make change get connection ( connection share ) . Context instance derive Context instance future share new connection . Context instance previously share old connection affect ( , continue use old connection ) . Here example use two connection . // Create initial context ( first connection ) DirContext ctx = new InitialDirContext ( env ) ; // Get copy context DirContext ctx2 = ( DirContext ) ctx.lookup ( `` '' ) ; // Change authentication property ctx2 ctx2.addToEnvironment ( Context.SECURITY_PRINCIPAL , `` cn=C . User , ou=NewHires , o=JNDITutorial '' ) ; ctx2.addToEnvironment ( Context.SECURITY_CREDENTIALS , `` mysecret '' ) ; // Method ctx2 use new connection System.out.println ( ctx2.getAttributes ( `` ou=NewHires '' ) ) ; ctx2 initially share connection ctx . But principal password property change , longer use ctx 's connection . The LDAP provider automatically create new connection ctx2 . Similarly , use LdapContext.reconnect ( ) change Context instance 's connection control , Context instance get connection connection share . If Context instance 's connection share ( i.e. , Contexts derive ) , change environment connection control cause new connection create . Instead , change relevant connection apply exist connection . Creation Timeouts Not connection creation successful . If LDAP provider establish connection within certain timeout period , abort connection attempt . By default , timeout period network ( TCP ) timeout value , order minute . To change timeout period , use `` com.sun.jndi.ldap.connect.timeout '' environment property . The value property string representation integer represent connection timeout millisecond . Here example . // Set environment create initial context Hashtable env = new Hashtable ( 11 ) ; env.put ( Context.INITIAL_CONTEXT_FACTORY , `` com.sun.jndi.ldap.LdapCtxFactory '' ) ; env.put ( Context.PROVIDER_URL , `` ldap : //localhost:389/o=JNDITutorial '' ) ; // Specify timeout 5 second env.put ( `` com.sun.jndi.ldap.connect.timeout '' , `` 5000 '' ) ; // Create initial context DirContext ctx = new InitialDirContext ( env ) ; // something useful ctx In example , connection create within 5 second , exception throw . If Context.PROVIDER_URL property contain one URL , provider use timeout URL . For example , 3 URLs timeout specify 5 second , provider wait maximum 15 second total . See Connection Pooling section information property affect connection pooling .