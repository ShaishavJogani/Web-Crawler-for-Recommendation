This page contain code snippet show several commono scenario . Creating String Code Point String newString ( int codePoint ) { return new String ( Character.toChars ( codePoint ) ) ; } Creating String Code Point - Optimized BMP Characters The Character.toChars method create temporary array use discard . If negatively affect performance , use following approach optimizied BMP character ( character represent single char value ) . In method , toChars invoke supplementary character . String newString ( int codePoint ) { ( Character.charCount ( codePoint ) == 1 ) { return String.valueOf ( codePoint ) ; } else { return new String ( Character.toChars ( codePoint ) ) ; } } Creating String Objects Bulk To create large number string , bulk version previous snippet reuse array use toChars method . This method create separate String instance code point optimize BMP character . String [ ] newStrings ( int [ ] codePoints ) { String [ ] result = new String [ codePoints.length ] ; char [ ] codeUnits = new char [ 2 ] ; ( int = 0 ; < codePoints.length ; i++ ) { int count = Character.toChars ( codePoints [ ] , codeUnits , 0 ) ; result [ ] = new String ( codeUnits , 0 , count ) ; } return result ; } Generating Messages The formatting API support supplementary character . The following example simple way generate message . // recommend System.out.printf ( `` Character % c invalid. % n '' , codePoint ) ; This following approach simple avoids concatenation , make text difficult localize language insert numeric value string order English . // recommend System.out.println ( `` Character `` + String.valueOf ( char ) + `` invalid . `` ) ;