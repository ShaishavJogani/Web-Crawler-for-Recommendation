You create Locale combination valid language country code , n't mean use . Remember , Locale object identifier . You pass Locale object object , real work . These object , call locale-sensitive , know deal possible Locale definition . To find type Locale definition locale-sensitive class recognizes , invoke getAvailableLocales method . For example , find Locale definition support DateFormat class , could write routine following : import java.util . * ; import java.text . * ; public class Available { static public void main ( String [ ] args ) { Locale list [ ] = DateFormat.getAvailableLocales ( ) ; ( Locale aLocale : list ) { System.out.println ( aLocale.toString ( ) ) ; } } } Note String return toString contains language country code , separate underscore : ar_EG be_BY bg_BG ca_ES cs_CZ da_DK de_DE ... If want display list Locale name end user , show something easy understand language country code return toString . Instead invoke Locale.getDisplayName method , retrieve localized String Locale object . For example , toString replace getDisplayName preceding code , program print following line : Arabic ( Egypt ) Belarussian ( Belarus ) Bulgarian ( Bulgaria ) Catalan ( Spain ) Czech ( Czech Republic ) Danish ( Denmark ) German ( Germany ) ... You may see different locale list depend Java Platform implementation .