There two reflective method create instance class : java.lang.reflect.Constructor.newInstance ( ) Class.newInstance ( ) . The former prefer thus use example : Class.newInstance ( ) invoke zero-argument constructor , Constructor.newInstance ( ) may invoke constructor , regardless number parameter . Class.newInstance ( ) throw exception throw constructor , regardless whether check unchecked . Constructor.newInstance ( ) always wrap thrown exception InvocationTargetException . Class.newInstance ( ) require constructor visible ; Constructor.newInstance ( ) may invoke private constructor certain circumstance . Sometimes may desirable retrieve internal state object set construction . Consider scenario necessary obtain internal character set use java.io.Console . ( The Console character set store private field necessarily Java virtual machine default character set return java.nio.charset.Charset.defaultCharset ( ) ) . The ConsoleCharset example show might achieve : import java.io.Console ; import java.nio.charset.Charset ; import java.lang.reflect.Constructor ; import java.lang.reflect.Field ; import java.lang.reflect.InvocationTargetException ; import static java.lang.System.out ; public class ConsoleCharset { public static void main ( String ... args ) { Constructor [ ] ctors = Console.class.getDeclaredConstructors ( ) ; Constructor ctor = null ; ( int = 0 ; < ctors.length ; i++ ) { ctor = ctors [ ] ; ( ctor.getGenericParameterTypes ( ) .length == 0 ) break ; } try { ctor.setAccessible ( true ) ; Console c = ( Console ) ctor.newInstance ( ) ; Field f = c.getClass ( ) .getDeclaredField ( `` c '' ) ; f.setAccessible ( true ) ; out.format ( `` Console charset : % % n '' , f.get ( c ) ) ; out.format ( `` Charset.defaultCharset ( ) : % % n '' , Charset.defaultCharset ( ) ) ; // production code handle exception gracefully } catch ( InstantiationException x ) { x.printStackTrace ( ) ; } catch ( InvocationTargetException x ) { x.printStackTrace ( ) ; } catch ( IllegalAccessException x ) { x.printStackTrace ( ) ; } catch ( NoSuchFieldException x ) { x.printStackTrace ( ) ; } } } Note : Class.newInstance ( ) succeed constructor zero argument already accessible . Otherwise , necessary use Constructor.newInstance ( ) example . Example output UNIX system : $ java ConsoleCharset Console charset : ISO-8859-1 Charset.defaultCharset ( ) : ISO-8859-1 Example output Windows system : C : \ > java ConsoleCharset Console charset : IBM437 Charset.defaultCharset ( ) : windows-1252 Another common application Constructor.newInstance ( ) invoke constructor take argument . The RestoreAliases example find specific single-argument constructor invoke : import java.lang.reflect.Constructor ; import java.lang.reflect.Field ; import java.lang.reflect.InvocationTargetException ; import java.util.HashMap ; import java.util.Map ; import java.util.Set ; import static java.lang.System.out ; class EmailAliases { private Set < String > aliases ; private EmailAliases ( HashMap < String , String > h ) { aliases = h.keySet ( ) ; } public void printKeys ( ) { out.format ( `` Mail key : % n '' ) ; ( String k : alias ) out.format ( `` % % n '' , k ) ; } } public class RestoreAliases { private static Map < String , String > defaultAliases = new HashMap < String , String > ( ) ; static { defaultAliases.put ( `` Duke '' , `` duke @ i-love-java '' ) ; defaultAliases.put ( `` Fang '' , `` fang @ evil-jealous-twin '' ) ; } public static void main ( String ... args ) { try { Constructor ctor = EmailAliases.class.getDeclaredConstructor ( HashMap.class ) ; ctor.setAccessible ( true ) ; EmailAliases email = ( EmailAliases ) ctor.newInstance ( defaultAliases ) ; email.printKeys ( ) ; // production code handle exception gracefully } catch ( InstantiationException x ) { x.printStackTrace ( ) ; } catch ( IllegalAccessException x ) { x.printStackTrace ( ) ; } catch ( InvocationTargetException x ) { x.printStackTrace ( ) ; } catch ( NoSuchMethodException x ) { x.printStackTrace ( ) ; } } } This example use Class.getDeclaredConstructor ( ) find constructor single argument type java.util.HashMap . Note sufficient pass HashMap.class since parameter get*Constructor ( ) method require class type purpose . Due type erasure , following expression evaluate true : HashMap.class == defaultAliases.getClass ( ) The example create new instance class use constructor Constructor.newInstance ( ) . $ java RestoreAliases Mail key : Duke Fang