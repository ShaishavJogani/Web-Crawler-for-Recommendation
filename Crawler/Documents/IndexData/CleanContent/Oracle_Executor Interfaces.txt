The java.util.concurrent package defines three executor interface : Executor , simple interface support launch new task . ExecutorService , subinterface Executor , add feature help manage lifecycle , individual task executor . ScheduledExecutorService , subinterface ExecutorService , support future and/or periodic execution task . Typically , variable refer executor object declare one three interface type , executor class type . The Executor Interface The Executor interface provide single method , execute , design drop-in replacement common thread-creation idiom . If r Runnable object , e Executor object replace ( new Thread ( r ) ) .start ( ) ; e.execute ( r ) ; However , definition execute less specific . The low-level idiom create new thread launch immediately . Depending Executor implementation , execute may thing , likely use exist worker thread run r , place r queue wait worker thread become available . ( We 'll describe worker thread section Thread Pools . ) The executor implementation java.util.concurrent design make full use advanced ExecutorService ScheduledExecutorService interface , although also work base Executor interface . The ExecutorService Interface The ExecutorService interface supplement execute similar , versatile submit method . Like execute , submit accepts Runnable object , also accept Callable object , allow task return value . The submit method return Future object , use retrieve Callable return value manage status Callable Runnable task . ExecutorService also provide method submit large collection Callable object . Finally , ExecutorService provide number method manage shutdown executor . To support immediate shutdown , task handle interrupt correctly . The ScheduledExecutorService Interface The ScheduledExecutorService interface supplement method parent ExecutorService schedule , execute Runnable Callable task specified delay . In addition , interface define scheduleAtFixedRate scheduleWithFixedDelay , execute specified task repeatedly , define interval .