Any standalone Java application Java Web Start application package self-contained application . If Java applet , see Re-writing Java Applet Java Web Start Application information coverting applet Java Web Start application , package self-contained application . Before convert application , make sure require pre-requisites instal platform . See Pre-Requisites Packaging Self-Contained Applications information . This section convert Dynamic Tree Demo Deploying Java Web Start Application self-contained application . You download source file demo Self-Contained Application Examples . Setting Up Directories Identify organize file need application . A simple application might require JAR file . A complex application might also require additional library resource . Custom resource icon configuration file also use self-contained application . The Dynamic Tree Demo require DynamicTreeDemo.jar file , /dist directory project . The HTML JNLP file need Java Web Start version application need ignore bundlers self-contained application . To provide custom icon Dynamic Tree Demo , represent application instal user 's desktop , icon provide platform support . These icon place /src/package/platform directory . The icon provide different format supported platform : .ico format Windows , .png format Linux , .icns format OS X . The following example show directory structure Dynamic Tree Demo project self-contained bundle create : /packager_DynamicTreeDemo < -- - application project /dist DynamicTreeDemo.jar ... /src /package < -- - custom resource /linux /macosx /windows /webstartComponentArch < -- - application source file ... Setting Up Build File Set Ant task packaging task need . These task add build.xml file project , place separate file import build.xml file . For Dynamic Tree Demo , packager.xml file root directory project contain Ant task generate self-contained application bundle . The source packager.xml file show following example : < project name= '' DynamicTreePackaging '' default= '' default '' basedir= '' . '' xmlns : fx= '' javafx : com.sun.javafx.tools.ant '' > < echo > $ { java.home } /../lib/ant-javafx.jar < /echo > < target name= '' package '' depends= '' jar '' > < taskdef resource= '' com/sun/javafx/tools/ant/antlib.xml '' uri= '' javafx : com.sun.javafx.tools.ant '' classpath= '' $ { java.home } /../lib/ant-javafx.jar ; src '' / > < fx : deploy outdir= '' $ { basedir } /build/packager '' outfile= '' DynamicTreeDemo '' nativeBundles= '' '' verbose= '' false '' > < fx : application name= '' Dynamic Tree Demo '' mainClass= '' webstartComponentArch.DynamicTreeApplication '' version= '' 1.0 '' / > < fx : resource > < fx : fileset dir= '' dist '' includes= '' DynamicTreeDemo.jar '' / > < /fx : resource > < fx : info title= '' Dynamic Tree Demo '' vendor= '' My Company '' description= '' A Demo Dynamic Swing Tree '' category= '' Demos '' copyright= '' ( c ) 2014 My Company '' license= '' 3 Clause BSD '' / > < fx : bundleArgument arg= '' linux.bundleName '' value= '' dynamic-tree-demo '' / > < fx : bundleArgument arg= '' email '' value= '' maintainer @ example.com '' / > < fx : bundleArgument arg= '' mac.CFBundleName '' value= '' Java Tree Demo '' / > < fx : bundleArgument arg= '' win.menuGroup '' value= '' Java Demos '' / > < /fx : deploy > < /target > < /project > Use following information set Ant task : Use xmlns : fx= '' javafx : com.sun.javafx.tools.ant namespace . The taskdef task must execute fx : deploy task . The classpath attribute contain location ant-javafx.jar file JDK directory contain custom resource . For Dynamic Tree Demo , classpath attribute include /src directory , contain custom icon . Place fx : deploy task inside desired target . Specify output directory native binary place , specify native binary want produce . If specify native binary , possible binary platform execute task file generate , include disk image . Valid value platform ; image , generate file directory Windows Linux .app file OSX ; installer , generate installable bundle platform , disk image . Valid value platform-specific binary exe msi Windows ; deb rpm Linux ; deb , pkg , mac.appStore OS X . You must required tool instal build binary choice . For Dynamic Tree Demo , outdir attribute set $ { basedir } /build/packager . basedir define project element , case set current directory . The nativeBundles attribute set format platform packaging task run build . The verbose attribute optional . Use attribute provide diagnostic information . Provide information application . Set name application name attribute fx : application element title attribute fx : info element . Set version application version attribute fx : application element . Use fx : info element provide description application , name vendor , license information , metadata . Information JAR file resource set fx : resource element . Launch information set mainclass attribute fx : application element . For Dynamic Tree Demo , simple single launcher use , webstartComponentArch.DynamicTreeApplication , main class application . Other platform-specific customizations provide fx : bundleArgument element . Arguments recognize bundler ignore , one build file contain packaging information platform . For Dynamic Tree Demo , following customizations apply : The bundle name Linux set dynamic-tree-demo . An email address provide . The name appear menu bar OS X set Java Tree Demo . The name menu group application store Windows set Java Demos . Generating Bundles Run packaging task create platform want build bundle self-contained application . For Dynamic Tree Demo , run following command root folder project : ant package When packaging task completes , build/packager/bundles directory application project contain native binary produce . The following example show directory structure Dynamic Tree Demo project self-contained bundle generate Windows : /packager_DynamicTreeDemo < -- - application project /build /packager /bundles Dynamic Tree Demo < -- -folder image Dynamic Tree Demo-1.0.exe < -- -EXE installer Dynamic Tree Demo-1.0.msi < -- -MSI installer ... /dist DynamicTreeDemo.jar ... /src /package < -- - custom resource /linux /macosx /windows /webstartComponentArch < -- - application source file ... Note addition self-contained bundle , packaging tool always generate JAR , JNLP , annd HTML file application . These file provide option distribute application . Additional References For information self-contained application , see Self-Contained Application Packaging . For information Ant task Java packaging tool , see JavaFX Ant Tasks , use Java JavaFX application .