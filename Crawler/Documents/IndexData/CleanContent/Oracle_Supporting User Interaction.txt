To enable user interact graphic display , need able determine user click one . The hit method Graphics2D class provide way easily determine whether mouse click occur particular Shape object . Alternatively get location mouse click call contains Shape determine whether click within bound Shape . If use primitive text , perform simple hit test get outline Shape correspond text call hit contains Shape . Supporting text edit require much sophisticated hit testing . If want allow user edit text , generally use one Swing editable text component . If work primitive text use TextLayout class manage shaping positioning text , also use TextLayout perform hit test text editing . For information see chapter Text Fonts Java 2D Programmer 's Guide see HitTestSample example , use TextLayout perform simple hit-testing . Example : ShapeMover This applet allow user drag Shape around within applet window . The Shape redrawn every mouse location provide feedback user drag . Note : If n't see applet running , need install least Java SE Development Kit ( JDK ) 7 release . ShapeMover.java contain complete code applet . The contains method call determine whether cursor within bound rectangle mouse press . If , location rectangle update . public void mousePressed ( MouseEvent e ) { last_x = rect.x - e.getX ( ) ; last_y = rect.y - e.getY ( ) ; ( rect.contains ( e.getX ( ) , e.getY ( ) ) ) updateLocation ( e ) ; ... public void updateLocation ( MouseEvent e ) { rect.setLocation ( last_x + e.getX ( ) , last_y + e.getY ( ) ) ; ... repaint ( ) ; You might notice redrawing Shape every mouse location slow , filled rectangle rerendered every time move . Using double buffering eliminate problem . If use Swing , drawing double buffer automatically ; n't change rendering code . The code Swing version program SwingShapeMover.java . Example : HitTestSample This application illustrate hit test draw default caret wherever user click TextLayout , show following figure . Note : If n't see applet running , need install least Java SE Development Kit ( JDK ) 7 release . HitTestSample.java contain complete code applet . The mouseClicked method use TextLayout.hitTestChar return java.awt.font.TextHitInfo object contain mouse click location ( insertion index ) TextLayout object . Information return TextLayout getAscent , getDescent , getAdvance method use compute location origin TextLayout object horizontally vertically center . ... private Point2D computeLayoutOrigin ( ) { Dimension size = getPreferredSize ( ) ; Point2D.Float origin = new Point2D.Float ( ) ; origin.x = ( float ) ( size.width - textLayout.getAdvance ( ) ) / 2 ; origin.y = ( float ) ( size.height - textLayout.getDescent ( ) + textLayout.getAscent ( ) ) /2 ; return origin ; } ... public void paintComponent ( Graphics g ) { super.paintComponent ( g ) ; setBackground ( Color.white ) ; Graphics2D graphics2D = ( Graphics2D ) g ; Point2D origin = computeLayoutOrigin ( ) ; graphics2D.translate ( origin.getX ( ) , origin.getY ( ) ) ; // Draw textLayout . textLayout.draw ( graphics2D , 0 , 0 ) ; // Retrieve caret Shapes insertionIndex . Shape [ ] caret = textLayout.getCaretShapes ( insertionIndex ) ; // Draw caret . caret [ 0 ] strong // caret caret [ 1 ] weak caret . graphics2D.setColor ( STRONG_CARET_COLOR ) ; graphics2D.draw ( caret [ 0 ] ) ; ( caret [ 1 ] ! = null ) { graphics2D.setColor ( WEAK_CARET_COLOR ) ; graphics2D.draw ( caret [ 1 ] ) ; } } ... private class HitTestMouseListener extend MouseAdapter { /** * Compute character position * mouse click . */ public void mouseClicked ( MouseEvent e ) { Point2D origin = computeLayoutOrigin ( ) ; // Compute mouse click location // relative textLayout 's origin . float clickX = ( float ) ( e.getX ( ) - origin.getX ( ) ) ; float clickY = ( float ) ( e.getY ( ) - origin.getY ( ) ) ; // Get character position // mouse click . TextHitInfo currentHit = textLayout.hitTestChar ( clickX , clickY ) ; insertionIndex = currentHit.getInsertionIndex ( ) ; // Repaint Component new // caret ( ) display . hitPane.repaint ( ) ; }