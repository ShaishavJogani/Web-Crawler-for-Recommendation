A method declaration include name , modifier , parameter , return type , list throwable exception . The java.lang.reflect.Method class provide way obtain information . The MethodSpy example illustrate enumerate declared method give class retrieve return , parameter , exception type method give name . import java.lang.reflect.Method ; import java.lang.reflect.Type ; import static java.lang.System.out ; public class MethodSpy { private static final String fmt = `` % 24 : % % n '' ; // morbidly curious < E extend RuntimeException > void genericThrow ( ) throw E { } public static void main ( String ... args ) { try { Class < ? > c = Class.forName ( args [ 0 ] ) ; Method [ ] allMethods = c.getDeclaredMethods ( ) ; ( Method : allMethods ) { ( ! m.getName ( ) .equals ( args [ 1 ] ) ) { continue ; } out.format ( `` % % n '' , m.toGenericString ( ) ) ; out.format ( fmt , `` ReturnType '' , m.getReturnType ( ) ) ; out.format ( fmt , `` GenericReturnType '' , m.getGenericReturnType ( ) ) ; Class < ? > [ ] pType = m.getParameterTypes ( ) ; Type [ ] gpType = m.getGenericParameterTypes ( ) ; ( int = 0 ; < pType.length ; i++ ) { out.format ( fmt , '' ParameterType '' , pType [ ] ) ; out.format ( fmt , '' GenericParameterType '' , gpType [ ] ) ; } Class < ? > [ ] xType = m.getExceptionTypes ( ) ; Type [ ] gxType = m.getGenericExceptionTypes ( ) ; ( int = 0 ; < xType.length ; i++ ) { out.format ( fmt , '' ExceptionType '' , xType [ ] ) ; out.format ( fmt , '' GenericExceptionType '' , gxType [ ] ) ; } } // production code handle exception gracefully } catch ( ClassNotFoundException x ) { x.printStackTrace ( ) ; } } } Here output Class.getConstructor ( ) example method parameterized type variable number parameter . $ java MethodSpy java.lang.Class getConstructor public java.lang.reflect.Constructor < T > java.lang.Class.getConstructor ( java.lang.Class < ? > [ ] ) throw java.lang.NoSuchMethodException , java.lang.SecurityException ReturnType : class java.lang.reflect.Constructor GenericReturnType : java.lang.reflect.Constructor < T > ParameterType : class [ Ljava.lang.Class ; GenericParameterType : java.lang.Class < ? > [ ] ExceptionType : class java.lang.NoSuchMethodException GenericExceptionType : class java.lang.NoSuchMethodException ExceptionType : class java.lang.SecurityException GenericExceptionType : class java.lang.SecurityException This actual declaration method source code : public Constructor < T > getConstructor ( Class < ? > ... parameterTypes ) First note return parameter type generic . Method.getGenericReturnType ( ) consult Signature Attribute class file 's present . If attribute n't available , fall back Method.getReturnType ( ) change introduction generic . The method name getGenericFoo ( ) value Foo reflection implement similarly . Next , notice last ( ) parameter , parameterType , variable arity ( variable number parameter ) type java.lang.Class . It represent single-dimension array type java.lang.Class . This distinguish parameter explicitly array java.lang.Class invoke Method.isVarArgs ( ) . The syntax returned value Method.get*Types ( ) describe Class.getName ( ) . The following example illustrate method generic return type . $ java MethodSpy java.lang.Class cast public T java.lang.Class.cast ( java.lang.Object ) ReturnType : class java.lang.Object GenericReturnType : T ParameterType : class java.lang.Object GenericParameterType : class java.lang.Object The generic return type method Class.cast ( ) report java.lang.Object generic implement via type erasure remove information regard generic type compilation . The erasure T define declaration Class : public final class Class < T > implement ... Thus T replace upper bound type variable , case , java.lang.Object . The last example illustrate output method multiple overload . $ java MethodSpy java.io.PrintStream format public java.io.PrintStream java.io.PrintStream.format ( java.util.Locale , java.lang.String , java.lang.Object [ ] ) ReturnType : class java.io.PrintStream GenericReturnType : class java.io.PrintStream ParameterType : class java.util.Locale GenericParameterType : class java.util.Locale ParameterType : class java.lang.String GenericParameterType : class java.lang.String ParameterType : class [ Ljava.lang.Object ; GenericParameterType : class [ Ljava.lang.Object ; public java.io.PrintStream java.io.PrintStream.format ( java.lang.String , java.lang.Object [ ] ) ReturnType : class java.io.PrintStream GenericReturnType : class java.io.PrintStream ParameterType : class java.lang.String GenericParameterType : class java.lang.String ParameterType : class [ Ljava.lang.Object ; GenericParameterType : class [ Ljava.lang.Object ; If multiple overload method name discover , return Class.getDeclaredMethods ( ) . Since format ( ) two overload ( Locale one without ) , show MethodSpy . Note : Method.getGenericExceptionTypes ( ) exist actually possible declare method generic exception type . However rarely use since possible catch generic exception type .