The temporal-based class Date-Time API provide parse method parse string contain date time information . These class also provide format method format temporal-based object display . In case , process similar : provide pattern DateTimeFormatter create formatter object . This formatter pass parse format method . The DateTimeFormatter class provide numerous predefined formatters , define . The parse format method throw exception problem occur conversion process . Therefore , parse code catch DateTimeParseException error format code catch DateTimeException error . For information exception handing , see Catching Handling Exceptions . The DateTimeFormatter class immutable thread-safe ; ( ) assign static constant appropriate . Version Note : The java.time date-time object use directly java.util.Formatter String.format use familiar pattern-based formatting use legacy java.util.Date java.util.Calendar class . Parsing The one-argument parse ( CharSequence ) method LocalDate class use ISO_LOCAL_DATE formatter . To specify different formatter , use two-argument parse ( CharSequence , DateTimeFormatter ) method . The following example use predefined BASIC_ISO_DATE formatter , use format 19590709 July 9 , 1959 . String = ... ; LocalDate date = LocalDate.parse ( , DateTimeFormatter.BASIC_ISO_DATE ) ; You also define formatter use pattern . The following code , Parse example , create formatter apply format `` MMM yyyy '' . This format specify three character represent month , one digit represent day month , four digit represent year . A formatter create use pattern would recognize string `` Jan 3 2003 '' `` Mar 23 1994 '' . However , specify format `` MMM dd yyyy '' , two character day month , would always use two character , pad zero one-digit date : `` Jun 03 2003 '' . String input = ... ; try { DateTimeFormatter formatter = DateTimeFormatter.ofPattern ( `` MMM yyyy '' ) ; LocalDate date = LocalDate.parse ( input , formatter ) ; System.out.printf ( `` % % n '' , date ) ; } catch ( DateTimeParseException exc ) { System.out.printf ( `` % parsable ! % n '' , input ) ; throw exc ; // Rethrow exception. } // 'date ' successfully parse The documentation DateTimeFormatter class specify full list symbol use specify pattern format parse . The StringConverter example Non-ISO Date Conversion page provide another example date formatter . Formatting The format ( DateTimeFormatter ) method convert temporal-based object string representation use specify format . The following code , Flight example , convert instance ZonedDateTime use format `` MMM yyy hh : mm '' . The date define manner use previous parsing example , pattern also include hour , minute , a.m. p.m. component . ZoneId leavingZone = ... ; ZonedDateTime departure = ... ; try { DateTimeFormatter format = DateTimeFormatter.ofPattern ( `` MMM yyyy hh : mm '' ) ; String = departure.format ( format ) ; System.out.printf ( `` LEAVING : % ( % ) % n '' , , leavingZone ) ; } catch ( DateTimeException exc ) { System.out.printf ( `` % ca n't format ! % n '' , departure ) ; throw exc ; } The output example , print arrival departure time , follow : LEAVING : Jul 20 2013 07:30 PM ( America/Los_Angeles ) ARRIVING : Jul 21 2013 10:20 PM ( Asia/Tokyo )