A CachedRowSet object special operate without connect data source , , disconnected RowSet object . It get name fact store ( cache ) data memory operate data rather data store database . The CachedRowSet interface superinterface disconnect RowSet object , everything demonstrate also apply WebRowSet , JoinRowSet , FilteredRowSet object . Note although data source CachedRowSet object ( RowSet object derive ) almost always relational database , CachedRowSet object capable get data data source store data tabular format . For example , flat file spreadsheet could source data . This true RowSetReader object disconnected RowSet object implement read data data source . The reference implementation CachedRowSet interface RowSetReader object read data relational database , tutorial , data source always database . The following topic cover : Setting Up CachedRowSet Objects Populating CachedRowSet Objects What Reader Does Updating CachedRowSet Objects Updating Data Sources What Writer Does Notifying Listeners Sending Large Amounts Data Setting Up CachedRowSet Objects Setting CachedRowSet object involve following : Creating CachedRowSet Objects Setting CachedRowSet Properties Setting Key Columns Creating CachedRowSet Objects You create new CachedRowSet object different way : Using Default Constructor Using instance RowSetFactory , create class RowSetProvider : See Using RowSetFactory Interface Using JdbcRowSet Objects information . Note : Alternatively , use constructor CachedRowSet implementation JDBC driver . However , implementation RowSet interface differ reference implementation . These implementation different name constructor . For example , Oracle JDBC driver 's implementation CachedRowSet interface name oracle.jdbc.rowset.OracleCachedRowSet . Using Default Constructor One way create CachedRowSet object call default constructor define reference implementation , following line code : CachedRowSet crs = new CachedRowSetImpl ( ) ; The object cr default value property JdbcRowSet object first create . In addition , assign instance default SyncProvider implementation , RIOptimisticProvider . A SyncProvider object supply RowSetReader object ( reader ) RowSetWriter object ( writer ) , disconnect RowSet object need order read data data source write data back data source . What reader writer explain later section What Reader Does What Writer Does . One thing keep mind reader writer work entirely background , explanation work information . Having background reader writer help understand method define CachedRowSet interface background . Setting CachedRowSet Properties Generally , default value property fine , may change value property call appropriate setter method . There property without default value must set . In order get data , disconnected RowSet object must able connect data source mean select data hold . The following property hold information necessary obtain connection database . username : The name user supply database part gain access password : The user 's database password url : The JDBC URL database user want connect datasourceName : The name use retrieve DataSource object register JNDI naming service Which property must set depends go make connection . The preferred way use DataSource object , may practical register DataSource object JNDI naming service , generally system administrator . Therefore , code examples use DriverManager mechanism obtain connection , use url property datasourceName property . The following line code set username , password , url property connection obtain use DriverManager class . ( You find JDBC URL set value url property documentation JDBC driver . ) public void setConnectionProperties ( String username , String password ) { crs.setUsername ( username ) ; crs.setPassword ( password ) ; crs.setUrl ( `` jdbc : mySubprotocol : mySubname '' ) ; // ... Another property must set command property . In reference implementation , data read RowSet object ResultSet object . The query produce ResultSet object value command property . For example , following line code set command property query produce ResultSet object contain data table MERCH_INVENTORY : crs.setCommand ( `` select * MERCH_INVENTORY '' ) ; Setting Key Columns If go make update cr object want update save database , must set one piece information : key column . Key column essentially primary key indicate one column uniquely identify row . The difference primary key set table database , whereas key column set particular RowSet object . The following line code set key column cr first column : int [ ] key = { 1 } ; crs.setKeyColumns ( key ) ; The first column table MERCH_INVENTORY ITEM_ID . It serve key column every item identifier different therefore uniquely identifies one row one row table MERCH_INVENTORY . In addition , column specify primary key definition MERCH_INVENTORY table . The method setKeyColumns take array allow fact may take two column identify row uniquely . As point interest , method setKeyColumns set value property . In case , set value field keyCols . Key column use internally , set , nothing . You see key column use section Using SyncResolver Objects . Populating CachedRowSet Objects Populating disconnected RowSet object involve work populate connect RowSet object . Fortunately , extra work background . After preliminary work set CachedRowSet object cr , following line code populates crs : crs.execute ( ) ; The data cr data ResultSet object produce execute query command property . What different CachedRowSet implementation execute method lot JdbcRowSet implementation . Or correctly , CachedRowSet object 's reader , method execute delegate task , lot . Every disconnect RowSet object SyncProvider object assign , SyncProvider object provide RowSet object 's reader ( RowSetReader object ) . When cr object create , use default CachedRowSetImpl constructor , , addition set default value property , assign instance RIOptimisticProvider implementation default SyncProvider object . What Reader Does When application call method execute , disconnected RowSet object 's reader work behind scene populate RowSet object data . A newly create CachedRowSet object connect data source therefore must obtain connection data source order get data . The reference implementation default SyncProvider object ( RIOptimisticProvider ) provide reader obtain connection use value set user name , password , either JDBC URL data source name , whichever set recently . Then reader execute query set command . It read data ResultSet object produce query , populate CachedRowSet object data . Finally , reader close connection . Updating CachedRowSet Object In Coffee Break scenario , owner want streamline operation . The owner decide employee warehouse enter inventory directly PDA ( personal digital assistant ) , thereby avoid error-prone process second person data entry . A CachedRowSet object ideal situation lightweight , serializable , update without connection data source . The owner application development team create GUI tool PDA warehouse employee use enter inventory data . Headquarters create CachedRowSet object populate table show current inventory send use Internet PDAs . When warehouse employee enters data use GUI tool , tool add entry array , CachedRowSet object use perform update background . Upon completion inventory , PDAs send new data back headquarters , data upload main server . This section cover following topic : Updating Column Values Inserting Deleting Rows Updating Column Values Updating data CachedRowSet object update data JdbcRowSet object . For example , following code fragment CachedRowSetSample.java increments value column QUAN 1 row whose ITEM_ID column item identifier 12345 : ( crs.next ( ) ) { System.out.println ( `` Found item `` + crs.getInt ( `` ITEM_ID '' ) + `` : `` + crs.getString ( `` ITEM_NAME '' ) ) ; ( crs.getInt ( `` ITEM_ID '' ) == 1235 ) { int currentQuantity = crs.getInt ( `` QUAN '' ) + 1 ; System.out.println ( `` Updating quantity `` + currentQuantity ) ; crs.updateInt ( `` QUAN '' , currentQuantity + 1 ) ; crs.updateRow ( ) ; // Synchronizing row // back DB crs.acceptChanges ( con ) ; } Inserting Deleting Rows Just update column value , code insert delete row CachedRowSet object JdbcRowSet object . The following excerpt CachedRowSetSample.java insert new row CachedRowSet object cr : crs.moveToInsertRow ( ) ; crs.updateInt ( `` ITEM_ID '' , newItemId ) ; crs.updateString ( `` ITEM_NAME '' , `` TableCloth '' ) ; crs.updateInt ( `` SUP_ID '' , 927 ) ; crs.updateInt ( `` QUAN '' , 14 ) ; Calendar timeStamp ; timeStamp = new GregorianCalendar ( ) ; timeStamp.set ( 2006 , 4 , 1 ) ; crs.updateTimestamp ( `` DATE_VAL '' , new Timestamp ( timeStamp.getTimeInMillis ( ) ) ) ; crs.insertRow ( ) ; crs.moveToCurrentRow ( ) ; If headquarters decide stop stock particular item , would probably remove row coffee . However , scenario , warehouse employee use PDA also capability remove . The following code fragment find row value ITEM_ID column 12345 deletes CachedRowSet cr : ( crs.next ( ) ) { ( crs.getInt ( `` ITEM_ID '' ) == 12345 ) { crs.deleteRow ( ) ; break ; } } Updating Data Sources There major difference make change JdbcRowSet object make change CachedRowSet object . Because JdbcRowSet object connect data source , method updateRow , insertRow , deleteRow update JdbcRowSet object data source . In case disconnected RowSet object , however , method update data store CachedRowSet object 's memory affect data source . A disconnected RowSet object must call method acceptChanges order save change data source . In inventory scenario , back headquarters , application call method acceptChanges update database new value column QUAN . crs.acceptChanges ( ) ; What Writer Does Like method execute , method acceptChanges work invisibly . Whereas method execute delegate work RowSet object 's reader , method acceptChanges delegate task RowSet object 's writer . In background , writer open connection database , update database change make RowSet object , close connection . Using Default Implementation The difficulty conflict arise . A conflict situation another party update value database correspond value update RowSet object . Which value persist database ? What writer conflict depend implement , many possibility . At one end spectrum , writer even check conflict write change database . This case RIXMLProvider implementation , use WebRowSet object . At end , writer ensure conflict set database lock prevent others make change . The writer cr object one provide default SyncProvider implementation , RIOptimisticProvider . The RIOPtimisticProvider implementation get name fact use optimistic concurrency model . This model assume , , conflict therefore set database lock . The writer check see conflict , none , write change make cr object database , change become persistent . If conflict , default write new RowSet value database . In scenario , default behavior work well . Because one headquarters likely change value QUAN column COF_INVENTORY , conflict . As result , value enter cr object warehouse write database thus persistent , desired outcome . Using SyncResolver Objects In situation , however , possible conflict exist . To accommodate situation , RIOPtimisticProvider implementation provide option let look value conflict decide one persistent . This option use SyncResolver object . When writer finish look conflict find one , create SyncResolver object contain database value cause conflict . Next , method acceptChanges throw SyncProviderException object , application may catch use retrieve SyncResolver object . The following line code retrieve SyncResolver object resolver : try { crs.acceptChanges ( ) ; } catch ( SyncProviderException spe ) { SyncResolver resolver = spe.getSyncResolver ( ) ; } The object resolver RowSet object replicate cr object except contain value database cause conflict . All column value null . With resolver object , iterate row locate value null therefore value cause conflict . Then locate value position cr object compare . The following code fragment retrieve resolver use SyncResolver method nextConflict iterate row conflict value . The object resolver get status conflict value , UPDATE_ROW_CONFLICT , mean cr attempt update conflict occur , resolver object get row number value . Then code move cursor cr object row . Next , code find column row resolver object contain conflict value , value null . After retrieve value column resolver cr object , compare two decide one want become persistent . Finally , code set value cr object database use method setResolvedValue , show following code : try { crs.acceptChanges ( ) ; } catch ( SyncProviderException spe ) { SyncResolver resolver = spe.getSyncResolver ( ) ; // value cr Object crsValue ; // value SyncResolver object Object resolverValue ; // value persistent Object resolvedValue ; ( resolver.nextConflict ( ) ) { ( resolver.getStatus ( ) == SyncResolver.UPDATE_ROW_CONFLICT ) { int row = resolver.getRow ( ) ; crs.absolute ( row ) ; int colCount = crs.getMetaData ( ) .getColumnCount ( ) ; ( int j = 1 ; j < = colCount ; j++ ) { ( resolver.getConflictValue ( j ) ! = null ) { crsValue = crs.getObject ( j ) ; resolverValue = resolver.getConflictValue ( j ) ; // ... // compare crsValue // resolverValue // determine value // persistent resolvedValue = crsValue ; resolver.setResolvedValue ( j , resolvedValue ) ; } } } } } Notifying Listeners Being JavaBeans component mean RowSet object notify component certain thing happen . For example , data RowSet object change , RowSet object notify interested party change . The nice thing notification mechanism , application programmer , add remove component notify . This section cover following topic : Setting Up Listeners How Notification Works Setting Up Listeners A listener RowSet object component implement following method RowSetListener interface : cursorMoved : Defines listener , anything , cursor RowSet object move . rowChanged : Defines listener , anything , one column value row change , row insert , row delete . rowSetChanged : Defines listener , anything , RowSet object populate new data . An example component might want listener BarGraph object graph data RowSet object . As data change , BarGraph object update reflect new data . As application programmer , thing must take advantage notification mechanism add remove listener . The following line code mean every time cursor cr object move , value cr change , cr whole get new data , BarGraph object bar notify : crs.addRowSetListener ( bar ) ; You also stop notification remove listener , following line code : crs.removeRowSetListener ( bar ) ; Using Coffee Break scenario , assume headquarters check database periodically get late price list coffee sell online . In case , listener PriceList object priceList Coffee Break web site , must implement RowSetListener method cursorMoved , rowChanged , rowSetChanged . The implementation cursorMoved method could nothing position cursor affect priceList object . The implementation rowChanged rowSetChanged method , hand , must ascertain change make update priceList accordingly . How Notification Works In reference implementation , method cause RowSet event automatically notify register listener . For example , method move cursor also call method cursorMoved listener . Similarly , method execute call method rowSetChanged listener , acceptChanges call rowChanged listener . Sending Large Amounts Data The sample code CachedRowSetSample.testCachedRowSet demonstrate data send small piece .