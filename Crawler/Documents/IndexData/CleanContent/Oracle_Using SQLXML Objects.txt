The Connection interface provide support creation SQLXML object use method createSQLXML . The object create contain data . Data may add object call setString , setBinaryStream , setCharacterStream setResult method SQLXML interface . The following topic cover : Creating SQLXML Objects Retrieving SQLXML Values ResultSet Accessing SQLXML Object Data Storing SQLXML Objects Initializing SQLXML Objects Releasing SQLXML Resources Sample Code Creating SQLXML Objects In following excerpt , method Connection.createSQLXML use create empty SQLXML object . The SQLXML.setString method use write data SQLXML object create . Connection con = DriverManager.getConnection ( url , prop ) ; SQLXML xmlVal = con.createSQLXML ( ) ; xmlVal.setString ( val ) ; Retrieving SQLXML Values ResultSet The SQLXML data type treat similarly primitive built-in type . A SQLXML value retrieve call getSQLXML method ResultSet CallableStatement interface . For example , following excerpt retrieve SQLXML value first column ResultSet r : SQLXML xmlVar = rs.getSQLXML ( 1 ) ; SQLXML object remain valid least duration transaction create , unless free method invoke . Accessing SQLXML Object Data The SQLXML interface provide getString , getBinaryStream , getCharacterStream , getSource method access internal content . The following excerpt retrieve content SQLXML object use getString method : SQLXML xmlVal= rs.getSQLXML ( 1 ) ; String val = xmlVal.getString ( ) ; The getBinaryStream getCharacterStream method use obtain InputStream Reader object pass directly XML parser . The following excerpt obtain InputStream object SQLXML Object process stream use DOM ( Document Object Model ) parser : SQLXML sqlxml = rs.getSQLXML ( column ) ; InputStream binaryStream = sqlxml.getBinaryStream ( ) ; DocumentBuilder parser = DocumentBuilderFactory.newInstance ( ) .newDocumentBuilder ( ) ; Document result = parser.parse ( binaryStream ) ; The getSource method return javax.xml.transform.Source object . Sources use input XML parser XSLT transformer . The following excerpt retrieves parse data SQLXML object use SAXSource object return invoke getSource method : SQLXML xmlVal= rs.getSQLXML ( 1 ) ; SAXSource saxSource = sqlxml.getSource ( SAXSource.class ) ; XMLReader xmlReader = saxSource.getXMLReader ( ) ; xmlReader.setContentHandler ( myHandler ) ; xmlReader.parse ( saxSource.getInputSource ( ) ) ; Storing SQLXML Objects A SQLXML object pass input parameter PreparedStatement object like data type . The method setSQLXML set designated PreparedStatement parameter SQLXML object . In following excerpt , authorData instance java.sql.SQLXML interface whose data initialize previously . PreparedStatement pstmt = conn.prepareStatement ( `` INSERT INTO bio `` + `` ( xmlData , authId ) VALUES ( ? , ? ) '' ) ; pstmt.setSQLXML ( 1 , authorData ) ; pstmt.setInt ( 2 , authorId ) ; The updateSQLXML method use update column value updatable result set . If java.xml.transform.Result , Writer , OutputStream object SQLXML object close prior call setSQLXML updateSQLXML , SQLException throw . Initializing SQLXML Objects The SQLXML interface provide method setString , setBinaryStream , setCharacterStream , setResult initialize content SQLXML object create call Connection.createSQLXML method . The following excerpt use method setResult return SAXResult object populate newly create SQLXML object : SQLXML sqlxml = con.createSQLXML ( ) ; SAXResult saxResult = sqlxml.setResult ( SAXResult.class ) ; ContentHandler contentHandler = saxResult.getXMLReader ( ) .getContentHandler ( ) ; contentHandler.startDocument ( ) ; // set XML element // attribute result contentHandler.endDocument ( ) ; The following excerpt use setCharacterStream method obtain java.io.Writer object order initialize SQLXML object : SQLXML sqlxml = con.createSQLXML ( ) ; Writer out= sqlxml.setCharacterStream ( ) ; BufferedReader = new BufferedReader ( new FileReader ( `` xml/foo.xml '' ) ) ; String line = null ; ( ( line = in.readLine ( ) ! = null ) { out.write ( line ) ; } Similarly , SQLXML setString method use initialize SQLXML object . If attempt make call setString , setBinaryStream , setCharacterStream , setResult method SQLXML object previously initialize , SQLException throw . If one call method setBinaryStream , setCharacterStream , setResult occurs SQLXML object , SQLException throw previously return javax.xml.transform.Result , Writer , OutputStream object affect . Releasing SQLXML Resources SQLXML object remain valid least duration transaction create . This could potentially result application run resource long running transaction . Applications may release SQLXML resource invoke free method . In following excerpt , method SQLXML.free call release resource hold previously create SQLXML object . SQLXML xmlVar = con.createSQLXML ( ) ; xmlVar.setString ( val ) ; xmlVar.free ( ) ; Sample Code MySQL Java DB respective JDBC driver fully support SQLXML JDBC data type describe section . However , sample RSSFeedsTable demonstrate handle XML data MySQL Java DB . The owner The Coffee Break follow several RSS feed various web site cover restaurant beverage industry news . An RSS ( Really Simple Syndication Rich Site Summary ) feed XML document contain series article associate metadata , date publication author article . The owner would like store RSS feed database table , include RSS feed The Coffee Break 's blog . The file rss-the-coffee-break-blog.xml example RSS feed The Coffee Break 's blog . Working XML Data MySQL The sample RSSFeedsTable store RSS feed table RSS_FEEDS , create following command : create table RSS_FEEDS ( RSS_NAME varchar ( 32 ) NOT NULL , RSS_FEED_XML longtext NOT NULL , PRIMARY KEY ( RSS_NAME ) ) ; MySQL support XML data type . Instead , sample store XML data column type LONGTEXT , CLOB SQL data type . MySQL four CLOB data type ; LONGTEXT data type hold great amount character among four . The method RSSFeedsTable.addRSSFeed add RSS feed RSS_FEEDS table . The first statement method convert RSS feed ( represent XML file sample ) object type org.w3c.dom.Document , represent DOM ( Document Object Model ) document . This class , along class interface contain package javax.xml , contain method enable manipulate XML data content . For example , following statement use XPath expression retrieve title RSS feed Document object : Node titleElement = ( Node ) xPath.evaluate ( `` /rss/channel/title [ 1 ] '' , doc , XPathConstants.NODE ) ; The XPath expression /rss/channel/title [ 1 ] retrieve content first < title > element . For file rss-the-coffee-break-blog.xml , string The Coffee Break Blog . The following statement add RSS feed table RSS_FEEDS : // For database support SQLXML // data type , create // SQLXML object // org.w3c.dom.Document . System.out.println ( `` Adding XML file `` + fileName ) ; String insertRowQuery = `` insert RSS_FEEDS `` + `` ( RSS_NAME , RSS_FEED_XML ) value `` + `` ( ? , ? ) '' ; insertRow = con.prepareStatement ( insertRowQuery ) ; insertRow.setString ( 1 , titleString ) ; System.out.println ( `` Creating SQLXML object MySQL '' ) ; rssData = con.createSQLXML ( ) ; System.out.println ( `` Creating DOMResult object '' ) ; DOMResult dom = ( DOMResult ) rssData.setResult ( DOMResult.class ) ; dom.setNode ( doc ) ; insertRow.setSQLXML ( 2 , rssData ) ; System.out.println ( `` Running executeUpdate ( ) '' ) ; insertRow.executeUpdate ( ) ; The RSSFeedsTable.viewTable method retrieve content RSS_FEEDS . For row , method create object type org.w3c.dom.Document name doc store XML content column RSS_FEED_XML . The method retrieve XML content store object type SQLXML name rssFeedXML . The content rssFeedXML parse store doc object . Working XML Data Java DB Note : See section `` XML data type operator '' Java DB Developer 's Guide information work XML data Java DB . The sample RSSFeedsTable store RSS feed table RSS_FEEDS , create following command : create table RSS_FEEDS ( RSS_NAME varchar ( 32 ) NOT NULL , RSS_FEED_XML xml NOT NULL , PRIMARY KEY ( RSS_NAME ) ) ; Java DB support XML data type , support SQLXML JDBC data type . Consequently , must convert XML data character format , use Java DB operator XMLPARSE convert XML data type . The RSSFeedsTable.addRSSFeed method add RSS feed RSS_FEEDS table . The first statement method convert RSS feed ( represent XML file sample ) object type org.w3c.dom.Document . This describe section Working XML Data MySQL . The RSSFeedsTable.addRSSFeed method convert RSS feed String object method JDBCTutorialUtilities.convertDocumentToString . Java DB operator name XMLPARSE parse character string representation Java DB XML value , demonstrate following excerpt : String insertRowQuery = `` insert RSS_FEEDS `` + `` ( RSS_NAME , RSS_FEED_XML ) value `` + `` ( ? , xmlparse ( document cast `` + `` ( ? clob ) preserve whitespace ) ) '' ; The XMLPARSE operator require convert character representation XML document string data type Java DB recognize . In example , convert CLOB data type . See Getting Started Java DB documentation information Apache Xalan Java DB requirement . The method RSSFeedsTable.viewTable retrieve content RSS_FEEDS . Because Java DB support JDBC data type SQLXML must retrieve XML content string . Java DB operator name XMLSERIALIZE convert XML type character type : String query = `` select RSS_NAME , `` + `` xmlserialize `` + `` ( RSS_FEED_XML clob ) `` + `` RSS_FEEDS '' ; As XMLPARSE operator , XMLSERIALIZE operator require Apache Xalan list Java class path .