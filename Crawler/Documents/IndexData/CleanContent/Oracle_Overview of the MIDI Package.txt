The introduction give glimpse MIDI capability Java Sound API . The discussion follow provide detailed introduction Java Sound API 's MIDI architecture , access javax.sound.midi package . Some basic feature MIDI explain , refresher introduction , place Java Sound API 's MIDI feature context . It go discuss Java Sound API 's approach MIDI , preparation programming task explain subsequent section . The following discussion MIDI API divide two main area : data device . A MIDI Refresher : Wires Files The Musical Instrument Digital Interface ( MIDI ) standard define communication protocol electronic music device , electronic keyboard instrument personal computer . MIDI data transmit special cable live performance , also store standard type file late playback editing . This section review MIDI basic , without reference Java Sound API . The discussion intend refresher reader acquaint MIDI , brief introduction , provide background subsequent discussion Java Sound API 's MIDI package . If thorough understanding MIDI , safely skip section . Before write substantial MIDI application , programmer unfamiliar MIDI probably need full description MIDI include tutorial . See Complete MIDI 1.0 Detailed Specification , available hard copy http : //www.midi.org ( although might find paraphrased summarized version Web ) . MIDI hardware specification software specification . To understand MIDI 's design , help understand history . MIDI originally design pass musical event , key depression , electronic keyboard instrument synthesizer . Hardware device know sequencer store sequence note could control synthesizer , allow musical performance record subsequently play back . Later , hardware interface develop connected MIDI instrument computer 's serial port , allow sequencer implement software . More recently , computer sound card incorporate hardware MIDI I/O synthesize musical sound . Today , many user MIDI deal sound card , never connect external MIDI device . CPUs become fast enough synthesizer , , implement software . A sound card need audio I/O , application , communicate external MIDI device . The brief hardware portion MIDI specification prescribe pinouts MIDI cable jack cable plug . This portion need concern u . Because device originally require hardware , sequencer synthesizer , implementable software , perhaps reason programmer know anything MIDI hardware device simply understand metaphor MIDI . However , external MIDI hardware device still essential important music application , Java Sound API support input output MIDI data . The software portion MIDI specification extensive . This portion concern structure MIDI data device synthesizer respond data . It important understand MIDI data stream sequence . This duality reflect two different part Complete MIDI 1.0 Detailed Specification : MIDI 1.0 Standard MIDI Files We 'll explain 's mean stream sequence examine purpose two part MIDI specification . Streaming Data MIDI Wire Protocol The first two part MIDI specification describe know informally `` MIDI wire protocol . '' MIDI wire protocol , original MIDI protocol , base assumption MIDI data send MIDI cable ( `` wire '' ) . The cable transmits digital data one MIDI device another . Each MIDI device might musical instrument similar device , might general-purpose computer equip MIDI-capable sound card MIDI-to-serial-port interface . MIDI data , define MIDI wire protocol , organize message . The different kind message distinguish first byte message , know status byte . ( Status byte bytes highest-order bit set 1 . ) The byte follow status byte message know data byte . Certain MIDI message , know channel message , status byte contain four bit specify kind channel message another four bit specify channel number . There therefore 16 MIDI channel ; device receive MIDI message set respond channel message one virtual channel . Often MIDI channel ( n't confuse channel audio ) use send note different instrument . As example , two common channel message Note On Note Off , start note sounding stop , respectively . These two message take two data byte : first specify note 's pitch second `` velocity '' ( fast key depress release , assume keyboard instrument play note ) . MIDI wire protocol define streaming model MIDI data . A central feature protocol byte MIDI data deliver real timeâin word , stream . The data contain timing information ; event process 's receive , 's assume arrive correct time . That model fine note generate live musician , 's insufficient want store note later playback , want compose real time . This limitation understandable realize MIDI originally design musical performance , way keyboard musician control one synthesizer , back day many musician use computer . ( The first version specification release 1984 . ) Sequenced Data Standard MIDI Files The Standard MIDI Files part MIDI specification address timing limitation MIDI wire protocol . A standard MIDI file digital file contain MIDI event . An event simply MIDI message , define MIDI wire protocol , additional piece information specify event 's timing . ( There also event n't correspond MIDI wire protocol message , 'll see next section . ) The additional timing information series byte indicate perform operation describe message . In word , standard MIDI file specifies note play , exactly play . It 's bit like musical score . The information standard MIDI file refer sequence . A standard MIDI file contain one track . Each track typically contain note single instrument would play music perform live musician . A sequencer software hardware device read sequence deliver MIDI message contain right time . A sequencer bit like orchestra conductor : information note , include timing , tell entity perform note . The Java Sound API 's Representation MIDI Data Now 've sketch MIDI specification 's approach stream sequence musical data , let 's examine Java Sound API represent data . MIDI Messages MidiMessage abstract class represent `` raw '' MIDI message . A `` raw '' MIDI message usually message define MIDI wire protocol . It also one event define Standard MIDI Files specification , without event 's timing information . There three category raw MIDI message , represent Java Sound API three respective MidiMessage subclass : ShortMessages common message two data byte follow status byte . The channel message , Note On Note Off , short message , message . SysexMessages contain system-exclusive MIDI message . They may many byte , generally contain manufacturer-specific instruction . MetaMessages occur MIDI file , MIDI wire protocol . Meta message contain data , lyric tempo setting , might useful sequencer usually meaningless synthesizer . MIDI Events As 've see , standard MIDI file contain event wrapper `` raw '' MIDI message along timing information . An instance Java Sound API 's MidiEvent class represent event might store standard MIDI file . The API MidiEvent include method set get event 's timing value . There 's also method retrieve embedded raw MIDI message , instance subclass MidiMessage , discuss next . ( The embed raw MIDI message set construct MidiEvent . ) Sequences Tracks As mention earlier , standard MIDI file store event arrange track . Usually file represent one musical composition , usually track represent part might play single instrumentalist . Each note instrumentalist play represent least two event : Note On start note , Note Off end . The track may also contain event n't correspond note , meta-events ( mention ) . The Java Sound API organize MIDI data three-part hierarchy : Sequence Track MidiEvent A Track collection MidiEvents , Sequence collection Tracks . This hierarchy reflect file , track , event Standard MIDI Files specification . ( Note : hierarchy term containment ownership ; 's class hierarchy term inheritance . Each three class inherit directly java.lang.Object . ) Sequences read MIDI file , create scratch edit add Tracks Sequence ( remove ) . Similarly , MidiEvents add remove track sequence . The Java Sound API 's Representation MIDI Devices The previous section explain MIDI message represent Java Sound API . However , MIDI message n't exist vacuum . They 're typically send one device another . A program use Java Sound API generate MIDI message scratch , often message instead create software device , sequencer , receive outside computer MIDI input port . Such device usually send message another device , synthesizer MIDI output port . The MidiDevice Interface In world external MIDI hardware device , many device transmit MIDI message device also receive message device . Similarly , Java Sound API , software object implement MidiDevice interface transmit receive message . Such object implement purely software , serve interface hardware sound card 's MIDI capability . The base MidiDevice interface provide functionality generally require MIDI input output port . Synthesizers sequencer , however , implement one subinterfaces MidiDevice : Synthesizer Sequencer , respectively . The MidiDevice interface include API opening closing device . It also include inner class call MidiDevice.Info provide textual description device , include name , vendor , version . If 've read sampled-audio portion tutorial , API probably sound familiar , design similar javax.sampled.Mixer interface , represent audio device analogous inner class , Mixer.Info . Transmitters Receivers Most MIDI device capable send MidiMessages , receive , . The way device send data via one transmitter object `` . '' Similarly , way device receive data via one receiver object . The transmitter object implement Transmitter interface , receiver implement Receiver interface . Each transmitter connect one receiver time , vice versa . A device send MIDI message multiple device simultaneously multiple transmitter , connect receiver different device . Similarly , device receive MIDI message one source time must via multiple receiver . Sequencers A sequencer device capture play back sequence MIDI event . It transmitter , typically send MIDI message store sequence another device , synthesizer MIDI output port . It also receiver , capture MIDI message store sequence . To superinterface , MidiDevice , Sequencer add method basic MIDI sequence operation . A sequencer load sequence MIDI file , query set sequence 's tempo , synchronize device . An application program register object notify sequencer process certain kind event . Synthesizers A Synthesizer device generate sound . It 's object javax.sound.midi package produce audio data . A synthesizer device control set MIDI channel object — typically 16 , since MIDI specification call 16 MIDI channel . These MIDI channel object instance class implement MidiChannel interface , whose method represent MIDI specification 's `` channel voice message '' `` channel mode message . '' An application program generate sound directly invoke method synthesizer 's MIDI channel object . More commonly , though , synthesizer generate sound response message send one receiver . These message might send sequencer MIDI input port , example . The synthesizer parse message receiver get , usually dispatch corresponding command ( noteOn controlChange ) one MidiChannel object , accord MIDI channel number specify event . The MidiChannel use note information message synthesize music . For example , noteOn message specify note 's pitch `` velocity '' ( volume ) . However , note information insufficient ; synthesizer also require precise instruction create audio signal note . These instruction represent Instrument . Each Instrument typically emulate different real-world musical instrument sound effect . The Instruments might come presets synthesizer , might load soundbank file . In synthesizer , Instruments arrange bank number ( think row ) program number ( columns ) . This section provide background understand MIDI data , introduce important interface class relate MIDI Java Sound API . Subsequent section show access use object application program .