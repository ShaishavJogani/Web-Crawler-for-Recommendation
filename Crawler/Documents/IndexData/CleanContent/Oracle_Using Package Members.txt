The type comprise package know package member . To use public package member outside package , must one following : Refer member fully qualify name Import package member Import member 's entire package Each appropriate different situation , explain section follow . Referring Package Member Its Qualified Name So far , example tutorial refer type simple name , Rectangle StackOfInts . You use package member 's simple name code write package member member import . However , try use member different package package import , must use member 's fully qualify name , include package name . Here fully qualify name Rectangle class declare graphic package previous example . graphics.Rectangle You could use qualified name create instance graphics.Rectangle : graphics.Rectangle myRect = new graphics.Rectangle ( ) ; Qualified name right infrequent use . When name use repetitively , however , type name repeatedly become tedious code become difficult read . As alternative , import member package use simple name . Importing Package Member To import specific member current file , put import statement beginning file type definition package statement , one . Here 's would import Rectangle class graphic package create previous section . import graphics.Rectangle ; Now refer Rectangle class simple name . Rectangle myRectangle = new Rectangle ( ) ; This approach work well use member graphic package . But use many type package , import entire package . Importing Entire Package To import type contain particular package , use import statement asterisk ( * ) wildcard character . import graphic . * ; Now refer class interface graphic package simple name . Circle myCircle = new Circle ( ) ; Rectangle myRectangle = new Rectangle ( ) ; The asterisk import statement use specify class within package , show . It use match subset class package . For example , following match class graphic package begin A . // work import graphics.A* ; Instead , generate compiler error . With import statement , generally import single package member entire package . Note : Another , less common form import allows import public nest class enclosing class . For example , graphics.Rectangle class contain useful nested class , Rectangle.DoubleWide Rectangle.Square , could import Rectangle nested class use follow two statement . import graphics.Rectangle ; import graphics.Rectangle . * ; Be aware second import statement import Rectangle . Another less common form import , static import statement , discuss end section . For convenience , Java compiler automatically import two entire package source file : ( 1 ) java.lang package ( 2 ) current package ( package current file ) . Apparent Hierarchies Packages At first , package appear hierarchical , . For example , Java API include java.awt package , java.awt.color package , java.awt.font package , many others begin java.awt . However , java.awt.color package , java.awt.font package , java.awt.xxxx package include java.awt package . The prefix java.awt ( Java Abstract Window Toolkit ) use number related package make relationship evident , show inclusion . Importing java.awt . * import type java.awt package , import java.awt.color , java.awt.font , java.awt.xxxx package . If plan use class type java.awt.color well java.awt , must import package file : import java.awt . * ; import java.awt.color . * ; Name Ambiguities If member one package share name member another package package import , must refer member qualified name . For example , graphic package define class name Rectangle . The java.awt package also contain Rectangle class . If graphic java.awt import , following ambiguous . Rectangle rect ; In situation , use member 's fully qualify name indicate exactly Rectangle class want . For example , graphics.Rectangle rect ; The Static Import Statement There situation need frequent access static final field ( constant ) static method one two class . Prefixing name class result cluttered code . The static import statement give way import constant static method want use need prefix name class . The java.lang.Math class define PI constant many static method , include method calculate sine , cosine , tangent , square root , maximum , minimum , exponent , many . For example , public static final double PI = 3.141592653589793 ; public static double co ( double ) { ... } Ordinarily , use object another class , prefix class name , follow . double r = Math.cos ( Math.PI * theta ) ; You use static import statement import static member java.lang.Math n't need prefix class name , Math . The static member Math import either individually : import static java.lang.Math.PI ; group : import static java.lang.Math . * ; Once import , static member use without qualification . For example , previous code snippet would become : double r = co ( PI * theta ) ; Obviously , write class contain constant static method use frequently , use static import statement . For example , import static mypackage.MyConstants . * ; Note : Use static import sparingly . Overusing static import result code difficult read maintain , reader code wo n't know class define particular static object . Used properly , static import make code readable remove class name repetition .