The javax.sound.sampled package fundamentally concern audio transport — word , Java Sound API focus playback capture . The central task Java Sound API address move byte formatted audio data system . This task involve open audio input output device manage buffer get fill real-time sound data . It also involve mix multiple stream audio one stream ( whether input output ) . The transport sound system correctly handle user request flow sound start , pause , resume , stop . To support focus basic audio input output , Java Sound API provide method convert various audio data format , reading write common type sound file . However , attempt comprehensive sound-file toolkit . A particular implementation Java Sound API need support extensive set file type data format conversion . Third-party service provider supply module `` plug '' exist implementation support additional file type conversion . The Java Sound API handle audio transport streaming , buffer fashion in-memory , unbuffered fashion . `` Streaming '' use general sense refer real-time handling audio byte ; refer specific , well-known case send audio Internet certain format . In word , stream audio simply continuous set audio byte arrive less rate handle ( play , record , etc. ) . Operations byte commence data arrive . In streaming model , particularly case audio input rather audio output , necessarily know advance long sound finish arriving . You simply handle one buffer audio data time , operation halt . In case audio output ( playback ) , also need buffer data sound want play large fit memory . In word , deliver audio bytes sound engine chunk , take care play sample right time . Mechanisms provide make easy know much data deliver chunk . The Java Sound API also permit unbuffered transport case playback , assume already audio data hand large fit memory . In situation , need application program buffer audio , although buffered , real-time approach still available desire . Instead , entire sound preloaded memory subsequent playback . Because sound data load advance , playback start immediately — example , soon user click Start button . This advantage compare buffer model , playback wait first buffer fill . In addition , in-memory , unbuffered model allow sound easily loop ( cycle ) set arbitrary position data . To play capture sound use Java Sound API , need least three thing : format audio data , mixer , line . The follow provide overview concept . What Formatted Audio Data ? Formatted audio data refers sound number standard format . The Java Sound API distinguishes data format file format . Data Formats A data format tell interpret series byte `` raw '' sample audio data , sample already read sound file , sample capture microphone input . You might need know , example , many bit constitute one sample ( representation short instant sound ) , similarly might need know sound 's sample rate ( fast sample suppose follow one another ) . When set playback capture , specify data format sound capture playing . In Java Sound API , data format represent AudioFormat object , include following attribute : Encoding technique , usually pulse code modulation ( PCM ) Number channel ( 1 mono , 2 stereo , etc . ) Sample rate ( number sample per second , per channel ) Number bit per sample ( per channel ) Frame rate Frame size byte Byte order ( big-endian little-endian ) PCM one kind encoding sound waveform . The Java Sound API include two PCM encoding use linear quantization amplitude , sign unsigned integer value . Linear quantization mean number store sample directly proportional ( except distortion ) original sound pressure instantâand similarly proportional displacement loudspeaker eardrum vibrate sound instant . Compact disc , example , use linear PCM-encoded sound . Mu-law encoding a-law encoding common nonlinear encoding provide compressed version audio data ; encoding typically use telephony recording speech . A nonlinear encoding map original sound 's amplitude store value use nonlinear function , design give amplitude resolution quiet sound loud sound . A frame contain data channel particular time . For PCM-encoded data , frame simply set simultaneous sample channel , give instant time , without additional information . In case , frame rate equal sample rate , frame size byte number channel multiply sample size bit , divide number bit byte . For kind encoding , frame might contain additional information besides sample , frame rate might completely different sample rate . For example , consider MP3 ( MPEG-1 Audio Layer 3 ) encoding , explicitly mention current version Java Sound API , could support implementation Java Sound API third-party service provider . In MP3 , frame contain bundle compress data series sample , one sample per channel . Because frame encapsulate whole series sample , frame rate slow sample rate . The frame also contain header . Despite header , frame size byte less size byte equivalent number PCM frame . ( After , purpose MP3 compact PCM data . ) For encoding , sample rate sample size refer PCM data encode sound eventually convert deliver digital-to-analog converter ( DAC ) . File Formats A file format specify structure sound file , include format raw audio data file , also information store file . Sound file come various standard variety , WAVE ( also know WAV , often associate PCs ) , AIFF ( often associate Macintoshes ) , AU ( often associate UNIX system ) . The different type sound file different structure . For example , might different arrangement data file 's `` header . '' A header contain descriptive information typically precede file 's actual audio sample , although file format allow successive `` chunk '' descriptive audio data . The header include specification data format use store audio sound file . Any type sound file contain various data format ( although usually one data format within give file ) , data format use file different file format . In Java Sound API , file format represent AudioFileFormat object , contain : The file type ( WAVE , AIFF , etc . ) The file 's length bytes The length , frame , audio data contain file An AudioFormat object specify data format audio data contain file The AudioSystem class provide method reading write sound different file format , convert different data format . Some method let access file 's content kind stream call AudioInputStream . An AudioInputStream subclass InputStream class , encapsulate series byte read sequentially . To superclass , AudioInputStream class add knowledge byte ' audio data format ( represent AudioFormat object ) . By read sound file AudioInputStream , get immediate access sample , without worry sound file 's structure ( header , chunk , etc. ) . A single method invocation give information need data format file type . What Mixer ? Many application program interface ( APIs ) sound make use notion audio device . A device often software interface physical input/output device . For example , sound-input device might represent input capability sound card , include microphone input , line-level analog input , perhaps digital audio input . In Java Sound API , device represent Mixer object . The purpose mixer handle one stream audio input one stream audio output . In typical case , actually mix together multiple incoming stream one outgo stream . A Mixer object represent sound-mixing capability physical device sound card , might need mix sound come computer various input , sound come application program go output . Alternatively , Mixer object represent sound-mixing capability implement entirely software , without inherent interface physical device . In Java Sound API , component microphone input sound card consider device — , mixer — rather port mixer . A port typically provide single stream audio mixer ( although stream multichannel , stereo ) . The mixer might several port . For example , mixer represent sound card 's output capability might mix several stream audio together , send mixed signal various output port connect mixer . These output port could ( example ) headphone jack , built-in speaker , line-level output . To understand notion mixer Java Sound API , help visualize physical mixing console , use live concert record studio .