Let 's start task simple , potentially time-consuming . The TumbleItem applet load set graphic file use animation . If graphic file load initial thread , may delay GUI appear . If graphic file load event dispatch thread , GUI may temporarily unresponsive . To avoid problem , TumbleItem create execute instance SwingWorker initial thread . The object 's doInBackground method , execute worker thread , load image ImageIcon array , return reference . Then method , execute event dispatch thread , invoke get retrieve reference , assign applet class field name imgs . This allow TumbleItem construct GUI immediately , without wait image finish loading . Here code defines execute SwingWorker object . SwingWorker worker = new SwingWorker < ImageIcon [ ] , Void > ( ) { @ Override public ImageIcon [ ] doInBackground ( ) { final ImageIcon [ ] innerImgs = new ImageIcon [ nimgs ] ; ( int = 0 ; < nimgs ; i++ ) { innerImgs [ ] = loadImage ( i+1 ) ; } return innerImgs ; } @ Override public void ( ) { //Remove `` Loading image '' label . animator.removeAll ( ) ; loopslot = -1 ; try { imgs = get ( ) ; } catch ( InterruptedException ignore ) { } catch ( java.util.concurrent.ExecutionException e ) { String = null ; Throwable cause = e.getCause ( ) ; ( cause ! = null ) { = cause.getMessage ( ) ; } else { = e.getMessage ( ) ; } System.err.println ( `` Error retrieve file : `` + ) ; } } } ; All concrete subclass SwingWorker implement doInBackground ; implementation optional . Notice SwingWorker generic class , two type parameter . The first type parameter specify return type doInBackground , also get method , invoke thread retrieve object return doInBackground . SwingWorker 's second type parameter specify type interim result return background task still active . Since example n't return interim result , Void use placeholder . You may wonder code set imgs unnecessarily complicate . Why make doInBackground return object use retrieve ? Why doInBackground set imgs directly ? The problem object imgs refers create worker thread use event dispatch thread . When object share thread way , must make sure change make one thread visible . Using get guarantee , use get create happens relationship code create imgs code use . For happens relationship , refer Memory Consistency Errors Concurrency lesson . There actually two way retrieve object return doInBackground . Invoke SwingWorker.get argument . If background task finish , get block . Invoke SwingWorker.get argument indicate timeout . If background task finish , get block â€” unless timeout expire first , case get throw java.util.concurrent.TimeoutException . Be careful invoke either overload get event dispatch thread ; get return , GUI event process , GUI `` frozen '' . Do n't invoke get without argument unless confident background task complete close completion . For TumbleItem example , refer How Use Swing Timers lesson Using Other Swing Features .