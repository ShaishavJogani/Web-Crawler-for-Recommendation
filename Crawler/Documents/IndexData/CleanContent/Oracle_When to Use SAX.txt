It helpful understand SAX event model want convert exist data XML . The key conversion process modify exist application deliver SAX event read data . SAX fast efficient , event model make useful state-independent filtering . For example , SAX parser call one method application element tag encounter call different method text find . If processing state-independent ( mean depend element come ) , SAX work fine . On hand , state-dependent processing , program need one thing data element A something different data element B , pull parser Streaming API XML ( StAX ) would good choice . With pull parser , get next node , whatever happen , point code ask . So easy vary way process text ( example ) , process multiple place program ( detail , see Further Information ) . SAX require much less memory DOM , SAX construct internal representation ( tree structure ) XML data , DOM . Instead , SAX simply send data application read ; application whatever want data see . Pull parser SAX API act like serial I/O stream . You see data stream , go back early position leap ahead different position . In general , parser work well simply want read data application act . But need modify XML structure - especially need modify interactively - in-memory structure make sense . DOM one model . However , although DOM provide many powerful capability large-scale document ( like book article ) , also require lot complex coding . The detail process highlight When Use DOM next lesson . For simpler application , complexity may well unnecessary . For faster development simpler application , one object-oriented XML-programming standard , JDOM ( http : //www.jdom.org ) DOM4J ( http : //www.dom4j.org/ ) , might make sense .