The class javax.naming.ldap.Rdn represent Relative Distinguished name ( RDN ) specify RFC 2253 . An RDN represent component DN explain Manipulating LdapName lesson . An RDN make type value pair ( ) . Examples RDNs : OU=Sun OU=Sales+CN=J.Smith . The example show representation multi-valued RDN . The Rdn class provide method access name/value pair ( ) RDN , obtain string representation , retrieve Attributes view , compare determine equality RDNs method escape unescape value part RDN . The Rdn class immutable . Constructing Rdn An Rdn construct specify name value pair , 's single name/value pair RDN . For multi-valued RDN , create attribute set consisting name/value pair use constructor take Attributes argument . You also create Rdn string representation specify RFC 2253 . Finally , clone Rdn use copy constructor . Here example create RDNs use different type constructor . Rdn rdn1 = new Rdn ( `` ou= Juicy\\ , Fruit '' ) ; System.out.println ( `` rdn1 : '' + rdn1.toString ( ) ) ; Rdn rdn2 = new Rdn ( rdn1 ) ; System.out.println ( `` rdn2 : '' + rdn2.toString ( ) ) ; Attributes attrs = new BasicAttributes ( ) ; attrs.put ( `` ou '' , `` Juicy , Fruit '' ) ; attrs.put ( `` cn '' , `` Mango '' ) ; Rdn rdn3 = new Rdn ( attrs ) ; System.out.println ( `` rdn3 : '' + rdn3.toString ( ) ) ; Rdn rdn4 = new Rdn ( `` ou '' , `` Juicy , Fruit '' ) ; System.out.println ( `` rdn4 : '' + rdn4.toString ( ) ) ; Accessing type/value pair RDN The type/values RDN obtain use method : getType ( ) getValue ( ) toAttributes ( ) For RDN make single type/value pair , getType ( ) method return type getValue ( ) method return value RDN . The method toAttributes ( ) return attribute view type/value pair . The example print type/value pair RDNs . Attributes attrs = new BasicAttributes ( ) ; attrs.put ( `` '' , `` Yellow '' ) ; attrs.put ( `` cn '' , `` Mango '' ) ; // create binary value RDN byte [ ] mangoJuice = new byte [ 6 ] ; ( int = 0 ; < mangoJuice.length ; i++ ) { mangoJuice [ ] = ( byte ) ; } attrs.put ( `` ou '' , mangoJuice ) ; Rdn rdn = new Rdn ( attrs ) ; System.out.println ( ) ; System.out.println ( `` size : '' + rdn.size ( ) ) ; System.out.println ( `` getType ( ) : `` + rdn.getType ( ) ) ; System.out.println ( `` getValue ( ) : `` + rdn.getValue ( ) ) ; // test toAttributes System.out.println ( ) ; System.out.println ( `` toAttributes ( ) : `` + rdn.toAttributes ( ) ) ; Getting String Representation In order get string representation RDN format accord syntax specify RFC 2253 , use : toString ( ) When use Rdn constructor take String argument , supply string representation RDN , get back Rdn instance . To reverse , , get string representation Rdn instance , use toString ( ) . The result toString ( ) feed back Rdn constructor produce Rdn instance equal original Rdn instance . Here 's example : Rdn rdn = new Rdn ( `` cn=Juicy\\ , Fruit '' ) ; String str = rdn.toString ( ) ; System.out.println ( str ) ; Rdn rdn2 = new Rdn ( str ) ; System.out.println ( rdn.equals ( rdn2 ) ) ; // true Comparing RDNs The method enable comparison RDNs : equal ( Object Rdn ) compareTo ( Object Rdn ) You use compareTo ( ) sort list Rdn instance . equal ( ) let determine whether two Rdns syntactically equal . Two Rdns equal ( case-exact match ) type/value pair . The order component multi-valued RDNs significant . Here 's example : Rdn one = new Rdn ( `` ou=Sales+cn=Bob '' ) ; Rdn two = new Rdn ( `` cn=Bob+ou=Sales '' ) ; Rdn three = new Rdn ( `` ou=Sales+cn=Bob+c=US '' ) ; Rdn four = new Rdn ( `` cn=lowercase '' ) ; Rdn five = new Rdn ( `` cn=LowerCASE '' ) ; System.out.println ( one.equals ( two ) ) ; // true System.out.println ( two.equals ( three ) ) ; // false System.out.println ( one.equals ( three ) ) ; // false System.out.println ( four.equals ( five ) ) ; // true Escaping Unescaping Special Characters One best use Rdn class one deal DNs consist special character . It automatically take care escape unescaping special character . The character '\ ' ( backslash ) , ' , ' ( comma ) , + ( plus ) etc specific semantic accord RFC 2253 . You find list special character RFC2253 . When character use literal DN , must escape '\ ' ( blackslash ) . For example , consider RDN : cn=Juicy , Fruit The character , ( comma ) appear Juicy Fruit special character need escape '\ ' ( blackslash ) . The result syntactically format RDN look : cn=Juicy\ , Fruit However , '\ ' ( backslash ) character special character accord Java Language String syntax , need escape '\ ' ( backslash ) . The Java Language String format RFC 2253 use '\ ' ( backslash ) escape special character . And therefore Java format RDN String look : cn=Juicy\\ , Fruit Note , mention format rule apply value component Rdn . The Rdn class provide two static method handle automatic escaping unescaping RDN value : escapeValue ( ) unescapeValue ( ) The example show get string representation DN without deal syntax handle special character define RFC 2253 . // DN ' , ' ( comma ) String unformatted = `` Juicy , Fruit '' ; String format = Rdn.escapeValue ( unformatted ) ; LdapName dn = new LdapName ( `` cn= '' + format ) ; System.out.println ( `` dn : '' + dn ) ; unformatted = `` true+false '' ; format = Rdn.escapeValue ( unformatted ) ; dn = new LdapName ( `` cn= '' + format ) ; System.out.println ( `` dn : '' + dn ) ; // DN binary value one one attribute value byte [ ] bytes = new byte [ ] { 1 , 2 , 3 , 4 } ; format = Rdn.escapeValue ( byte ) ; System.out.println ( `` Orig val : `` + byte + `` Escaped val : `` + format ) ; Similarly use static unescapeValue ( ) method one obtain original string format value . Here example retrieve original value . // DN ' , ' ( comma ) String unformatted = `` Juicy , Fruit '' ; String format = Rdn.escapeValue ( unformatted ) ; System.out.println ( `` Formatted : '' + format ) ; Object original = Rdn.unescapeValue ( format ) ; System.out.println ( `` Original : '' + original ) ; // DN '+ ' ( plus ) unformatted = `` true+false '' ; format = Rdn.escapeValue ( unformatted ) ; System.out.println ( `` Formatted : '' + format ) ; original = Rdn.unescapeValue ( format ) ; System.out.println ( `` Original : '' + original ) ; // DN binary value one one attribute value byte [ ] bytes = new byte [ ] { 1 , 2 , 3 , 4 } ; format = Rdn.escapeValue ( byte ) ; System.out.println ( `` Formatted : '' + format ) ; original = Rdn.unescapeValue ( format ) ; System.out.println ( `` Original : '' + original ) ;