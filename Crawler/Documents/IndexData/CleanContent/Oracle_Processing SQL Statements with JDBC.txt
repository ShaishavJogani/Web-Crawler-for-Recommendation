In general , process SQL statement JDBC , follow step : Establishing connection . Create statement . Execute query . Process ResultSet object . Close connection . This page use following method , CoffeesTables.viewTable , tutorial sample demonstrate step . This method output content table COFFEES . This method discuss detail later tutorial : public static void viewTable ( Connection con , String dbName ) throw SQLException { Statement stmt = null ; String query = `` select COF_NAME , SUP_ID , PRICE , `` + `` SALES , TOTAL `` + `` `` + dbName + `` .COFFEES '' ; try { stmt = con.createStatement ( ) ; ResultSet rs = stmt.executeQuery ( query ) ; ( rs.next ( ) ) { String coffeeName = rs.getString ( `` COF_NAME '' ) ; int supplierID = rs.getInt ( `` SUP_ID '' ) ; float price = rs.getFloat ( `` PRICE '' ) ; int sale = rs.getInt ( `` SALES '' ) ; int total = rs.getInt ( `` TOTAL '' ) ; System.out.println ( coffeeName + `` \t '' + supplierID + `` \t '' + price + `` \t '' + sale + `` \t '' + total ) ; } } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } finally { ( stmt ! = null ) { stmt.close ( ) ; } } } Establishing Connections First , establish connection data source want use . A data source DBMS , legacy file system , source data corresponding JDBC driver . This connection represent Connection object . See Establishing Connection information . Creating Statements A Statement interface represent SQL statement . You execute Statement object , generate ResultSet object , table data represent database result set . You need Connection object create Statement object . For example , CoffeesTables.viewTable create Statement object following code : stmt = con.createStatement ( ) ; There three different kind statement : Statement : Used implement simple SQL statement parameter . PreparedStatement : ( Extends Statement . ) Used precompiling SQL statement might contain input parameter . See Using Prepared Statements information . CallableStatement : ( Extends PreparedStatement . ) Used execute stored procedure may contain input output parameter . See Stored Procedures information . Executing Queries To execute query , call execute method Statement following : execute : Returns true first object query return ResultSet object . Use method query could return one ResultSet object . Retrieve ResultSet object return query repeatedly call Statement.getResultSet . executeQuery : Returns one ResultSet object . executeUpdate : Returns integer represent number row affect SQL statement . Use method use INSERT , DELETE , UPDATE SQL statement . For example , CoffeesTables.viewTable execute Statement object following code : ResultSet r = stmt.executeQuery ( query ) ; See Retrieving Modifying Values Result Sets information . Processing ResultSet Objects You access data ResultSet object cursor . Note cursor database cursor . This cursor pointer point one row data ResultSet object . Initially , cursor position first row . You call various method define ResultSet object move cursor . For example , CoffeesTables.viewTable repeatedly call method ResultSet.next move cursor forward one row . Every time call next , method output data row cursor currently position : try { stmt = con.createStatement ( ) ; ResultSet rs = stmt.executeQuery ( query ) ; ( rs.next ( ) ) { String coffeeName = rs.getString ( `` COF_NAME '' ) ; int supplierID = rs.getInt ( `` SUP_ID '' ) ; float price = rs.getFloat ( `` PRICE '' ) ; int sale = rs.getInt ( `` SALES '' ) ; int total = rs.getInt ( `` TOTAL '' ) ; System.out.println ( coffeeName + `` \t '' + supplierID + `` \t '' + price + `` \t '' + sale + `` \t '' + total ) ; } } // ... See Retrieving Modifying Values Result Sets information . Closing Connections When finish use Statement , call method Statement.close immediately release resource use . When call method , ResultSet object close . For example , method CoffeesTables.viewTable ensure Statement object close end method , regardless SQLException object throw , wrap finally block : } finally { ( stmt ! = null ) { stmt.close ( ) ; } } JDBC throw SQLException encounter error interaction data source . See Handling SQL Exceptions information . In JDBC 4.1 , available Java SE release 7 later , use try-with-resources statement automatically close Connection , Statement , ResultSet object , regardless whether SQLException throw . An automatic resource statement consist try statement one declared resource . For example , modify CoffeesTables.viewTable Statement object close automatically , follow : public static void viewTable ( Connection con ) throw SQLException { String query = `` select COF_NAME , SUP_ID , PRICE , `` + `` SALES , TOTAL `` + `` COFFEES '' ; try ( Statement stmt = con.createStatement ( ) ) { ResultSet rs = stmt.executeQuery ( query ) ; ( rs.next ( ) ) { String coffeeName = rs.getString ( `` COF_NAME '' ) ; int supplierID = rs.getInt ( `` SUP_ID '' ) ; float price = rs.getFloat ( `` PRICE '' ) ; int sale = rs.getInt ( `` SALES '' ) ; int total = rs.getInt ( `` TOTAL '' ) ; System.out.println ( coffeeName + `` , `` + supplierID + `` , `` + price + `` , `` + sale + `` , `` + total ) ; } } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } } The following statement try-with-resources statement , declare one resource , stmt , automatically close try block terminates : try ( Statement stmt = con.createStatement ( ) ) { // ... } See The try-with-resources Statement Essential Classes trail information .