The previous lesson trail show create JMX technology MBeans MXBeans , register JMX agent . However , previous example use exist JMX client , JConsole . This lesson demonstrate create custom JMX client . An example custom JMX client , Client include jmx_examples.zip . This JMX client interacts MBean , MXBean JMX agent see previous lesson . Due size Client class , examine chunk , following section . Importing JMX Remote API Classes To able create connection JMX agent run remotely JMX client , need use class javax.management.remote . package com.example ; ... import javax.management.remote.JMXConnector ; import javax.management.remote.JMXConnectorFactory ; import javax.management.remote.JMXServiceURL ; public class Client { ... The Client class create JMXConnector instance , need JMXConnectorFactory JMXServiceURL . Creating Notification Listener The JMX client need notification handler , listen process notification might send MBeans register JMX agent 's MBean server . The JMX client 's notification handler instance NotificationListener interface , show . ... public static class ClientListener implement NotificationListener { public void handleNotification ( Notification notification , Object handback ) { echo ( `` \nReceived notification : '' ) ; echo ( `` \tClassName : `` + notification.getClass ( ) .getName ( ) ) ; echo ( `` \tSource : `` + notification.getSource ( ) ) ; echo ( `` \tType : `` + notification.getType ( ) ) ; echo ( `` \tMessage : `` + notification.getMessage ( ) ) ; ( notification instanceof AttributeChangeNotification ) { AttributeChangeNotification acn = ( AttributeChangeNotification ) notification ; echo ( `` \tAttributeName : `` + acn.getAttributeName ( ) ) ; echo ( `` \tAttributeType : `` + acn.getAttributeType ( ) ) ; echo ( `` \tNewValue : `` + acn.getNewValue ( ) ) ; echo ( `` \tOldValue : `` + acn.getOldValue ( ) ) ; } } } ... This notification listener determine origin notification receive , retrieve information store notification . It perform different action notification information accord type notification receive . In case , listener receive notification type AttributeChangeNotification obtain name type MBean attribute change , well old new value , call AttributeChangeNotification method getAttributeName , getAttributeType , getNewValue getOldValue . A new ClientListener instance create later code . ClientListener listener = new ClientListener ( ) ; Creating RMI Connector Client The Client class create RMI connector client configure connect RMI connector server launch start JMX agent , Main . This allow JMX client interact JMX agent run machine . ... public static void main ( String [ ] args ) throw Exception { echo ( `` \nCreate RMI connector client `` + `` connect RMI connector server '' ) ; JMXServiceURL url = new JMXServiceURL ( `` service : jmx : rmi : ///jndi/rmi : //:9999/jmxrmi '' ) ; JMXConnector jmxc = JMXConnectorFactory.connect ( url , null ) ; ... As see , Client define JMXServiceURL name url , represent location connector client expect find connector server . This URL allow connector client retrieve RMI connector server stub jmxrmi RMI registry run port 9999 local host , connect RMI connector server . With RMI registry thus identify , connector client create . The connector client , jmxc , instance interface JMXConnector , create connect ( ) method JMXConnectorFactory . The connect ( ) method pass parameter url null environment map call . Connecting Remote MBean Server With RMI connection place , JMX client must connect remote MBean server , interact various MBeans register remote JMX agent . ... MBeanServerConnection mbsc = jmxc.getMBeanServerConnection ( ) ; ... An instance MBeanServerConnection , name mbsc , create call getMBeanServerConnection ( ) method JMXConnector instance jmxc . The connector client connect MBean server create JMX agent , register MBeans perform operation connection remain completely transparent end . To start , client define simple operation discover information MBeans find agent 's MBean server . ... echo ( `` \nDomains : '' ) ; String domain [ ] = mbsc.getDomains ( ) ; Arrays.sort ( domain ) ; ( String domain : domain ) { echo ( `` \tDomain = `` + domain ) ; } ... echo ( `` \nMBeanServer default domain = `` + mbsc.getDefaultDomain ( ) ) ; echo ( `` \nMBean count = `` + mbsc.getMBeanCount ( ) ) ; echo ( `` \nQuery MBeanServer MBeans : '' ) ; Set < ObjectName > names = new TreeSet < ObjectName > ( mbsc.queryNames ( null , null ) ) ; ( ObjectName name : name ) { echo ( `` \tObjectName = `` + name ) ; } ... The client call various method MBeanServerConnection order obtain domain different MBeans operate , number MBeans register MBean server , object name MBeans discover . Performing Operations Remote MBeans via Proxies The client access Hello MBean MBean server MBean server connection create MBean proxy . This MBean proxy local client , emulate remote MBean . ... ObjectName mbeanName = new ObjectName ( `` com.example : type=Hello '' ) ; HelloMBean mbeanProxy = JMX.newMBeanProxy ( mbsc , mbeanName , HelloMBean.class , true ) ; echo ( `` \nAdd notification listener ... '' ) ; mbsc.addNotificationListener ( mbeanName , listener , null , null ) ; echo ( `` \nCacheSize = `` + mbeanProxy.getCacheSize ( ) ) ; mbeanProxy.setCacheSize ( 150 ) ; echo ( `` \nWaiting notification ... '' ) ; sleep ( 2000 ) ; echo ( `` \nCacheSize = `` + mbeanProxy.getCacheSize ( ) ) ; echo ( `` \nInvoke sayHello ( ) Hello MBean ... '' ) ; mbeanProxy.sayHello ( ) ; echo ( `` \nInvoke add ( 2 , 3 ) Hello MBean ... '' ) ; echo ( `` \nadd ( 2 , 3 ) = `` + mbeanProxy.add ( 2 , 3 ) ) ; waitForEnterPressed ( ) ; ... MBean proxy allow access MBean Java interface , allow make call proxy rather write lengthy code access remote MBean . An MBean proxy Hello create call method newMBeanProxy ( ) javax.management.JMX class , pass MBean 's MBeanServerConnection , object name , class name MBean interface true , signify proxy must behave NotificationBroadcaster . The JMX client perform operation define Hello operation locally registered MBean . The JMX client also add notification listener change MBean 's CacheSize attribute , make send notification . Performing Operations Remote MXBeans via Proxies You create proxy MXBeans exactly way create MBean proxy . ... ObjectName mxbeanName = new ObjectName ( `` com.example : type=QueueSampler '' ) ; QueueSamplerMXBean mxbeanProxy = JMX.newMXBeanProxy ( mbsc , mxbeanName , QueueSamplerMXBean.class ) ; QueueSample queue1 = mxbeanProxy.getQueueSample ( ) ; echo ( `` \nQueueSample.Date = `` + queue1.getDate ( ) ) ; echo ( `` QueueSample.Head = `` + queue1.getHead ( ) ) ; echo ( `` QueueSample.Size = `` + queue1.getSize ( ) ) ; echo ( `` \nInvoke clearQueue ( ) QueueSampler MXBean ... '' ) ; mxbeanProxy.clearQueue ( ) ; QueueSample queue2 = mxbeanProxy.getQueueSample ( ) ; echo ( `` \nQueueSample.Date = `` + queue2.getDate ( ) ) ; echo ( `` QueueSample.Head = `` + queue2.getHead ( ) ) ; echo ( `` QueueSample.Size = `` + queue2.getSize ( ) ) ; ... As show , create proxy MXBean , call JMX.newMXBeanProxy instead newMBeanProxy . The MXBean proxy mxbeanProxy allow client invoke QueueSample MXBean 's operation operation locally registered MXBean . Closing Connection Once JMX client obtain information need perform required operation MBeans remote JMX agent 's MBean server , connection must close . jmxc.close ( ) ; The connection close call JMXConnector.close method . To Run Custom JMX Client Example This example require version 6 Java SE platform . To monitor Main JMX agent remotely use custom JMX client Client , follow step : If already , save jmx_examples.zip work_dir directory . Unzip bundle sample class use following command terminal window . unzip jmx_examples.zip Compile example Java class within work_dir directory . javac com/example/*.java Start Main application , specify property expose Main remote management : java -Dcom.sun.management.jmxremote.port=9999 \ -Dcom.sun.management.jmxremote.authenticate=false \ -Dcom.sun.management.jmxremote.ssl=false \ com.example.Main A confirmation Main wait something happen generate . Start Client application different terminal window : java com.example.Client A confirmation MBeanServerConnection obtain display . Press Enter . The domain MBeans register MBean server start Main display . Press Enter . The number MBeans register MBean server display , well object name MBeans . The MBeans displayed include standard platform MXBeans run Java VM , well Hello MBean QueueSampler MXBean register MBean server Main . Press Enter . The Hello MBean 's operation invoke Client , following result : A notification listener add Client listen notification Main . The value CacheSize attribute change 200 150 . In terminal window start Main , confirmation CacheSize attribute change display . In terminal window start Client , notification Main display , inform Client CacheSize attribute change . The Hello MBean 's sayHello operation invoke . In terminal window start Main , message `` Hello world '' display . The Hello MBean 's add operation invoke , value 2 3 parameter . The result display Client . Press Enter . The QueueSampler MXBean 's operation invoke Client , following result : The QueueSample value date , head , size display . The clearQueue operation invoke . Press Enter . The Client close connection MBean server confirmation display .