Just non-reflective code , reflection support ability dynamically create array arbitrary type dimension via java.lang.reflect.Array.newInstance ( ) . Consider ArrayCreator , basic interpreter capable dynamically create array . The syntax parse follow : fully_qualified_class_name variable_name [ ] = { val1 , val2 , val3 , ... } Assume fully_qualified_class_name represent class constructor single String argument . The dimension array determine number value provide . The following example construct instance array fully_qualified_class_name populate value instance give val1 , val2 , etc . ( This example assume familiarity Class.getConstructor ( ) java.lang.reflect.Constructor.newInstance ( ) . For discussion reflection APIs Constructor see Creating New Class Instances section trail . ) import java.lang.reflect.Array ; import java.lang.reflect.Constructor ; import java.lang.reflect.InvocationTargetException ; import java.util.regex.Pattern ; import java.util.regex.Matcher ; import java.util.Arrays ; import static java.lang.System.out ; public class ArrayCreator { private static String = `` java.math.BigInteger bi [ ] = { 123 , 234 , 345 } '' ; private static Pattern p = Pattern.compile ( `` ^\\s* ( \\S+ ) \\s*\\w+\\ [ \\ ] . *\\ { \\s* ( [ ^ } ] + ) \\s*\\ } '' ) ; public static void main ( String ... args ) { Matcher = p.matcher ( ) ; ( m.find ( ) ) { String cName = m.group ( 1 ) ; String [ ] cVals = m.group ( 2 ) .split ( `` [ \\s , ] + '' ) ; int n = cVals.length ; try { Class < ? > c = Class.forName ( cName ) ; Object = Array.newInstance ( c , n ) ; ( int = 0 ; < n ; i++ ) { String v = cVals [ ] ; Constructor ctor = c.getConstructor ( String.class ) ; Object val = ctor.newInstance ( v ) ; Array.set ( , , val ) ; } Object [ ] oo = ( Object [ ] ) ; out.format ( `` % [ ] = % % n '' , cName , Arrays.toString ( oo ) ) ; // production code handle exception gracefully } catch ( ClassNotFoundException x ) { x.printStackTrace ( ) ; } catch ( NoSuchMethodException x ) { x.printStackTrace ( ) ; } catch ( IllegalAccessException x ) { x.printStackTrace ( ) ; } catch ( InstantiationException x ) { x.printStackTrace ( ) ; } catch ( InvocationTargetException x ) { x.printStackTrace ( ) ; } } } } $ java ArrayCreator java.math.BigInteger [ ] = [ 123 , 234 , 345 ] The example show one case may desirable create array via reflection ; namely component type know runtime . In case , code use Class.forName ( ) get class desired component type call specific constructor initialize component array set corresponding array value .