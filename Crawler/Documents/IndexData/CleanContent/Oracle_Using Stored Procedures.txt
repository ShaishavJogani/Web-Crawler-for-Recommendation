A stored procedure group SQL statement form logical unit perform particular task , use encapsulate set operation query execute database server . For example , operation employee database ( hire , fire , promote , lookup ) could cod stored procedure execute application code . Stored procedure compile execute different parameter result , combination input , output , input/output parameter . Note store procedure support DBMSs , fair amount variation syntax capability . Consequently , tutorial contains two class , StoredProcedureJavaDBSample StoredProcedureMySQLSample demonstrate create stored procedure Java DB MySQL , respectively . This page cover following topic : Overview Stored Procedures Examples Parameter Modes Creating Stored Procedures Java DB Creating Stored Procedures Java DB SQL Scripts JDBC API Creating Stored Procedures Java DB Package Java Class JAR File Creating Stored Procedure MySQL Creating Stored Procedure MySQL SQL Scripts JDBC API Calling Stored Procedures Java DB MySQL Overview Stored Procedures Examples The example StoredProcedureJavaDBSample.java StoredProcedureMySQLSample.java create call following stored procedure : SHOW_SUPPLIERS : Prints result set contain name coffee supplier coffee supply The Coffee Break . This stored procedure require parameter . When example call stored procedure , example produce output similar following : Acme , Inc. : Colombian_Decaf Acme , Inc. : Colombian Superior Coffee : French_Roast_Decaf Superior Coffee : French_Roast The High Ground : Espresso GET_SUPPLIER_OF_COFFEE : Prints name supplier supplierName coffee coffeeName . It require following parameter : IN coffeeName varchar ( 32 ) : The name coffee OUT supplierName varchar ( 40 ) : The name coffee supplier When example call stored procedure Colombian value coffeeName , example produce output similar following : Supplier coffee Colombian : Acme , Inc. RAISE_PRICE : Raises price coffee coffeeName price newPrice . If price increase great percentage maximumPercentage , price raise percentage . This procedure change price price newPrice low original price coffee . It require following parameter : IN coffeeName varchar ( 32 ) : The name coffee IN maximumPercentage float : The maximum percentage raise coffee 's price INOUT newPrice numeric ( 10,2 ) : The new price coffee . After RAISE_PRICE store procedure call , parameter contain current price coffee coffeeName . When example call stored procedure Colombian value coffeeName , 0.10 value maximumPercentage , 19.99 value newPrice , example produce output similar following : Contents COFFEES table call RAISE_PRICE : Colombian , 101 , 7.99 , 0 , 0 Colombian_Decaf , 101 , 8.99 , 0 , 0 Espresso , 150 , 9.99 , 0 , 0 French_Roast , 49 , 8.99 , 0 , 0 French_Roast_Decaf , 49 , 9.99 , 0 , 0 Calling procedure RAISE_PRICE Value newPrice call RAISE_PRICE : 8.79 Contents COFFEES table call RAISE_PRICE : Colombian , 101 , 8.79 , 0 , 0 Colombian_Decaf , 101 , 8.99 , 0 , 0 Espresso , 150 , 9.99 , 0 , 0 French_Roast , 49 , 8.99 , 0 , 0 French_Roast_Decaf , 49 , 9.99 , 0 , 0 Parameter Modes The parameter attribute IN ( default ) , OUT , INOUT parameter mode . They define action formal parameter . The follow table summarize information parameter mode . Characteristic Parameter Mode IN OUT INOUT Must specify stored procedure definition ? No ; omit , parameter mode formal parameter IN . Must specify . Must specify . Does parameter pas value stored procedure return value ? Passes value stored procedure . Returns value caller . Both ; pass initial value stored procedure ; return update value caller . Does formal parameter act constant variable stored procedure ? Formal parameter act like constant . Formal parameter act like uninitialized variable . Formal parameter act like initialized variable . Can formal parameter assign value stored procedure ? Formal parameter assign value . Formal parameter use expression ; must assign value . Formal parameter must assign value . What kinds actual parameter ( argument ) pass store procedure ? Actual parameter constant , initialized variable , literal , expression . Actual parameter must variable . Actual parameter must variable . Creating Stored Procedures Java DB Note : See section `` CREATE PROCEDURE statement '' Java DB Reference Manual information create stored procedure Java DB . Creating use stored procedure Java DB involve following step : Create public static Java method Java class : This method perform required task stored procedure . Create stored procedure : This stored procedure call Java method create . Package Java class ( contain public static Java method create early ) JAR file . Call stored procedure CALL SQL statement . See section Calling Stored Procedures Java DB MySQL . Creating Public Static Java Method The following method , StoredProcedureJavaDBSample.showSuppliers , contain SQL statement stored procedure SHOW_SUPPLIERS call : public static void showSuppliers ( ResultSet [ ] r ) throw SQLException { Connection con = DriverManager.getConnection ( `` jdbc : default : connection '' ) ; Statement stmt = null ; String query = `` select SUPPLIERS.SUP_NAME , `` + `` COFFEES.COF_NAME `` + `` SUPPLIERS , COFFEES `` + `` SUPPLIERS.SUP_ID = `` + `` COFFEES.SUP_ID `` + `` order SUP_NAME '' ; stmt = con.createStatement ( ) ; rs [ 0 ] = stmt.executeQuery ( query ) ; } The SHOW_SUPPLIERS store procedure take argument . You specify argument stored procedure define method signature public static Java method . Note method showSuppliers contain parameter type ResultSet [ ] . If stored procedure return number ResultSet object , specify one parameter type ResultSet [ ] Java method . In addition , ensure Java method public static . Retrieve Connection object URL jdbc : default : connection . This convention Java DB indicate stored procedure use currently exist Connection object . Note Statement object close method . Do close Statement object Java method stored procedure ; , ResultSet object exist issue CALL statement call stored procedure . In order stored procedure return generated result set , must assign result set array component ResultSet [ ] parameter . In example , generated result set assign array component r [ 0 ] . The following method StoredProcedureJavaDBSample.showSuppliers : public static void getSupplierOfCoffee ( String coffeeName , String [ ] supplierName ) throw SQLException { Connection con = DriverManager.getConnection ( `` jdbc : default : connection '' ) ; PreparedStatement pstmt = null ; ResultSet rs = null ; String query = `` select SUPPLIERS.SUP_NAME `` + `` SUPPLIERS , COFFEES `` + `` `` + `` SUPPLIERS.SUP_ID = COFFEES.SUP_ID `` + `` ? = COFFEES.COF_NAME '' ; pstmt = con.prepareStatement ( query ) ; pstmt.setString ( 1 , coffeeName ) ; rs = pstmt.executeQuery ( ) ; ( rs.next ( ) ) { supplierName [ 0 ] = rs.getString ( 1 ) ; } else { supplierName [ 0 ] = null ; } } The formal parameter coffeeName parameter mode IN . This formal parameter use like parameter Java method . Because formal parameter supplierName parameter mode OUT , must use one dimensional array data type . Because method produce result set , method definition contain parameter type ResultSet [ ] . In order retrieve value OUT formal parameter , must assign value retrieve array component OUT formal parameter . In example , retrieved name coffee supplier assign array component supplierName [ 0 ] . The following method signature StoredProcedureJavaDBSample.raisePrice method : public static void raisePrice ( String coffeeName , double maximumPercentage , BigDecimal [ ] newPrice ) throw SQLException Because formal parameter newPrice parameter mode INOUT , must use one dimensional array data type . Java DB map FLOAT NUMERIC SQL data type double java.math.BigDecimal Java data type , respectively . Creating Stored Procedures Java DB SQL Scripts JDBC API Java DB use Java programming language stored procedure . Consequently , define stored procedure , specify Java class call Java DB find . The following excerpt StoredProcedureJavaDBSample.createProcedures create stored procedure name SHOW_SUPPLIERS : public void createProcedures ( Connection con ) throw SQLException { Statement stmtCreateShowSuppliers = null ; // ... String queryShowSuppliers = `` CREATE PROCEDURE SHOW_SUPPLIERS ( ) `` + `` PARAMETER STYLE JAVA `` + `` LANGUAGE JAVA `` + `` DYNAMIC RESULT SETS 1 `` + `` EXTERNAL NAME `` + `` 'com.oracle.tutorial.jdbc . '' + `` StoredProcedureJavaDBSample . '' + `` showSuppliers ' '' ; // ... try { System.out.println ( `` Calling CREATE PROCEDURE '' ) ; stmtCreateShowSuppliers = con.createStatement ( ) ; // ... } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } finally { ( stmtCreateShowSuppliers ! = null ) { stmtCreateShowSuppliers.close ( ) ; } // ... } } The following list describe procedure elements specify CREATE PROCEDURE statement : PARAMETER STYLE : Identifies convention use pass parameter stored procedure . The following option valid : JAVA : Specifies stored procedure use parameter-passing convention conform Java language SQL routine specification . DERBY : Specifies stored procedure support vararg final argument parameter list . LANGUAGE JAVA : Specifies programming language stored procedure ( currently , JAVA option ) . DYNAMIC RESULT SETS 1 : Specifies maximum number result set retrieve ; case , 1 . EXTERNAL NAME 'com.oracle.tutorial.jdbc.StoredProcedureJavaDBSample.showSuppliers ' specifies fully qualified Java method stored procedure call . Note : Java DB must able find method specify class path JAR file directly add database . See following step , Package Java Class JAR File . The following statement ( find StoredProcedureJavaDBSample.createProcedures ) create stored procedure name GET_SUPPLIERS_OF_COFFEE ( line break add clarity ) : CREATE PROCEDURE GET_SUPPLIER_OF_COFFEE ( IN coffeeName varchar ( 32 ) , OUT supplierName varchar ( 40 ) ) PARAMETER STYLE JAVA LANGUAGE JAVA DYNAMIC RESULT SETS 0 EXTERNAL NAME 'com.oracle.tutorial.jdbc . StoredProcedureJavaDBSample . getSupplierOfCoffee' This stored procedure two formal parameter , coffeeName supplierName . The parameter specifier IN OUT call parameter mode . They define action formal parameter . See Parameter Modes information . This stored procedure retrieve result set , procedure element DYNAMIC RESULT SETS 0 . The following statement create stored procedure name RAISE_PRICE ( line break add clarity ) : CREATE PROCEDURE RAISE_PRICE ( IN coffeeName varchar ( 32 ) , IN maximumPercentage float , INOUT newPrice float ) PARAMETER STYLE JAVA LANGUAGE JAVA DYNAMIC RESULT SETS 0 EXTERNAL NAME 'com.oracle.tutorial.jdbc . StoredProcedureJavaDBSample.raisePrice' You use SQL script create stored procedure Java DB . See script javadb/create-procedures.sql Ant target javadb-create-procedure build.xml Ant build script . Package Java Class JAR File The Ant build script build.xml contain target compile package tutorial JAR file . At command prompt , change current directory < JDBC tutorial directory > . From directory , run following command compile package tutorial JAR file : ant jar The name JAR file < JDBC tutorial directory > /lib/JDBCTutorial.jar . The Ant build script add file JDBCTutorial.jar class path . You also specify location JAR file CLASSPATH environment variable . This enable Java DB find Java method stored procedure call . Adding JAR File Directly Database Java DB look first class path required class , database . This section show add JAR file directly database . Use following system procedure add JDBCTutorial.jar JAR file database ( line break add clarity ) : CALL sqlj.install_jar ( ' < JDBC tutorial directory > / lib/JDBCTutorial.jar ' , 'APP.JDBCTutorial ' , 0 ) CALL sqlj.replace_jar ( ' < JDBC tutorial directory > / lib/JDBCTutorial.jar ' , 'APP.JDBCTutorial ' ) '' ; CALL syscs_util.syscs_set_database_property ( 'derby.database.classpath ' , 'APP.JDBCTutorial ' ) '' ; Note : The method StoredProcedureJavaDBSample.registerJarFile demonstrate call system procedure . If call method , ensure modify javadb-sample-properties.xml value property jar_file set full path name JDBCTutorial.jar . The install_jar procedure SQL schema add JAR file database . The first argument procedure full path name JAR file computer procedure run . The second argument identifier Java DB use refer JAR file . ( The identifier APP Java DB default schema . ) The replace_jar procedure replace JAR file already database . The system procedure SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY set delete value property database current connection . This method set property derby.database.classpath identifier specify install_jar file . Java DB first look Java class path class , look derby.database.classpath . Creating Stored Procedure MySQL Creating use stored procedure Java DB involve following step : Create stored procedure SQL script JDBC API Call stored procedure CALL SQL statement . See section Calling Stored Procedures Java DB MySQL Creating Stored Procedure MySQL SQL Scripts JDBC API MySQL use SQL-based syntax stored procedure . The following excerpt SQL script mysql/create-procedures.sql create stored procedure name SHOW_SUPPLIERS : SELECT 'Dropping procedure SHOW_SUPPLIERS ' AS ' '| drop procedure exists SHOW_SUPPLIERS| # ... SELECT 'Creating procedure SHOW_SUPPLIERS ' AS ' '| create procedure SHOW_SUPPLIERS ( ) begin select SUPPLIERS.SUP_NAME , COFFEES.COF_NAME SUPPLIERS , COFFEES SUPPLIERS.SUP_ID = COFFEES.SUP_ID order SUP_NAME ; end| The DROP PROCEDURE statement delete procedure SHOW_SUPPLIERS exist . In MySQL , statement stored procedure separate semicolon . However , different delimiter require end create procedure statement . This example use pipe ( | ) character ; use another character ( one character ) . This character separate statement define delimiter attribute Ant target call script . This excerpt Ant build file build.xml ( line break insert clarity ) : < target name= '' mysql-create-procedure '' > < sql driver= '' $ { DB.DRIVER } '' url= '' $ { DB.URL } '' userid= '' $ { DB.USER } '' password= '' $ { DB.PASSWORD } '' classpathref= '' CLASSPATH '' print= '' true '' delimiter= '' | '' autocommit= '' false '' onerror= '' abort '' > < transaction src= '' ./sql/ $ { DB.VENDOR } / create-procedures.sql '' > < /transaction > < /sql > < /target > Alternatively , use DELIMITER SQL statement specify different delimiter character . The CREATE PROCEDURE statement consist name procedure , comma-separated list parameter parenthesis , SQL statement within BEGIN END keywords . You use JDBC API create stored procedure . The following method , StoredProcedureMySQLSample.createProcedureShowSuppliers , perform task previous script : public void createProcedureShowSuppliers ( ) throw SQLException { String createProcedure = null ; String queryDrop = `` DROP PROCEDURE IF EXISTS SHOW_SUPPLIERS '' ; createProcedure = `` create procedure SHOW_SUPPLIERS ( ) `` + `` begin `` + `` select SUPPLIERS.SUP_NAME , `` + `` COFFEES.COF_NAME `` + `` SUPPLIERS , COFFEES `` + `` SUPPLIERS.SUP_ID = `` + `` COFFEES.SUP_ID `` + `` order SUP_NAME ; `` + `` end '' ; Statement stmt = null ; Statement stmtDrop = null ; try { System.out.println ( `` Calling DROP PROCEDURE '' ) ; stmtDrop = con.createStatement ( ) ; stmtDrop.execute ( queryDrop ) ; } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } finally { ( stmtDrop ! = null ) { stmtDrop.close ( ) ; } } try { stmt = con.createStatement ( ) ; stmt.executeUpdate ( createProcedure ) ; } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } finally { ( stmt ! = null ) { stmt.close ( ) ; } } } Note delimiter change method . The stored procedure SHOW_SUPPLIERS generate result set , even though return type method createProcedureShowSuppliers void method contain parameter . A result set return stored procedure SHOW_SUPPLIERS call method CallableStatement.executeQuery : CallableStatement c = null ; c = this.con.prepareCall ( `` { call SHOW_SUPPLIERS } '' ) ; ResultSet rs = cs.executeQuery ( ) ; The follow excerpt method StoredProcedureMySQLSample.createProcedureGetSupplierOfCoffee contain SQL query create stored procedure name GET_SUPPLIER_OF_COFFEE : public void createProcedureGetSupplierOfCoffee ( ) throw SQLException { String createProcedure = null ; // ... createProcedure = `` create procedure GET_SUPPLIER_OF_COFFEE ( `` + `` IN coffeeName varchar ( 32 ) , `` + `` OUT supplierName varchar ( 40 ) ) `` + `` begin `` + `` select SUPPLIERS.SUP_NAME `` + `` supplierName `` + `` SUPPLIERS , COFFEES `` + `` SUPPLIERS.SUP_ID = `` + `` COFFEES.SUP_ID `` + `` coffeeName = COFFEES.COF_NAME ; `` + `` select supplierName ; `` + `` end '' ; // ... } This stored procedure two formal parameter , coffeeName supplierName . The parameter specifier IN OUT call parameter mode . They define action formal parameter . See Parameter Modes information . The formal parameter define SQL query , method createProcedureGetSupplierOfCoffee . To assign value OUT parameter supplierName , stored procedure use SELECT statement . The following excerpt method StoredProcedureMySQLSample.createProcedureRaisePrice contain SQL query create stored procedure name RAISE_PRICE : public void createProcedureRaisePrice ( ) throw SQLException { String createProcedure = null ; // ... createProcedure = `` create procedure RAISE_PRICE ( `` + `` IN coffeeName varchar ( 32 ) , `` + `` IN maximumPercentage float , `` + `` INOUT newPrice numeric ( 10,2 ) ) `` + `` begin `` + `` main : BEGIN `` + `` declare maximumNewPrice `` + `` numeric ( 10,2 ) ; `` + `` declare oldPrice numeric ( 10,2 ) ; `` + `` select COFFEES.PRICE oldPrice `` + `` COFFEES `` + `` COFFEES.COF_NAME `` + `` = coffeeName ; `` + `` set maximumNewPrice = `` + `` oldPrice * ( 1 + `` + `` maximumPercentage ) ; `` + `` ( newPrice > maximumNewPrice ) `` + `` set newPrice = `` + `` maximumNewPrice ; `` + `` end ; `` + `` ( newPrice < = oldPrice ) `` + `` set newPrice = oldPrice ; `` + `` leave main ; `` + `` end ; `` + `` update COFFEES `` + `` set COFFEES.PRICE = newPrice `` + `` COFFEES.COF_NAME `` + `` = coffeeName ; `` + `` select newPrice ; `` + `` END main ; `` + `` end '' ; // ... } The stored procedure assign value INOUT parameter newPrice SET SELECT statement . To exit stored procedure , stored procedure first enclose statement BEGIN ... END block label main . To exit procedure , method use statement leave main . Calling Stored Procedures Java DB MySQL The follow excerpt method runStoredProcedures , call stored procedure SHOW_SUPPLIERS print generated result set : c = this.con.prepareCall ( `` { call SHOW_SUPPLIERS ( ) } '' ) ; ResultSet rs = cs.executeQuery ( ) ; ( rs.next ( ) ) { String supplier = rs.getString ( `` SUP_NAME '' ) ; String coffee = rs.getString ( `` COF_NAME '' ) ; System.out.println ( supplier + `` : `` + coffee ) ; } Note : As Statement object , call stored procedure , call execute , executeQuery , executeUpdate depend many ResultSet object procedure return . However , sure many ResultSet object procedure return , call execute . Calling stored procedure SHOW_SUPPLIERS demonstrate section Creating Stored Procedure JDBC API MySQL . The following excerpt method runStoredProcedures , call stored procedure GET_SUPPLIER_OF_COFFEE : c = this.con.prepareCall ( `` { call GET_SUPPLIER_OF_COFFEE ( ? , ? ) } '' ) ; cs.setString ( 1 , coffeeNameArg ) ; cs.registerOutParameter ( 2 , Types.VARCHAR ) ; cs.executeQuery ( ) ; String supplierName = cs.getString ( 2 ) ; The interface CallableStatement extend PreparedStatement . It use call stored procedure . Specify value IN parameter ( coffeeName example ) like would PreparedStatement object call appropriate setter method . However , stored procedure contain OUT parameter , must register registerOutParameter method . The following excerpt method runStoredProcedures , call stored procedure RAISE_PRICE : c = this.con.prepareCall ( `` { call RAISE_PRICE ( ? , ? , ? ) } '' ) ; cs.setString ( 1 , coffeeNameArg ) ; cs.setFloat ( 2 , maximumPercentageArg ) ; cs.registerOutParameter ( 3 , Types.NUMERIC ) ; cs.setFloat ( 3 , newPriceArg ) ; cs.execute ( ) ; Because parameter newPrice ( third parameter procedure RAISE_PRICE ) parameter mode INOUT , must specify value call appropriate setter method register registerOutParameter method .