An enum type special data type enable variable set predefined constant . The variable must equal one value predefined . Common example include compass direction ( value NORTH , SOUTH , EAST , WEST ) day week . Because constant , name enum type 's field uppercase letter . In Java programming language , define enum type use enum keyword . For example , would specify days-of-the-week enum type : public enum Day { SUNDAY , MONDAY , TUESDAY , WEDNESDAY , THURSDAY , FRIDAY , SATURDAY } You use enum type time need represent fixed set constant . That include natural enum type planet solar system data set know possible value compile timeâ€”for example , choice menu , command line flag , . Here code show use Day enum define : public class EnumTest { Day day ; public EnumTest ( Day day ) { this.day = day ; } public void tellItLikeItIs ( ) { switch ( day ) { case MONDAY : System.out.println ( `` Mondays bad . `` ) ; break ; case FRIDAY : System.out.println ( `` Fridays well . `` ) ; break ; case SATURDAY : case SUNDAY : System.out.println ( `` Weekends best . `` ) ; break ; default : System.out.println ( `` Midweek day so-so . `` ) ; break ; } } public static void main ( String [ ] args ) { EnumTest firstDay = new EnumTest ( Day.MONDAY ) ; firstDay.tellItLikeItIs ( ) ; EnumTest thirdDay = new EnumTest ( Day.WEDNESDAY ) ; thirdDay.tellItLikeItIs ( ) ; EnumTest fifthDay = new EnumTest ( Day.FRIDAY ) ; fifthDay.tellItLikeItIs ( ) ; EnumTest sixthDay = new EnumTest ( Day.SATURDAY ) ; sixthDay.tellItLikeItIs ( ) ; EnumTest seventhDay = new EnumTest ( Day.SUNDAY ) ; seventhDay.tellItLikeItIs ( ) ; } } The output : Mondays bad . Midweek day so-so . Fridays well . Weekends best . Weekends best . Java program language enum type much powerful counterpart language . The enum declaration define class ( call enum type ) . The enum class body include method field . The compiler automatically add special method create enum . For example , static value method return array contain value enum order declare . This method commonly use combination for-each construct iterate value enum type . For example , code Planet class example iterates planet solar system . ( Planet p : Planet.values ( ) ) { System.out.printf ( `` Your weight % % f % n '' , p , p.surfaceWeight ( mass ) ) ; } Note : All enums implicitly extend java.lang.Enum . Because class extend one parent ( see Declaring Classes ) , Java language support multiple inheritance state ( see Multiple Inheritance State , Implementation , Type ) , therefore enum extend anything else . In following example , Planet enum type represent planet solar system . They define constant mass radius property . Each enum constant declare value mass radius parameter . These value pass constructor constant create . Java require constant define first , prior field method . Also , field method , list enum constant must end semicolon . Note : The constructor enum type must package-private private access . It automatically create constant define beginning enum body . You invoke enum constructor . In addition property constructor , Planet method allow retrieve surface gravity weight object planet . Here sample program take weight earth ( unit ) calculates print weight planet ( unit ) : public enum Planet { MERCURY ( 3.303e+23 , 2.4397e6 ) , VENUS ( 4.869e+24 , 6.0518e6 ) , EARTH ( 5.976e+24 , 6.37814e6 ) , MARS ( 6.421e+23 , 3.3972e6 ) , JUPITER ( 1.9e+27 , 7.1492e7 ) , SATURN ( 5.688e+26 , 6.0268e7 ) , URANUS ( 8.686e+25 , 2.5559e7 ) , NEPTUNE ( 1.024e+26 , 2.4746e7 ) ; private final double mass ; // kilograms private final double radius ; // meter Planet ( double mass , double radius ) { this.mass = mass ; this.radius = radius ; } private double mass ( ) { return mass ; } private double radius ( ) { return radius ; } // universal gravitational constant ( m3 kg-1 s-2 ) public static final double G = 6.67300E-11 ; double surfaceGravity ( ) { return G * mass / ( radius * radius ) ; } double surfaceWeight ( double otherMass ) { return otherMass * surfaceGravity ( ) ; } public static void main ( String [ ] args ) { ( args.length ! = 1 ) { System.err.println ( `` Usage : java Planet < earth_weight > '' ) ; System.exit ( -1 ) ; } double earthWeight = Double.parseDouble ( args [ 0 ] ) ; double mass = earthWeight/EARTH.surfaceGravity ( ) ; ( Planet p : Planet.values ( ) ) System.out.printf ( `` Your weight % % f % n '' , p , p.surfaceWeight ( mass ) ) ; } } If run Planet.class command line argument 175 , get output : $ java Planet 175 Your weight MERCURY 66.107583 Your weight VENUS 158.374842 Your weight EARTH 175.000000 Your weight MARS 66.279007 Your weight JUPITER 442.847567 Your weight SATURN 186.552719 Your weight URANUS 158.397260 Your weight NEPTUNE 199.207413