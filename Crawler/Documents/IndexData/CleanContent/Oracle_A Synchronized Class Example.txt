The class , SynchronizedRGB , define object represent color . Each object represent color three integer stand primary color value string give name color . public class SynchronizedRGB { // Values must 0 255. private int red ; private int green ; private int blue ; private String name ; private void check ( int red , int green , int blue ) { ( red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255 ) { throw new IllegalArgumentException ( ) ; } } public SynchronizedRGB ( int red , int green , int blue , String name ) { check ( red , green , blue ) ; this.red = red ; this.green = green ; this.blue = blue ; this.name = name ; } public void set ( int red , int green , int blue , String name ) { check ( red , green , blue ) ; synchronize ( ) { this.red = red ; this.green = green ; this.blue = blue ; this.name = name ; } } public synchronize int getRGB ( ) { return ( ( red < < 16 ) | ( green < < 8 ) | blue ) ; } public synchronize String getName ( ) { return name ; } public synchronize void invert ( ) { red = 255 - red ; green = 255 - green ; blue = 255 - blue ; name = `` Inverse `` + name ; } } SynchronizedRGB must use carefully avoid see inconsistent state . Suppose , example , thread execute following code : SynchronizedRGB color = new SynchronizedRGB ( 0 , 0 , 0 , `` Pitch Black '' ) ; ... int myColorInt = color.getRGB ( ) ; //Statement 1 String myColorName = color.getName ( ) ; //Statement 2 If another thread invoke color.set Statement 1 Statement 2 , value myColorInt wo n't match value myColorName . To avoid outcome , two statement must bind together : synchronize ( color ) { int myColorInt = color.getRGB ( ) ; String myColorName = color.getName ( ) ; } This kind inconsistency possible mutable object â€” issue immutable version SynchronizedRGB .