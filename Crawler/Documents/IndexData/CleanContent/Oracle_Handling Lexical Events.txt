At point , digest many XML concept , include DTDs external entity . You also learn way around SAX parser . The remainder lesson cover advanced topic need understand write SAX-based application . If primary goal write DOM-based application , skip ahead Document Object Model . You saw early write text XML , need know whether CDATA section . If , angle bracket ( < ) ampersands ( & ) output unchanged . But CDATA section , replace predefined entity & lt ; & amp ; . But know whether process CDATA section ? Then , filter XML way , want pass comment along . Normally parser ignore comment . How get comment echo ? This section answer question . It show use org.xml.sax.ext.LexicalHandler identify comment , CDATA section , reference parsed entity . Comments , CDATA tag , reference parsed entity constitute lexical information-that , information concern text XML , rather XML 's information content . Most application , course , concern content XML document . Such application use LexicalEventListener API . But application output XML text find invaluable . Note - Lexical event handling optional parser feature . Parser implementation require support . ( The reference implementation . ) This discussion assume parser . How LexicalHandler Works To inform SAX parser see lexical information , configure XmlReader underlie parser LexicalHandler . The LexicalHandler interface define following event-handling method . comment ( String comment ) Passes comment application . startCDATA ( ) , endCDATA ( ) Tells CDATA section start end , tell application kind character expect next time character ( ) call . startEntity ( String name ) , endEntity ( String name ) Gives name parsed entity . startDTD ( String name , String publicId , String systemId ) , endDTD ( ) Tells DTD process , identifies . To activate Lexical Handler , application must extend DefaultHandler implement LexicalHandler interface . Then , must configure XMLReader instance parser delegate , configure send lexical event lexical handler , show . // ... SAXParser saxParser = factory.newSAXParser ( ) ; XMLReader xmlReader = saxParser.getXMLReader ( ) ; xmlReader.setProperty ( `` http : //xml.org/sax/properties/lexical-handler '' , handler ) ; // ... Here , configure XMLReader use setProperty ( ) method define XMLReader class . The property name , define part SAX standard , URN , http : //xml.org/sax/properties/lexical-handler . Finally , add something like following code define appropriate method implement interface . // ... public void warning ( SAXParseException err ) { // ... } public void comment ( char [ ] ch , int start , int length ) throw SAXException { // ... } public void startCDATA ( ) throw SAXException { // ... } public void endCDATA ( ) throw SAXException { // ... } public void startEntity ( String name ) throw SAXException { // ... } public void endEntity ( String name ) throw SAXException { // ... } public void startDTD ( String name , String publicId , String systemId ) throw SAXException { // ... } public void endDTD ( ) throw SAXException { // ... } private void echoText ( ) { // ... } // ... This code transform parse application lexical handler . All remain give new method action perform .