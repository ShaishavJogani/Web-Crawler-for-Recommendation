This section present two remain SAX event handler : DTDHandler EntityResolver . The DTDHandler invoke DTD encounter unparsed entity notation declaration . The EntityResolver come play URN ( public ID ) must resolve URL ( system ID ) . The DTDHandler API Choosing Parser Implementation show method reference file contain binary data , image file , use MIME data type . That simple , extensible mechanism . For compatibility old SGML-style data , though , also possible define unparsed entity . The NDATA keyword define unparsed entity : < ! ENTITY myEntity SYSTEM `` ..URL.. '' NDATA gif > The NDATA keyword say data entity parseable XML data instead data use notation . In case , notation name gif . The DTD must include declaration notation , would look something like following . < ! NOTATION gif SYSTEM `` ..URL.. '' > When parser see unparsed entity notation declaration , nothing information except pass along application use DTDHandler interface . That interface define two method . notationDecl ( String name , String publicId , String systemId ) unparsedEntityDecl ( String name , String publicId , String systemId , String notationName The notationDecl method pass name notation either public system identifier , , depend declare DTD . The unparsedEntityDecl method pass name entity , appropriate identifier , name notation use . Note - The DTDHandler interface implement DefaultHandler class . Notations also use attribute declaration . For example , follow declaration require notation GIF PNG image-file format . < ! ENTITY image EMPTY > < ! ATTLIST image ... type NOTATION ( gif | png ) `` gif '' > Here , type declare either gif png . The default , neither specify , gif . Whether notation reference use describe unparsed entity attribute , application appropriate processing . The parser know nothing semantics notation . It pass declaration . The EntityResolver API The EntityResolver API let convert public ID ( URN ) system ID ( URL ) . Your application may need , example , convert something like href= '' urn : /someName '' `` http : //someURL '' . The EntityResolver interface define single method : resolveEntity ( String publicId , String systemId ) This method return InputSource object , use access entity 's content . Converting URL InputSource easy enough . But URL pass system ID location original document , likely , somewhere web . To access local copy , one , must maintain catalog somewhere system map name ( public IDs ) local URLs .