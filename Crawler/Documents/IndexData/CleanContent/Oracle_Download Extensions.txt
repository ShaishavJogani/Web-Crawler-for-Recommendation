Download extension set class ( relate resource ) JAR file . A JAR file 's manifest contain header refer one download extension . The extension reference one two way : Class-Path header Extension-List header Note one allow manifest . Download extension indicate Class-Path header download lifetime application download , web browser . Their advantage nothing instal client ; disadvantage download time need . Download extension download Extension-List header instal /lib/ext directory JRE download . Their advantage download first time 're need ; subsequently use without download . But , show later tutorial , complex deploy . Since download extension use Class-Path header simpler , let 's consider first . Assume example a.jar b.jar two JAR file directory , manifest a.jar contains header : Class-Path : b.jar Then class b.jar serve extension class purpose class a.jar . The class a.jar invoke class b.jar without b.jar 's class name class path . a.jar may may extension . If b.jar n't directory a.jar , value Class-Path header set relative pathname b.jar . There 's nothing special class play role download extension . They treat extension solely 're reference manifest JAR file . To get good understanding download extension work , let 's create one put use . An Example Suppose want create applet make use RectangleArea class previous section : public final class RectangleArea { public static int area ( java.awt.Rectangle r ) { return r.width * r.height ; } } In previous section , make RectangleArea class installed extension place JAR file contain lib/ext directory JRE . By make installed extension , enable application use RectangleArea class part Java platform . If want able use RectangleArea class applet , situation little different . Suppose , example , applet , AreaApplet , make use class RectangleArea : import java.applet.Applet ; import java.awt . * ; public class AreaApplet extend Applet { Rectangle r ; public void init ( ) { int width = 10 ; int height = 5 ; r = new Rectangle ( width , height ) ; } public void paint ( Graphics g ) { g.drawString ( `` The rectangle 's area `` + RectangleArea.area ( r ) , 10 , 10 ) ; } } This applet instantiate 10 x 5 rectangle display rectangle 's area use RectangleArea.area method . However , ca n't assume everyone download use applet go RectangleArea class available system , installed extension otherwise . One way around problem make RectangleArea class available server side , use download extension . To see 's , let 's assume 've bundle AreaApplet JAR file call AreaApplet.jar class RectangleArea bundle RectangleArea.jar . In order RectangleArea.jar treat download extension , RectangleArea.jar must list Class-Path header AreaApplet.jar 's manifest . AreaApplet.jar 's manifest might look like , example : Manifest-Version : 1.0 Class-Path : RectangleArea.jar The value Class-Path header manifest RectangleArea.jar path specify , indicate RectangleArea.jar locate directory applet 's JAR file . More Class-Path Header If applet application use one extension , list multiple URLs manifest . For example , following valid header : Class-Path : area.jar servlet.jar images/ In Class-Path header URLs list n't end '/ ' assume JAR file . URLs end '/ ' indicate directory . In preceding example , images/ might directory contain resource need applet application . Note one Class-Path header allow manifest file , line manifest must 72 character long . If need specify class path entry fit one line , extend onto subsequent continuation line . Begin continuation line two space . For example : Class-Path : area.jar servlet.jar monitor.jar datasource.jar provider.jar gui.jar A future release may remove limitation one instance header , limit line 72 character . Download extension `` daisy chain '' , mean manifest one download extension Class-Path header refer second extension , refer third extension , . Installing Download Extensions In example , extension download applet available browser load applet still run . However , applet trigger installation extension , additional information include manifest applet extension . Since mechanism extend platform 's core API , use judiciously apply . It rarely appropriate interface use single , small set application . All visible symbol follow reverse domain name class hierarchy convention . The basic requirement applet extension use provide version information manifest , sign . The version information allow Java Plug-in ensure extension code version expect applet . For example , AreaApplet could specify areatest extension manifest : Manifest-Version : 1.0 Extension-List : areatest areatest-Extension-Name : area areatest-Specification-Version : 1.1 areatest-Implementation-Version : 1.1.2 areatest-Implementation-Vendor-Id : com.example areatest-Implementation-URL : http : //www.example.com/test/area.jar The manifest area.jar would provide correspond information : Manifest-Version : 1.0 Extension-Name : area Specification-Vendor : Example Tech , Inc Specification-Version : 1.1 Implementation-Vendor-Id : com.example Implementation-Vendor : Example Tech , Inc Implementation-Version : 1.1.2 Both applet extension must sign , signer . Signing jar file modify in-place , provide information manifest file . Signing help ensure trust code get instal . A simple way sign jar file first create keystore , use hold certificate applet extension . For example : keytool -genkey -dname `` cn=Fred '' -alias test -validity 180 You prompt keystore key password . After generate key , jar file sign : jarsigner AreaApplet.jar test jarsigner area.jar test You prompt keystore key password . More information keytool , jarsigner , security tool Summary Tools Java 2 Platform Security . Here AreaDemo.html , load applet cause extension code download instal : < html > < body > < applet code= '' AreaApplet.class '' archive= '' AreaApplet.jar '' / > < /body > < /html > When page load first time , user tell applet require installation extension . A subsequent dialog inform user signed applet . Accepting install extension lib/ext folder JRE run applet . After restart web browser load web page , dialog applet 's signer present , area.jar already instal . This also true AreaDemo.html open different web browser ( assume browser use JRE ) .