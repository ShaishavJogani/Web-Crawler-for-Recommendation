The Pattern API contain number useful predefined character class , offer convenient shorthand commonly use regular expression : Construct Description . Any character ( may may match line terminator ) \d A digit : [ 0-9 ] \D A non-digit : [ ^0-9 ] \s A whitespace character : [ \t\n\x0B\f\r ] \S A non-whitespace character : [ ^\s ] \w A word character : [ a-zA-Z_0-9 ] \W A non-word character : [ ^\w ] In table , construct left-hand column shorthand character class right-hand column . For example , \d mean range digit ( 0-9 ) , \w mean word character ( lowercase letter , uppercase letter , underscore character , digit ) . Use predefined class whenever possible . They make code easy read eliminate error introduce malformed character class . Constructs begin backslash call escaped construct . We preview escaped construct String Literals section mention use backslash \Q \E quotation . If use escaped construct within string literal , must precede backslash another backslash string compile . For example : private final String REGEX = `` \\d '' ; // single digit In example \d regular expression ; extra backslash require code compile . The test harness read expression directly Console , however , extra backslash unnecessary . The following example demonstrate use predefined character class . Enter regex : . Enter input string search : @ I find text `` @ '' start index 0 end index 1 . Enter regex : . Enter input string search : 1 I find text `` 1 '' start index 0 end index 1 . Enter regex : . Enter input string search : I find text `` '' start index 0 end index 1 . Enter regex : \d Enter input string search : 1 I find text `` 1 '' start index 0 end index 1 . Enter regex : \d Enter input string search : No match find . Enter regex : \D Enter input string search : 1 No match find . Enter regex : \D Enter input string search : I find text `` '' start index 0 end index 1 . Enter regex : \s Enter input string search : I find text `` `` start index 0 end index 1 . Enter regex : \s Enter input string search : No match find . Enter regex : \S Enter input string search : No match find . Enter regex : \S Enter input string search : I find text `` '' start index 0 end index 1 . Enter regex : \w Enter input string search : I find text `` '' start index 0 end index 1 . Enter regex : \w Enter input string search : ! No match find . Enter regex : \W Enter input string search : No match find . Enter regex : \W Enter input string search : ! I find text `` ! '' start index 0 end index 1 . In first three example , regular expression simply . ( `` dot '' metacharacter ) indicate `` character . '' Therefore , match successful three case ( randomly select @ character , digit , letter ) . The remain example use single regular expression construct Predefined Character Classes table . You refer table figure logic behind match : \d match digit \s match space \w match word character Alternatively , capital letter mean opposite : \D match non-digits \S match non-spaces \W match non-word character