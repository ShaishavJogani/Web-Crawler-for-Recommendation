By know paintComponent method paint code place . It true method invoke time paint , paint actually begin high class heirarchy , paint method ( define java.awt.Component . ) This method execute painting subsystem whenever component need render . Its signature : public void paint ( Graphics g ) javax.swing.JComponent extend class factor paint method three separate method , invoke following order : protect void paintComponent ( Graphics g ) protect void paintBorder ( Graphics g ) protect void paintChildren ( Graphics g ) The API nothing prevent code override paintBorder paintChildren , generally speaking , reason . For practical purpose paintComponent method ever need override . As previously mention , standard Swing component look feel implement separate UI Delegates . This mean ( ) painting standard Swing component proceeds follow . paint ( ) invoke paintComponent ( ) . If ui property non-null , paintComponent ( ) invoke ui.update ( ) . If component 's opaque property true , ui.update ( ) fill component 's background background color invokes ui.paint ( ) . ui.paint ( ) render content component . This SwingPaintDemo code invokes super.paintComponent ( g ) . We could add additional comment make clear : public void paintComponent ( Graphics g ) { // Let UI Delegate paint first , // include background fill since // component opaque . super.paintComponent ( g ) ; g.drawString ( `` This custom Panel ! `` ,10,20 ) ; redSquare.paintSquare ( g ) ; } If understand demo code provide lesson , congratulation ! You enough practical knowledge write efficient paint code application . If however want close look `` hood '' , please refer SDN article link first page lesson .