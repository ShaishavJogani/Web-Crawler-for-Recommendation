In general , StAX programmer create XML stream reader , writer , event use XMLInputFactory , XMLOutputFactory , XMLEventFactory class . Configuration set property factory , whereby implementation-specific setting pass underlie implementation use setProperty method factory . Similarly , implementation-specific setting query use getProperty factory method . The XMLInputFactory , XMLOutputFactory , XMLEventFactory class describe , follow discussion resource allocation , namespace attribute management , error handling , finally read write stream use cursor iterator APIs . StAX Factory Classes The StAX factory class . XMLInputFactory , XMLOutputFactory , XMLEventFactory , let define configure implementation instance XML stream reader , stream writer , event class . XMLInputFactory The XMLInputFactory class let configure implementation instance XML stream reader processor create factory . New instance abstract class XMLInputFactory create call newInstance method class . The static method XMLInputFactory.newInstance use create new factory instance . Deriving JAXP , XMLInputFactory.newInstance method determine specific XMLInputFactory implementation class load use follow lookup procedure : Use javax.xml.stream.XMLInputFactory system property . Use lib/xml.stream.properties file Java SE platform 's Java Runtime Environment ( JRE ) directory . Use Services API , available , determine classname look META-INF/services/javax.xml.stream.XMLInputFactory file JAR file available JRE . Use platform default XMLInputFactory instance . After get reference appropriate XMLInputFactory , application use factory configure create stream instance . The following table list property support XMLInputFactory . See StAX specification detailed listing . javax.xml.stream.XMLInputFactory Properties Property Description isValidating Turns implementation-specific validation . isCoalescing ( Required ) Requires processor coalesce adjacent character data . isNamespaceAware Turns namespace support . All implementation must support namespaces . Support non-namespace-aware document optional . isReplacingEntityReferences ( Required ) Requires processor replace internal entity reference replacement value report character set event describe entity . isSupportingExternalEntities ( Required ) Requires processor resolve external parsed entity . reporter ( Required ) Sets get implementation XMLReporter interface . resolver ( Required ) Sets get implementation XMLResolver interface . allocator ( Required ) Sets get implementation XMLEventAllocator interface . XMLOutputFactory New instance abstract class XMLOutputFactory create call newInstance method class . The static method XMLOutputFactory.newInstance use create new factory instance . The algorithm use obtain instance XMLInputFactory reference javax.xml.stream.XMLOutputFactory system property . XMLOutputFactory support one property , javax.xml.stream.isRepairingNamespaces . This property require , purpose create default prefix associate Namespace URIs . See StAX specification information . XMLEventFactory New instance abstract class XMLEventFactory create call newInstance method class . The static method XMLEventFactory.newInstance use create new factory instance . This factory reference javax.xml.stream.XMLEventFactory property instantiate factory . The algorithm use obtain instance XMLInputFactory XMLOutputFactory reference javax.xml.stream.XMLEventFactory system property . There default property XMLEventFactory . Resources , Namespaces , Errors The StAX specification handle resource resolution , attribute namespace , error exception describe . Resource Resolution The XMLResolver interface provide mean set method resolve resource XML processing . An application set interface XMLInputFactory , set interface processor create factory instance . Attributes Namespaces Attributes report StAX processor use lookup method string cursor interface , Attribute Namespace event iterator interface . Note namespaces treat attribute , although namespaces report separately attribute cursor iterator APIs . Note also namespace processing optional StAX processor . See StAX specification complete information namespace binding optional namespace processing . Error Reporting Exception Handling All fatal error report way javax.xml.stream.XMLStreamException interface . All nonfatal error warning report use javax.xml.stream.XMLReporter interface . Reading XML Streams As describe earlier lesson , way read XML stream StAX processor—and importantly , get back—varies significantly depend whether use StAX cursor API event iterator API . The following two section describe read XML stream APIs . Using XMLStreamReader The XMLStreamReader interface StAX cursor API let read XML stream document forward direction , one item infoset time . The following method available pull data stream skip unwanted event : Get value attribute Read XML content Determine whether element content empty Get indexed access collection attribute Get indexed access collection namespaces Get name current event ( applicable ) Get content current event ( applicable ) Instances XMLStreamReader one time single current event method operate . When create instance XMLStreamReader stream , initial current event START_DOCUMENT state . The XMLStreamReader.next method use step next event stream . Reading Properties , Attributes , Namespaces The XMLStreamReader.next method load property next event stream . You access property call XMLStreamReader.getLocalName XMLStreamReader.getText method . When XMLStreamReader cursor StartElement event , read name attribute event , include namespace . All attribute event access use index value , also look namespace URI local name . Note , however , namespaces declare current StartEvent available ; previously declare namespaces maintain , redeclared namespaces remove . XMLStreamReader Methods XMLStreamReader provide following method retrieve information namespaces attribute : int getAttributeCount ( ) ; String getAttributeNamespace ( int index ) ; String getAttributeLocalName ( int index ) ; String getAttributePrefix ( int index ) ; String getAttributeType ( int index ) ; String getAttributeValue ( int index ) ; String getAttributeValue ( String namespaceUri , String localName ) ; boolean isAttributeSpecified ( int index ) ; Namespaces also access use three additional method : int getNamespaceCount ( ) ; String getNamespacePrefix ( int index ) ; String getNamespaceURI ( int index ) ; Instantiating XMLStreamReader This example , take StAX specification , show instantiate input factory , create reader , iterate element XML stream : XMLInputFactory f = XMLInputFactory.newInstance ( ) ; XMLStreamReader r = f.createXMLStreamReader ( ... ) ; ( r.hasNext ( ) ) { r.next ( ) ; } Using XMLEventReader The XMLEventReader API StAX event iterator API provide mean map event XML stream allocate event object freely reuse , API extend handle custom event . XMLEventReader provide four method iteratively parse XML stream : next : Returns next event stream nextEvent : Returns next typed XMLEvent hasNext : Returns true event process stream peek : Returns event iterate next event For example , following code snippet illustrate XMLEventReader method declaration : package javax.xml.stream ; import java.util.Iterator ; public interface XMLEventReader extend Iterator { public Object next ( ) ; public XMLEvent nextEvent ( ) throw XMLStreamException ; public boolean hasNext ( ) ; public XMLEvent peek ( ) throw XMLStreamException ; // ... } To read event stream print , could use following : ( stream.hasNext ( ) ) { XMLEvent event = stream.nextEvent ( ) ; System.out.print ( event ) ; } Reading Attributes You access attribute associate javax.xml.stream.StartElement , follow : public interface StartElement extend XMLEvent { public Attribute getAttributeByName ( QName name ) ; public Iterator getAttributes ( ) ; } You use getAttributes method StartElement interface use Iterator attribute declare StartElement . Reading Namespaces Similar read attribute , namespaces read use Iterator create call getNamespaces method StartElement interface . Only namespace current StartElement return , application get current namespace context use StartElement.getNamespaceContext . Writing XML Streams StAX bidirectional API , cursor event iterator APIs set interface write XML stream . As interface read stream , significant difference writer APIs cursor event iterator . The following section describe write XML stream use APIs . Using XMLStreamWriter The XMLStreamWriter interface StAX cursor API let application write back XML stream create entirely new stream . XMLStreamWriter method let : Write well-formed XML Flush close output Write qualify name Note XMLStreamWriter implementation require perform well-formedness validity check input . While implementation may perform strict error checking , others may . The rule implement apply property define XMLOutputFactory class . The writeCharacters method use escape character & , < , > , `` . Binding prefix handle either pass actual value prefix , use setPrefix method , set property default namespace declaration . The following example , take StAX specification , show instantiate output factory , create writer , write XML output : XMLOutputFactory output = XMLOutputFactory.newInstance ( ) ; XMLStreamWriter writer = output.createXMLStreamWriter ( ... ) ; writer.writeStartDocument ( ) ; writer.setPrefix ( `` c '' , '' http : //c '' ) ; writer.setDefaultNamespace ( `` http : //c '' ) ; writer.writeStartElement ( `` http : //c '' , '' '' ) ; writer.writeAttribute ( `` b '' , '' blah '' ) ; writer.writeNamespace ( `` c '' , '' http : //c '' ) ; writer.writeDefaultNamespace ( `` http : //c '' ) ; writer.setPrefix ( `` '' , '' http : //c '' ) ; writer.writeEmptyElement ( `` http : //c '' , '' '' ) ; writer.writeAttribute ( `` http : //c '' , `` chris '' , '' fry '' ) ; writer.writeNamespace ( `` '' , '' http : //c '' ) ; writer.writeCharacters ( `` Jean Arp '' ) ; writer.writeEndElement ( ) ; writer.flush ( ) ; This code generate following XML ( new line non-normative ) : < ? xml version= ’ 1.0 ’ encoding= ’ utf-8 ’ ? > < b= '' blah '' xmlns : c= '' http : //c '' xmlns= '' http : //c '' > < : : chris= '' fry '' xmlns : d= '' http : //c '' / > Jean Arp < /a > Using XMLEventWriter The XMLEventWriter interface StAX event iterator API let application write back XML stream create entirely new stream . This API extend , main API follow : public interface XMLEventWriter { public void flush ( ) throw XMLStreamException ; public void close ( ) throw XMLStreamException ; public void add ( XMLEvent e ) throw XMLStreamException ; // ... method shown. } Instances XMLEventWriter create instance XMLOutputFactory . Stream event add iteratively , event modify add event writer instance . Attributes , Escaping Characters , Binding Prefixes StAX implementation require buffer last StartElement event Attribute Namespace add encounter stream . This mean add Attribute Namespace stream , append current StartElement event . You use Characters method escape character like & , < , > , `` . The setPrefix ( ... ) method use explicitly bind prefix use output , getPrefix ( ... ) method use get current prefix . Note default , XMLEventWriter add namespace binding internal namespace map . Prefixes go scope corresponding EndElement event bind .