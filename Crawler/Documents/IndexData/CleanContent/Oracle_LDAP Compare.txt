The LDAP `` compare '' operation allow client ask server whether name entry attribute/value pair . This allow server keep certain attribute/value pair secret ( i.e. , expose general `` search '' access ) still allow client limit use . Some server might use feature password , example , although insecure client pass clear-text password `` compare '' operation . To accomplish JNDI , use suitably constrain argument following method : search ( Name name , String filter , SearchControls ctls ) search ( Name name , String filterExpr , Object [ ] filterArgs , SearchControls ctls ) The filter must form `` ( name=value ) '' . You use wild card . The search scope must SearchControls.OBJECT_SCOPE . You must request attribute return . If criterion meet , method use LDAP `` search '' operation instead LDAP `` compare '' operation . Here 's example cause LDAP `` compare '' operation use . // Value attribute byte [ ] key = { ( byte ) 0x61 , ( byte ) 0x62 , ( byte ) 0x63 , ( byte ) 0x64 , ( byte ) 0x65 , ( byte ) 0x66 , ( byte ) 0x67 } ; // Set search control SearchControls ctls = new SearchControls ( ) ; ctls.setReturningAttributes ( new String [ 0 ] ) ; // Return attrs ctls.setSearchScope ( SearchControls.OBJECT_SCOPE ) ; // Search object // Invoke search method use LDAP `` compare '' operation NamingEnumeration answer = ctx.search ( `` cn=S . User , ou=NewHires '' , `` ( mySpecialKey= { 0 } ) '' , new Object [ ] { key } , ctls ) ; If compare successful , result enumeration contain single item whose name empty name contain attribute .