Note : To well understand concept section , review section Lambda Expressions Method References . For use collection ? You n't simply store object collection leave . In case , use collection retrieve item store . Consider scenario describe section Lambda Expressions . Suppose create social networking application . You want create feature enable administrator perform kind action , send message , member social networking application satisfy certain criterion . As , suppose member social networking application represent follow Person class : public class Person { public enum Sex { MALE , FEMALE } String name ; LocalDate birthday ; Sex gender ; String emailAddress ; // ... public int getAge ( ) { // ... } public String getName ( ) { // ... } } The following example print name member contain collection roster for-each loop : ( Person p : roster ) { System.out.println ( p.getName ( ) ) ; } The following example print member contain collection roster aggregate operation forEach : roster .stream ( ) .forEach ( e - > System.out.println ( e.getName ( ) ) ; Although , example , version use aggregate operation long one use for-each loop , see version use bulk-data operation concise complex task . The following topic cover : Pipelines Streams Differences Between Aggregate Operations Iterators Find code excerpt describe section example BulkDataOperationsExamples . Pipelines Streams A pipeline sequence aggregate operation . The following example print male member contain collection roster pipeline consist aggregate operation filter forEach : roster .stream ( ) .filter ( e - > e.getGender ( ) == Person.Sex.MALE ) .forEach ( e - > System.out.println ( e.getName ( ) ) ) ; Compare example follow print male member contain collection roster for-each loop : ( Person p : roster ) { ( p.getGender ( ) == Person.Sex.MALE ) { System.out.println ( p.getName ( ) ) ; } } A pipeline contain following component : A source : This could collection , array , generator function , I/O channel . In example , source collection roster . Zero intermediate operation . An intermediate operation , filter , produce new stream . A stream sequence element . Unlike collection , data structure store element . Instead , stream carry value source pipeline . This example create stream collection roster invoke method stream . The filter operation return new stream contain element match predicate ( operation 's parameter ) . In example , predicate lambda expression e - > e.getGender ( ) == Person.Sex.MALE . It return boolean value true gender field object e value Person.Sex.MALE . Consequently , filter operation example return stream contain male member collection roster . A terminal operation . A terminal operation , forEach , produce non-stream result , primitive value ( like double value ) , collection , case forEach , value . In example , parameter forEach operation lambda expression e - > System.out.println ( e.getName ( ) ) , invoke method getName object e. ( The Java runtime compiler infer type object e Person . ) The following example calculate average age male member contain collection roster pipeline consist aggregate operation filter , mapToInt , average : double average = roster .stream ( ) .filter ( p - > p.getGender ( ) == Person.Sex.MALE ) .mapToInt ( Person : :getAge ) .average ( ) .getAsDouble ( ) ; The mapToInt operation return new stream type IntStream ( stream contain integer value ) . The operation apply function specify parameter element particular stream . In example , function Person : :getAge , method reference return age member . ( Alternatively , could use lambda expression e - > e.getAge ( ) . ) Consequently , mapToInt operation example return stream contain age male member collection roster . The average operation calculate average value element contain stream type IntStream . It return object type OptionalDouble . If stream contain element , average operation return empty instance OptionalDouble , invoke method getAsDouble throw NoSuchElementException . The JDK contain many terminal operation average return one value combine content stream . These operation call reduction operation ; see section Reduction information . Differences Between Aggregate Operations Iterators Aggregate operation , like forEach , appear like iterators . However , several fundamental difference : They use internal iteration : Aggregate operation contain method like next instruct process next element collection . With internal delegation , application determine collection iterate , JDK determine iterate collection . With external iteration , application determine collection iterate iterate . However , external iteration iterate element collection sequentially . Internal iteration limitation . It easily take advantage parallel computing , involve divide problem subproblems , solve problem simultaneously , combine result solution subproblems . See section Parallelism information . They process element stream : Aggregate operation process element stream , directly collection . Consequently , also call stream operation . They support behavior parameter : You specify lambda expression parameter aggregate operation . This enable customize behavior particular aggregate operation .