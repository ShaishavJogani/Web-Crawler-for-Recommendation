To easily remember method overriding , keep mind object class , also object subclass , behavior change . A subclass becovariant . Although method signature unique inside class , method signature define different class . If define method exist super class override super class method . It calledmethod override . This different method overloading . Method overload happens method name different signature . Method override happens method name signature inherit class . The return type cause problem saw . When override super class method return type also must . If , compiler give error . Beware ! If class declare two public method name , subclass override one , subclass still inherit method . In respect , Java programming language differs C++ . Method overriding relate todynamic linking , orruntime bind . In order Method Overriding work , method call go call determine compilation time . It decide runtime , look table . In thecode section 4.31 , expression line 3 true execute morning false execute afternoon . Thus , instance ofobjwill aMyClassor aSubOfMyClassdepending execution time . So impossible determine method address compile time . Because theobjreference point object sub object , know runtime , table keep possible method address call . Do confuse : The implementation method search use theinstantiatedtype call object ( obj ) thedeclaredtype parameter object ( myParameter ) . Also another rule override , visibility new method override super class method reduce . The visibility increase , however . So super class method visibility ispublic , override method bepackage , orprivate . An override method must throw exception super class , subexceptions . superreferences parent class ( i.e.super.someMethod ( ) ) . It use subclass access inherit method subclass override inherit field subclass hide . A common mistake think override method , could also override member variable . This case , useless . You redefine variable private super class variable visible . To : Add exercise like one inVariables InterfacesJava ProgrammingOverloading Methods ConstructorsObject Lifecycle