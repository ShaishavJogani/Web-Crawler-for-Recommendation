Prior Java SE 8 release , Java date time mechanism provide java.util.Date , java.util.Calendar , java.util.TimeZone class , well subclass , java.util.GregorianCalendar . These class several drawback , include : The Calendar class type safe . Because class mutable , could use multithreaded application . Bugs application code common due unusual numbering month lack type safety . Interoperability Legacy Code Perhaps legacy code use java.util date time class would like take advantage java.time functionality minimal change code . Added JDK 8 release several method allow conversion java.util java.time object : Calendar.toInstant ( ) convert Calendar object Instant . GregorianCalendar.toZonedDateTime ( ) convert GregorianCalendar instance ZonedDateTime . GregorianCalendar.from ( ZonedDateTime ) create GregorianCalendar object use default locale ZonedDateTime instance . Date.from ( Instant ) create Date object Instant . Date.toInstant ( ) convert Date object Instant . TimeZone.toZoneId ( ) convert TimeZone object ZoneId . The following example convert Calendar instance ZonedDateTime instance . Note time zone must supply convert Instant ZonedDateTime : Calendar = Calendar.getInstance ( ) ; ZonedDateTime zdt = ZonedDateTime.ofInstant ( now.toInstant ( ) , ZoneId.systemDefault ( ) ) ) ; The following example show conversion Date Instant : Instant inst = date.toInstant ( ) ; Date newDate = Date.from ( inst ) ; The following example convert GregorianCalendar ZonedDateTime , ZonedDateTime GregorianCalendar . Other temporal-based class create use ZonedDateTime instance : GregorianCalendar cal = ... ; TimeZone tz = cal.getTimeZone ( ) ; int tzoffset = cal.get ( Calendar.ZONE_OFFSET ) ; ZonedDateTime zdt = cal.toZonedDateTime ( ) ; GregorianCalendar newCal = GregorianCalendar.from ( zdt ) ; LocalDateTime ldt = zdt.toLocalDateTime ( ) ; LocalDate date = zdt.toLocalDate ( ) ; LocalTime time = zdt.toLocalTime ( ) ; Mapping java.util Date Time Functionality java.time Because Java implementation date time completely redesign Java SE 8 release , swap one method another method . If want use rich functionality offer java.time package , easy solution use toInstant toZonedDateTime method list previous section . However , want use approach sufficient need , must rewrite date-time code . The table introduce Overview page good place begin evaluate java.time class meet need . There one-to-one mapping correspondence two APIs , following table give general idea functionality java.util date time class map java.time APIs . java.util Functionality java.time Functionality Comments java.util.Date java.time.Instant The Instant Date class similar . Each class : - Represents instantaneous point time timeline ( UTC ) - Holds time independent time zone - Is represent epoch-seconds ( since 1970-01-01T00:00:00Z ) plus nanoseconds The Date.from ( Instant ) Date.toInstant ( ) method allow conversion class . java.util.GregorianCalendar java.time.ZonedDateTime The ZonedDateTime class replacement GregorianCalendar . It provide follow similar functionality . Human time representation follow : LocalDate : year , month , day LocalTime : hour , minute , second , nanosecond ZoneId : time zone ZoneOffset : current offset GMT The GregorianCalendar.from ( ZonedDateTime ) GregorianCalendar.to ( ZonedDateTime ) method faciliate conversion class . java.util.TimeZone java.time.ZoneId java.time.ZoneOffset The ZoneId class specify time zone identifier access rule use time zone . The ZoneOffset class specify offset Greenwich/UTC . For information , see Time Zone Offset Classes . GregorianCalendar date set 1970-01-01 java.time.LocalTime Code set date 1970-01-01 GregorianCalendar instance order use time component replace instance LocalTime . GregorianCalendar time set 00:00. java.time.LocalDate Code set time 00:00 GregorianCalendar instance order use date component replace instance LocalDate . ( This GregorianCalendar approach flaw , midnight occur country year due transition daylight save time . ) Date Time Formatting Although java.time.format.DateTimeFormatter provide powerful mechanism format date time value , also use java.time temporal-based class directly java.util.Formatter String.format , use pattern-based formatting use java.util date time class .