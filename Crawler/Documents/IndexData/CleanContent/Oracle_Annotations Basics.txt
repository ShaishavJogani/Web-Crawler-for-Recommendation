The Format Annotation In simple form , annotation look like following : @ Entity The sign character ( @ ) indicate compiler follow annotation . In following example , annotation 's name Override : @ Override void mySuperMethod ( ) { ... } The annotation include element , name unnamed , value element : @ Author ( name = `` Benjamin Franklin '' , date = `` 3/27/2003 '' ) class MyClass ( ) { ... } @ SuppressWarnings ( value = `` unchecked '' ) void myMethod ( ) { ... } If one element name value , name omit , : @ SuppressWarnings ( `` unchecked '' ) void myMethod ( ) { ... } If annotation element , parenthesis omit , show previous @ Override example . It also possible use multiple annotation declaration : @ Author ( name = `` Jane Doe '' ) @ EBook class MyClass { ... } If annotation type , call repeat annotation : @ Author ( name = `` Jane Doe '' ) @ Author ( name = `` John Smith '' ) class MyClass { ... } Repeating annotation support Java SE 8 release . For information , see Repeating Annotations . The annotation type one type define java.lang java.lang.annotation package Java SE API . In previous example , Override SuppressWarnings predefined Java annotation . It also possible define annotation type . The Author Ebook annotation previous example custom annotation type . Where Annotations Can Be Used Annotations apply declaration : declaration class , field , method , program element . When use declaration , annotation often appear , convention , line . As Java SE 8 release , annotation also apply use type . Here example : Class instance creation expression : new @ Interned MyObject ( ) ; Type cast : myString = ( @ NonNull String ) str ; implement clause : class UnmodifiableList < T > implement @ Readonly List < @ Readonly T > { ... } Thrown exception declaration : void monitorTemperature ( ) throw @ Critical TemperatureException { ... } This form annotation call type annotation . For information , see Type Annotations Pluggable Type Systems .