Many Swing component , label , button , tabbed pane , decorate icon — fixed-sized picture . An icon object adhere Icon interface . Swing provide particularly useful implementation Icon interface : ImageIcon , paint icon GIF , JPEG , PNG image . Here 's snapshot application three label , two decorate icon : The program use one image icon contain paint yellow splat . One statement create image icon two statement include image icon two label : ImageIcon icon = createImageIcon ( `` images/middle.gif '' , `` pretty meaningless splat '' ) ; label1 = new JLabel ( `` Image Text '' , icon , JLabel.CENTER ) ; ... label3 = new JLabel ( icon ) ; The createImageIcon method ( use precede snippet ) one use many code sample . It find specify file return ImageIcon file , null file could n't find . Here typical implementation : /** Returns ImageIcon , null path invalid . */ protect ImageIcon createImageIcon ( String path , String description ) { java.net.URL imgURL = getClass ( ) .getResource ( path ) ; ( imgURL ! = null ) { return new ImageIcon ( imgURL , description ) ; } else { System.err.println ( `` Could n't find file : `` + path ) ; return null ; } } In preceding snippet , first argument ImageIcon constructor relative location current class , resolve absolute URL . The description argument string allow assistive technology help visually impair user understand information icon conveys . Generally , application provide set image use part application , case image use many demo . You use Class getResource method obtain path image . This allow application verify image available provide sensible error handle . When image part application , getResource use ImageIcon constructor use directly . For example : ImageIcon icon = new ImageIcon ( `` images/middle.gif '' , `` pretty meaningless splat '' ) ; When specify filename URL ImageIcon constructor , processing block image data completely load data location prove invalid . If data location invalid ( non-null ) , ImageIcon still successfully create ; size , therefore , paint nothing . As show createImageIcon method , advisable first verify URL point exist file pass ImageIcon constructor . This allow graceful error handle file n't present . If want information image load , register observer image icon call setImageObserver method . Under cover , image icon use Image object hold image data . The rest section cover following topic : A More Complex Image Icon Example Loading Images Using getResource Loading Images Into Applets Improving Perceived Performance When Loading Image Icons Creating Custom Icon Implementation The Image Icon API Examples Use Icons A More Complex Image Icon Example Here 's application use six image icon . Five display thumbnail image sixth diplays full size photograph . Try : Click Launch button run IconDemo use Java™ Web Start ( download JDK 7 later ) . Or , compile run example , consult example index . Click thumbnail image view full size photograph . Hold mouse photograph . A tool tip appear display photograph caption . IconDemoApp demonstrate icon use following way : As GUI element attach button ( thumbnail image button ) . To display image ( five photograph ) . The photograph load separate thread loadimages.execute . The loadimages code show little later section . The ThumbnailAction class , inner class IconDemoApp.java , descendant AbstractAction manage full size image icon , thumbnail version , description . When actionPerformed method call full size image load main display area . Each button instance ThumbnailAction specify different image show . /** * Action class show image specify 's constructor . */ private class ThumbnailAction extend AbstractAction { /** *The icon full image want display . */ private Icon displayPhoto ; /** * @ param Icon - The full size photo show button . * @ param Icon - The thumbnail show button . * @ param String - The descriptioon icon . */ public ThumbnailAction ( Icon photo , Icon thumb , String desc ) { displayPhoto = photo ; // The short description become tooltip button . putValue ( SHORT_DESCRIPTION , desc ) ; // The LARGE_ICON_KEY actually key set // icon Action apply button . putValue ( LARGE_ICON_KEY , thumb ) ; } /** * Shows full image main area set application title . */ public void actionPerformed ( ActionEvent e ) { photographLabel.setIcon ( displayPhoto ) ; setTitle ( `` Icon Demo : `` + getValue ( SHORT_DESCRIPTION ) .toString ( ) ) ; } } Loading Images Using getResource Most often , image icon 's data come image file . There number valid way application 's class image file may configure file server . You might class file JAR file , image file JAR file ; might JAR file , might different JAR file . The following figure illustrate way file configure : Class file next image directory contain image file , PNG format . Class file directory JAR file . The JAR file create image images directory . Class file one JAR file image another JAR file . Class image file JAR file . If write real-world application , likely ( recommend ) put file package . For information package , see Creating Using Packages Learning Java Language trail . Here possible configuration use package name `` omega '' : Class file directory name omega . Image omega/images directory . Class file omega directory . Image JAR file inside omega directory , create omega/images hierarchy . One big JAR file class file omega directory image file omega/images directory . All seven configuration show valid , code read image : java.net.URL imageURL = myDemo.class.getResource ( `` images/myImage.gif '' ) ; ... ( imageURL ! = null ) { ImageIcon icon = new ImageIcon ( imageURL ) ; } The getResource method cause class loader look directory JAR file program 's class path , return URL soon find desired file . In example MyDemo program attempt load images/myImage.png file omega class . The class loader look directory JAR file program 's class path /omega/images/myImage.png . If class loader find file , return URL JAR file directory contain file . If another JAR file directory class path contain images/myImage.png file , class loader return first instance contain file . Here three way specify class path : Using -cp -classpath command-line argument . For example , case image JAR file name images.jar class file current directory : java -cp . ; images.jar MyDemo [ Microsoft Windows ] java -cp `` . ; images.jar '' MyDemo [ UNIX-emulating shell Microsoft Windows — must quote path ] java -cp . : images.jar MyDemo [ UNIX ] If image class file separate JAR file , command line look something like : java -cp . ; MyDemo.jar ; images.jar MyDemo [ Microsoft Windows ] In situation file one JAR file , use either following command : java -jar MyAppPlusImages.jar java -cp . ; MyAppPlusImages.jar MyApp [ Microsoft Windows ] For information , see JAR Files trail . In program 's JNLP file ( use Java Web Start ) . For example , JNLP file use DragPictureDemo : < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < ! -- JNLP File DragPictureDemo -- > < jnlp spec= '' 1.0+ '' codebase= '' http : //docs.oracle.com/javase/tutorialJWS/src/uiswing/misc/examples '' href= '' DragPictureDemo.jnlp '' > < information > < title > DragPictureDemo < /title > < vendor > The Java ( tm ) Tutorial : Sun Microsystems , Inc. < /vendor > < homepage href= '' http : //docs.oracle.com/javase/tutorial/uiswing/misc/examples/index.html # DragPictureDemo '' / > < description > DragPictureDemo < /description > < description kind= '' short '' > A demo show install data transfer custom component. < /description > < offline-allowed/ > < /information > < resource > < j2se version= '' 1.6+ '' / > < jar href= '' allClasses.jar '' / > < jar href= '' images.jar '' / > < /resources > < application-desc main-class= '' DragPictureDemo '' / > < /jnlp > In example , class file image file separate JAR file . The JAR file specify use XML jar tag . Setting CLASSPATH environment variable . This last approach recommend . If CLASSPATH set , current directory ( `` . '' ) follow location system class ship JRE use default . Most Swing Tutorial examples put image images directory directory contain example ' class file . When create JAR file example , keep relative location , although often put class file different JAR file image JAR file . No matter class image file file system — one JAR file , multiple JAR file , named package , default package — code find image file use getResource . For information , see Accessing Resources Location-Independent Manner Application Development Considerations . Loading Images Into Applets Applets generally load image data computer serve applet . The APPLET tag specify information image use applet . For information APPLET tag see Using APPLET Tag Improving Perceived Performance When Loading Image Icons Because photograph image slow access , IconDemoApp.java use SwingWorker improve performance program perceive user . Background image load — program use javax.swing.SwingWorker object load photograph image compute 's thumbnail background thread . Using SwingWorker prevent program appear freeze load scale image . Here 's code process image : /** * SwingWorker class load image background thread call publish * new one ready display . * * We use Void first SwingWorker param need return * anything doInBackground ( ) . */ private SwingWorker < Void , ThumbnailAction > loadimages = new SwingWorker < Void , ThumbnailAction > ( ) { /** * Creates full size thumbnail version target image file . */ @ Override protect Void doInBackground ( ) throw Exception { ( int = 0 ; < imageCaptions.length ; i++ ) { ImageIcon icon ; icon = createImageIcon ( imagedir + imageFileNames [ ] , imageCaptions [ ] ) ; ThumbnailAction thumbAction ; ( icon ! = null ) { ImageIcon thumbnailIcon = new ImageIcon ( getScaledImage ( icon.getImage ( ) , 32 , 32 ) ) ; thumbAction = new ThumbnailAction ( icon , thumbnailIcon , imageCaptions [ ] ) ; } else { // image fail load reason // load placeholder instead thumbAction = new ThumbnailAction ( placeholderIcon , placeholderIcon , imageCaptions [ ] ) ; } publish ( thumbAction ) ; } // unfortunately must return something , null valid // return return type void . return null ; } /** * Process load image . */ @ Override protect void process ( List < ThumbnailAction > chunk ) { ( ThumbnailAction thumbAction : chunk ) { JButton thumbButton = new JButton ( thumbAction ) ; // add new button BEFORE last glue // center button toolbar buttonBar.add ( thumbButton , buttonBar.getComponentCount ( ) - 1 ) ; } } } ; SwingWorker invoke doInBackground method background thread . The method place full size image , thumbnail size image caption ThumbnailAction object . The SwingWorker deliver ThumbnailAction process method . The process method execute event dispatch thread update GUI add button toolbar . JButton constructor take action object . The action object determine number button 's property . In case button icon , caption action perform button press determine ThumbnailAction . Overhead — program eventually load source image memory . This may desirable situation . Loading number large file could cause program allocate large amount memory . Care take manage number size image load . As performance-related issue , technique applicable situation others . Also technique describe design improve program 's perceived performance , necessarily impact real performance . Creating Custom Icon Implementation The createImageIcon method return null find image , program ? One possibility would ignore image move . Another option would provide sort default icon display real one load . Making another call createImageIcon might result another null use good idea . Instead let create custom Icon implementation . You find implementation custom icon class MissingIcon.java . Here interesting part code : /** * The `` missing icon '' white box black border red x . * It 's use display something issue load * icon external location . * * @ author Collin Fagan */ public class MissingIcon implement Icon { private int width = 32 ; private int height = 32 ; private BasicStroke stroke = new BasicStroke ( 4 ) ; public void paintIcon ( Component c , Graphics g , int x , int ) { Graphics2D g2d = ( Graphics2D ) g.create ( ) ; g2d.setColor ( Color.WHITE ) ; g2d.fillRect ( x +1 , + 1 , width -2 , height -2 ) ; g2d.setColor ( Color.BLACK ) ; g2d.drawRect ( x +1 , + 1 , width -2 , height -2 ) ; g2d.setColor ( Color.RED ) ; g2d.setStroke ( stroke ) ; g2d.drawLine ( x +10 , + 10 , x + width -10 , + height -10 ) ; g2d.drawLine ( x +10 , + height -10 , x + width -10 , + 10 ) ; g2d.dispose ( ) ; } public int getIconWidth ( ) { return width ; } public int getIconHeight ( ) { return height ; } } The paintIcon method pass Graphics object . The Graphics object give paintIcon method access entire Java2D API . For information painting Java2D , see Performing Custom Painting . The following code demonstrate MissingIcon class use SwingWorker doInBackground method . private MissingIcon placeholderIcon = new MissingIcon ( ) ; ... ( icon ! = null ) { ... } else { // image fail load reason // load placeholder instead thumbAction = new ThumbnailAction ( placeholderIcon , placeholderIcon , imageCaptions [ ] ) ; } Using custom icon implication : Because icon 's appearance determine dynamically , icon paint code use information — component application state , example — determine paint . Depending platform type image , may get performance boost custom icon , since paint simple shape sometimes fast copy image . Because MissingIcon file I/O need separate thread load image . The Image Icon API The following table list commonly used ImageIcon constructor method . Note ImageIcon descendent JComponent even Component . The API use image icon fall category : Setting , Getting , Painting Image Icon 's Image Setting Getting Information Image Icon Watching Image Icon 's Image Load Setting , Getting , Painting Image Icon 's Image Method Constructor Purpose ImageIcon ( ) ImageIcon ( byte [ ] ) ImageIcon ( byte [ ] , String ) ImageIcon ( Image ) ImageIcon ( Image , String ) ImageIcon ( String ) ImageIcon ( String , String ) ImageIcon ( URL ) ImageIcon ( URL , String ) Create ImageIcon instance , initialize contain specified image . The first argument indicate source — image , byte array , filename , URL — image icon 's image load . The source must format support java.awt.Image class : namely GIF , JPEG , PNG . The second argument , present , provide description image . The description may also set via setDescription provide useful textual information assistive technology . void setImage ( Image ) Image getImage ( ) Set get image display image icon . void paintIcon ( Component , Graphics , int , int ) Paint image icon 's image specified graphic context . You would override 're implement custom icon perform painting . The Component object use image observer . You rely default behavior provide Component class , pas component . The two int argument specify top-left corner icon paint . URL getResource ( String ) ( java.lang.ClassLoader ) Find resource give name . For information , see Loading Images Using getResource . InputStream getResourceAsStream ( String ) ( java.lang.ClassLoader ) Find resource give name return input stream read resource . For information , see Loading Images Into Applets discussion . Setting Getting Information Image Icon Method Purpose void setDescription ( String ) String getDescription ( ) Set get description image . This description intend use assistive technology . int getIconWidth ( ) int getIconHeight ( ) Get width height image icon pixel . Watching Image Icon 's Image Load Method Purpose void setImageObserver ( ImageObserver ) ImageObserver getImageObserver ( ) Set get image observer image icon . int getImageLoadStatus ( ) Get loading status image icon 's image . The value return method define MediaTracker . Examples Use Icons The follow table list many example use ImageIcon . Example Where Described Notes LabelDemo This section How Use Labels Demonstrates use icon application 's label , without accompany text . IconDemo This section Uses label show large image ; use button image text . CustomIconDemo This section Uses custom icon class implement ArrowIcon.java . TumbleItem How Make Applets An applet . Uses image icon animation . Shows call ImageIcon 's paintIcon method . ButtonDemo How Use Buttons , Check Boxes , Radio Buttons Shows use icon application 's button . CheckBoxDemo How Use Check Boxes Uses multiple GIF image . TabbedPaneDemo How Use Tabbed Panes Demonstrates add icon tabs tabbed pane . DialogDemo How Make Dialogs Shows use standard icon dialog . TreeIconDemo How Use Trees Shows change icon display tree 's node . ActionDemo How Use Actions Shows specify icon tool-bar button menu item use Action . FileChooserDemo2 How Use File Choosers Uses PNG image . Shows implement image previewer image filter file chooser . Note : The photograph use IconDemo copyright ©2006 spriggs.net licence Creative Commons Licence .