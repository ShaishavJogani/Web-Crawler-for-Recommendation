Introduction Service Provider Interfaces explain javax.sound.sampled.spi javax.sound.midi.spi package define abstract class use developer sound service . By implement subclass one abstract class , service provider create new service extend functionality runtime system . The previous section cover use javax.sound.sampled.spi package . This section discuss use javax.sound.midi.spi package provide new service handle MIDI device file . There four abstract class javax.sound.midi.spi package , represent four different type service provide MIDI system : MidiFileWriter provide MIDI file-writing service . These service make possible application program save , MIDI file , MIDI Sequence generate process . MidiFileReader provide file-reading service return MIDI Sequence MIDI file use application program . MidiDeviceProvider supply instance one specific type MIDI device , possibly include hardware device . SoundbankReader supply soundbank file-reading service . Concrete subclass SoundbankReader parse give soundbank file , produce Soundbank object load Synthesizer . An application program directly create instance service objectâwhether provider object , MidiDeviceProvider , object , Synthesizer , supply provider object . Nor program directly refer SPI class . Instead , application program make request MidiSystem object javax.sound.midi package , MidiSystem turn use concrete subclass javax.sound.midi.spi class process request . Providing MIDI File-Writing Services There three standard MIDI file format , implementation Java Sound API support : Type 0 , Type 1 , Type 2 . These file format differ internal representation MIDI sequence data file , appropriate different kind sequence . If implementation n't support three type , service provider supply support unimplemented one . There also variant standard MIDI file format , proprietary , similarly could support third-party vendor . The ability write MIDI file provide concrete subclass MidiFileWriter . This abstract class directly analogous javax.sampled.spi.AudioFileWriter . Again , method group query method learn type file write , method actually write file . As AudioFileWriter , two query method concrete : boolean isFileTypeSupported ( int fileType ) boolean isFileTypeSupported ( int fileType , Sequence sequence ) The first provide general information whether file writer ever write specified type MIDI file type . The second method specific : ask whether particular Sequence write specify type MIDI file . Generally , n't need override either two concrete method . In default implementation , invoke one two correspond query method iterate result return . Being abstract , two query method need implement subclass : abstract int [ ] getMidiFileTypes ( ) abstract int [ ] getMidiFileTypes ( Sequence sequence ) The first return array file type support general . A typical implementation might initialize array file writer 's constructor return array method . From set file type , second method find subset file writer write give Sequence . In accordance MIDI specification , type sequence write type MIDI file . The write method MidiFileWriter subclass perform encoding data give Sequence correct data format requested type MIDI file , write coded stream either file output stream : abstract int write ( Sequence , int fileType , java.io.File ) abstract int write ( Sequence , int fileType , java.io.OutputStream ) To , write method must parse Sequence iterate track , construct appropriate file header , write header track output . The MIDI file 's header format , course , define MIDI specification . It include information `` magic number '' identify MIDI file , header 's length , number track , sequence 's timing information ( division type resolution ) . The rest MIDI file consist track data , format define MIDI specification . Let 's briefly look application program , MIDI system , service provider cooperate write MIDI file . In typical situation , application program particular MIDI Sequence save file . The program query MidiSystem object see MIDI file format , , support particular Sequence hand , attempt write file . The MidiSystem.getMidiFileTypes ( Sequence ) method return array MIDI file type system write particular sequence . It invoke corresponding getMidiFileTypes method installed MidiFileWriter service , collect return result array integer think master list file type compatible give Sequence . When come write Sequence file , call MidiSystem.write pass integer represent file type , along Sequence write output file ; MidiSystem use supplied type decide instal MidiFileWriter handle write request , dispatch corresponding write appropriate MidiFileWriter . Providing MIDI File-Reading Services The MidiFileReader abstract class directly analogous javax.sampled.spi.AudioFileReader class . Both consist two overloaded method , take File , URL , InputStream argument . The first overloaded method return file format specify file . In case MidiFileReader , API : abstract MidiFileFormat getMidiFileFormat ( java.io.File file ) abstract MidiFileFormat getMidiFileFormat ( java.io.InputStream stream ) abstract MidiFileFormat getMidiFileFormat ( java.net.URL url ) Concrete subclasses must implement method return filled-out MidiFileFormat object describe format specified MIDI file ( stream URL ) , assume file type support file reader contain valid header information . Otherwise , InvalidMidiDataException throw . The overload method return MIDI Sequence give file , stream , URL : abstract Sequence getSequence ( java.io.File file ) abstract Sequence getSequence ( java.io.InputStream stream ) abstract Sequence getSequence ( java.net.URL url ) The getSequence method perform actual work parse byte MIDI input file construct corresponding Sequence object . This essentially inverse process use MidiFileWriter.write . Because one-to-one correspondence content MIDI file define MIDI specification Sequence object define Java Sound API , detail parsing straightforward . If file pass getSequence contains data file reader ca n't parse ( example , file corrupt n't conform MIDI specification ) , InvalidMidiDataException throw . Providing Particular MIDI Devices A MidiDeviceProvider consider factory supply one particular type MIDI device . The class consist method return instance MIDI device , well query method learn kind device provider supply . As javax.sound.midi.spi service , application developer get indirect access MidiDeviceProvider service call MidiSystem method , case MidiSystem.getMidiDevice MidiSystem.getMidiDeviceInfo . The purpose subclassing MidiDeviceProvider supply new kind device , service developer must also create accompanying class device returnedâjust saw MixerProvider javax.sound.sampled.spi package . There , returned device 's class implement javax.sound.sampled.Mixer interface ; implement javax.sound.midi.MidiDevice interface . It might also implement subinterface MidiDevice , Synthesizer Sequencer . Because single subclass MidiDeviceProvider provide one type MidiDevice , getDeviceInfo method class return array MidiDevice.Info object enumerate different MidiDevices available : abstract MidiDevice.Info [ ] getDeviceInfo ( ) The returned array contain single element , course . A typical implementation provider might initialize array constructor return . This allow MidiSystem iterate installed MidiDeviceProviders construct list installed device . MidiSystem return list ( MidiDevice.Info [ ] array ) application program . MidiDeviceProvider also include concrete query method : boolean isDeviceSupported ( MidiDevice.Info info ) This method permit system query provider specific kind device . Generally , n't need override convenience method . The default implementation iterate array return getDeviceInfo compare argument element . The third final MidiDeviceProvider method return requested device : abstract MidiDevice getDevice ( MidiDevice.Info info ) This method first test argument make sure describe device provider supply . If n't , throw IllegalArgumentException . Otherwise , return device . Providing Soundbank File-Reading Services A SoundBank set Instruments load Synthesizer . An Instrument implementation sound-synthesis algorithm produce particular sort sound , include accompany name information string . A SoundBank roughly correspond bank MIDI specification , 's extensive addressable collection ; perhaps well think collection MIDI bank . SoundbankReader consist single overloaded method , system invoke read Soundbank object soundbank file : abstract Soundbank getSoundbank ( java.io.File file ) abstract Soundbank getSoundbank ( java.io.InputStream stream ) abstract Soundbank getSoundbank ( java.net.URL url ) Concrete subclass SoundbankReader work tandem particular provider-defined implementation SoundBank , Instrument , Synthesizer allow system load SoundBank file instance particular Synthesizer class . Synthesis technique may differ wildly one Synthesizer another , , consequence , data store Instrument SoundBank provide control specification data synthesis process Synthesizer take variety form . One synthesis technique may require byte parameter data ; another may base extensive sound sample . The resource present SoundBank depend upon nature Synthesizer get load , therefore implementation getSoundbank method SoundbankReader subclass access knowledge particular kind SoundBank . In addition , particular subclass SoundbankReader understand particular file format store SoundBank data . That file format may vendor-specific proprietary . SoundBank interface , weak constraint content SoundBank object . The method object must support implement interface ( getResources , getInstruments , getVendor , getName , etc . ) impose loose requirement data object contain . For example , getResources getInstruments return empty array . The actual content subclassed SoundBank object , particular instrument non-instrument resource , define service provider . Thus , mechanism parse soundbank file depend entirely specification particular kind soundbank file . Soundbank file create outside Java Sound API , typically vendor synthesizer load kind soundbank . Some vendor might supply end-user tool create file .