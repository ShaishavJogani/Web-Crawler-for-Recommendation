Earlier saw use print println method print string standard output ( System.out ) . Since number convert string ( see later lesson ) , use method print arbitrary mixture string number . The Java programming language method , however , allow exercise much control print output number include . The printf format Methods The java.io package include PrintStream class two format method use replace print println . These method , format printf , equivalent one another . The familiar System.out use happens PrintStream object , invoke PrintStream method System.out . Thus , use format printf anywhere code previously use print println . For example , System.out.format ( ... .. ) ; The syntax two java.io.PrintStream method : public PrintStream format ( String format , Object ... args ) format string specify formatting use args list variable print use format . A simple example would System.out.format ( `` The value `` + `` float variable `` + `` % f , value `` + `` integer variable % , `` + `` string % '' , floatVar , intVar , stringVar ) ; The first parameter , format , format string specify object second parameter , args , format . The format string contain plain text well format specifier , special character format argument Object ... args . ( The notation Object ... args call varargs , mean number argument may vary . ) Format specifier begin percent sign ( % ) end converter . The converter character indicate type argument format . In percent sign ( % ) converter optional flag specifier . There many converter , flag , specifier , document java.util.Formatter Here basic example : int = 461012 ; System.out.format ( `` The value : % % n '' , ) ; The % specifies single variable decimal integer . The % n platform-independent newline character . The output : The value : 461012 The printf format method overload . Each version following syntax : public PrintStream format ( Locale l , String format , Object ... args ) To print number French system ( comma use place decimal place English representation float point number ) , example , would use : System.out.format ( Locale.FRANCE , `` The value float `` + `` variable % f , `` + `` value integer variable `` + `` % , string % % n '' , floatVar , intVar , stringVar ) ; An Example The follow table list converter flag use sample program , TestFormat.java , follow table . Converters Flags Used TestFormat.java Converter Flag Explanation A decimal integer . f A float . n A new line character appropriate platform run application . You always use % n , rather \n . tB A date & time conversion—locale-specific full name month . td , te A date & time conversion—2-digit day month . td lead zero need , te . ty , tY A date & time conversion—ty = 2-digit year , tY = 4-digit year . tl A date & time conversion—hour 12-hour clock . tM A date & time conversion—minutes 2 digit , lead zero necessary . tp A date & time conversion—locale-specific am/pm ( low case ) . tm A date & time conversion—months 2 digit , lead zero necessary . tD A date & time conversion—date % tm % td % ty 08 Eight character width , lead zero necessary . + Includes sign , whether positive negative . , Includes locale-specific grouping character . - Left-justified.. .3 Three place decimal point . 10.3 Ten character width , right justify , three place decimal point . The following program show formatting format . The output show within double quote embedded comment : import java.util.Calendar ; import java.util.Locale ; public class TestFormat { public static void main ( String [ ] args ) { long n = 461012 ; System.out.format ( `` % % n '' , n ) ; // -- > `` 461012 '' System.out.format ( `` % 08d % n '' , n ) ; // -- > `` 00461012 '' System.out.format ( `` % +8d % n '' , n ) ; // -- > `` +461012 '' System.out.format ( `` % ,8d % n '' , n ) ; // -- > `` 461,012 '' System.out.format ( `` % +,8d % n % n '' , n ) ; // -- > `` +461,012 '' double pi = Math.PI ; System.out.format ( `` % f % n '' , pi ) ; // -- > `` 3.141593 '' System.out.format ( `` % .3f % n '' , pi ) ; // -- > `` 3.142 '' System.out.format ( `` % 10.3f % n '' , pi ) ; // -- > `` 3.142 '' System.out.format ( `` % -10.3f % n '' , pi ) ; // -- > `` 3.142 '' System.out.format ( Locale.FRANCE , `` % -10.4f % n % n '' , pi ) ; // -- > `` 3,1416 '' Calendar c = Calendar.getInstance ( ) ; System.out.format ( `` % tB % te , % tY % n '' , c , c , c ) ; // -- > `` May 29 , 2006 '' System.out.format ( `` % tl : % tM % tp % n '' , c , c , c ) ; // -- > `` 2:34 '' System.out.format ( `` % tD % n '' , c ) ; // -- > `` 05/29/06 '' } } Note : The discussion section cover basic format printf method . Further detail find Basic I/O section Essential trail , `` Formatting '' page . Using String.format create string cover Strings . The DecimalFormat Class You use java.text.DecimalFormat class control display lead trail zero , prefix suffix , group ( thousand ) separator , decimal separator . DecimalFormat offer great deal flexibility formatting number , make code complex . The example follow create DecimalFormat object , myFormatter , pass pattern string DecimalFormat constructor . The format ( ) method , DecimalFormat inherits NumberFormat , invoke myFormatter—it accepts double value argument return formatted number string : Here sample program illustrate use DecimalFormat : import java.text . * ; public class DecimalFormatDemo { static public void customFormat ( String pattern , double value ) { DecimalFormat myFormatter = new DecimalFormat ( pattern ) ; String output = myFormatter.format ( value ) ; System.out.println ( value + `` `` + pattern + `` `` + output ) ; } static public void main ( String [ ] args ) { customFormat ( `` # # # , # # # . # # # '' , 123456.789 ) ; customFormat ( `` # # # . # # '' , 123456.789 ) ; customFormat ( `` 000000.000 '' , 123.78 ) ; customFormat ( `` $ # # # , # # # . # # # '' , 12345.67 ) ; } } The output : 123456.789 # # # , # # # . # # # 123,456.789 123456.789 # # # . # # 123456.79 123.78 000000.000 000123.780 12345.67 $ # # # , # # # . # # # $ 12,345.67 The follow table explains line output . DecimalFormat.java Output Value Pattern Output Explanation 123456.789 # # # , # # # . # # # 123,456.789 The pound sign ( # ) denote digit , comma placeholder grouping separator , period placeholder decimal separator . 123456.789 # # # . # # 123456.79 The value three digit right decimal point , pattern two . The format method handle round . 123.78 000000.000 000123.780 The pattern specifies lead trail zero , 0 character use instead pound sign ( # ) . 12345.67 $ # # # , # # # . # # # $ 12,345.67 The first character pattern dollar sign ( $ ) . Note immediately precede leftmost digit formatted output .