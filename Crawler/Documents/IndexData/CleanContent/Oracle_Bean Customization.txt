Customization provide mean modify appearance behavior bean within application builder meet specific need . There several level customization available bean developer allow developer get maximum benefit bean 's potential functionality . The following link useful learn property editor customizers : PropertyEditor interface PropertyEditorSupport class PropertyEditorManager class Customizer interface BeanInfo interface A bean 's appearance behavior customize design time within beans-compliant builder tool . There two way customize bean : By use property editor . Each bean property property editor . The NetBeans GUI Builder usually display bean 's property editor Properties window . The property editor associate particular property type edit property type . By use customizers . Customizers give complete GUI control bean customization . Customizers use property editor practical applicable . Unlike property editor , associate property , customizer associate bean . Property Editors A property editor tool customize particular property type . Property editor activate Properties window . This window determine property 's type , search relevant property editor , display property 's current value relevant way . Property editor must implement PropertyEditor interface , provide method specify property display property sheet . The following figure represent Properties window contain myBean1 property : You begin process edit property click property entry . Clicking entry bring separate panel . For example , set foreground background use selection box choice color , press `` ... '' button work standard ColorEditor window . Clicking toolTipText property open StringEditor window . The support class PropertyEditorSupport provide default implementation PropertyEditor interface . By subclassing property editor PropertyEditorSupport , simply override method need . To display current property value `` sample '' within Properties window , need override isPaintable return true . You must override paintValue paint current property value rectangle property sheet . Here 's ColorEditor implement paintValue : public void paintValue ( java.awt.Graphics gfx , java.awt.Rectangle box ) { Color oldColor = gfx.getColor ( ) ; gfx.setColor ( Color.black ) ; gfx.drawRect ( box.x , box.y , box.width-3 , box.height-3 ) ; gfx.setColor ( color ) ; gfx.fillRect ( box.x+1 , box.y+1 , box.width-4 , box.height-4 ) ; gfx.setColor ( oldColor ) ; } To support custom property editor , override two method . Override supportsCustomEditor return true , override getCustomEditor return custom editor instance . ColorEditor.getCustomEditor return . In addition , PropertyEditorSupport class maintain PropertyChangeListener list , fire property change event notification listener bound property change . How Property Editors Associated Properties Property editor discover associate give property following way : Explicit association way BeanInfo object . The editor title 's property set following line code : pd.setPropertyEditorClass ( TitleEditor.class ) ; Explicit registration way java.beans.PropertyEditorManager.registerEditor method . This method take two argument : bean class type , editor class associate type . Name search . If class explicitly associate property editor , PropertyEditorManager search class 's property editor following way : Appending `` Editor '' fully qualified class name . For example , my.package.ComplexNumber class , property editor manager would search my.package.ComplexNumberEditor class . Appending `` Editor '' class name search class path . Customizers You learn builder tool provide support create property editor . What need visual builder meet complex , industrial-strength bean ? Often undesirable property bean reveal single ( sometimes huge ) property sheet . What one single root choice type bean render half property irrelevant ? The JavaBeans specification provide user-defined customizers , define high level customization bean property available property editor . When use bean Customizer , complete control configure edit bean . A Customizer application specifically target bean 's customization . Sometimes property insufficient represent bean 's configurable attribute . Customizers use sophisticated instruction would need change bean , property editor primitive achieve bean customization . All customizers must : Extend java.awt.Component one subclass . Implement java.beans.Customizer interface This mean implement method register PropertyChangeListener object , fire property change event listener change target bean occur . Implement default constructor . Associate customizer target class via BeanInfo.getBeanDescriptor .