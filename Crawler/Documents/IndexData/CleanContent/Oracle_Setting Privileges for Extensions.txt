If The Security Manager force , following condition must meet enable software , include extension software , perform security-sensitive operation : The security-sensitive code extension must wrap PrivilegedAction object . The security policy implement security manager must grant appropriate permission extension . By default , instal extension grant security permission part core platform API . The permission grant security policy apply code wrap PrivilegedAction instance . Let 's look condition little detail , example . Using PrivilegedAction Class Suppose want modify RectangleArea class extension example previous lesson write rectangle area file rather stdout . Writing file , however , security-sensitive operation , software go run security manager , 'll need mark code privilege . There two step need take : You need place code perform security-sensitive operation within run method object type java.security.PrivilegedAction . You must use PrivilegedAction object argument call doPrivileged method java.security.AccessController . If apply guideline RectangleArea class , class definition would look something like : import java.io . * ; import java.security . * ; public final class RectangleArea { public static void writeArea ( final java.awt.Rectangle r ) { AccessController . doPrivileged ( new PrivilegedAction ( ) { public Object run ( ) { try { int area = r.width * r.height ; String userHome = System.getProperty ( `` user.home '' ) ; FileWriter fw = new FileWriter ( userHome + File.separator + `` test '' + File.separator + `` area.txt '' ) ; fw.write ( `` The rectangle 's area `` + area ) ; fw.flush ( ) ; fw.close ( ) ; } catch ( IOException ioe ) { System.err.println ( ioe ) ; } return null ; } } ) ; } } The single method class , writeArea , compute area rectangle , write area file call area.txt test directory user 's home directory . The security-sensitive statement deal output file place within run method new instance PrivilegedAction . ( Note run require Object instance return . The returned object null . ) The new PrivilegedAction instance pass argument call AccessController.doPrivileged . For information use doPrivileged , see API Privileged Blocks JDKâ„¢ documentation . Wrapping security-sensitive code PrivilegedAction object manner first requirement enable extension perform security-sensitive operation . The second requirement : get security manager grant privileged code appropriate permission . Specifying Permissions Security Policy The security policy force runtime specify policy file . The default policy set file lib/security/java.policy JRE software . The policy file assign security privilege software use grant entry . The policy file contain number grant entry . The default policy file grant entry installed extension : grant codeBase `` file : $ { { java.ext.dirs } } /* '' { permission java.security.AllPermission ; } ; This entry specify file directory specify file : $ { { java.ext.dirs } } /* grant permission call java.security.AllPermission . ( Note Java 6 , java.ext.dirs refers classpath-like path directory , hold installed extension . ) It 's hard guess java.security.AllPermission grant instal extension security privilege 's possible grant . By default , , instal extension security restriction . Extension software perform security-sensitive operation security manager instal , provide security-sensitive code contain instance PrivilegedAction pass argument doPrivileged call . To limit privilege grant extension , need modify policy file . To deny privilege extension , could simply remove grant entry . Not permission comprehensive java.security.AllPermission grant default . After delete default grant entry , enter new grant entry particular permission , include : java.awt.AWTPermission java.io.FilePermission java.net.NetPermission java.util.PropertyPermission java.lang.reflect.ReflectPermission java.lang.RuntimePermission java.security.SecurityPermission java.io.SerializablePermission java.net.SocketPermission The Permissions JDK documentation provide detail permission . Let 's look need use RectangleArea extension . The RectangleArea.writeArea method need two permission : one determine path user 's home directory , write file . Assuming RectangleArea class bundle file area.jar , could grant write privilege add entry policy file : grant codeBase `` file : $ { java.home } /lib/ext/area.jar '' { permission java.io.PropertyPermission `` user.home '' , `` read '' ; permission java.io.FilePermission `` $ { user.home } $ { / } test $ { / } * '' , `` write '' ; } ; The codeBase '' file : $ { java.home } /lib/ext/area.jar '' part entry guarantee permission specify entry apply area.jar . The java.io.PropertyPermission permit access property . The first argument , `` user.home '' , name property , second argument , `` read '' , indicate property read . ( The choice `` write '' . ) The java.io.FilePermission permit access file . The first argument , `` $ { user.home } $ { / } test $ { / } * '' , indicate area.jar grant permission access file test directory user 's home directory . ( Note $ { / } platform-independent file separator . ) The second argument indicate file access grant writing . ( Other choice second argument `` read '' , `` delete '' , `` execute '' . ) Signing Extensions You use policy file place additional restriction permission grant extension require sign trusted entity . ( For review signing verify JAR file , see Signing JAR Files lesson tutorial . ) To allow signature verification extension software conjunction grant permission , policy file must contain keystore entry . The keystore entry specifies keystore use verification . Keystore entry form keystore `` keystore_url '' ; The URL keystore_url either absolute relative . If 's relative , URL relative location policy file . For example , use default keystore use keytool , add entry java.policy keystore `` file : // $ { user.home } /.keystore '' ; To indicate extension must sign order grant security privilege , use signedBy field . For example , following entry indicate extension area.jar grant list privilege sign user identify keystore alias Robert Rita : grant signedBy `` Robert , Rita '' , codeBase `` file : $ { java.home } /lib/ext/area.jar '' { permission java.io.PropertyPermission `` user.home '' , `` read '' ; permission java.io.FilePermission `` $ { user.home } $ { / } test $ { / } * '' , `` write '' ; } ; If codeBase field omit , following `` grant '' , permission grant software , include instal download extension , sign `` Robert '' `` Rita '' : grant signedBy `` Robert , Rita '' { permission java.io.FilePermission `` * '' , `` write '' ; } ; For detail policy file format , see section 3.3.1 Security Architecture Specification JDK documentation .