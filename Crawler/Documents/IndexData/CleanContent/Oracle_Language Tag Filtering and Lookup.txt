The Java Programming language contain internationalization support language tag , language tag filtering , language tag lookup . These feature specify IETF BCP 47 , contain RFC 5646 `` Tags Identifying Languages '' RFC 4647 `` Matching Language Tags . '' This lesson describe support provide JDK . What Are Language Tags ? Language tag specially formatted string provide information particular language . A language tag might something simple ( `` en '' English ) , something complex ( `` zh-cmn-Hans-CN '' Chinese , Mandarin , Simplified script , use China ) , something ( `` sr-Latn '' , Serbian write use Latin script ) . Language tag consist `` subtags '' separate hyphen ; terminology use throughout API documentation . The java.util.Locale class provide support language tag . A Locale contain several different field : language ( `` en '' English , `` ja '' Japanese ) , script ( `` Latn '' Latin `` Cyrl '' Cyrillic ) , country ( `` US '' United States `` FR '' France ) , variant ( indicate variant locale ) , extension ( provide map single character key String value , indicate extension apart language identification ) . To create Locale object language tag String , invoke Locale.forLanguageTag ( String ) , pass language tag argument . Doing creates return new Locale object use application . Example 1 : package languagetagdemo ; import java.util.Locale ; public class LanguageTagDemo { public static void main ( String [ ] args ) { Locale l = Locale.forLanguageTag ( `` en-US '' ) ; } } Note Locale API require language tag syntactically well-formed . It perform extra validation ( check see tag register IANA Language Subtag Registry ) . What Are Language Ranges ? Language range ( represent class java.util.Locale.LanguageRange ) identify set language tag share specific attribute . Language range classify either basic extend , similar language tag consist subtags separate hyphen . Examples basic language range include `` en '' ( English ) , `` ja-JP '' ( Japanese , Japan ) , `` * '' ( special language range match language tag ) . Examples extended language range include `` *-CH '' ( language , Switzerland ) , `` es-* '' ( Spanish , region ) , `` zh-Hant-* '' ( Traditional Chinese , region ) . Furthermore , language range may store Language Priority Lists , enable user prioritize language preference weighted list . Language Priority Lists express place LanguageRange object java.util.List , pass Locale method accept List LanguageRange object . Creating Language Range The Locale.LanguageRange class provide two different constructor create language range : public Locale.LanguageRange ( String range ) public Locale.LanguageRange ( String range , double weight ) The difference second version allow weight specify ; weight consider range place Language Priority List . Locale.LanguageRange also specify constant use constructor : public static final double MAX_WEIGHT public static final double MIN_WEIGHT The MAX_WEIGHT constant hold value 1.0 , indicate good fit user . The MIN_WEIGHT constant hold value 0.0 , indicate . Example 2 : package languagetagdemo ; import java.util.Locale ; public class LanguageTagDemo { public static void main ( String [ ] args ) { // Create Locale Locale l = Locale.forLanguageTag ( `` en-US '' ) ; // Define Some LanguageRange Objects Locale.LanguageRange range1 = new Locale.LanguageRange ( `` en-US '' , Locale.LanguageRange.MAX_WEIGHT ) ; Locale.LanguageRange range2 = new Locale.LanguageRange ( `` en-GB* '' ,0.5 ) ; Locale.LanguageRange range3 = new Locale.LanguageRange ( `` fr-FR '' , Locale.LanguageRange.MIN_WEIGHT ) ; } } Example 2 creates three language range : English ( United States ) , English ( Great Britain ) , French ( France ) . These range weight express user 's preference , order prefer least preferred . Creating Language Priority List You create Language Priority List list language range use LanguageRange.parse ( String ) method . This method accept list comma-separated language range , perform syntactic check language range give range , return newly create Language Priority List . For detail information required format `` range '' parameter , see API specification method . Example 3 : package languagetagdemo ; import java.util.Locale ; import java.util.List ; public class LanguageTagDemo { public static void main ( String [ ] args ) { // Create Locale Locale l = Locale.forLanguageTag ( `` en-US '' ) ; // Create Language Priority List String range = `` en-US ; q=1.0 , en-GB ; q=0.5 , fr-FR ; q=0.0 '' ; List < Locale.LanguageRange > languageRanges = Locale.LanguageRange.parse ( range ) } } Example 3 create three language range Example 2 , store String object , pass parse ( String ) method . The returned List LanguageRange object Language Priority List . Filtering Language Tags Language tag filtering process match set language tag user 's Language Priority List . The result filtering complete list matching result . The Locale class defines two filter method return list Locale object . Their signature follow : public static List < Locale > filter ( List < Locale.LanguageRange > priorityList , Collection < Locale > locale ) public static List < Locale > filter ( List < Locale.LanguageRange > priorityList , Collection < Locale > locale , Locale.FilteringMode mode ) In method , first argument specify user 's Language Priority List describe previous section . The second argument specify Collection Locale object match . The match take place accord rule specify RFC 4647 . The third argument ( provide ) specify `` filtering mode '' use . The Locale.FilteringMode enum provide number different value choose , AUTOSELECT_FILTERING ( basic language range filter ) EXTENDED_FILTERING ( extend language range filter ) . Example 4 provide demonstration language tag filtering . Example 4 : package languagetagdemo ; import java.util.Locale ; import java.util.Collection ; import java.util.List ; import java.util.ArrayList ; public class LanguageTagDemo { public static void main ( String [ ] args ) { // Create collection Locale object filter Collection < Locale > locales = new ArrayList < > ( ) ; locales.add ( Locale.forLanguageTag ( `` en-GB '' ) ) ; locales.add ( Locale.forLanguageTag ( `` ja '' ) ) ; locales.add ( Locale.forLanguageTag ( `` zh-cmn-Hans-CN '' ) ) ; locales.add ( Locale.forLanguageTag ( `` en-US '' ) ) ; // Express user 's preference Language Priority List String range = `` en-US ; q=1.0 , en-GB ; q=0.5 , fr-FR ; q=0.0 '' ; List < Locale.LanguageRange > languageRanges = Locale.LanguageRange.parse ( range ) ; // Now filter Locale object , return match List < Locale > result = Locale.filter ( languageRanges , locale ) ; // Print match ( Locale l : result ) { System.out.println ( l.toString ( ) ) ; } } } The output program : en_US en_GB This returned list order accord weight specify user 's Language Priority List . The Locale class also define filterTags method filter language tag String object . The method signature follow : public static List < String > filterTags ( List < Locale.LanguageRange > priorityList , Collection < String > tag ) public static List < String > filterTags ( List < Locale.LanguageRange > priorityList , Collection < String > tag , Locale.FilteringMode mode ) Example 5 provide search Example 4 , use String object instead Locale object . Example 5 : package languagetagdemo ; import java.util.Locale ; import java.util.Collection ; import java.util.List ; import java.util.ArrayList ; public class LanguageTagDemo { public static void main ( String [ ] args ) { // Create collection String object match Collection < String > tag = new ArrayList < > ( ) ; tags.add ( `` en-GB '' ) ; tags.add ( `` ja '' ) ; tags.add ( `` zh-cmn-Hans-CN '' ) ; tags.add ( `` en-US '' ) ; // Express user 's preference Language Priority List String range = `` en-US ; q=1.0 , en-GB ; q=0.5 , fr-FR ; q=0.0 '' ; List < Locale.LanguageRange > languageRanges = Locale.LanguageRange.parse ( range ) ; // Now search locale best match List < String > result = Locale.filterTags ( languageRanges , tag ) ; // Print match ( String : result ) { System.out.println ( ) ; } } } As , search match return `` en-US '' `` en-GB '' ( order ) . Performing Language Tag Lookup In contrast language tag filtering , language tag lookup process match language range set language tag return one language tag best match range . RFC4647 state : `` Lookup produce single result best match user 's preference list available tag , useful case single item require ( single item return ) . For example , process insert human-readable error message protocol header , might select text base user 's language priority list . Since process return one item , force choose single item return item , even none content 's language tag match language priority list supply user . '' Example 6 : package languagetagdemo ; import java.util.Locale ; import java.util.Collection ; import java.util.List ; import java.util.ArrayList ; public class LanguageTagDemo { public static void main ( String [ ] args ) { // Create collection Locale object search Collection < Locale > locales = new ArrayList < > ( ) ; locales.add ( Locale.forLanguageTag ( `` en-GB '' ) ) ; locales.add ( Locale.forLanguageTag ( `` ja '' ) ) ; locales.add ( Locale.forLanguageTag ( `` zh-cmn-Hans-CN '' ) ) ; locales.add ( Locale.forLanguageTag ( `` en-US '' ) ) ; // Express user 's preference Language Priority List String range = `` en-US ; q=1.0 , en-GB ; q=0.5 , fr-FR ; q=0.0 '' ; List < Locale.LanguageRange > languageRanges = Locale.LanguageRange.parse ( range ) ; // Find BEST match , return one result Locale result = Locale.lookup ( languageRanges , locale ) ; System.out.println ( result.toString ( ) ) ; } } In contrast filtering example , lookup demo Example 6 return one object best match ( en-US case ) . For completenes , Example 7 show perform lookup use String object . Example 7 : package languagetagdemo ; import java.util.Locale ; import java.util.Collection ; import java.util.List ; import java.util.ArrayList ; public class LanguageTagDemo { public static void main ( String [ ] args ) { // Create collection String object match Collection < String > tag = new ArrayList < > ( ) ; tags.add ( `` en-GB '' ) ; tags.add ( `` ja '' ) ; tags.add ( `` zh-cmn-Hans-CN '' ) ; tags.add ( `` en-US '' ) ; // Express user 's preference Language Priority List String range = `` en-US ; q=1.0 , en-GB ; q=0.5 , fr-FR ; q=0.0 '' ; List < Locale.LanguageRange > languageRanges = Locale.LanguageRange.parse ( range ) ; // Find BEST match , return one result String result = Locale.lookupTag ( languageRanges , tag ) ; System.out.println ( result ) ; } } This example return single object best match user 's Language Priority List .