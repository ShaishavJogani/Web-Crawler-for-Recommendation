This section describe use three exception handler component — try , catch , finally block — write exception handler . Then , try-with-resources statement , introduce Java SE 7 , explain . The try-with-resources statement particularly suit situation use Closeable resource , stream . The last part section walk example analyze occur various scenario . The following example defines implement class name ListOfNumbers . When construct , ListOfNumbers create ArrayList contain 10 Integer element sequential value 0 9 . The ListOfNumbers class also define method name writeList , write list number text file call OutFile.txt . This example use output class define java.io , cover Basic I/O . // Note : This class compile yet . import java.io . * ; import java.util.List ; import java.util.ArrayList ; public class ListOfNumbers { private List < Integer > list ; private static final int SIZE = 10 ; public ListOfNumbers ( ) { list = new ArrayList < Integer > ( SIZE ) ; ( int = 0 ; < SIZE ; i++ ) { list.add ( new Integer ( ) ) ; } } public void writeList ( ) { // The FileWriter constructor throw IOException , must catch . PrintWriter = new PrintWriter ( new FileWriter ( `` OutFile.txt '' ) ) ; ( int = 0 ; < SIZE ; i++ ) { // The get ( int ) method throw IndexOutOfBoundsException , must catch . out.println ( `` Value : `` + + `` = `` + list.get ( ) ) ; } out.close ( ) ; } } The first line boldface call constructor . The constructor initialize output stream file . If file open , constructor throw IOException . The second boldface line call ArrayList class 's get method , throw IndexOutOfBoundsException value argument small ( less 0 ) large ( number element currently contain ArrayList ) . If try compile ListOfNumbers class , compiler print error message exception throw FileWriter constructor . However , display error message exception throw get . The reason exception throw constructor , IOException , checked exception , one thrown get method , IndexOutOfBoundsException , unchecked exception . Now 're familiar ListOfNumbers class exception throw within , 're ready write exception handler catch handle exception .