The unbounded wildcard type specify use wildcard character ( ? ) , example , List < ? > . This call list unknown type . There two scenario unbounded wildcard useful approach : If write method implement use functionality provide Object class . When code use method generic class n't depend type parameter . For example , List.size List.clear . In fact , Class < ? > often use method Class < T > depend T. Consider following method , printList : public static void printList ( List < Object > list ) { ( Object elem : list ) System.out.println ( elem + `` `` ) ; System.out.println ( ) ; } The goal printList print list type , fail achieve goal â€” print list Object instance ; print List < Integer > , List < String > , List < Double > , , subtypes List < Object > . To write generic printList method , use List < ? > : public static void printList ( List < ? > list ) { ( Object elem : list ) System.out.print ( elem + `` `` ) ; System.out.println ( ) ; } Because concrete type A , List < A > subtype List < ? > , use printList print list type : List < Integer > li = Arrays.asList ( 1 , 2 , 3 ) ; List < String > ls = Arrays.asList ( `` one '' , `` two '' , `` three '' ) ; printList ( li ) ; printList ( l ) ; Note : The Arrays.asList method use example throughout lesson . This static factory method convert specified array return fixed-size list . It 's important note List < Object > List < ? > . You insert Object , subtype Object , List < Object > . But insert null List < ? > . The Guidelines Wildcard Use section information determine kind wildcard , , use give situation .