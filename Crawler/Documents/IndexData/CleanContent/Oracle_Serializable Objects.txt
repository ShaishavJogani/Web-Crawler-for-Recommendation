To serialize object mean convert state byte stream byte stream revert back copy object . A Java object serializable class superclass implement either java.io.Serializable interface subinterface , java.io.Externalizable . Deserialization process convert serialized form object back copy object . For example , java.awt.Button class implement Serializable interface , serialize java.awt.Button object store serialize state file . Later , read back serialize state deserialize java.awt.Button object . The Java platform specify default way serializable object serialize . A ( Java ) class override default serialization define way serialize object class . The Object Serialization Specification describe object serialization detail . When object serialize , information identify class record serialized stream . However , class 's definition ( `` class file '' ) record . It responsibility system deserializing object determine locate load necessary class file . For example , Java application might include classpath JAR file contain class file serialized object ( ) load class definition use information store directory , explain later lesson . Binding Serializable Object You store serializable object directory underlying service provider support action , Oracle 's LDAP service provider . The following example invokes Context.bind bind AWT button name `` cn=Button '' . To associate attribute new binding , use DirContext.bind . To overwrite exist binding , use Context.rebind DirContext.rebind . // Create object bind Button b = new Button ( `` Push '' ) ; // Perform bind ctx.bind ( `` cn=Button '' , b ) ; You read object back use Context.lookup , follow . // Check bind Button b2 = ( Button ) ctx.lookup ( `` cn=Button '' ) ; System.out.println ( b2 ) ; Running example produce following output . # java SerObj java.awt.Button [ button0,0,0,0x0 , invalid , label=Push ] Specifying Codebase Note : The procedure describe bind serializable object directory service follow schema define RFC 2713 . These procedure might generally applicable naming directory service support bind serializable object specified codebase . When serialized object bind directory show previous example , application read serialized object directory must access class definition necessary deserialize object . Alternatively , record codebase serialized object directory , either bind object subsequently add attribute use DirContext.modifyAttributes . You use attribute record codebase application read attribute directory use appropriately . Or use `` javaCodebase '' attribute specify . In latter case , Oracle 's LDAP service provider automatically use attribute load class definition need . `` javaCodebase '' contain URL codebase directory JAR file . If codebase contain one URL , URL must separate space character . The following example resemble one bind java.awt.Button . It differ use user-defined Serializable class , Flower , supply `` javaCodebase '' attribute contain location Flower 's class definition . Here 's code binding . String codebase = ... ; // Create object bind Flower f = new Flower ( `` rise '' , `` pink '' ) ; // Perform bind specify codebase ctx.bind ( `` cn=Flower '' , f , new BasicAttributes ( `` javaCodebase '' , codebase ) ) ; When run example , must supply URL location class file Flower.class instal . For example , Flower.class instal Web server web1 , directory example/classes , would run example follow . # java SerObjWithCodebase http : //web1/example/classes/ pink rise Afterward , may remove Flower.class classpath run program look list object without directly reference Flower class . If program reference Flower directly , must make class file available compilation execution .