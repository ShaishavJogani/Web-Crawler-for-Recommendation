The dictionary definition polymorphism refers principle biology organism specie many different form stage . This principle also apply object-oriented programming language like Java language . Subclasses class define unique behavior yet share functionality parent class . Polymorphism demonstrate minor modification Bicycle class . For example , printDescription method could add class display data currently store instance . public void printDescription ( ) { System.out.println ( `` \nBike `` + `` gear `` + this.gear + `` cadence `` + this.cadence + `` travel speed `` + this.speed + `` . `` ) ; } To demonstrate polymorphic feature Java language , extend Bicycle class MountainBike RoadBike class . For MountainBike , add field suspension , String value indicate bike front shock absorber , Front . Or , bike front back shock absorber , Dual . Here updated class : public class MountainBike extend Bicycle { private String suspension ; public MountainBike ( int startCadence , int startSpeed , int startGear , String suspensionType ) { super ( startCadence , startSpeed , startGear ) ; this.setSuspension ( suspensionType ) ; } public String getSuspension ( ) { return this.suspension ; } public void setSuspension ( String suspensionType ) { this.suspension = suspensionType ; } public void printDescription ( ) { super.printDescription ( ) ; System.out.println ( `` The `` + `` MountainBike '' + getSuspension ( ) + `` suspension . `` ) ; } } Note overridden printDescription method . In addition information provide , additional data suspension include output . Next , create RoadBike class . Because road race bike skinny tire , add attribute track tire width . Here RoadBike class : public class RoadBike extend Bicycle { // In millimeter ( mm ) private int tireWidth ; public RoadBike ( int startCadence , int startSpeed , int startGear , int newTireWidth ) { super ( startCadence , startSpeed , startGear ) ; this.setTireWidth ( newTireWidth ) ; } public int getTireWidth ( ) { return this.tireWidth ; } public void setTireWidth ( int newTireWidth ) { this.tireWidth = newTireWidth ; } public void printDescription ( ) { super.printDescription ( ) ; System.out.println ( `` The RoadBike '' + `` `` + getTireWidth ( ) + `` MM tire . `` ) ; } } Note , printDescription method override . This time , information tire width display . To summarize , three class : Bicycle , MountainBike , RoadBike . The two subclass override printDescription method print unique information . Here test program create three Bicycle variable . Each variable assign one three bicycle class . Each variable print . public class TestBikes { public static void main ( String [ ] args ) { Bicycle bike01 , bike02 , bike03 ; bike01 = new Bicycle ( 20 , 10 , 1 ) ; bike02 = new MountainBike ( 20 , 10 , 5 , `` Dual '' ) ; bike03 = new RoadBike ( 40 , 20 , 8 , 23 ) ; bike01.printDescription ( ) ; bike02.printDescription ( ) ; bike03.printDescription ( ) ; } } The following output test program : Bike gear 1 cadence 20 travel speed 10 . Bike gear 5 cadence 20 travel speed 10 . The MountainBike Dual suspension . Bike gear 8 cadence 40 travel speed 20 . The RoadBike 23 MM tire . The Java virtual machine ( JVM ) call appropriate method object refer variable . It call method define variable 's type . This behavior refer virtual method invocation demonstrate aspect important polymorphism feature Java language .