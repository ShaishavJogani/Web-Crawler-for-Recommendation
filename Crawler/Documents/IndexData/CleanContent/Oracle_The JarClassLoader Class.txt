The JarClassLoader class extend java.net.URLClassLoader . As name implies , URLClassLoader design use load class resource access search set URLs . The URLs refer either directory JAR file . In addition subclassing URLClassLoader , JarClassLoader also make use feature two new JAR-related APIs , java.util.jar package java.net.JarURLConnection class . In section , 'll look detail constructor two method JarClassLoader . The JarClassLoader Constructor The constructor take instance java.net.URL argument . The URL pass constructor use elsewhere JarClassLoader find JAR file class load . public JarClassLoader ( URL url ) { super ( new URL [ ] { url } ) ; this.url = url ; } The URL object pass constructor superclass , URLClassLoader , take URL [ ] array , rather single URL instance , argument . The getMainClassName Method Once JarClassLoader object construct URL JAR-bundled application , 's go need way determine class JAR file application 's entry point . That 's job getMainClassName method : public String getMainClassName ( ) throw IOException { URL u = new URL ( `` jar '' , `` '' , url + `` ! / '' ) ; JarURLConnection uc = ( JarURLConnection ) u.openConnection ( ) ; Attributes attr = uc.getMainAttributes ( ) ; return attr ! = null ? attr.getValue ( Attributes.Name.MAIN_CLASS ) : null ; } You may recall previous lesson JAR-bundled application 's entry point specify Main-Class header JAR file 's manifest . To understand getMainClassName access Main-Class header value , let 's look method detail , pay special attention new JAR-handling feature use : The JarURLConnection class JAR URLs The getMainClassName method use JAR URL format specify java.net.JarURLConnection class . The syntax URL JAR file example : jar : http : //www.example.com/jarfile.jar ! / The terminating ! / separator indicate URL refers entire JAR file . Anything follow separator refers specific JAR-file content , example : jar : http : //www.example.com/jarfile.jar ! /mypackage/myclass.class The first line getMainClassName method : URL u = new URL ( `` jar '' , `` '' , url + `` ! / '' ) ; This statement construct new URL object represent JAR URL , append ! / separator URL use create JarClassLoader instance . The java.net.JarURLConnection class This class represent communication link application JAR file . It method access JAR file 's manifest . The second line getMainClassName : JarURLConnection uc = ( JarURLConnection ) u.openConnection ( ) ; In statement , URL instance create first line open URLConnection . The URLConnection instance cast JarURLConnection take advantage JarURLConnection 's JAR-handling feature . Fetching Manifest Attributes : java.util.jar.Attributes With JarURLConnection open JAR file , access header information JAR file 's manifest use getMainAttributes method JarURLConnection . This method return instance java.util.jar.Attributes , class map header name JAR-file manifest associate string value . The third line getMainClassName create Attributes object : Attributes attr = uc.getMainAttributes ( ) ; To get value manifest 's Main-Class header , fourth line getMainClassName invoke Attributes.getValue method : return attr ! = null ? attr.getValue ( Attributes.Name.MAIN_CLASS ) : null ; The method 's argument , Attributes.Name.MAIN_CLASS , specify 's value Main-Class header want . ( The Attributes.Name class also provide static field MANIFEST_VERSION , CLASS_PATH , SEALED specify standard manifest header . ) The invokeClass Method We 've see JarURLClassLoader identify main class JAR-bundled application . The last method consider , JarURLClassLoader.invokeClass , enable main class invoke launch JAR-bundled application : public void invokeClass ( String name , String [ ] args ) throw ClassNotFoundException , NoSuchMethodException , InvocationTargetException { Class c = loadClass ( name ) ; Method = c.getMethod ( `` main '' , new Class [ ] { args.getClass ( ) } ) ; m.setAccessible ( true ) ; int mod = m.getModifiers ( ) ; ( m.getReturnType ( ) ! = void.class || ! Modifier.isStatic ( mod ) || ! Modifier.isPublic ( mod ) ) { throw new NoSuchMethodException ( `` main '' ) ; } try { m.invoke ( null , new Object [ ] { args } ) ; } catch ( IllegalAccessException e ) { // This happen , disabled access check } } The invokeClass method take two argument : name application 's entry-point class array string argument pass entry-point class 's main method . First , main class load : Class c = loadClass ( name ) ; The loadClass method inherit java.lang.ClassLoader . Once main class load , reflection API java.lang.reflect package use pass argument class launch . You refer tutorial The Reflection API review reflection .