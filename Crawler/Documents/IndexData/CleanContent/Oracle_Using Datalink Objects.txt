A DATALINK value reference resource outside underlying data source URL . A URL , uniform resource locator , pointer resource World Wide Web . A resource something simple file directory , reference complicated object , query database search engine . The following topic cover : Storing References External Data Retrieving References External Data Storing References External Data Use method PreparedStatement.setURL specify java.net.URL object prepared statement . In case type URL set support Java platform , store URL setString method . For example , suppose owner The Coffee Break would like store list important URLs database table . The following example , DatalinkSample.addURLRow add one row data table DATA_REPOSITORY . The row consist string identify URL , DOCUMENT_NAME URL , URL : public void addURLRow ( String description , String url ) throw SQLException { PreparedStatement pstmt = null ; try { pstmt = this.con.prepareStatement ( `` INSERT INTO data_repository '' + `` ( document_name , url ) VALUES ( ? , ? ) '' ) ; pstmt.setString ( 1 , description ) ; pstmt.setURL ( 2 , new URL ( url ) ) ; pstmt.execute ( ) ; } catch ( SQLException sqlex ) { JDBCTutorialUtilities.printSQLException ( sqlex ) ; } catch ( Exception ex ) { System.out.println ( `` Unexpected exception '' ) ; ex.printStackTrace ( ) ; } finally { ( pstmt ! = null ) { pstmt.close ( ) ; } } } Retrieving References External Data Use method ResultSet.getURL retrieve reference external data java.net.URL object . In case type URL return method getObject getURL support Java platform , retrieve URL String object call method getString . The following example , DatalinkSample.viewTable , display content URLs store table DATA_REPOSITORY : public static void viewTable ( Connection con , Proxy proxy ) throw SQLException , IOException { Statement stmt = null ; String query = `` SELECT document_name , url `` + `` FROM data_repository '' ; try { stmt = con.createStatement ( ) ; ResultSet rs = stmt.executeQuery ( query ) ; ( rs.next ( ) ) { String documentName = null ; java.net.URL url = null ; documentName = rs.getString ( 1 ) ; // Retrieve value URL object . url = rs.getURL ( 2 ) ; ( url ! = null ) { // Retrieve content // URL URLConnection myURLConnection = url.openConnection ( proxy ) ; BufferedReader bReader = new BufferedReader ( new InputStreamReader ( myURLConnection . getInputStream ( ) ) ) ; System.out.println ( `` Document name : `` + documentName ) ; String pageContent = null ; ( ( pageContent = bReader.readLine ( ) ) ! = null ) { // Print URL content System.out.println ( pageContent ) ; } } else { System.out.println ( `` URL null '' ) ; } } } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } catch ( IOException ioEx ) { System.out.println ( `` IOException caught : `` + ioEx.toString ( ) ) ; } catch ( Exception ex ) { System.out.println ( `` Unexpected exception '' ) ; ex.printStackTrace ( ) ; } finally { ( stmt ! = null ) { stmt.close ( ) ; } } } The sample DatalinkSample store Oracle URL , http : //www.oracle.com table DATA_REPOSITORY . Afterward , display content document refer URLs store DATA_REPOSITORY , include Oracle home page , http : //www.oracle.com . The sample retrieve URL result set java.net.URL object following statement : url = rs.getURL ( 2 ) ; The sample access data refer URL object following statement : URLConnection myURLConnection = url.openConnection ( proxy ) ; BufferedReader bReader = new BufferedReader ( new InputStreamReader ( myURLConnection.getInputStream ( ) ) ) ; System.out.println ( `` Document name : `` + documentName ) ; String pageContent = null ; ( ( pageContent = bReader.readLine ( ) ) ! = null ) { // Print URL content System.out.println ( pageContent ) ; } The method URLConnection.openConnection take argument , mean URLConnection represent direct connection Internet . If require proxy server connect Internet , openConnection method accept java.net.Proxy object argument . The following statement demonstrate create HTTP proxy server name www-proxy.example.com port number 80 : Proxy myProxy ; InetSocketAddress myProxyServer ; myProxyServer = new InetSocketAddress ( `` www-proxy.example.com '' , 80 ) ; myProxy = new Proxy ( Proxy.Type.HTTP , myProxyServer ) ;