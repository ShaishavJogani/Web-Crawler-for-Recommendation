The Distinguished Name ( DN ) use LDAP string representation . The string format use represent DN specify RFC 2253 . The DN make component call Relative Distinguished Names ( RDN ) . Below example DN : '' CN=John Smith , O=Isode Limited , C=GB '' It consist following RDNs : CN=John Smith O=Isode Limited C=GB The class represent DN RDN respectively . javax.naming.ldap.LdapName javax.naming.ldap.Rdn The LdapName class implement javax.naming.Name interface similar javax.naming.CompoundName javax.naming.CompositeName class . LdapName Rdn class allow easy manipulation DNs RDNs . Using APIs 's easy construct RDN pair name value . A DN construct list RDNs . Similarly individual component DN RDN retrieve string representation . LdapName An LdapName create string representation define RFC 2253 list Rdns . When former way use , specified string parse per rule define RFC2253 . An InvalidNameException throw string valid DN . Here 's example use constructor parse LDAP name print component . String name = `` cn=Mango , ou=Fruits , o=Food '' ; try { LdapName dn = new LdapName ( name ) ; System.out.println ( dn + `` `` + dn.size ( ) + `` RDNs : `` ) ; ( int = 0 ; < dn.size ( ) ; i++ ) { System.out.println ( dn.get ( ) ) ; } } catch ( InvalidNameException e ) { System.out.println ( `` Can parse name : `` + name ) ; } Running example input `` cn=Mango , ou=Fruits , o=Food '' produce following result : cn=Mango , ou=Fruits , o=Food 3 RDNs : o=Food ou=Fruits cn=Mango The LdapName class contain method access component RDNs string , modify LdapName , compare two LdapNames equality , get string representation name . Accessing name component LDAP name : Here method use access name component RDNs string : getRdn ( int posn ) get ( int posn ) getRdns ( ) getAll ( ) getPrefix ( int posn ) getSuffix ( int posn ) clone ( ) To retrieve component particular position within LdapName , use getRdn ( ) get ( ) . The previous constructor example show example use . getRdns ( ) return list RDNs getAll ( ) return component LdapName enumeration . The right RDN index 0 , left RDN index n-1 . For example , distinguish name : `` cn=Mango , ou=Fruits , o=Food '' number following sequence range 0 2 : { o=Food , ou=Fruits , cn=Mango } You also get LdapNames 's suffix prefix LdapName instance . Here 's example get suffix prefix LDAP name . LdapName dn = new LdapName ( `` cn=Mango , ou=Fruits , o=Food '' ) ; Name suffix = dn.getSuffix ( 1 ) ; // 1 < = index < cn.size ( ) Name prefix = dn.getPrefix ( 1 ) ; // 0 < = index < 1 When run program , generate following output : cn=Mango ou=Fruits o=Food To make copy LdapName , use clone ( ) . Modifying LDAP name Following method use modify LDAP name : add ( Rdn rdn ) add ( String comp ) add ( int posn , String comp ) addAll ( List suffixRdns ) addAll ( Name suffix ) addAll ( int posn , List suffixRdns ) addAll ( int posn , Name suffix ) remove ( int posn ) After create LdapName instance , add remove component . Here 's example append LdapName exist LdapName , add component front end , remove second component . LdapName dn = new LdapName ( `` ou=Fruits , o=Food '' ) ; LdapName dn2 = new LdapName ( `` ou=Summer '' ) ; System.out.println ( dn.addAll ( dn2 ) ) ; // ou=Summer , ou=Fruits , o=Food System.out.println ( dn.add ( 0 , `` o=Resources '' ) ) ; // ou=Summer , ou=Fruits , o=Food , o=Resources System.out.println ( dn.add ( `` cn=WaterMelon '' ) ) ; // cn=WaterMelon , ou=Summer , ou=Fruits , o=Food , o=Resources System.out.println ( dn.remove ( 1 ) ) ; // o=Food System.out.println ( dn ) ; // cn=WaterMelon , ou=Summer , ou=Fruits , o=Resources Comparing LDAP name Following method use compare two LDAP name : compareTo ( Object name ) equal ( Object name ) endsWith ( List ) endWith ( Name name ) startsWith ( List rdns ) startsWith ( Name name ) isEmpty ( ) You use compareTo ( ) sort list LdapName instance . The equal ( ) method let determine whether two LdapNames syntactically equal . Two LdapNames equal ( case-exact match ) component order . With startsWith ( ) endsWith ( ) , learn whether LdapName start end another LdapName ; , whether LdapName suffix prefix another LdapName . The convenience method isEmpty ( ) enable determine whether LdapName zero component . You also use expression size ( ) == 0 perform check . Here example , CompareLdapNames , use comparison method . LdapName one = new LdapName ( `` cn=Vincent Ryan , ou=People , o=JNDITutorial '' ) ; LdapName two = new LdapName ( `` cn=Vincent Ryan '' ) ; LdapName three = new LdapName ( `` o=JNDITutorial '' ) ; LdapName four = new LdapName ( `` '' ) ; System.out.println ( one.equals ( two ) ) ; // false System.out.println ( one.startsWith ( three ) ) ; // true System.out.println ( one.endsWith ( two ) ) ; // true System.out.println ( one.startsWith ( four ) ) ; // true System.out.println ( one.endsWith ( four ) ) ; // true System.out.println ( one.endsWith ( three ) ) ; // false System.out.println ( one.isEmpty ( ) ) ; // false System.out.println ( four.isEmpty ( ) ) ; // true System.out.println ( four.size ( ) == 0 ) ; // true Getting String Representation The method get string representation LDAP name format accord syntax specify RFC 2253 : toString ( ) When use LdapName constructor , supply string representation LDAP name get back LdapName instance . To reverse , , get string representation LdapName instance , use toString ( ) . The result toString ( ) feed back constructor produce LdapName instance equal original LdapName instance . Here 's example , LdapNametoString : LdapName dn = new LdapName ( name ) ; String str = dn.toString ( ) ; System.out.println ( str ) ; LdapName dn2 = new LdapName ( str ) ; System.out.println ( dn.equals ( dn2 ) ) ; // true LdapName Argument Context Methods The Context method require either composite compound name pass argument method . Hence LdapName directly pass context method show LookupLdapName : // Create initial context Context ctx = new InitialContext ( env ) ; // An LDAP name LdapName dn = new LdapName ( `` ou=People , o=JNDITutorial '' ) ; // Perform lookup use dn Object obj = ctx.lookup ( dn ) ; Similarly , Context method return result list ( ) , listBindings ( ) , search ( ) operation , DN retrieve call getNameInNamespace ( ) . The LdapName construct directly DN show example , RetrievingLdapName : ( answer.hasMore ( ) ) { SearchResult sr = ( SearchResult ) answer.next ( ) ; String name = sr.getNameInNamespace ( ) ; System.out.println ( name ) ; LdapName dn = new LdapName ( name ) ; // something dn