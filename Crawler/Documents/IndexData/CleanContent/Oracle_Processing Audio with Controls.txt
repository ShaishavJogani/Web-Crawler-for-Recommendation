Previous section discuss play capture audio sample . The implicit goal deliver sample faithfully possible , without modification ( possibly mix sample audio line ) . Sometimes , however , want able modify signal . The user might want sound louder , quieter , fuller , reverberant , higher lower pitch , . This page discuss Java Sound API feature provide kind signal processing . There two way apply signal processing : You use processing support mixer component line , query Control object set control user desire . Typical control support mixer line include gain , pan , reverberation control . If kind processing need n't provide mixer line , program operate directly audio bytes , manipulate desire . This page discuss first technique great detail , special API second technique . Introduction Controls A mixer various sort signal-processing control line . For example , mixer use audio capture might input port gain control , target data line gain pan control . A mixer use audio playback might sample-rate control source data line . In case , control access method Line interface . Because Mixer interface extend Line , mixer set control . These might serve master control affect mixer 's source target line . For example , mixer might master gain control whose value decibel add value individual gain control target line . Others mixer 's control might affect special line , neither source target , mixer use internally processing . For example , global reverb control might choose sort reverberation apply mixture input signal , `` wet '' ( reverberate ) signal would get mixed back `` dry '' signal delivery mixer 's target line . If mixer line control , might wish expose control via graphical object program 's user interface , user adjust audio characteristic desire . The control graphical ; allow retrieve change setting . It 's decide sort graphical representation ( slider , button , etc . ) , , use program . All control implement concrete subclass abstract class Control . Many typical audio-processing control describe abstract subclass Control base data type ( boolean , enumerate , float ) . Boolean control , example , represent binary-state control , on/off control mute reverb . Float control , hand , well suit represent continuously variable control , pan , balance , volume . The Java Sound API specify following abstract subclass Control : BooleanControl— represent binary-state ( true false ) control . For example , mute , solo , on/off switch would good candidate BooleanControls . FloatControl — data model provide control range floating-point value . For example , volume pan FloatControls could manipulate via dial slider . EnumControl— offer choice set object . For example , might associate set button user interface EnumControl select one several preset reverberation setting . CompoundControlâprovides access collection related item , instance Control subclass . CompoundControls represent multi-control module graphic equalizer . ( A graphic equalizer would typically depict set slider , affect FloatControl . ) Each subclass Control method appropriate underlying data type . Most class include method set get control 's current value ( ) , get control 's label ( ) , . Of course , class method particular data model represent class . For example , EnumControl method let get set possible value , FloatControl permit get minimum maximum value , well precision ( increment step size ) control . Each subclass Control corresponding Control.Type subclass , include static instance identify specific control . The follow table show Control subclass , correspond Control.Type subclass , static instance indicate specific kind control : Control Control.Type Control.Type instance BooleanControl BooleanControl.Type MUTE – Mute status line APPLY_REVERB – Reverberation on/off CompoundControl CompoundControl.Type ( none ) EnumControl EnumControl.Type REVERB – Access reverb setting ( instance ReverbType ) FloatControl FloatControl.Type AUX_RETURN – Auxiliary return gain line AUX_SEND – Auxiliary send gain line BALANCE – Left-right volume balance MASTER_GAIN – Overall gain line PAN – Left-right position REVERB_RETURN – Post-reverb gain line REVERB_SEND – Pre-reverb gain line SAMPLE_RATE – Playback sample rate VOLUME – Volume line An implementation Java Sound API provide control type mixer line . It also supply additional control type define Java Sound API . Such control type could implement via concrete subclass four abstract subclass , via additional Control subclasses n't inherit four abstract subclass . An application program query line find control support . Getting Line Has Desired Controls In many case , application program simply display whatever control happen support line question . If line n't control , . But 's important find line certain control ? In case , use Line.Info obtain line right characteristic , previously describe Getting Line Desired Type . For example , suppose prefer input port let user set volume sound input . The following code excerpt show one might query default mixer determine whether desire port control : Port lineIn ; FloatControl volCtrl ; try { mixer = AudioSystem.getMixer ( null ) ; lineIn = ( Port ) mixer.getLine ( Port.Info.LINE_IN ) ; lineIn.open ( ) ; volCtrl = ( FloatControl ) lineIn.getControl ( FloatControl.Type.VOLUME ) ; // Assuming getControl call succeed , // LINE_IN VOLUME control. } catch ( Exception e ) { System.out.println ( `` Failed try find LINE_IN '' + `` VOLUME control : exception = `` + e ) ; } ( volCtrl ! = null ) // ... Getting Controls Line An application program need expose control user interface might simply query available line control , display appropriate user-interface element every control every line interest . In case , program 's mission provide user `` handle '' control ; know control audio signal . As long program know map line 's control user-interface element , Java Sound API architecture Mixer , Line , Control generally take care rest . For example , suppose program play back sound . You 're use SourceDataLine , 've obtain previously describe Getting Line Desired Type . You access line 's control invoke following Line method : Control [ ] getControls ( ) Then , control returned array , use follow Control method get control 's type : Control.Type getType ( ) Knowing specific Control.Type instance , program display corresponding user-interface element . Of course , choose `` corresponding user-interface element '' specific Control.Type depend approach take program . On one hand , might use kind element represent Control.Type instance class . This would require query class Control.Type instance use , example , Object.getClass method . Let 's say result match BooleanControl.Type . In case , program might display generic checkbox toggle button , class match FloatControl.Type , might display graphic slider . On hand , program might distinguish different type controlsâeven classâand use different user-interface element one . This would require test instance return Control 's getType method . Then , example , type match BooleanControl.Type.APPLY_REVERB , program might display checkbox ; type match BooleanControl.Type.MUTE , might instead display toggle button . Using Control Change Audio Signal Now know access control determine type , section describe use Controls change aspect audio signal . This section n't cover every available control ; rather , provide example area show get start . These example include : Controlling line 's mute state Changing line 's volume Selecting among various reverberation presets Suppose program access mixer , line control line , data structure manage logical association control corresponding user-interface element . Then , translate user 's manipulation control corresponding Control method become fairly straightforward matter . The following subsection describe method must invoke affect change specific control . Controlling Line 's Mute State Controlling mute state line simply matter call follow BooleanControl method : void setValue ( boolean value ) ( Presumably , program know , refer control-management data structure , mute instance BooleanControl . ) To mute signal 's pass line , program invoke method , specify true value . To turn mute , permit signal flow line , program invoke method parameter set false . Changing Line 's Volume Let 's assume program associate particular graphic slider particular line 's volume control . The value volume control ( i.e. , FloatControl.Type.VOLUME ) set use follow FloatControl method : void setValue ( float newValue ) Detecting user move slider , program get slider 's current value pass , parameter newValue , method . This change volume signal flowing though line `` '' control . Selecting among Various Reverberation Presets Let 's suppose program mixer line control type EnumControl.Type.REVERB . Calling EnumControl method : java.lang.Objects [ ] getValues ( ) control produce array ReverbType object . If desire , particular parameter setting object access use following ReverbType method : int getDecayTime ( ) int getEarlyReflectionDelay ( ) float getEarlyReflectionIntensity ( ) int getLateReflectionDelay ( ) float getLateReflectionIntensity ( ) For example , program want single reverb set sound like cavern , iterate ReverbType object find one getDecayTime return value great 2000 . For thorough explanation method , include table representative return value , see API reference documentation javax.sound.sampled.ReverbType . Typically , though , program create user-interface element , example , radio button , ReverbType object within array return getValues method . When user click one radio button , program invoke EnumControl method void setValue ( java.lang.Object value ) value set ReverbType correspond newly engage button . The audio signal send line `` '' EnumControl reverberate accord parameter setting constitute control 's current ReverbType ( i.e. , particular ReverbType specify value argument setValue method ) . So , application program 's perspective , enable user move one reverberation preset ( i.e. , ReverbType ) another simply matter connect element array return getValues distinct radio button . Manipulating Audio Data Directly The Control API allow implementation Java Sound API , third-party provider mixer , supply arbitrary sort signal processing control . But mixer offer kind signal processing need ? It take work , might able implement signal processing program . Because Java Sound API give access audio data array byte , alter byte way choose . If 're process incoming sound , read byte TargetDataLine manipulate . An algorithmically trivial example yield sonically intriguing result play sound backwards arrange frame reverse order . This trivial example may much use program , numerous sophisticated digital signal processing ( DSP ) techniques might appropriate . Some example equalization , dynamic-range compression , peak limiting , time stretch compression , well special effect delay , chorus , flanging , distortion , . To play back process sound , place manipulated array byte SourceDataLine Clip . Of course , array byte need derive exist sound . You synthesize sound scratch , although require knowledge acoustic else access sound-synthesis function . For either processing synthesis , may want consult audio DSP textbook algorithm 're interested , else import third-party library signal-processing function program . For playback synthesized sound , consider whether Synthesizer API javax.sound.midi package meet need instead . You 'll learn javax.sound.midi later Synthesizing Sound .