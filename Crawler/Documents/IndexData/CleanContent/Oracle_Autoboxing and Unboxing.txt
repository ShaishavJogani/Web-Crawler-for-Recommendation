Autoboxing automatic conversion Java compiler make primitive type corresponding object wrapper class . For example , convert int Integer , double Double , . If conversion go way , call unboxing . Here simple example autoboxing : Character ch = 'a ' ; The rest example section use generic . If yet familiar syntax generic , see Generics ( Updated ) lesson . Consider following code : List < Integer > li = new ArrayList < > ( ) ; ( int = 1 ; < 50 ; += 2 ) li.add ( ) ; Although add int value primitive type , rather Integer object , li , code compiles . Because li list Integer object , list int value , may wonder Java compiler issue compile-time error . The compiler generate error create Integer object add object li . Thus , compiler convert previous code follow runtime : List < Integer > li = new ArrayList < > ( ) ; ( int = 1 ; < 50 ; += 2 ) li.add ( Integer.valueOf ( ) ) ; Converting primitive value ( int , example ) object corresponding wrapper class ( Integer ) call autoboxing . The Java compiler applies autoboxing primitive value : Passed parameter method expect object corresponding wrapper class . Assigned variable corresponding wrapper class . Consider following method : public static int sumEven ( List < Integer > li ) { int sum = 0 ; ( Integer : li ) ( % 2 == 0 ) sum += ; return sum ; } Because remainder ( % ) unary plus ( += ) operator apply Integer object , may wonder Java compiler compile method without issue error . The compiler generate error invoke intValue method convert Integer int runtime : public static int sumEven ( List < Integer > li ) { int sum = 0 ; ( Integer : li ) ( i.intValue ( ) % 2 == 0 ) sum += i.intValue ( ) ; return sum ; } Converting object wrapper type ( Integer ) correspond primitive ( int ) value call unboxing . The Java compiler applies unbox object wrapper class : Passed parameter method expect value corresponding primitive type . Assigned variable corresponding primitive type . The Unboxing example show work : import java.util.ArrayList ; import java.util.List ; public class Unboxing { public static void main ( String [ ] args ) { Integer = new Integer ( -8 ) ; // 1 . Unboxing method invocation int absVal = absoluteValue ( ) ; System.out.println ( `` absolute value `` + + `` = `` + absVal ) ; List < Double > ld = new ArrayList < > ( ) ; ld.add ( 3.1416 ) ; // Î  autoboxed method invocation . // 2 . Unboxing assignment double pi = ld.get ( 0 ) ; System.out.println ( `` pi = `` + pi ) ; } public static int absoluteValue ( int ) { return ( < 0 ) ? -i : ; } } The program print following : absolute value -8 = 8 pi = 3.1416 Autoboxing unboxing let developer write clean code , make easy read . The following table list primitive type corresponding wrapper class , use Java compiler autoboxing unboxing : Primitive type Wrapper class boolean Boolean byte Byte char Character float Float int Integer long Long short Short double Double