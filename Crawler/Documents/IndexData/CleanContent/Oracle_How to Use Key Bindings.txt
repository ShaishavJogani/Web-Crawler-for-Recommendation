The JComponent class support key binding way respond individual key type user . Here example key binding appropriate : You 're create custom component want support keyboard access . For example , might want component react focus user press Space key . You want override behavior exist key binding . For example , application normally react press F2 key particular way , might want perform different action ignore key press . You want provide new key binding exist action . For example , might feel strongly Control-Shift-Insert perform paste operation . You often n't need use key binding directly . They 're use behind scene mnemonic ( support button tabbed pane well JLabel ) accelerator ( support menu item ) . You find coverage mnemonic accelerator section Enabling Keyboard Operation . An alternative key binding use key listener . Key listener place low-level interface keyboard input , respond individual key key binding appropriate tend result easily maintain code . Key listener also difficult key binding active component n't focus . Some advantage key binding 're somewhat self documenting , take containment hierarchy account , encourage reusable chunk code ( Action object ) , allow action easily remove , customize , share . Also , make easy change key action bind . Another advantage Actions enable state provide easy way disable action without track component attach . The rest section give detail need use key binding : How Key Bindings Work How Make Remove Key Bindings The Key Binding API Examples Use Key Bindings How Key Bindings Work The key bind support provide JComponent relies InputMap ActionMap class . An input map bind key stroke action name , action map specify action correspond action name . Technically , n't need use action name map ; use object `` key '' map . By convention , however , use string name action . Each InputMap/ActionMap parent typically come UI . Any time look feel change , parent reset . In way , binding specify developer never lose look feel change . Each JComponent one action map three input map . The input map correspond following focus situation : JComponent.WHEN_FOCUSED The component keyboard focus . The WHEN_FOCUSED input map typically use component child . For example , button bind Space key use WHEN_FOCUSED map . These binding effective component focus . JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT The component contain ( ) component focus . This input map commonly use composite component â€” component whose implementation depend child component . For example , JTables make binding use WHEN_ANCESTOR_OF_FOCUSED_COMPONENT user edit , up-arrow key ( example ) still change select cell . JComponent.WHEN_IN_FOCUSED_WINDOW The component 's window either focus contain component focus . This input map commonly use mnemonic accelerator , need active regardless focus window . When user type key , JComponent key event processing code search one input map find valid binding key . When find binding , look corresponding action action map . If action enable , binding valid action execute . If 's disabled , search valid binding continue . If one binding exist key , first valid one found use . Input map check order : The focused component 's WHEN_FOCUSED input map . The focused component 's WHEN_ANCESTOR_OF_FOCUSED_COMPONENT input map . The WHEN_ANCESTOR_OF_FOCUSED_COMPONENT input map focused component 's parent , parent 's parent , , continue containment hierarchy . Note : Input map disabled component skip . The WHEN_IN_FOCUSED_WINDOW input map enabled component focused window search . Because order search component unpredictable , avoid duplicate WHEN_IN_FOCUSED_WINDOW binding ! Let 's consider happen two typical key bind case : button react Space key , frame default button react Enter key . In first case , assume user press Space key JButton keyboard focus . First , button 's key listener notify event . Assuming none key listener consume event ( invoke consume method KeyEvent ) button 's WHEN_FOCUSED input map consult . A binding find JButton use input map bind Space action name . The action name look button 's action map , actionPerformed method action invoke . The KeyEvent consume , process stop . In second case , assume Enter key press focus anywhere inside frame default button ( set use JRootPane setDefaultButton method ) . Whatever focused component , key listener first notify . Assuming none consume key event focused component 's WHEN_FOCUSED input map consult . If binding key Action bound key disable , focused component 's WHEN_ANCESTOR_OF_FOCUSED_COMPONENT input map consult ( binding find Action bound key disable ) WHEN_ANCESTOR_OF_FOCUSED_COMPONENT input map component 's ancestor containment hierarchy . Eventually , root pane 's WHEN_ANCESTOR_OF_FOCUSED_COMPONENT input map search . Since input map valid binding Enter , action execute , cause default button click . How Make Remove Key Bindings Here example specify component react F2 key : component.getInputMap ( ) .put ( KeyStroke.getKeyStroke ( `` F2 '' ) , `` doSomething '' ) ; component.getActionMap ( ) .put ( `` doSomething '' , anAction ) ; //where anAction javax.swing.Action As precede code show , get component 's action map use getActionMap method ( inherit JComponent ) . To get input map , use getInputMap ( int ) method , integer one JComponent.WHEN_*FOCUSED* constant show preceding list . Or , usual case constant JComponent.WHEN_FOCUSED , use getInputMap argument . To add entry one map , use put method . You specify key use KeyStroke object , get use KeyStroke.getKeyStroke ( String ) method . You find example create Action ( put action map ) How Use Actions . Here 's slightly complex example specify component react Space key user click mouse . component.getInputMap ( ) .put ( KeyStroke.getKeyStroke ( `` SPACE '' ) , `` press '' ) ; component.getInputMap ( ) .put ( KeyStroke.getKeyStroke ( `` release SPACE '' ) , `` release '' ) ; component.getActionMap ( ) .put ( `` press '' , pressedAction ) ; component.getActionMap ( ) .put ( `` release '' , releasedAction ) ; //where pressedAction releasedAction javax.swing.Action object To make component ignore key normally respond , use special action name `` none '' . For example , following code make component ignore F2 key . component.getInputMap ( ) .put ( KeyStroke.getKeyStroke ( `` F2 '' ) , `` none '' ) ; Note : The precede code n't prevent relevant WHEN_ANCESTOR_OF_FOCUSED_COMPONENT WHEN_IN_FOCUSED_WINDOW input map search F2 key binding . To prevent search , must use valid action instead `` none '' . For example : Action doNothing = new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { //do nothing } } ; component.getInputMap ( ) .put ( KeyStroke.getKeyStroke ( `` F2 '' ) , `` doNothing '' ) ; component.getActionMap ( ) .put ( `` doNothing '' , doNothing ) ; The Key Binding API The following table list commonly use API key binding . Also see API table Creating Using Action , section How Use Actions . Creating Using InputMaps Creating Using ActionMaps Getting Using InputMaps Method Purpose InputMap getInputMap ( ) InputMap getInputMap ( int ) ( JComponent ) Get one input map component . The argument one JComponent constant : WHEN_FOCUSED , WHEN_IN_FOCUSED_WINDOW , WHEN_ANCESTOR_OF_FOCUSED_COMPONENT . The no-argument method get WHEN_FOCUSED input map . void put ( KeyStroke , Object ) ( InputMap ) Set action name associate specify key stroke . If second argument null , method remove binding key stroke . To make key stroke ignore , use `` none '' second argument . static KeyStroke getKeyStroke ( String ) ( KeyStroke ) Get object specify particular user keyboard activity . Typical argument `` alt shift X '' , `` INSERT '' , `` type '' . See KeyStroke API documentation full detail form getKeyStroke method . Getting Using ActionMaps Method Purpose ActionMap getActionMap ( ) ( JComponent ) Get object map names action component . void put ( Object , Action ) ( ActionMap ) Set action associate specify name . If second argument null , method remove binding name . Examples Use Key Bindings The follow table list examples use key binding : Example Where Described Notes TableFTFEditDemo How Use Tables The IntegerEditor class register key binding formatted text field validate input user press Enter key . TextComponentDemo Text Component Features Key binding register text pane navigate text user press Control-B , Control-F , Control-P , Control-N key .