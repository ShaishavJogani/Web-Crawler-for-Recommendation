With JTree class , display hierarchical data . A JTree object actually contain data ; simply provide view data . Like non-trivial Swing component , tree get data query data model . Here picture tree : As preceding figure show , JTree display data vertically . Each row display tree contain exactly one item data , call node . Every tree root node node descend . By default , tree display root node , decree otherwise . A node either child . We refer node child — whether currently child — branch node . Nodes child leaf node . Branch node number child . Typically , user expand collapse branch node — make child visible invisible — click . By default , branch node except root node start collapse . A program detect change branch node ' expansion state listen tree expansion tree-will-expand event , describe How Write Tree Expansion Listener How Write Tree-Will-Expand Listener . A specific node tree identify either TreePath , object encapsulate node ancestor , display row , row display area display one node . An expanded node non-leaf node display child ancestor expand . A collapsed node one hide . A hidden node one collapsed ancestor . The rest section discuss following topic : Creating Tree Responding Node Selection Customizing Tree 's Display Dynamically Changing Tree Creating Data Model The Tree API Examples Use Trees Creating Tree Here picture application , top half display tree scroll pane . Try : Click Launch button run Tree Demo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Expand one node . You click circle left item . Collapse node . You click circle left expanded node . The following code , take TreeDemo.java , create JTree object put scroll pane : //Where instance variable declare : private JTree tree ; ... public TreeDemo ( ) { ... DefaultMutableTreeNode top = new DefaultMutableTreeNode ( `` The Java Series '' ) ; createNodes ( top ) ; tree = new JTree ( top ) ; ... JScrollPane treeView = new JScrollPane ( tree ) ; ... } The code create instance DefaultMutableTreeNode serve root node tree . It create rest node tree . After , create tree , specify root node argument JTree constructor . Finally , put tree scroll pane , common tactic show full , expand tree would otherwise require much space . Here code create node root node : private void createNodes ( DefaultMutableTreeNode top ) { DefaultMutableTreeNode category = null ; DefaultMutableTreeNode book = null ; category = new DefaultMutableTreeNode ( `` Books Java Programmers '' ) ; top.add ( category ) ; //original Tutorial book = new DefaultMutableTreeNode ( new BookInfo ( `` The Java Tutorial : A Short Course Basics '' , `` tutorial.html '' ) ) ; category.add ( book ) ; //Tutorial Continued book = new DefaultMutableTreeNode ( new BookInfo ( `` The Java Tutorial Continued : The Rest JDK '' , `` tutorialcont.html '' ) ) ; category.add ( book ) ; //Swing Tutorial book = new DefaultMutableTreeNode ( new BookInfo ( `` The Swing Tutorial : A Guide Constructing GUIs '' , `` swingtutorial.html '' ) ) ; category.add ( book ) ; // ... add book programmer ... category = new DefaultMutableTreeNode ( `` Books Java Implementers '' ) ; top.add ( category ) ; //VM book = new DefaultMutableTreeNode ( new BookInfo ( `` The Java Virtual Machine Specification '' , `` vm.html '' ) ) ; category.add ( book ) ; //Language Spec book = new DefaultMutableTreeNode ( new BookInfo ( `` The Java Language Specification '' , `` jls.html '' ) ) ; category.add ( book ) ; } The argument DefaultMutableTreeNode constructor user object object contain point data associate tree node . The user object string , custom object . If implement custom object , implement toString method return string display node . JTree , default , render node use value return toString , important toString return something meaningful . Sometimes , feasible override toString ; scenario override convertValueToText JTree map object model string get display . For example , BookInfo class use previous code snippet custom class hold two piece data : name book , URL HTML file describe book . The toString method implement return book name . Thus , node associate BookInfo object display book name . Note : You specify text formatting tree node put HTML tag string node . See Using HTML Swing Components detail . To summarize , create tree invoke JTree constructor , specify class implement TreeNode argument . You probably put tree inside scroll pane , tree would take much space . You anything make tree node expand collapse response user click . However , add code make tree respond user select node — click node , example . Responding Node Selection Responding tree node selection simple . You implement tree selection listener register tree . The following code show selection-related code TreeDemo program : //Where tree initialize : tree.getSelectionModel ( ) .setSelectionMode ( TreeSelectionModel.SINGLE_TREE_SELECTION ) ; //Listen selection change . tree.addTreeSelectionListener ( ) ; ... public void valueChanged ( TreeSelectionEvent e ) { //Returns last path element selection . //This method useful selection model allow single selection . DefaultMutableTreeNode node = ( DefaultMutableTreeNode ) tree.getLastSelectedPathComponent ( ) ; ( node == null ) //Nothing select . return ; Object nodeInfo = node.getUserObject ( ) ; ( node.isLeaf ( ) ) { BookInfo book = ( BookInfo ) nodeInfo ; displayURL ( book.bookURL ) ; } else { displayURL ( helpURL ) ; } } The precede code performs task : Gets default TreeSelectionModel tree , set one tree node time select . Registers event handler tree . The event handler object implement TreeSelectionListener interface . In event handler , determines node select invoke tree 's getLastSelectedPathComponent method . Uses getUserObject method get data associate node . For detail handle tree selection event , see How Write Tree Selection Listener . Customizing Tree 's Display Here picture tree node , draw Java , Windows , Mac OS look feel implementation . Java look feel Windows look feel Mac OS look feel As precede figure show , tree conventionally display icon text node . You customize , show shortly . A tree typically also perform look-and-feel-specific painting indicate relationship node . You customize painting limited way . First , use tree.setRootVisible ( true ) show root node tree.setRootVisible ( false ) hide . Second , use tree.setShowsRootHandles ( true ) request tree 's top-level node — root node ( visible ) child ( ) — handle let expand collapse . If use Java look feel , customize whether line draw show relationship tree node . By default , Java look feel draw angle line node . By set JTree.lineStyle client property tree , specify different convention . For example , request Java look feel use horizontal line group node , use following code : tree.putClientProperty ( `` JTree.lineStyle '' , `` Horizontal '' ) ; To specify Java look feel draw line , use code : tree.putClientProperty ( `` JTree.lineStyle '' , `` None '' ) ; The follow snapshot show result set JTree.lineStyle property , use Java look feel . `` Angled '' ( default ) '' Horizontal '' '' None '' No matter look feel , default icon display node determine whether node leaf , , whether expand . For example , Windows Motif look feel implementation , default icon leaf node dot ; Java look feel , default leaf icon paper-like symbol . In look-and-feel implementation show , branch node mark folder-like symbol . Some look feel might different icon expanded branch versus collapsed branch . You easily change default icon use leaf , expand branch , collapse branch node . To , first create instance DefaultTreeCellRenderer . You could always create TreeCellRenderer implementation scratch , reuse whatever component like . Next , specify icon use invoke one following method renderer : setLeafIcon ( leaf node ) , setOpenIcon ( expand branch node ) , setClosedIcon ( collapse branch node ) . If want tree display icon type node , specify null icon . Once set icon , use tree 's setCellRenderer method specify DefaultTreeCellRenderer paint node . Here example , take TreeIconDemo.java : ImageIcon leafIcon = createImageIcon ( `` images/middle.gif '' ) ; ( leafIcon ! = null ) { DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer ( ) ; renderer.setLeafIcon ( leafIcon ) ; tree.setCellRenderer ( renderer ) ; } Here screenshot TreeIconDemo : Try : Click Launch button run TreeIconDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . If want fine control node icon want provide tool tip , create subclass DefaultTreeCellRenderer override getTreeCellRendererComponent method . Because DefaultTreeCellRenderer subclass JLabel , use JLabel method — setIcon — customize DefaultTreeCellRenderer . The following code , TreeIconDemo2.java , create cell renderer vary leaf icon depend whether word `` Tutorial '' node 's text data . The renderer also specify tool-tip text , bold line show . Try : Click Launch button run TreeIconDemo2 use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . // ... tree initialize : //Enable tool tip . ToolTipManager.sharedInstance ( ) .registerComponent ( tree ) ; ImageIcon tutorialIcon = createImageIcon ( `` images/middle.gif '' ) ; ( tutorialIcon ! = null ) { tree.setCellRenderer ( new MyRenderer ( tutorialIcon ) ) ; } ... class MyRenderer extend DefaultTreeCellRenderer { Icon tutorialIcon ; public MyRenderer ( Icon icon ) { tutorialIcon = icon ; } public Component getTreeCellRendererComponent ( JTree tree , Object value , boolean sel , boolean expand , boolean leaf , int row , boolean hasFocus ) { super.getTreeCellRendererComponent ( tree , value , sel , expand , leaf , row , hasFocus ) ; ( leaf & & isTutorialBook ( value ) ) { setIcon ( tutorialIcon ) ; setToolTipText ( `` This book Tutorial series . `` ) ; } else { setToolTipText ( null ) ; //no tool tip } return ; } protect boolean isTutorialBook ( Object value ) { DefaultMutableTreeNode node = ( DefaultMutableTreeNode ) value ; BookInfo nodeInfo = ( BookInfo ) ( node.getUserObject ( ) ) ; String title = nodeInfo.bookName ; ( title.indexOf ( `` Tutorial '' ) > = 0 ) { return true ; } return false ; } } Here result : You might wonder cell renderer work . When tree paint node , neither JTree look-and-feel-specific implementation actually contain code paint node . Instead , tree use cell renderer 's painting code paint node . For example , paint leaf node string `` The Java Programming Language '' , tree ask cell renderer return component paint leaf node string . If cell renderer DefaultTreeCellRenderer , return label paint default leaf icon follow string . A cell renderer paint ; handle event . If want add event handle tree , need register handler either tree , handling occur node select , tree 's cell editor . For information cell editor , see Concepts : Editors Renderers . That section discuss table cell editor renderers , similar tree cell editor renderers . Dynamically Changing Tree The following figure show application call DynamicTreeDemo let add node remove node visible tree . You also edit text node . The application base example provide tutorial reader Richard Stanford . Try : Click Launch button run DynamicTreeDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Here code initialize tree : rootNode = new DefaultMutableTreeNode ( `` Root Node '' ) ; treeModel = new DefaultTreeModel ( rootNode ) ; treeModel.addTreeModelListener ( new MyTreeModelListener ( ) ) ; tree = new JTree ( treeModel ) ; tree.setEditable ( true ) ; tree.getSelectionModel ( ) .setSelectionMode ( TreeSelectionModel.SINGLE_TREE_SELECTION ) ; tree.setShowsRootHandles ( true ) ; By explicitly create tree 's model , code guarantee tree 's model instance DefaultTreeModel . That way , know method tree model support . For example , know invoke model 's insertNodeInto method , even though method require TreeModel interface . To make text tree 's node editable , invoke setEditable ( true ) tree . When user finish edit node , model generate tree model event tell listener — include JTree — tree node change . Note although DefaultMutableTreeNode method change node 's content , change go DefaultTreeModel cover method . Otherwise , tree model event would generate , listener tree would know update . To notify node change , implement TreeModelListener . Here example tree model listener detect user type new name tree node : class MyTreeModelListener implement TreeModelListener { public void treeNodesChanged ( TreeModelEvent e ) { DefaultMutableTreeNode node ; node = ( DefaultMutableTreeNode ) ( e.getTreePath ( ) .getLastPathComponent ( ) ) ; /* * If event list child , change * node child node already * gotten . Otherwise , change node * specify node . */ try { int index = e.getChildIndices ( ) [ 0 ] ; node = ( DefaultMutableTreeNode ) ( node.getChildAt ( index ) ) ; } catch ( NullPointerException exc ) { } System.out.println ( `` The user finish edit node . `` ) ; System.out.println ( `` New value : `` + node.getUserObject ( ) ) ; } public void treeNodesInserted ( TreeModelEvent e ) { } public void treeNodesRemoved ( TreeModelEvent e ) { } public void treeStructureChanged ( TreeModelEvent e ) { } } Here code Add button 's event handler use add new node tree : treePanel.addObject ( `` New Node `` + newNodeSuffix++ ) ; ... public DefaultMutableTreeNode addObject ( Object child ) { DefaultMutableTreeNode parentNode = null ; TreePath parentPath = tree.getSelectionPath ( ) ; ( parentPath == null ) { //There selection . Default root node . parentNode = rootNode ; } else { parentNode = ( DefaultMutableTreeNode ) ( parentPath.getLastPathComponent ( ) ) ; } return addObject ( parentNode , child , true ) ; } ... public DefaultMutableTreeNode addObject ( DefaultMutableTreeNode parent , Object child , boolean shouldBeVisible ) { DefaultMutableTreeNode childNode = new DefaultMutableTreeNode ( child ) ; ... treeModel.insertNodeInto ( childNode , parent , parent.getChildCount ( ) ) ; //Make sure user see lovely new node . ( shouldBeVisible ) { tree.scrollPathToVisible ( new TreePath ( childNode.getPath ( ) ) ) ; } return childNode ; } The code create node , insert tree model , , appropriate , request node expand tree scroll new node visible . To insert node model , code use insertNodeInto method provide DefaultTreeModel class . Creating Data Model If DefaultTreeModel suit need , need write custom data model . Your data model must implement TreeModel interface . TreeModel specifies method get particular node tree , get number child particular node , determine whether node leaf , notify model change tree , add remove tree model listener . Interestingly , TreeModel interface accept kind object tree node . It require node represent DefaultMutableTreeNode object , even nod implement TreeNode interface . Thus , TreeNode interface suitable tree model , feel free devise representation tree node . For example , pre-existing hierarchical data structure , need duplicate force TreeNode mold . You need implement tree model use information exist data structure . The following figure show application call GenealogyExample display descendant ancestor particular person . ( Thanks tutorial reader Olivier Berlanger provide example . ) Try : Click Launch button run Genealogy Example use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . You find custom tree model implementation GenealogyModel.java . Because model implement Object subclass instead , say , subclass DefaultTreeModel , must implement TreeModel interface directly . This require implement method get information node , root child particular node . In case GenealogyModel , node represent object type Person , custom class implement TreeNode . A tree model must also implement method add remove tree model listener , must fire TreeModelEvents listener tree 's structure data change . For example , user instruct GenealogyExample switch show ancestor show descendant , tree model make change fire event inform listener ( tree component ) . How Load Children Lazily Lazy loading characteristic application actual loading instantiation class delay point instance actually use . Do gain anything load lazily ? Yes , would definitely add performance application . By lazily load , dedicate memory resource load instantiate object actually use . You also speed initial loading time application . One way lazily load child Tree utilize TreeWillExpandListener interface . For example , declare load root , grandparent parent Tree along application show following code : Let u declare root , grandparent parent show : class DemoArea extend JScrollPane implement TreeWillExpandListener { ... ... . ... ... . private TreeNode createNodes ( ) { DefaultMutableTreeNode root ; DefaultMutableTreeNode grandparent ; DefaultMutableTreeNode parent ; root = new DefaultMutableTreeNode ( `` San Francisco '' ) ; grandparent = new DefaultMutableTreeNode ( `` Potrero Hill '' ) ; root.add ( grandparent ) ; parent = new DefaultMutableTreeNode ( `` Restaurants '' ) ; grandparent.add ( parent ) ; dummyParent = parent ; return root ; } You load declare node tree show following code : TreeNode rootNode = createNodes ( ) ; tree = new JTree ( rootNode ) ; tree.addTreeExpansionListener ( ) ; tree.addTreeWillExpandListener ( ) ; ... ... . ... ... . setViewportView ( tree ) ; Now , load child lazily application whenever parent node Restaurants visible application . To , let u declare two child separate method call method show following code : private void LoadLazyChildren ( ) { DefaultMutableTreeNode child ; child = new DefaultMutableTreeNode ( `` Thai Barbeque '' ) ; dummyParent.add ( child ) ; child = new DefaultMutableTreeNode ( `` Goat Hill Pizza '' ) ; dummyParent.add ( child ) ; textArea.append ( `` Thai Barbeque Goat Hill Pizza load lazily '' ) ; } ... ... . ... ... . public void treeWillExpand ( TreeExpansionEvent e ) throw ExpandVetoException { saySomething ( `` You expand node `` , e ) ; int n = JOptionPane.showOptionDialog ( , willExpandText , willExpandTitle , JOptionPane.YES_NO_OPTION , JOptionPane.QUESTION_MESSAGE , null , willExpandOptions , willExpandOptions [ 1 ] ) ; LoadLazyChildren ( ) ; } See How Write Tree-Will-Expand Listener description Tree-Will-Expand listener . The Tree API The tree API quite extensive . The following table list bit API , concentrate following category : Tree-Related Classes Interfaces Creating Setting Up Tree Implementing Selection Showing Hiding Nodes For information tree API , see API documentation JTree various class interface tree package . Also refer The JComponent Class information API JTree inherit superclass . Tree-Related Classes Interfaces Class Interface Purpose JTree The component present tree user . TreePath Represents path node . TreeNode MutableTreeNode DefaultMutableTreeNode The interface default tree model expect tree node implement , implementation use default tree model . TreeModel DefaultTreeModel Respectively , interface tree model must implement usual implementation use . TreeCellRenderer DefaultTreeCellRenderer Respectively , interface tree cell renderer must implement usual implementation use . TreeCellEditor DefaultTreeCellEditor Respectively , interface tree cell editor must implement usual implementation use . TreeSelectionModel DefaultTreeSelectionModel Respectively , interface tree 's selection model must implement usual implementation use . TreeSelectionListener TreeSelectionEvent The interface event type use detect tree selection change . For information , see Getting Started . TreeModelListener TreeModelEvent The interface event type use detect tree model change . For information , see How Write Tree Model Listener . TreeExpansionListener TreeWillExpandListener TreeExpansionEvent The interface event type use detect tree expansion collapse . For information , see How Write Tree Expansion Listener How Write Tree-Will-Expand Listener . ExpandVetoException An exception TreeWillExpandListener throw indicate impend expansion/collapse happen . For information , see How Write Tree-Will-Expand Listener . Creating Setting Up Tree Constructor Method Purpose JTree ( TreeNode ) JTree ( TreeNode , boolean ) JTree ( TreeModel ) JTree ( ) JTree ( Hashtable ) JTree ( Object [ ] ) JTree ( Vector ) Create tree . The TreeNode argument specify root node , manage default tree model . The TreeModel argument specify model provide data table . The no-argument version constructor use builder ; create tree contain sample data . If specify Hashtable , array object , Vector argument , argument treat list node root node ( display ) , model tree node construct accordingly . The boolean argument , present , specify tree determine whether node display leaf . If argument false ( default ) , node without child display leaf . If argument true , node leaf getAllowsChildren method return false . void setCellRenderer ( TreeCellRenderer ) Set renderer draw node . void setEditable ( boolean ) void setCellEditor ( TreeCellEditor ) The first method set whether user edit tree node . By default , tree node editable . The second set customize editor use . void setRootVisible ( boolean ) Set whether tree show root node . The default value false tree create use one constructor take data structure , true otherwise . void setShowsRootHandles ( boolean ) Set whether tree show handle leftmost node , let expand collapse node . The default false . If tree show root node , invoke setShowsRootHandles ( true ) . void setDragEnabled ( boolean ) boolean getDragEnabled ( ) Set get dragEnabled property , must true enable drag handle component . The default value false . See Drag Drop Data Transfer detail . Implementing Selection Method Purpose void addTreeSelectionListener ( TreeSelectionListener ) Register listener detect node select deselected . void setSelectionModel ( TreeSelectionModel ) TreeSelectionModel getSelectionModel ( ) Set get model use control node selection . You turn node selection completely use setSelectionModel ( null ) . void setSelectionMode ( int ) int getSelectionMode ( ) ( TreeSelectionModel ) Set get selection mode . The value CONTIGUOUS_TREE_SELECTION , DISCONTIGUOUS_TREE_SELECTION , SINGLE_TREE_SELECTION ( define TreeSelectionModel ) . Object getLastSelectedPathComponent ( ) Get object represent currently select node . This equivalent invoke getLastPathComponent value return tree.getSelectionPath ( ) . void setSelectionPath ( TreePath ) TreePath getSelectionPath ( ) Set get path currently select node . void setSelectionPaths ( TreePath [ ] ) TreePath [ ] getSelectionPaths ( ) Set get path currently select node . void setSelectionPath ( TreePath ) TreePath getSelectionPath ( ) Set get path currently select node . Showing Hiding Nodes Method Purpose void addTreeExpansionListener ( TreeExpansionListener ) void addTreeWillExpandListener ( TreeWillExpandListener ) Register listener detect tree node expand collapse , expand collapse , respectively . To veto impending expansion collapse , TreeWillExpandListener throw ExpandVetoException . void expandPath ( TreePath ) void collapsePath ( TreePath ) Expand collapse specified tree path . void scrollPathToVisible ( TreePath ) Ensure node specify path visible — path lead expand node scroll pane 's viewing area . void makeVisible ( TreePath ) Ensure node specify path viewable — path lead expand . The node might end within view area . void setScrollsOnExpand ( boolean ) boolean getScrollsOnExpand ( ) Set get whether tree attempt scroll show previous hidden node . The default value true . void setToggleClickCount ( int ) int getToggleClickCount ( ) Set get number mouse click node expand close . The default two . TreePath getNextMatch ( String , int , Position.Bias ) Return TreePath next tree element begin specific prefix . Examples Use Trees This table list example use JTree example describe . Example Where Described Notes TreeDemo Creating Tree , Responding Node Selection , Customizing Tree 's Display Creates tree respond user selection . It also code customize line style Java look feel . TreeIconDemo Customizing Tree 's Display Adds custom leaf icon TreeDemo . TreeIconDemo2 Customizing Tree 's Display Customizes certain leaf icon also provide tool tip certain tree node . DynamicTreeDemo Dynamically Changing Tree Illustrates add remove node tree . Also allow editing node text . GenealogyExample Creating Data Model Implements custom tree model custom node type . TreeExpandEventDemo How Write Tree Expansion Listener Shows detect node expansion collapse . TreeExpandEventDemo2 How Write Tree-Will-Expand Listener Shows veto node expansion . If program JavaFX , see Tree View .