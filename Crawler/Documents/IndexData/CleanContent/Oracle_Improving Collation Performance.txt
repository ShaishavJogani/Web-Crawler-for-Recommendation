Sorting long list string often time consume . If sort algorithm compare string repeatedly , speed process use CollationKey class . A CollationKey object represent sort key give String Collator . Comparing two CollationKey object involve bitwise comparison sort key faster compare String object Collator.compare method . However , generate CollationKey object require time . Therefore String compare , Collator.compare offer good performance . The example follow use CollationKey object sort array word . Source code example KeysDemo.java . The KeysDemo program create array CollationKey object main method . To create CollationKey , invoke getCollationKey method Collator object . You compare two CollationKey object unless originate Collator . The main method follow : static public void main ( String [ ] args ) { Collator enUSCollator = Collator.getInstance ( new Locale ( `` en '' , '' US '' ) ) ; String [ ] word = { `` peach '' , `` apricot '' , `` grape '' , `` lemon '' } ; CollationKey [ ] key = new CollationKey [ words.length ] ; ( int k = 0 ; k < keys.length ; k ++ ) { key [ k ] = enUSCollator . getCollationKey ( word [ k ] ) ; } sortArray ( key ) ; printArray ( key ) ; } The sortArray method invoke CollationKey.compareTo method . The compareTo method return integer less , equal , great zero key [ ] object less , equal , great key [ j ] object . Note program compare CollationKey object , String object original array word . Here code sortArray method : public static void sortArray ( CollationKey [ ] key ) { CollationKey tmp ; ( int = 0 ; < keys.length ; i++ ) { ( int j = + 1 ; j < keys.length ; j++ ) { ( key [ ] .compareTo ( key [ j ] ) > 0 ) { tmp = key [ ] ; key [ ] = key [ j ] ; key [ j ] = tmp ; } } } } The KeysDemo program sort array CollationKey object , original goal sort array String object . To retrieve String representation CollationKey , program invokes getSourceString displayWords method , follow : static void displayWords ( CollationKey [ ] key ) { ( int = 0 ; < keys.length ; i++ ) { System.out.println ( key [ ] .getSourceString ( ) ) ; } } The displayWords method print following line : apricot grape lemon peach