The Java Collections Framework design ensure complete interoperability core collection interface type use represent collection early version Java platform : Vector , Hashtable , array , Enumeration . In section , 'll learn transform old collection Java Collections Framework collection vice versa . Upward Compatibility Suppose 're use API return legacy collection tandem another API require object implement collection interface . To make two APIs interoperate smoothly , 'll transform legacy collection modern collection . Luckily , Java Collections Framework make easy . Suppose old API return array object new API require Collection . The Collections Framework convenience implementation allow array object view List . You use Arrays.asList pass array method require Collection List . Foo [ ] result = oldMethod ( arg ) ; newMethod ( Arrays.asList ( result ) ) ; If old API return Vector Hashtable , work Vector retrofit implement List interface , Hashtable retrofit implement Map . Therefore , Vector may pass directly method call Collection List . Vector result = oldMethod ( arg ) ; newMethod ( result ) ; Similarly , Hashtable may pass directly method call Map . Hashtable result = oldMethod ( arg ) ; newMethod ( result ) ; Less frequently , API may return Enumeration represent collection object . The Collections.list method translate Enumeration Collection . Enumeration e = oldMethod ( arg ) ; newMethod ( Collections.list ( e ) ) ; Backward Compatibility Suppose 're use API return modern collection tandem another API require pass legacy collection . To make two APIs interoperate smoothly , transform modern collection old collection . Again , Java Collections Framework make easy . Suppose new API return Collection , old API require array Object . As 're probably aware , Collection interface contain toArray method design expressly situation . Collection c = newMethod ( ) ; oldMethod ( c.toArray ( ) ) ; What old API require array String ( another type ) instead array Object ? You use form toArray â€” one take array input . Collection c = newMethod ( ) ; oldMethod ( ( String [ ] ) c.toArray ( new String [ 0 ] ) ) ; If old API require Vector , standard collection constructor come handy . Collection c = newMethod ( ) ; oldMethod ( new Vector ( c ) ) ; The case old API require Hashtable handle analogously . Map = newMethod ( ) ; oldMethod ( new Hashtable ( ) ) ; Finally , old API require Enumeration ? This case n't common , happen time time , Collections.enumeration method provide handle . This static factory method take Collection return Enumeration element Collection . Collection c = newMethod ( ) ; oldMethod ( Collections.enumeration ( c ) ) ;