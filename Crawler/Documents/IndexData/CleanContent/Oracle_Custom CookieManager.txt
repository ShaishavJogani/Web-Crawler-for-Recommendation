Two aspect CookieManager class customize , CookiePolicy CookieStore . CookiePolicy For convenience , CookiePolicy define following pre-defined policy accept cooky : CookiePolicy.ACCEPT_ORIGINAL_SERVER accept cooky original server . CookiePolicy.ACCEPT_ALL accept cooky . CookiePolicy.ACCEPT_NONE accept cooky . You also define cookie policy implement shouldAccept method CookiePolicy . You use CookiePolicy pass multi-argument CookieManager constructor call setCookiePolicy ( cookiePolicy ) method change already exist cookie manager . The following example cookie policy reject cooky domain blacklist , apply CookiePolicy.ACCEPT_ORIGINAL_SERVER policy : import java.net . * ; public class BlacklistCookiePolicy implement CookiePolicy { String [ ] blacklist ; public BlacklistCookiePolicy ( String [ ] list ) { blacklist = list ; } public boolean shouldAccept ( URI uri , HttpCookie cookie ) { String host ; try { host = InetAddress.getByName ( uri.getHost ( ) ) .getCanonicalHostName ( ) ; } catch ( UnknownHostException e ) { host = uri.getHost ( ) ; } ( int = 0 ; < blacklist.length ; i++ ) { ( HttpCookie.domainMatches ( blacklist [ ] , host ) ) { return false ; } } return CookiePolicy.ACCEPT_ORIGINAL_SERVER.shouldAccept ( uri , cookie ) ; } } When create BlacklistCookiePolicy instance , pass array string represent domain want accept cooky . Then , set BlacklistCookiePolicy instance cookie policy CookieManager . For example : String [ ] list = new String [ ] { `` .example.com '' } ; CookieManager cm = new CookieManager ( null , new BlacklistCookiePolicy ( list ) ) ; CookieHandler.setDefault ( cm ) ; The sample code accept cooky host following : host.example.com domain.example.com However , sample code accept cooky host following : example.com example.org myhost.example.org CookieStore A CookieStore interface represent storage area cooky . CookieManager add cooky CookieStore every HTTP response retrieves cooky CookieStore every HTTP request . You implement interface provide CookieStore pass CookieManager creation . You set CookieStore CookieManager instance create . However , get reference cookie store call CookieManager.getCookieStore ( ) . Doing useful enable leverage default in-memory CookieStore implementation provide Java SE complement functionality . For example , might want create persistent cookie store would save cooky use even Java Virtual Machine restart . Your implementation would work similar following : Any cooky previously save read . During runtime , cooky store retrieve memory . Cookies write persistent storage exit . The following incomplete example cookie store . This example show leverage Java SE default in-memory cookie store might extend functionality . import java.net . * ; import java.util . * ; public class PersistentCookieStore implement CookieStore , Runnable { CookieStore store ; public PersistentCookieStore ( ) { // get default memory cookie store store = new CookieManager ( ) .getCookieStore ( ) ; // todo : read cooky persistant storage // add store // add shutdown hook write memory cooky Runtime.getRuntime ( ) .addShutdownHook ( new Thread ( ) ) ; } public void run ( ) { // todo : write cooky store persistent storage } public void add ( URI uri , HttpCookie cookie ) { store.add ( uri , cookie ) ; } public List < HttpCookie > get ( URI uri ) { return store.get ( uri ) ; } public List < HttpCookie > getCookies ( ) { return store.getCookies ( ) ; } public List < URI > getURIs ( ) { return store.getURIs ( ) ; } public boolean remove ( URI uri , HttpCookie cookie ) { return store.remove ( uri , cookie ) ; } public boolean removeAll ( ) { return store.removeAll ( ) ; } }