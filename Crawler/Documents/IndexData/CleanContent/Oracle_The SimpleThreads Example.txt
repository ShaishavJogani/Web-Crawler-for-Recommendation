The following example bring together concept section . SimpleThreads consist two thread . The first main thread every Java application . The main thread create new thread Runnable object , MessageLoop , wait finish . If MessageLoop thread take long finish , main thread interrupt . The MessageLoop thread print series message . If interrupt print message , MessageLoop thread print message exit . public class SimpleThreads { // Display message , precede // name current thread static void threadMessage ( String message ) { String threadName = Thread.currentThread ( ) .getName ( ) ; System.out.format ( `` % : % % n '' , threadName , message ) ; } private static class MessageLoop implement Runnable { public void run ( ) { String importantInfo [ ] = { `` Mares eat oat '' , `` Does eat oat '' , `` Little lambs eat ivy '' , `` A kid eat ivy '' } ; try { ( int = 0 ; < importantInfo.length ; i++ ) { // Pause 4 second Thread.sleep ( 4000 ) ; // Print message threadMessage ( importantInfo [ ] ) ; } } catch ( InterruptedException e ) { threadMessage ( `` I n't ! `` ) ; } } } public static void main ( String args [ ] ) throw InterruptedException { // Delay , millisecond // interrupt MessageLoop // thread ( default one hour ) . long patience = 1000 * 60 * 60 ; // If command line argument // present , give patience // second . ( args.length > 0 ) { try { patience = Long.parseLong ( args [ 0 ] ) * 1000 ; } catch ( NumberFormatException e ) { System.err.println ( `` Argument must integer . `` ) ; System.exit ( 1 ) ; } } threadMessage ( `` Starting MessageLoop thread '' ) ; long startTime = System.currentTimeMillis ( ) ; Thread = new Thread ( new MessageLoop ( ) ) ; t.start ( ) ; threadMessage ( `` Waiting MessageLoop thread finish '' ) ; // loop MessageLoop // thread exit ( t.isAlive ( ) ) { threadMessage ( `` Still wait ... '' ) ; // Wait maximum 1 second // MessageLoop thread // finish . t.join ( 1000 ) ; ( ( ( System.currentTimeMillis ( ) - startTime ) > patience ) & & t.isAlive ( ) ) { threadMessage ( `` Tired wait ! `` ) ; t.interrupt ( ) ; // Should n't long // -- wait indefinitely t.join ( ) ; } } threadMessage ( `` Finally ! `` ) ; } }