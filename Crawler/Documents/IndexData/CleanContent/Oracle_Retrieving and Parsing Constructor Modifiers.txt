Because role constructor language , modifier meaningful method : Access modifier : public , protect , private Annotations The ConstructorAccess example search constructor give class specified access modifier . It also display whether constructor synthetic ( compiler-generated ) variable arity . import java.lang.reflect.Constructor ; import java.lang.reflect.Modifier ; import java.lang.reflect.Type ; import static java.lang.System.out ; public class ConstructorAccess { public static void main ( String ... args ) { try { Class < ? > c = Class.forName ( args [ 0 ] ) ; Constructor [ ] allConstructors = c.getDeclaredConstructors ( ) ; ( Constructor ctor : allConstructors ) { int searchMod = modifierFromString ( args [ 1 ] ) ; int mod = accessModifiers ( ctor.getModifiers ( ) ) ; ( searchMod == mod ) { out.format ( `` % % n '' , ctor.toGenericString ( ) ) ; out.format ( `` [ synthetic= % -5b var_args= % -5b ] % n '' , ctor.isSynthetic ( ) , ctor.isVarArgs ( ) ) ; } } // production code handle exception gracefully } catch ( ClassNotFoundException x ) { x.printStackTrace ( ) ; } } private static int accessModifiers ( int ) { return & ( Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED ) ; } private static int modifierFromString ( String ) { ( `` public '' .equals ( ) ) return Modifier.PUBLIC ; else ( `` protect '' .equals ( ) ) return Modifier.PROTECTED ; else ( `` private '' .equals ( ) ) return Modifier.PRIVATE ; else ( `` package-private '' .equals ( ) ) return 0 ; else return -1 ; } } There explicit Modifier constant correspond `` package-private '' access , necessary check absence three access modifier identify package-private constructor . This output show private constructor java.io.File : $ java ConstructorAccess java.io.File private private java.io.File ( java.lang.String , int ) [ synthetic=false var_args=false ] private java.io.File ( java.lang.String , java.io.File ) [ synthetic=false var_args=false ] Synthetic constructor rare ; however SyntheticConstructor example illustrate typical situation may occur : public class SyntheticConstructor { private SyntheticConstructor ( ) { } class Inner { // Compiler generate synthetic constructor since // SyntheticConstructor ( ) private . Inner ( ) { new SyntheticConstructor ( ) ; } } } $ java ConstructorAccess SyntheticConstructor package-private SyntheticConstructor ( SyntheticConstructor $ 1 ) [ synthetic=true var_args=false ] Since inner class 's constructor reference private constructor enclose class , compiler must generate package-private constructor . The parameter type SyntheticConstructor $ 1 arbitrary dependent compiler implementation . Code depend presence synthetic non-public class member may portable . Constructors implement java.lang.reflect.AnnotatedElement , provide method retrieve runtime annotation java.lang.annotation.RetentionPolicy.RUNTIME . For example obtain annotation see Examining Class Modifiers Types section .