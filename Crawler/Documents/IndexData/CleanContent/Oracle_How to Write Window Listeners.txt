This section explain implement three kind window-related event handler : WindowListener , WindowFocusListener , WindowStateListener . All three listener handle WindowEvent object . The method three event handler implement abstract WindowAdapter class . When appropriate listener register window ( frame dialog ) , window event fire window activity state occur . A window consider `` focus owner '' , window receive keyboard input . The following window activity state precede window event : Opening window — Showing window first time . Closing window — Removing window screen . Iconifying window — Reducing window icon desktop . Deiconifying window — Restoring window original size . Focused window — The window contain `` focus owner '' . Activated window ( frame dialog ) — This window either focused window , focused window . Deactivated window — This window lose focus . For information focus , see AWT Focus Subsystem specification . Maximizing window — Increasing window 's size maximum allowable size , either vertical direction , horizontal direction , direction . The WindowListener interface defines method handle window event , event opening close window , activation deactivation window , iconification deiconification window . The two window listener interface WindowFocusListener WindowStateListener . WindowFocusListener contain method detect window become focus owner lose focus owner status . WindowStateListener single method detect change state window , window iconified , deiconified , maximize , restore normal . While use WindowListener method detect window state , iconification , two reason WindowStateListener might preferable : one method implement , provide support maximization . Note : Not window managers/native platform support window state . The java.awt.Toolkit method isFrameStateSupported ( int ) use determine whether particular window state support particular window manager . The WindowEventDemo example , describe later section , show method use . Window listener commonly use implement custom window-closing behavior . For example , window listener use save data close window , exit program last window close . A user necessarily need implement window listener specify window user close . By default , user close window window become invisible . To specify different behavior , use setDefaultCloseOperation method JFrame JDialog class . To implement window-closing handler , use setDefaultCloseOperation ( WindowConstants.DO_NOTHING_ON_CLOSE ) method enable window listener provide window-closing duty . See Responding Window-Closing Events detail use setDefaultCloseOperation . When last displayable window within Java virtual machine ( VM ) dispose , VM may terminate . Note , however , delay program exit automatically , circumstance program might keep running . It quick safe explicitly exit program use System.exit ( int ) . See AWT Threading Issues information . Window listener also commonly use stop thread release resource window iconified , start window deiconified . This avoid unnecessarily use processor resource . For example , window contain animation iconified , stop animation thread free large buffer . When window deiconified , start thread recreate buffer . The following example demonstrate window event . A non-editable text area report window event fire window . This demo implement method WindowListener , WindowFocusListener , WindowStateListener interface . You find demo 's code WindowEventDemo.java . Try : Click Launch button run WindowEventDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . When window appear , several message already display . One line report whether window manager support MAXIMIZED_BOTH . If window manager support window state , condition also report . Next , several line display , report window 's window listener receive window-opened , activate , gained-focus event . All message display window also send standard output . Click another window . The `` window lose focus '' `` window deactivate '' message display . If window frame dialog , receive activated deactivated event . Click WindowEventDemo window . You 'll see `` window activate '' `` window gain focus '' message . Iconify window , use window control . Two iconification message display , one window listener window state listener . Unless look standard output , message display window deiconified . Window-deactivation window-lost-focus event also report . De-iconify window . Two deiconification message display , one window listener window state listener . The windowStateChanged method WindowStateListener class give information get use windowIconified windowDeiconified method WindowListener class . Window-activation window-gained-focus event also report . Maximize window , look feel provide way . Note look feel run window manager , Java look feel dtwm , provide way maximize window , event report . This dtwm mimic maximization resize window , true maximization event . Some look feel provide way maximize window vertical horizontal direction . Experiment window control see option available . Close window , use window control . A window closing message display . Once window close , window closed message send standard output . Here demo 's window event handle code : public class WindowEventDemo extend JFrame implement WindowListener , WindowFocusListener , WindowStateListener { ... static WindowEventDemo frame = new WindowEventDemo ( `` WindowEventDemo '' ) ; JTextArea display ; ... private void addComponentsToPane ( ) { display = new JTextArea ( ) ; display.setEditable ( false ) ; JScrollPane scrollPane = new JScrollPane ( display ) ; scrollPane.setPreferredSize ( new Dimension ( 500 , 450 ) ) ; getContentPane ( ) .add ( scrollPane , BorderLayout.CENTER ) ; addWindowListener ( ) ; addWindowFocusListener ( ) ; addWindowStateListener ( ) ; checkWM ( ) ; } public WindowEventDemo ( String name ) { super ( name ) ; } //Some window manager n't support window state . public void checkWM ( ) { Toolkit tk = frame.getToolkit ( ) ; ( ! ( tk.isFrameStateSupported ( Frame.ICONIFIED ) ) ) { displayMessage ( `` Your window manager n't support ICONIFIED . `` ) ; } else displayMessage ( `` Your window manager support ICONIFIED . `` ) ; ( ! ( tk.isFrameStateSupported ( Frame.MAXIMIZED_VERT ) ) ) { displayMessage ( `` Your window manager n't support MAXIMIZED_VERT . `` ) ; } else displayMessage ( `` Your window manager support MAXIMIZED_VERT . `` ) ; ( ! ( tk.isFrameStateSupported ( Frame.MAXIMIZED_HORIZ ) ) ) { displayMessage ( `` Your window manager n't support MAXIMIZED_HORIZ . `` ) ; } else displayMessage ( `` Your window manager support MAXIMIZED_HORIZ . `` ) ; ( ! ( tk.isFrameStateSupported ( Frame.MAXIMIZED_BOTH ) ) ) { displayMessage ( `` Your window manager n't support MAXIMIZED_BOTH . `` ) ; } else { displayMessage ( `` Your window manager support MAXIMIZED_BOTH . `` ) ; } } public void windowClosing ( WindowEvent e ) { displayMessage ( `` WindowListener method call : windowClosing . `` ) ; //A pause user see message //the window actually close . ActionListener task = new ActionListener ( ) { boolean alreadyDisposed = false ; public void actionPerformed ( ActionEvent e ) { ( frame.isDisplayable ( ) ) { alreadyDisposed = true ; frame.dispose ( ) ; } } } ; Timer timer = new Timer ( 500 , task ) ; //fire every half second timer.setInitialDelay ( 2000 ) ; //first delay 2 second timer.setRepeats ( false ) ; timer.start ( ) ; } public void windowClosed ( WindowEvent e ) { //This see standard output . displayMessage ( `` WindowListener method call : windowClosed . `` ) ; } public void windowOpened ( WindowEvent e ) { displayMessage ( `` WindowListener method call : windowOpened . `` ) ; } public void windowIconified ( WindowEvent e ) { displayMessage ( `` WindowListener method call : windowIconified . `` ) ; } public void windowDeiconified ( WindowEvent e ) { displayMessage ( `` WindowListener method call : windowDeiconified . `` ) ; } public void windowActivated ( WindowEvent e ) { displayMessage ( `` WindowListener method call : windowActivated . `` ) ; } public void windowDeactivated ( WindowEvent e ) { displayMessage ( `` WindowListener method call : windowDeactivated . `` ) ; } public void windowGainedFocus ( WindowEvent e ) { displayMessage ( `` WindowFocusListener method call : windowGainedFocus . `` ) ; } public void windowLostFocus ( WindowEvent e ) { displayMessage ( `` WindowFocusListener method call : windowLostFocus . `` ) ; } public void windowStateChanged ( WindowEvent e ) { displayStateMessage ( `` WindowStateListener method call : windowStateChanged . `` , e ) ; } void displayMessage ( String msg ) { display.append ( msg + newline ) ; System.out.println ( msg ) ; } void displayStateMessage ( String prefix , WindowEvent e ) { int state = e.getNewState ( ) ; int oldState = e.getOldState ( ) ; String msg = prefix + newline + space + `` New state : `` + convertStateToString ( state ) + newline + space + `` Old state : `` + convertStateToString ( oldState ) ; displayMessage ( msg ) ; } String convertStateToString ( int state ) { ( state == Frame.NORMAL ) { return `` NORMAL '' ; } String strState = `` `` ; ( ( state & Frame.ICONIFIED ) ! = 0 ) { strState += `` ICONIFIED '' ; } //MAXIMIZED_BOTH concatenation two bit , //we need test exact match . ( ( state & Frame.MAXIMIZED_BOTH ) == Frame.MAXIMIZED_BOTH ) { strState += `` MAXIMIZED_BOTH '' ; } else { ( ( state & Frame.MAXIMIZED_VERT ) ! = 0 ) { strState += `` MAXIMIZED_VERT '' ; } ( ( state & Frame.MAXIMIZED_HORIZ ) ! = 0 ) { strState += `` MAXIMIZED_HORIZ '' ; } ( `` `` .equals ( strState ) ) { strState = `` UNKNOWN '' ; } } return strState.trim ( ) ; } } The Window Listener API The window listener API consist three window listener interface WindowEvent class . Their method list following table : The WindowListener Interface The WindowFocusListener Interface The WindowStateListener Interface The WindowEvent Class The method three interface available WindowAdapter class . The WindowListener Interface Method Purpose windowOpened ( WindowEvent ) Called listened-to window show first time . windowClosing ( WindowEvent ) Called response user request listened-to window close . To actually close window , listener invoke window 's dispose setVisible ( false ) method . windowClosed ( WindowEvent ) Called listened-to window close . windowIconified ( WindowEvent ) windowDeiconified ( WindowEvent ) Called listened-to window iconified deiconified , respectively . windowActivated ( WindowEvent ) windowDeactivated ( WindowEvent ) Called listened-to window activate deactivate , respectively . These method send window frames dialog . For reason , windowGainedFocus windowLostFocus method determine window gain lose focus prefer . The WindowFocusListener Interface Method Purpose windowGainedFocus ( WindowEvent ) windowLostFocus ( WindowEvent ) Called listened-to window gain lose focus , respectively . The WindowStateListener Interface Method Purpose windowStateChanged ( WindowEvent ) Called listened-to window 's state change iconified , deiconified , maximize , return normal . The state available WindowEvent bitwise mask . The possible value , define java.awt.Frame , : NORMAL . Indicates state bit set . ICONIFIED . MAXIMIZED_HORIZ . MAXIMIZED_VERT . MAXIMIZED_BOTH . Concatenates MAXIMIZED_HORIZ MAXIMIZED_VERT . A window manager may support MAXIMIZED_BOTH , support MAXIMIZED_HORIZ MAXIMIZED_VERT . The java.awt.Toolkit method isFrameStateSupported ( int ) use determine state support window manager . The WindowEvent Class Method Purpose Window getWindow ( ) Returns window fire event . You use instead getSource method . Window getOppositeWindow ( ) Returns window involve focus activation change . For WINDOW_ACTIVATED WINDOW_GAINED_FOCUS event , return window lose activation focus . For WINDOW_DEACTIVATED WINDOW_LOST_FOCUS event , return window gain activation focus . For type WindowEvent Java application different VM context , window , null return . int getOldState ( ) int getNewState ( ) For WINDOW_STATE_CHANGED event , method return previous new state window bitwise mask . Examples Use Window Listeners The follow table list example use window listener . Example Where Described Notes WindowEventDemo This section Reports window event occur one window demonstrate circumstance window event fire . SliderDemo How Use Sliders Listens window iconify deiconify event , stop animation window n't visible . InternalFrameEventDemo How Write Internal Frame Listener Reports internal frame event occur one internal frame demonstrate circumstance internal frame event fire . Internal frame event similar window event . DialogDemo Text Component Features CustomDialog.java use setDefaultCloseOperation instead window listener determine action take user close window . Framework â A demo allow multiple window create destroy .