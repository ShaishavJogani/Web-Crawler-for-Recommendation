Sometimes task run within program might take complete . A user-friendly program provide indication user task occur , long task might take , much work already . One way indicate work , perhaps amount progress , use animated image . Another way indicate work set wait cursor , use Cursor class Component-defined setCursor method . For example , following code make wait cursor display cursor container ( include component contain cursor specify ) : container.setCursor ( Cursor.getPredefinedCursor ( Cursor.WAIT_CURSOR ) ) ; To convey complete task , use progress bar like one : Sometimes ca n't immediately determine length long-running task , task might stay stick state completion long time . You show work without measurable progress put progress bar indeterminate mode . A progress bar indeterminate mode display animation indicate work occur . As soon progress bar display meaningful information , switch back default , determinate mode . In Java look feel , indeterminate progress bar look like : Swing provide three class help use progress bar : JProgressBar A visible component graphically display much total task complete . See Using Determinate Progress Bars information example use typical progress bar . The section Using Indeterminate Mode tell animate progress bar show activity task 's scope know . ProgressMonitor Not visible component . Instead , instance class monitor progress task pop dialog necessary . See How Use Progress Monitors detail example use progress monitor . ProgressMonitorInputStream An input stream attached progress monitor , monitor reading stream . You use instance stream like input stream describe Basic I/O . You get stream 's progress monitor call getProgressMonitor configure describe How Use Progress Monitors . After see progress bar progress monitor action , Deciding Whether Use Progress Bar Progress Monitor help figure appropriate application . Using Determinate Progress Bars Here 's picture small demo application use progress bar measure progress task run thread : Try : Click Launch button run ProgressBar Demo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . The following code , ProgressBarDemo.java , create set progress bar : //Where member variable declare : JProgressBar progressBar ; ... //Where GUI construct : progressBar = new JProgressBar ( 0 , task.getLengthOfTask ( ) ) ; progressBar.setValue ( 0 ) ; progressBar.setStringPainted ( true ) ; The constructor create progress bar set progress bar 's minimum maximum value . You also set value setMinimum setMaximum . The minimum maximum value use program 0 length task , typical many program task . However , progress bar 's minimum maximum value value , even negative . The code snippet also set progress bar 's current value 0 . The call setStringPainted cause progress bar display , within bound , textual indication percentage task complete . By default , progress bar display value return getPercentComplete method format percent , 33 % . Alternatively , replace default different string call setString . For example , ( /* ... half way ... */ ) progressBar.setString ( `` Half way ! `` ) ; When user click Start , instance inner class Task create execute . public void actionPerformed ( ActionEvent evt ) { startButton.setEnabled ( false ) ; setCursor ( Cursor.getPredefinedCursor ( Cursor.WAIT_CURSOR ) ) ; = false ; task = new Task ( ) ; task.addPropertyChangeListener ( ) ; task.execute ( ) ; } Task subclass javax.swing.SwingWorker . The Task instance three important thing ProgressBarDemo : The instance invoke doInBackground separate thread . This long-running task actually execute . Using background thread instead event-dispatching thread prevent user interface freeze task run . When background task complete , instance invoke method event-dispatching thread . The instance maintain bound property , progress , update indicate progress task . The propertyChange method invoke time progress change . See Worker Threads SwingWorker Concurrency Swing information SwingWorker . The background task ProgressBarDemo simulate real task report random amount progress random interval . The propertyChange method respond change task 's progress property update progress bar : public void propertyChange ( PropertyChangeEvent evt ) { ( ! ) { int progress = task.getProgress ( ) ; progressBar.setValue ( progress ) ; taskOutput.append ( String.format ( `` Completed % % % task.\n '' , progress ) ) ; } When background task complete , task 's method reset progress bar : public void ( ) { //Tell progress listener stop update progress bar . = true ; Toolkit.getDefaultToolkit ( ) .beep ( ) ; startButton.setEnabled ( true ) ; setCursor ( null ) ; //turn wait cursor progressBar.setValue ( progressBar.getMinimum ( ) ) ; taskOutput.append ( `` Done ! \n '' ) ; } Note method set field true , prevent propertyChange make update progress bar . This necessary final update progress property may occcur invoke . Using Indeterminate Mode In ProgressBarDemo2 indeterminate mode set actual progress begin : public void propertyChange ( PropertyChangeEvent evt ) { ( ! ) { int progress = task.getProgress ( ) ; ( progress == 0 ) { progressBar.setIndeterminate ( true ) ; taskOutput.append ( `` No progress yet\n '' ) ; } else { progressBar.setIndeterminate ( false ) ; progressBar.setString ( null ) ; progressBar.setValue ( progress ) ; taskOutput.append ( String.format ( `` Completed % % % task.\n '' , progress ) ) ; } } } The change code relate string display . A progress bar display string likely tall one n't , , demo designer , 've arbitarily decide progress bar display string 's default , determinate mode . However , want avoid layout ugliness might result progress bar change height change mode . Thus , code leave call setStringPainted ( true ) add call setString ( `` '' ) text display . Later , progress bar switch indeterminate determinate mode , invoke setString ( null ) make progress bar display default string . One change make remove call progressBar.setValue progress event handler . The call n't harm indeterminate progress bar n't use value property , except perhaps display status string . In fact , keep progress bar 's data up-to-date possible good practice , since look feel might support indeterminate mode . Try : Click Launch button run ProgressBar2 Demo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Push Start button . Note progress bar start animate soon button press , switch back determinate mode ( like ProgressBarDemo ) . How Use Progress Monitors Now let 's rewrite ProgressBarDemo use progress monitor instead progress bar . Here 's picture new demo program , ProgressMonitorDemo : Try : Click Launch button run ProgressMonitor Demo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Push Start button . After certain amount time , program display progress dialog . Click OK button . Note task continue even though dialog go . Start another task . After dialog pop , click Cancel button . The dialog go away task stop . A progress monitor use , new one must create time new task start . This program create progress monitor time user start new task Start button . Here 's statement create progress monitor : progressMonitor = new ProgressMonitor ( ProgressMonitorDemo.this , `` Running Long Task '' , `` '' , 0 , task.getLengthOfTask ( ) ) ; This code use ProgressMonitor 's constructor create monitor initialize several argument : The first argument provide parent component dialog pop progress monitor . The second argument string describe nature task monitor . This string display dialog . see The Progress Monitoring API detail argument . The third argument another string provide changeable status note . The example use empty string indicate dialog make space changeable status note , note initially empty . If provide null argument , note omit dialog . The example update note time progress property change . It update monitor 's current value time : int progress = task.getProgress ( ) ; String message = String.format ( `` Completed % % % .\n '' , progress ) ; progressMonitor.setNote ( message ) ; progressMonitor.setProgress ( progress ) ; taskOutput.append ( message ) ; The last two argument provide minimum maximum value , respectively , progress bar display dialog . By default , progress monitor wait minium 500 millisecond decide whether pop dialog . It also wait progress become minimum value . If calculate task take 2000 millisecond complete , progress dialog appear . To adjust minimum waiting period , invoke setMillisToDecidedToPopup . To adjust minimum progress time require dialog appear , invoke setMillisToPopup . By simple fact example use progress monitor , add feature n't present version program use progress bar : The user cancel task click Cancel button dialog . Here 's code example check see user cancel task task exit normally : ( progressMonitor.isCanceled ( ) || task.isDone ( ) ) { progressMonitor.close ( ) ; Toolkit.getDefaultToolkit ( ) .beep ( ) ; ( progressMonitor.isCanceled ( ) ) { task.cancel ( true ) ; taskOutput.append ( `` Task canceled.\n '' ) ; } else { taskOutput.append ( `` Task completed.\n '' ) ; } startButton.setEnabled ( true ) ; } Note progress monitor n't cancel task . It provide GUI API allow program easily . Deciding Whether Use Progress Bar Progress Monitor Use progress bar : You want control configuration progress bar . If work directly progress bar , set indeterminate , make display vertically , provide string display , register change listener , provide bounded range model control progress bar 's minimum , maximum , current value . The program need display component along progress bar . You need one progress bar . With task , need monitor one parameter . For example , installation program might monitor disk space usage addition many file successfully instal . You need reuse progress bar . A progress bar reuse ; progress monitor . Once progress monitor decide display dialog ( ) , progress monitor . Use progress monitor : You want easy way display progress dialog . The running task secondary user might interested progress task . Progress monitor provide way user dismiss dialog task still run . You want easy way task cancel . Progress monitor provide GUI user cancel task . All call progress monitor 's isCanceled method find user press Cancel button . Your task display short message periodically run . The progress monitor dialog provide setNote method task provide information 's . For example , installation task might report name file 's instal . The task might take long time complete . You decide point running task take long enough warrant let user know . Progress monitor wo n't pop dialog task complete within timeframe set . If decide use progress monitor task monitor read input stream , use ProgressMonitorInputStream class . The Progress Monitoring API The following table list commonly use API use progress bar progress monitor . Because JProgressBar subclass JComponent , method likely call JProgressBar list The JComponent Class . Note ProgressMonitor subclass Object visual component . The API monitor progress fall category : Creating Progress Bar Setting Getting Progress Bar 's Constraints/Values Controlling Progress Bar 's Appearance Creating Progress Monitor Configuring Progress Monitor Terminating Progress Monitor Creating Progress Bar Constructor Purpose JProgressBar ( ) JProgressBar ( int , int ) Create horizontal progress bar . The no-argument constructor initialize progress bar minimum initial value 0 maximum 100 . The constructor two integer argument specify minimum maximum value . JProgressBar ( int ) JProgressBar ( int , int , int ) Create progress bar specified orientation , either JProgressBar.HORIZONTAL JProgressBar.VERTICAL . The optional second third argument specify minimum maximum value . JProgressBar ( BoundedRangeModel ) Create horizontal progress bar specified range model . Setting Getting Progress Bar 's Constraints/Values Method Purpose void setValue ( int ) int getValue ( ) Set get current value progress bar . The value constrain minimum maximum value . double getPercentComplete ( ) Get percent complete progress bar . void setMinimum ( int ) int getMinimum ( ) Set get minimum value progress bar . void setMaximum ( int ) int getMaximum ( ) Set get maximum value progress bar . void setModel ( BoundedRangeModel ) BoundedRangeModel getModel ( ) Set get model use progress bar . The model establish progress bar 's constraint value , use directly alternative use individual set/get method list . Controlling Progress Bar 's Appearance Method Purpose void setIndeterminate ( boolean ) By specify true , put progress bar indeterminate mode . Specifying false put progress bar back default , determinate mode . void setOrientation ( int ) int getOrientation ( ) Set get whether progress bar vertical horizontal . Acceptable value JProgressBar.VERTICAL JProgressBar.HORIZONTAL . void setBorderPainted ( boolean ) boolean isBorderPainted ( ) Set get whether progress bar border . void setStringPainted ( boolean ) boolean isStringPainted ( ) Set get whether progress bar display percent string . By default , value percent string value return getPercentComplete format percent . You set string display setString . void setString ( String ) String getString ( ) Set get percent string . Creating Progress Monitor Method Constructor Purpose ProgressMonitor ( Component , Object , String , int , int ) Create progress monitor . The Component argument parent monitor 's dialog . The Object argument message put option pane within dialog . The value object typically String . The String argument changeable status note . The final two int argument set minimum maximum value , respectively , progress bar use dialog . ProgressMonitor getProgressMonitor ( ) ( ProgressMonitorInputStream ) Gets progress monitor monitor read input stream . Configuring Progress Monitor Method Purpose void setMinimum ( int ) int getMinimum ( ) Set get minimum value progress monitor . This value use monitor set progress bar dialog . void setMaximum ( int ) int getMaximum ( ) Set get maximum value progress monitor . This value use monitor set progress bar dialog . void setProgress ( int ) Update monitor 's progress . void setNote ( String ) String getNote ( ) Set get status note . This note display dialog . To omit status note dialog , provide null third argument monitor 's constructor . void setMillisToDecideToPopup ( int ) int getMillisToDecideToPopup ( ) Set get time monitor decide whether popup dialog . Terminating Progress Monitor Method Purpose void close ( ) Close progress monitor . This dispose dialog . boolean isCanceled ( ) Determine whether user press Cancel button . Examples Monitor Progress This follow example use JProgressBar ProgressMonitor . Example Where Described Notes ProgressBarDemo This section Uses basic progress bar show progress task run separate thread . ProgressBarDemo2 This section Uses basic progress bar show progress task run separate thread . ProgressMonitorDemo This section Modification previous example use progress monitor instead progress bar . If program JavaFX , see Progress Bar Progress Indicator .