The following rule define simple strategy create immutable object . Not class document `` immutable '' follow rule . This necessarily mean creator class sloppy — may good reason believe instance class never change construction . However , strategy require sophisticated analysis beginner . Do n't provide `` setter '' method — method modify field object refer field . Make field final private . Do n't allow subclass override method . The simple way declare class final . A sophisticated approach make constructor private construct instance factory method . If instance field include reference mutable object , n't allow object change : Do n't provide method modify mutable object . Do n't share reference mutable object . Never store reference external , mutable object pass constructor ; necessary , create copy , store reference copy . Similarly , create copy internal mutable object necessary avoid return original method . Applying strategy SynchronizedRGB result following step : There two setter method class . The first one , set , arbitrarily transform object , place immutable version class . The second one , invert , adapt create new object instead modify exist one . All field already private ; far qualify final . The class declare final . Only one field refers object , object immutable . Therefore , safeguard change state `` contain '' mutable object necessary . After change , ImmutableRGB : final public class ImmutableRGB { // Values must 0 255. final private int red ; final private int green ; final private int blue ; final private String name ; private void check ( int red , int green , int blue ) { ( red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255 ) { throw new IllegalArgumentException ( ) ; } } public ImmutableRGB ( int red , int green , int blue , String name ) { check ( red , green , blue ) ; this.red = red ; this.green = green ; this.blue = blue ; this.name = name ; } public int getRGB ( ) { return ( ( red < < 16 ) | ( green < < 8 ) | blue ) ; } public String getName ( ) { return name ; } public ImmutableRGB invert ( ) { return new ImmutableRGB ( 255 - red , 255 - green , 255 - blue , `` Inverse `` + name ) ; } }