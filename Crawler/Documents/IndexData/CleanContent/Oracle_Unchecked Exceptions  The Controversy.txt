Because Java programming language require method catch specify unchecked exception ( RuntimeException , Error , subclass ) , programmer may tempt write code throw unchecked exception make exception subclass inherit RuntimeException . Both shortcut allow programmer write code without bother compiler error without bother specify catch exception . Although may seem convenient programmer , sidestep intent catch specify requirement cause problem others use class . Why designer decide force method specify uncaught checked exception throw within scope ? Any Exception throw method part method 's public programming interface . Those call method must know exception method throw decide . These exception much part method 's program interface parameter return value . The next question might : `` If 's good document method 's API , include exception throw , specify runtime exception ? '' Runtime exception represent problem result programming problem , , API client code reasonably expect recover handle way . Such problem include arithmetic exception , dividing zero ; pointer exception , try access object null reference ; index exception , attempt access array element index large small . Runtime exception occur anywhere program , typical one numerous . Having add runtime exception every method declaration would reduce program 's clarity . Thus , compiler require catch specify runtime exception ( although ) . One case common practice throw RuntimeException user call method incorrectly . For example , method check one argument incorrectly null . If argument null , method might throw NullPointerException , unchecked exception . Generally speak , throw RuntimeException create subclass RuntimeException simply n't want bother specify exception method throw . Here 's bottom line guideline : If client reasonably expect recover exception , make checked exception . If client anything recover exception , make unchecked exception .