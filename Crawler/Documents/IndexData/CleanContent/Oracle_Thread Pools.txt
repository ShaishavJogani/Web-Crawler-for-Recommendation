Most executor implementation java.util.concurrent use thread pool , consist worker thread . This kind thread exists separately Runnable Callable task execute often use execute multiple task . Using worker thread minimize overhead due thread creation . Thread object use significant amount memory , large-scale application , allocate deallocating many thread object create significant memory management overhead . One common type thread pool fixed thread pool . This type pool always specify number thread run ; thread somehow terminate still use , automatically replace new thread . Tasks submit pool via internal queue , hold extra task whenever active task thread . An important advantage fix thread pool application use degrade gracefully . To understand , consider web server application HTTP request handle separate thread . If application simply create new thread every new HTTP request , system receive request handle immediately , application suddenly stop respond request overhead thread exceed capacity system . With limit number thread create , application service HTTP request quickly come , service quickly system sustain . A simple way create executor use fixed thread pool invoke newFixedThreadPool factory method java.util.concurrent.Executors This class also provide following factory method : The newCachedThreadPool method create executor expandable thread pool . This executor suitable application launch many short-lived task . The newSingleThreadExecutor method create executor execute single task time . Several factory method ScheduledExecutorService version executor . If none executor provide factory method meet need , construct instance java.util.concurrent.ThreadPoolExecutor java.util.concurrent.ScheduledThreadPoolExecutor give additional option .