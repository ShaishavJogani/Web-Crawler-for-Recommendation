The sample CoffeesFrame.java demonstrate integrate JDBC GUI API , particular , Swing API . It display content COFFEES database table table contain field button enable add row table . The following screenshot sample : The sample contain five text field correspond column COFFEES table . It also contain three button : Add row table : Adds row sample 's table base data enter text field . Update database : Updates table COFFEES base data sample 's table . Discard change : Retrieves content COFFEES table , replace exist data sample 's table . This sample ( require CoffeesTableModel ) demonstrate following general step integrate JDBC Swing API : Implementing TableModel interface Implementing RowSetListener interface Laying Swing component Adding listener button sample Implementing javax.swing.event.TableModel The TableModel interface enable Java Swing application manage data JTable object . The sample , CoffeesTableModel.java , implement interface . It specify JTable object retrieve data RowSet object display table . Note : Although sample display content COFFEES table Swing application , class CoffeesTableModel work SQL table provide data represent String object . ( However , field enable user add row COFFEES , specify class CoffeesFrame , would modify SQL table . ) Before implement method interface TableModel , constructor class CoffeeTableModel initialize various member variable require implement method follow : public CoffeesTableModel ( CachedRowSet rowSetArg ) throw SQLException { this.coffeesRowSet = rowSetArg ; this.metadata = this.coffeesRowSet.getMetaData ( ) ; numcols = metadata.getColumnCount ( ) ; // Retrieve number row . this.coffeesRowSet.beforeFirst ( ) ; this.numrows = 0 ; ( this.coffeesRowSet.next ( ) ) { this.numrows++ ; } this.coffeesRowSet.beforeFirst ( ) ; } The following describe member variable initialize constructor : CachedRowSet coffeesRowSet : Stores content table COFFEES . This sample use RowSet object , particular , CachedRowSet object , rather ResultSet object two reason . A CachedRowSet object enable user application make change data contain without connect database . In addition , CachedRowSet object JavaBeans component , notify component certain thing happen . In sample , new row add CachedRowSet object , notify Swing component render data table refresh display new row . ResultSetMetaData metadata : Retrieves number column table COFFEES well name . int numcols , numrows : Stores number column row , respectively , table COFFEES . The CoffeesTableModel.java sample implement following method TableModel interface : Class < ? > getColumnClass ( int columnIndex ) : Returns specific superclass cell value column . int getColumnCount ( ) : Returns number column model . String getColumnName ( int columnIndex ) : Returns name column specify parameter columnIndex . int getRowCount ( ) : Returns number row model . Object getValueAt ( int rowIndex , int columnIndex ) : Returns value cell intersection column columnIndex row rowIndex . boolean isCellEditable ( int rowIndex , int columnIndex ) : Returns true cell intersection column rowIndex row columnIndex edit . The following method implement sample allow user directly edit content table : void addTableModelListener ( TableModelListener l ) : Adds listener list notify time change data model occur . void removeTableModelListener ( TableModelListener l ) : Removes listener list notify time change data model occur . void setValueAt ( Object aValue , int rowIndex , int columnIndex ) : Sets value cell intersection column columnIndex row rowIndex object aValue . Implementing getColumnCount getRowCount The method getColumnCount getRowCount return value member variable numcols numrows , respectively : public int getColumnCount ( ) { return numcols ; } public int getRowCount ( ) { return numrows ; } Implementing getColumnClass The getColumnClass method return data type specified column . To keep thing simple , method return String class , thereby convert data table String object . The JTable class use method determine render data GUI application . public Class getColumnClass ( int column ) { return String.class ; } Implementing getColumnName The getColumnName method return name specified column . The JTable class use method label column . public String getColumnName ( int column ) { try { return this.metadata.getColumnLabel ( column + 1 ) ; } catch ( SQLException e ) { return e.toString ( ) ; } } Implementing getColumnAt The getColumnAt method retrieve value specified row column row set coffeesRowSet . The JTable class use method populate table . Note SQL start number row column 1 , TableModel interface start 0 ; reason rowIndex columnIndex value incremented 1. public Object getValueAt ( int rowIndex , int columnIndex ) { try { this.coffeesRowSet.absolute ( rowIndex + 1 ) ; Object = this.coffeesRowSet.getObject ( columnIndex + 1 ) ; ( == null ) return null ; else return o.toString ( ) ; } catch ( SQLException e ) { return e.toString ( ) ; } } Implementing isCellEditable Because sample allow user directly edit content table ( row add another window control ) , method return false regardless value rowIndex columnIndex : public boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; } Implementing javax.sql.RowSetListener The class CoffeesFrame implement one method interface RowSetListener , rowChanged . This method call user add row table . public void rowChanged ( RowSetEvent event ) { CachedRowSet currentRowSet = this.myCoffeesTableModel.coffeesRowSet ; try { currentRowSet.moveToCurrentRow ( ) ; myCoffeesTableModel = new CoffeesTableModel ( myCoffeesTableModel.getCoffeesRowSet ( ) ) ; table.setModel ( myCoffeesTableModel ) ; } catch ( SQLException ex ) { JDBCTutorialUtilities.printSQLException ( ex ) ; // Display error dialog box . JOptionPane.showMessageDialog ( CoffeesFrame.this , new String [ ] { // Display 2-line message ex.getClass ( ) .getName ( ) + `` : `` , ex.getMessage ( ) } ) ; } } This method update table GUI application . Laying Out Swing Components The constructor class CoffeesFrame initialize lay Swing component . The following statement retrieve content COFFEES table , store content CachedRowSet object myCachedRowSet , initialize JTable Swing component : CachedRowSet myCachedRowSet = getContentsOfCoffeesTable ( ) ; myCoffeesTableModel = new CoffeesTableModel ( myCachedRowSet ) ; myCoffeesTableModel.addEventHandlersToRowSet ( ) ; // Displays table table = new JTable ( ) ; table.setModel ( myCoffeesTableModel ) ; As mention previously , instead ResultSet object represent content COFFEES table , sample use RowSet object , notably CachedRowSet object . The method CoffeesFrame.getContentsOfCoffeesTable retrieve content table COFFEES . The method CoffeesTableModel.addEventHandlersToRowSet add event handler define CoffeesFrame class , method rowChanged , row set member variable CoffeesTableModel.coffeesRowSet . This enable class CoffeesFrame notify row set coffeesRowSet event , particular , user click button Add row table , Update database , Discard change . When row set coffeesRowSet notify one change , method CoffeesFrame.rowChanged call . The statement table.setModel ( myCoffeesTableModel ) specify use CoffeesTableModel object myCoffeesTableModel populate JTable Swing component table . The following statement specify CoffeesFrame class use layout GridBagLayout lay Swing component : Container contentPane = getContentPane ( ) ; contentPane.setComponentOrientation ( ComponentOrientation.LEFT_TO_RIGHT ) ; contentPane.setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; See How Use GridBagLayout Creating GUI With JFC/Swing information use layout GridBagLayout . See source code CoffeesFrame.java see Swing component sample add layout GridBagLayout . Adding Listeners Buttons The following statement add listener button Add row table : button_ADD_ROW.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { JOptionPane.showMessageDialog ( CoffeesFrame.this , new String [ ] { `` Adding following row : '' , `` Coffee name : [ `` + textField_COF_NAME.getText ( ) + `` ] '' , `` Supplier ID : [ `` + textField_SUP_ID.getText ( ) + `` ] '' , `` Price : [ `` + textField_PRICE.getText ( ) + `` ] '' , `` Sales : [ `` + textField_SALES.getText ( ) + `` ] '' , `` Total : [ `` + textField_TOTAL.getText ( ) + `` ] '' } ) ; try { myCoffeesTableModel.insertRow ( textField_COF_NAME.getText ( ) , Integer.parseInt ( textField_SUP_ID.getText ( ) .trim ( ) ) , Float.parseFloat ( textField_PRICE.getText ( ) .trim ( ) ) , Integer.parseInt ( textField_SALES.getText ( ) .trim ( ) ) , Integer.parseInt ( textField_TOTAL.getText ( ) .trim ( ) ) ) ; } catch ( SQLException sqle ) { displaySQLExceptionDialog ( sqle ) ; } } } ) ; When user click button , perform following : Creates message dialog box display row add table . Calls method CoffeesTableModel.insertRow , add row member variable CoffeesTableModel.coffeesRowSet . If SQLException throw , method CoffeesFrame.displaySQLExceptionDialog create message dialog box display content SQLException . The following statement add listener button Update database : button_UPDATE_DATABASE.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { try { myCoffeesTableModel.coffeesRowSet.acceptChanges ( ) ; msgline.setText ( `` Updated database '' ) ; } catch ( SQLException sqle ) { displaySQLExceptionDialog ( sqle ) ; // Now revert back change try { createNewTableModel ( ) ; msgline.setText ( `` Discarded change '' ) ; } catch ( SQLException sqle2 ) { displaySQLExceptionDialog ( sqle2 ) ; } } } } ) ; When user click button , table COFFEES update content row set myCoffeesTableModel.coffeesRowSet . The following statement add listener button Discard change : button_DISCARD_CHANGES.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { try { createNewTableModel ( ) ; } catch ( SQLException sqle ) { displaySQLExceptionDialog ( sqle ) ; } } } ) ; When user click button , method CoffeesFrame.createNewTableModel call , repopulates JTable component content COFFEES table .