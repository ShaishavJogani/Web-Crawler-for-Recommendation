One way understand reflection work use reflection model Java Runtime Environment ( JRE ) load execute class . When invoke Java program Consolejavafully-qualified-class-namearg0 ... argn pas command line argument , JRE must put command line argumentsarg0 ... argninto aString [ ] arraydynamically load target class name byfully-qualified-class-nameaccess thepublicstaticvoidmain ( String [ ] ) methodinvoke themainmethod , pass string array mainString [ ] . Steps 2 , 3 , 4 accomplish Java reflection . Below example load theDistanceclass , locate themainmethod , ( seeUnderstanding Java Program ) invoke via reflection . This code obviously complicated simply call However , main Java runtime know theDistanceclass . The name class execute runtime value . Reflection allow Java program work class even though class know program write . Let 's explore theinvokeMainmethod . The first statement line 9 example ofdynamic class loading . TheforName ( ) method load Java class return instance ofjava.lang.Classthat result load class . In case , load class '' Distance '' default package . We store class object local variabledistanceClass ; type isClass < ? > . The second statement line 10 simply create aStringarray four command line argument wish pass themainmethod theDistanceclass . The third statement line 11 performs reflection operation theDistanceclass . ThegetMethod ( ) method define theClassclass . It take variable number parameter : method name first parameter remain parameter type ofmain 's parameter . The method name trivial : want invoke themainmethod , pass name '' main '' . We add aClassvariable method parameters.mainaccepts one parameter ( String [ ] args ) add singleClasselement represent String [ ] . ThegetMethodmethod return type ofjava.lang.reflect.Method ; store result local variable namedmainMethod . Finally , invoke method call theinvoke ( ) method theMethodinstance . This method 's first parameter instance invoke , remain parameter invokee 's parameter . Since invoke static method instance method , passnullas instance argument . Since single parameter pass second argument . However , must cast parameter Object indicate array parameter , parameter array . See varargs detail . Theinvoke ( ) method return anObjectthat contain result reflected method return . In case , ourmainmethod avoidmethod , ignore return type . Most method shortinvokeMainmethod may throw various exception . The method declare signature . Here brief rundown might throw exception : Class.forName ( String ) throwClassNotFoundException , name class located.Class.forName ( String ) throwExceptionInInitializerError , class could load due static initializer throw exception static field 's initialization throw exception.Class.getMethod ( String name , Class parameterTypes [ ] ) throwNoSuchMethodException , matching method find , public ( usegetDeclaredMethodto get non-public method ) .SecurityException , security manager instal call method would result access violation ( example , method thesun . *package design internal use ) .Method.invoke ( Object instance , Object ... argument ) may throw : IllegalAccessException , method invoke manner violate access modifiers.IllegalArgumentExceptionfor various reason , includingpassing instance implement method.the actual argument match method 's argumentsInvocationTargetException , underlie method ( mainin case ) throw exception . In addition exception , also error runtime exception method may throw . To : Add exercise like one inVariables