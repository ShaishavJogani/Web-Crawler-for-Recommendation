Let 's look simple example illustrate program establish connection server program use Socket class , client send data receive data server socket . The example program implement client , EchoClient , connect echo server . The echo server receive data client echo back . The example EchoServer implement echo server . ( Alternatively , client connect host support Echo Protocol . ) The EchoClient example create socket , thereby get connection echo server . It read input user standard input stream , forward text echo server write text socket . The server echo input back socket client . The client program read display data pass back server . Note EchoClient example write read socket , thereby send data receive data echo server . Let 's walk program investigate interesting part . The following statement try-with-resources statement EchoClient example critical . These line establish socket connection client server open PrintWriter BufferedReader socket : String hostName = args [ 0 ] ; int portNumber = Integer.parseInt ( args [ 1 ] ) ; try ( Socket echoSocket = new Socket ( hostName , portNumber ) ; PrintWriter = new PrintWriter ( echoSocket.getOutputStream ( ) , true ) ; BufferedReader = new BufferedReader ( new InputStreamReader ( echoSocket.getInputStream ( ) ) ) ; BufferedReader stdIn = new BufferedReader ( new InputStreamReader ( System.in ) ) ) The first statement try-with resource statement create new Socket object name echoSocket . The Socket constructor use require name computer port number want connect . The example program use first command-line argument name computer ( host name ) second command line argument port number . When run program computer , make sure host name use fully qualified IP name computer want connect . For example , echo server run computer echoserver.example.com listen port number 7 , first run following command computer echoserver.example.com want use EchoServer example echo server : java EchoServer 7 Afterward , run EchoClient example following command : java EchoClient echoserver.example.com 7 The second statement try-with resource statement get socket 's output stream open PrintWriter . Similarly , third statement get socket 's input stream open BufferedReader . The example use reader writer write Unicode character socket . To send data socket server , EchoClient example need write PrintWriter . To get server 's response , EchoClient read BufferedReader object stdIn , create fourth statement try-with resource statement . If yet familiar Java platform 's I/O class , may wish read Basic I/O . The next interesting part program loop . The loop read line time standard input stream immediately send server write PrintWriter connect socket : String userInput ; ( ( userInput = stdIn.readLine ( ) ) ! = null ) { out.println ( userInput ) ; System.out.println ( `` echo : `` + in.readLine ( ) ) ; } The last statement loop read line information BufferedReader connect socket . The readLine method wait server echo information back EchoClient . When readline return , EchoClient print information standard output . The loop continue user type end-of-input character . That , EchoClient example read input user , send Echo server , get response server , display , reach end-of-input . ( You type end-of-input character press Ctrl-C. ) The loop terminate , Java runtime automatically close reader writer connect socket standard input stream , close socket connection server . The Java runtime close resource automatically create try-with-resources statement . The Java runtime close resource reverse order create . ( This good stream connect socket close socket close . ) This client program straightforward simple echo server implement simple protocol . The client send text server , server echo back . When client program talk complicated server HTTP server , client program also complicated . However , basic much program : Open socket . Open input stream output stream socket . Read write stream accord server 's protocol . Close stream . Close socket . Only step 3 differs client client , depend server . The step remain largely .