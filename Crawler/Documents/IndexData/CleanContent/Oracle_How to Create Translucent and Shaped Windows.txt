As Java Platform , Standard Edition 6 ( Java SE 6 ) Update 10 release , add translucent shape window Swing application . This page cover following topic : Supported Capabilities Determining Platform 's Capabilities How Implement Uniform Translucency How Implement Per-Pixel Translucency How Implement Shaped Window Java SE Release 6 Update 10 API Supported Capabilities This functionality , part public AWT package JDK 7 release , take three form , follow : You create window uniform translucency , pixel translucency ( alpha ) value . The follow screen capture show window 45 percent translucency . Try : Click Launch button run TranslucentWindowDemo example use Java™ Web Start . This example require JDK 7 later . Alternatively , compile run example , consult example index . You create window per-pixel translucency , pixel alpha value . With feature , example , create window fade away nothing define gradient alpha value . The follow screen capture show window gradient translucency top ( fully translucent ) bottom ( fully opaque ) . Try : Click Launch button run GradientTranslucentWindowDemo example use Java™ Web Start . This example require JDK 7 later . Alternatively , compile run example , consult example index . You create window Shape object define . Shaped window opaque , use uniform , per-pixel , translucency . The follow screen capture show oval-shaped window 30 percent translucency . Try : Click Launch button run ShapedWindowDemo example use Java™ Web Start . This example require JDK 7 later . Alternatively , compile run example , consult example index . Determining Platform 's Capabilities Not platform support capability . An UnsupportedOperationException exception throw code attempt invoke setShape setOpacity method platform support capability . Therefore , best practice first check platform support capability want implement . The GraphicsDevice class provide isWindowTranslucencySupported ( GraphicsDevice.WindowTranslucency ) method use purpose . You pass one three enum value , define GraphicsDevice.WindowTranslucency , method : TRANSLUCENT – The underlying platform support windows uniform translucency , pixel alpha value . PERPIXEL_TRANSLUCENT – The underlying platform support windows per-pixel translucency . This capability require implement window fade away . PERPIXEL_TRANSPARENT – The underlying platform support shape window . The GraphicsConfiguration class also provide isTranslucencyCapable method determine PERPIXEL_TRANSLUCENT translucency support give GraphicsConfiguration object . Version note : The translucent shape window API first add Java SE 6 Update 10 release private API . This functionality move public AWT package JDK 7 release . This tutorial describe API available JDK 7 release . See Java SE 6 Update 10 API mapping private API Java SE 6 Update 10 release public API JDK 7 release . The following code show check three capability : import static java.awt.GraphicsDevice.WindowTranslucency . * ; // Determine default GraphicsDevice support . GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment ( ) ; GraphicsDevice gd = ge.getDefaultScreenDevice ( ) ; boolean isUniformTranslucencySupported = gd.isWindowTranslucencySupported ( TRANSLUCENT ) ; boolean isPerPixelTranslucencySupported = gd.isWindowTranslucencySupported ( PERPIXEL_TRANSLUCENT ) ; boolean isShapedWindowSupported = gd.isWindowTranslucencySupported ( PERPIXEL_TRANSPARENT ) ; Note : None capability work window full-screen mode . Invoking relevant method full-screen mode cause IllegalComponentStateException exception throw . How Implement Uniform Translucency You create window pixel translucency invoke setOpacity ( float ) method Window class . The float argument pass method represent translucency window value 0 1 , inclusive . The small number , transparent window . There also corresponding getOpacity method . The TranslucentWindowDemo.java example create window 55 percent opaque ( 45 percent translucent ) . If underlying platform support translucent window , example exit . The code relate opacity show bold . import java.awt . * ; import javax.swing . * ; import static java.awt.GraphicsDevice.WindowTranslucency . * ; public class TranslucentWindowDemo extend JFrame { public TranslucentWindowDemo ( ) { super ( `` TranslucentWindow '' ) ; setLayout ( new GridBagLayout ( ) ) ; setSize ( 300,200 ) ; setLocationRelativeTo ( null ) ; setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; //Add sample button . add ( new JButton ( `` I Button '' ) ) ; } public static void main ( String [ ] args ) { // Determine GraphicsDevice support translucency . GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment ( ) ; GraphicsDevice gd = ge.getDefaultScreenDevice ( ) ; //If translucent window n't support , exit . ( ! gd.isWindowTranslucencySupported ( TRANSLUCENT ) ) { System.err.println ( `` Translucency support '' ) ; System.exit ( 0 ) ; } JFrame.setDefaultLookAndFeelDecorated ( true ) ; // Create GUI event-dispatching thread SwingUtilities.invokeLater ( new Runnable ( ) { @ Override public void run ( ) { TranslucentWindowDemo tw = new TranslucentWindowDemo ( ) ; // Set window 55 % opaque ( 45 % translucent ) . tw.setOpacity ( 0.55f ) ; // Display window . tw.setVisible ( true ) ; } } ) ; } } Note button also affect uniform translucency . Setting opacity affect whole window , include component window contains . How Implement Per-Pixel Translucency Creating window use per-pixel translucency involve define alpha value rectangular area window occupies . When pixel 's alpha value zero , pixel fully transparent . When pixel 's alpha value 255 , pixel fully opaque . When pixel 's alpha value 128 , pixel 50 percent translucent , . An easy way create smooth interpolation alpha value use GradientPaint class . The included example use approach . Invoking setBackground ( new Color ( 0,0,0,0 ) ) window cause software use alpha value render per-pixel translucency . In fact , invoke setBackground ( new Color ( 0,0,0 , alpha ) , alpha less 255 , install per-pixel transparency . So , invoke setBackground ( new Color ( 0,0,0,128 ) ) nothing else , window render 50 percent translucency background pixel . However , create range alpha value , likely want alpha value 0 . While prohibit public API , generally want enable per-pixel translucency undecorated window . In case , use per-pixel translucency decorate window make sense . Doing disable decoration , cause platform-dependent side effect . To determine window use per-pixel translucency , use isOpaque method . An example follow . First , step require implement example : Invoke setBackground ( new Color ( 0,0,0,0 ) ) window . Create JPanel instance override paintComponent method . In paintComponent method , create GradientPaint instance . In example , top rectangle alpha value 0 ( transparent ) bottom alpha value 255 ( opaque ) . The GradientPaint class smoothly interpolate alpha value top bottom rectangle . Set GradientPaint instance panel 's paint method . Here code GradientTranslucentWindowDemo.java example . If underlying platform support per-pixel translucency , example exit . The code specifically relate create gradient window show bold . import java.awt . * ; import javax.swing . * ; import static java.awt.GraphicsDevice.WindowTranslucency . * ; public class GradientTranslucentWindowDemo extend JFrame { public GradientTranslucentWindowDemo ( ) { super ( `` GradientTranslucentWindow '' ) ; setBackground ( new Color ( 0,0,0,0 ) ) ; setSize ( new Dimension ( 300,200 ) ) ; setLocationRelativeTo ( null ) ; setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; JPanel panel = new JPanel ( ) { @ Override protect void paintComponent ( Graphics g ) { ( g instanceof Graphics2D ) { final int R = 240 ; final int G = 240 ; final int B = 240 ; Paint p = new GradientPaint ( 0.0f , 0.0f , new Color ( R , G , B , 0 ) , 0.0f , getHeight ( ) , new Color ( R , G , B , 255 ) , true ) ; Graphics2D g2d = ( Graphics2D ) g ; g2d.setPaint ( p ) ; g2d.fillRect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; } } } ; setContentPane ( panel ) ; setLayout ( new GridBagLayout ( ) ) ; add ( new JButton ( `` I Button '' ) ) ; } public static void main ( String [ ] args ) { // Determine GraphicsDevice support . GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment ( ) ; GraphicsDevice gd = ge.getDefaultScreenDevice ( ) ; boolean isPerPixelTranslucencySupported = gd.isWindowTranslucencySupported ( PERPIXEL_TRANSLUCENT ) ; //If translucent window n't support , exit . ( ! isPerPixelTranslucencySupported ) { System.out.println ( `` Per-pixel translucency support '' ) ; System.exit ( 0 ) ; } JFrame.setDefaultLookAndFeelDecorated ( true ) ; // Create GUI event-dispatching thread SwingUtilities.invokeLater ( new Runnable ( ) { @ Override public void run ( ) { GradientTranslucentWindowDemo gtw = new GradientTranslucentWindowDemo ( ) ; // Display window . gtw.setVisible ( true ) ; } } ) ; } } Note button affect per-pixel translucency . Setting per-pixel translucency affect background pixels . If want window uniformly translucent effect background pixels , invoke setBackground ( new Color ( 0,0,0 , alpha ) ) alpha specifies desired translucency . How Implement Shaped Window You create shaped window invoke setShape ( Shape ) method Window class . The Shape argument pass method determine window clip . When shape set window , window decoration re-formed new shape , set shape work best undecorated window . The best practice set window 's shape invoke setShape componentResized method component event listener . This practice ensure shape correctly calculate actual size window . The following example use approach . The ShapedWindowDemo.java example create oval-shaped window 70 percent opacity . If underlying platform support shape window , example exit . If underlying platform support translucency , example use standard opaque window . You could modify example create shaped window also use per-pixel translucency . The code relate shape window show bold . import java.awt . * ; import java.awt.event . * ; import javax.swing . * ; import java.awt.geom.Ellipse2D ; import static java.awt.GraphicsDevice.WindowTranslucency . * ; public class ShapedWindowDemo extend JFrame { public ShapedWindowDemo ( ) { super ( `` ShapedWindow '' ) ; setLayout ( new GridBagLayout ( ) ) ; // It best practice set window 's shape // componentResized method . Then , window // change size , shape correctly recalculate . addComponentListener ( new ComponentAdapter ( ) { // Give window elliptical shape . // If window resize , shape recalculate . @ Override public void componentResized ( ComponentEvent e ) { setShape ( new Ellipse2D.Double ( 0,0 , getWidth ( ) , getHeight ( ) ) ) ; } } ) ; setUndecorated ( true ) ; setSize ( 300,200 ) ; setLocationRelativeTo ( null ) ; setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; add ( new JButton ( `` I Button '' ) ) ; } public static void main ( String [ ] args ) { // Determine GraphicsDevice support . GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment ( ) ; GraphicsDevice gd = ge.getDefaultScreenDevice ( ) ; final boolean isTranslucencySupported = gd.isWindowTranslucencySupported ( TRANSLUCENT ) ; //If shape window n't support , exit . ( ! gd.isWindowTranslucencySupported ( PERPIXEL_TRANSPARENT ) ) { System.err.println ( `` Shaped window support '' ) ; System.exit ( 0 ) ; } //If translucent window n't support , //create opaque window . ( ! isTranslucencySupported ) { System.out.println ( `` Translucency support , create opaque window '' ) ; } // Create GUI event-dispatching thread SwingUtilities.invokeLater ( new Runnable ( ) { @ Override public void run ( ) { ShapedWindowDemo sw = new ShapedWindowDemo ( ) ; // Set window 70 % translucency , support . ( isTranslucencySupported ) { sw.setOpacity ( 0.7f ) ; } // Display window . sw.setVisible ( true ) ; } } ) ; } } Java SE 6 Update 10 API Changing public API update release allow , translucent shape window capability add Java SE 6 Update 10 release , implement private com.sun.awt.AWTUtilities class . For JDK 7 release , functionality move public AWT package . The follow table show private method map public method . Method Java SE 6 Update 10 JDK 7 Equivalent AWTUtilities.isTranslucencySupported ( Translucency ) GraphicsDevice.isWindowTranslucencySupported ( WindowTranslucency ) AWTUtilities.isTranslucencyCapable ( GraphicsConfiguration ) GraphicsConfiguration.isTranslucencyCapable ( ) AWTUtilities.setWindowOpacity ( Window , float ) Window.setOpacity ( float ) AWTUtilities.setWindowShape ( Window , Shape ) Window.setShape ( Shape ) AWTUtilities.setWindowOpaque ( boolean ) Window.setBackground ( Color ) Passing new Color ( 0,0,0 , alpha ) method , alpha less 255 , install per-pixel translucency .