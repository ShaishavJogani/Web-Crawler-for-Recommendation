The finally block always execute try block exit . This ensure finally block execute even unexpected exception occurs . But finally useful exception handle â€” allow programmer avoid cleanup code accidentally bypass return , continue , break . Putting cleanup code finally block always good practice , even exception anticipate . Note : If JVM exit try catch code execute , finally block may execute . Likewise , thread execute try catch code interrupt kill , finally block may execute even though application whole continue . The try block writeList method 've work open PrintWriter . The program close stream exit writeList method . This pose somewhat complicate problem writeList 's try block exit one three way . The new FileWriter statement fails throw IOException . The list.get ( ) statement fails throw IndexOutOfBoundsException . Everything succeed try block exit normally . The runtime system always execute statement within finally block regardless happen within try block . So 's perfect place perform cleanup . The follow finally block writeList method clean close PrintWriter . finally { ( ! = null ) { System.out.println ( `` Closing PrintWriter '' ) ; out.close ( ) ; } else { System.out.println ( `` PrintWriter open '' ) ; } } Important : The finally block key tool prevent resource leak . When close file otherwise recovering resource , place code finally block ensure resource always recover . Consider use try-with-resources statement situation , automatically release system resource longer need . The The try-with-resources Statement section information .