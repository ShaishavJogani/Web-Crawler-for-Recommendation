By default , text contain numeric value , value display use Latin ( European ) digit . When Unicode digit shape prefer , use java.awt.font.NumericShaper class . The NumericShaper API enable display numeric value represent internally ASCII value Unicode digit shape . The following code snippet , ArabicDigits example , show use NumericShaper instance convert Latin digit Arabic digit . The line determine shape action bolded . ArabicDigitsPanel ( String fontname ) { HashMap map = new HashMap ( ) ; Font font = new Font ( fontname , Font.PLAIN , 60 ) ; map.put ( TextAttribute.FONT , font ) ; map.put ( TextAttribute.NUMERIC_SHAPING , NumericShaper.getShaper ( NumericShaper.ARABIC ) ) ; FontRenderContext frc = new FontRenderContext ( null , false , false ) ; layout = new TextLayout ( text , map , frc ) ; } // ... public void paint ( Graphics g ) { Graphics2D g2d = ( Graphics2D ) g ; layout.draw ( g2d , 10 , 50 ) ; } The NumericShaper instance Arabic digit fetch place HashMap TextLayout.NUMERIC_SHAPING attribute key . The hash map pass TextLayout instance . After render text paint method , digit display desired script . In example , Latin digit , 0 9 , draw Arabic digit . The previous example use NumericShaper.ARABIC constant retrieve desired shaper , NumericShaper class provide constant many language . These constant define bit mask refer NumericShaper bit mask-based constant . Enum-Based Range Constants An alternative way specify particular set digit use NumericShaper.Range enumerate type ( enum ) . This enum , introduce Java SE 7 release , also provide set constant . Although constant define use different mechanism , NumericShaper.ARABIC bit mask functionally equivalent NumericShaper.Range.ARABIC enum , corresponding getShaper method constant type : getShaper ( int singleRange ) getShaper ( NumericShaper.Range singleRange ) The ArabicDigitsEnum example identical ArabicDigits example , except use NumericShaper.Range enum specify language script : ArabicDigitsEnumPanel ( String fontname ) { HashMap map = new HashMap ( ) ; Font font = new Font ( fontname , Font.PLAIN , 60 ) ; map.put ( TextAttribute.FONT , font ) ; map.put ( TextAttribute.NUMERIC_SHAPING , NumericShaper.getShaper ( NumericShaper.Range.ARABIC ) ) ; FontRenderContext frc = new FontRenderContext ( null , false , false ) ; layout = new TextLayout ( text , map , frc ) ; } Both getShaper method accept singleRange parameter . With either constant type , specify range script-specific digit . The bit mask-based constant combine use OR operand , create set NumericShaper.Range enums . The following show define range use constant type : NumericShaper.MONGOLIAN | NumericShaper.THAI | NumericShaper.TIBETAN EnumSet.of ( NumericShaper.Range.MONGOLIAN , NumericShaper.Range.THAI , NumericShaper.Range.TIBETAN ) You query NumericShaper object determine range support use either getRanges method bit mask-based shaper getRangeSet method enum-based shaper . Note : You use either traditional bit masked-based constant Range enum-based constant . Here consideration decide use : The Range API require JDK 7 later . The Range API cover Unicode range bit-masked API . The bit-mask API bit faster Range API . Rendering Digits According Language Context The ArabicDigits example design use shaper specific language , sometimes digit must render accord language context . For example , text precede digit use Thai script , Thai digit prefer . If text display Tibetan , Tibetan digit prefer . You accomplish use one getContextualShaper method : getContextualShaper ( int range ) getContextualShaper ( int range , int defaultContext ) getContextualShaper ( Set < NumericShaper.Range > range ) getContextualShaper ( Set < NumericShaper.Range > range , NumericShaper.Range defaultContext ) The first two method use bit-mask constant , last two use enum constant . The method accept defaultContext parameter enable specify initial shaper use numeric value display text . When default context define , lead digit display use Latin shape . The ShapedDigits example show shaper work . Five text layout display : The first layout use shaper ; digit display Latin . The second layout shape digit Arabic digit , regardless language context . The third layout employ contextual shaper use Arabic digit . The default context define Arabic . The fourth layout employ contextual shaper use Arabic digit , shaper specify default context . The fifth layout employ contextual shaper use ALL_RANGES bit mask , shaper specify default context . The following line code show shaper , use , define : No shaper use . NumericShaper arabic = NumericShaper.getShaper ( NumericShaper.ARABIC ) ; NumericShaper contextualArabic = NumericShaper.getContextualShaper ( NumericShaper.ARABIC , NumericShaper.ARABIC ) ; NumericShaper contextualArabicASCII = NumericShaper.getContextualShaper ( NumericShaper.ARABIC ) ; NumericShaper contextualAll = NumericShaper.getContextualShaper ( NumericShaper.ALL_RANGES ) ; See ShapedDigits.java example implementation detail .