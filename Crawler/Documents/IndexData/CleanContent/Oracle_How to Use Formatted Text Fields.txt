Formatted text field provide way developer specify valid set character type text field . Specifically , JFormattedTextField class add formatter object value feature inherit JTextField class . The formatter translate field 's value text display , text field 's value . Using formatters Swing provide , set formatted text field type date number localized format . Another kind formatter enables use character mask specify set character type position field . For example , specify mask type phone number particular format , ( XX ) X-XX-XX-XX-XX . If possible value formatted text field obvious order , use spinner instead . A spinner use formatted text field default , add two button enable user choose value sequence . Another alternative adjunct use formatted text field instal input verifier field . A component 's input verifier call component nearly lose keyboard focus . The input verifier enable check whether value component valid optionally change stop focus transfer . This GUI use format text field display number four different format . Try : Click Launch button run FormattedTextFieldDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Experiment different loan amount , annual percentage rate ( APRs ) , loan length . Note long text type valid , Month Payment field update press Enter move focus field edit . Type invalid text `` abcd '' Loan Amount field press Enter . The Month Payment field remain . When move focus Loan Amount field , text revert field 's last valid value . Type marginally valid text `` 2000abcd '' Loan Amount field press Enter . The Monthly Payment field update , though Loan Amount field still display 2000abcd . When move focus Loan Amount field , text display update neatly format version value , example , `` 2,000 '' . You find entire code program FormattedTextFieldDemo.java . This code create first field . amountField = new JFormattedTextField ( amountFormat ) ; amountField.setValue ( new Double ( amount ) ) ; amountField.setColumns ( 10 ) ; amountField.addPropertyChangeListener ( `` value '' , ) ; ... amountFormat = NumberFormat.getNumberInstance ( ) ; The constructor use create amountField object take java.text.Format argument . The Format object use field 's formatter translate field 's value text text field 's value . The remain code set amountField object . The setValue method set field 's value property floating-point number represent Double object . The setColumns method , inherit JTextField class , hint preferred size field . The call addPropertyChangeListener method register listener value property field , program update Monthly Payment field whenever user change loan amount . The rest section cover following topic : Creating Initializing Formatted Text Fields Setting Getting Field 's Value Specifying Formats Using MaskFormatter Specifying Formatters Using Formatter Factories This section explain API inherit JTextField class . That API describe How Use Text Fields . Creating Initializing Formatted Text Fields The following code creates initialize remain three field FormattedTextFieldDemo example . rateField = new JFormattedTextField ( percentFormat ) ; rateField.setValue ( new Double ( rate ) ) ; rateField.setColumns ( 10 ) ; rateField.addPropertyChangeListener ( `` value '' , ) ; numPeriodsField = new JFormattedTextField ( ) ; numPeriodsField.setValue ( new Integer ( numPeriods ) ) ; numPeriodsField.setColumns ( 10 ) ; numPeriodsField.addPropertyChangeListener ( `` value '' , ) ; paymentField = new JFormattedTextField ( paymentFormat ) ; paymentField.setValue ( new Double ( payment ) ) ; paymentField.setColumns ( 10 ) ; paymentField.setEditable ( false ) ; paymentField.setForeground ( Color.red ) ; ... percentFormat = NumberFormat.getNumberInstance ( ) ; percentFormat.setMinimumFractionDigits ( 2 ) ; paymentFormat = NumberFormat.getCurrencyInstance ( ) ; The code set rateField object almost identical code list previously field . The difference format slightly different , thanks code percentFormat.setMinimumFractionDigits ( 2 ) . The code create numPeriodsField object explicitly set format formatter . Instead , set value Integer enable field use default formatter Integer object . The code previous two field default formatter use Double object . The result need . How specify format formatters cover later section . The payment field different field uneditable , use different color text , property change listener . Otherwise , identical field . We could choose use text field label instead . Whatever component , could still use paymentFormat method parse payment amount text display . Setting Getting Field 's Value Keep following mind use formatted text field : A formatted text field 's text value two different property , value often lag behind text . The text property define JTextField class . This property always reflect field display . The value property , define JFormattedTextField class , might reflect late text displayed field . While user type , text property change , value property change change commit . To precise , value formatted text field set use either setValue method commitEdit method . The setValue method set value specify argument . The argument technically Object , formatter need able convert string . Otherwise , text field display substantive information . The commitEdit method set value whatever object formatter determine represent field 's text . The commitEdit method automatically call either following happens : When user press Enter field focus . By default , field lose focus , example , user press Tab key change focus another component . You use setFocusLostBehavior method specify different outcome field lose focus . Note : Some formatters might update value constantly , render loss focus meaningless , value always text specifies . When set value formatted text field , field 's text update reflect value . Exactly value represent text depend field 's formatter . Note although JFormattedTextField class inherit setText method JTextField class , usually call setText method formatted text field . If , field 's display change accordingly value update ( unless field 's formatter update constantly ) . To obtain formatted text field 's current value , use getValue method . If necessary , ensure value reflect text call commitEdit method getValue . Because getValue method return Object , need cast type use field 's value . For example : Date enteredDate = ( Date ) dateField.getValue ( ) ; To detect change formatted text field 's value , register property change listener formatted text field listen change `` value '' property . The property change listener take FormattedTextFieldDemo example : //The property change listener register //field use code like : // someField.addPropertyChangeListener ( `` value '' , ) ; /** Called field 's `` value '' property change . */ public void propertyChange ( PropertyChangeEvent e ) { Object source = e.getSource ( ) ; ( source == amountField ) { amount = ( ( Number ) amountField.getValue ( ) ) .doubleValue ( ) ; } else ( source == rateField ) { rate = ( ( Number ) rateField.getValue ( ) ) .doubleValue ( ) ; } else ( source == numPeriodsField ) { numPeriods = ( ( Number ) numPeriodsField.getValue ( ) ) .intValue ( ) ; } double payment = computePayment ( amount , rate , numPeriods ) ; paymentField.setValue ( new Double ( payment ) ) ; } Specifying Formats The Format class provide way format locale-sensitive information date number . Formatters descend InternationalFormatter class , DateFormatter NumberFormatter class , use Format object translate field 's text value . You obtain Format object call one factory method DateFormat NumberFormat class , use one SimpleDateFormat constructor . Note : A third commonly use formatter class , MaskFormatter , descend InternationalFormatter class use format . The MaskFormatter discuss Using MaskFormatter . You customize certain format aspect create Format object , others format-specific API . For example , DecimalFormat object , inherit NumberFormat often return factory method , customize use setMaximumFractionDigits setNegativePrefix method . For information use Format object , see Formatting lesson Internationalization trail . The easy way associate customized format formatted text field create field use JFormattedTextField constructor take Format argument . You see association previous code example create amountField rateField object . Using MaskFormatter The MaskFormatter class implement formatter specify exactly character valid position field 's text . For example , following code create MaskFormatter let user type five-digit zip code : zipField = new JFormattedTextField ( createFormatter ( `` # # # # # '' ) ) ; ... protect MaskFormatter createFormatter ( String ) { MaskFormatter formatter = null ; try { formatter = new MaskFormatter ( ) ; } catch ( java.text.ParseException exc ) { System.err.println ( `` formatter bad : `` + exc.getMessage ( ) ) ; System.exit ( -1 ) ; } return formatter ; } You try result precede code run TextInputDemo . Click Launch button run TextInputDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . The program 's GUI display . The follow table show character use formatting mask : Character Description # Any valid number ( Character.isDigit ) . ' ( single quote ) Escape character , use escape special formatting character . U Any character ( Character.isLetter ) . All lowercase letter map uppercase . L Any character ( Character.isLetter ) . All uppercase letter map lowercase . A Any character number ( Character.isLetter Character.isDigit ) . ? Any character ( Character.isLetter ) . * Anything . H Any hex character ( 0-9 , a-f A-F ) . Specifying Formatters Using Formatter Factories When specify formatters , keep mind formatter object use one format text field time . Each field least one formatter associate , exactly one use time . You specify formatters use formatted text field several way : Use JFormattedTextField constructor take Format argument . A formatter field automatically create use specified format . Use JFormattedTextField constructor take JFormattedTextField.AbstractFormatter argument . The specified formatter use field . Set value formatted text field format , formatter , formatter factory specify . A formatter assign field default formatter factory , use type field 's value guide . If value Date , formatter DateFormatter . If value Number , formatter NumberFormatter . Other type result instance DefaultFormatter . Make formatted text field use formatter factory return customized formatter object . This flexible approach . It useful want associate one formatter field add new kind formatter use multiple field . An example former use field interpret user typing certain way display value ( user type ) another way . An example latter use several field custom class value , example , PhoneNumber . You set field use formatter factory return specialized formatters phone number . You set field 's formatter factory either create field use constructor take formatter factory argument , call setFormatterFactory method field . To create formatter factory , often use instance DefaultFormatterFactory class . A DefaultFormatterFactory object enable specify formatters return value edit , edit , null value . The following figure show application base FormattedTextFieldDemo example use formatter factory set multiple editor Loan Amount APR field . While user edit Loan Amount , $ character use user force type . Similarly , user edit APR field , % character require . Click Launch button run FormatterFactoryDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . The following code create formatters set use instance DefaultFormatterFactory class : private double rate = .075 ; //7.5 % ... amountField = new JFormattedTextField ( new DefaultFormatterFactory ( new NumberFormatter ( amountDisplayFormat ) , new NumberFormatter ( amountDisplayFormat ) , new NumberFormatter ( amountEditFormat ) ) ) ; ... NumberFormatter percentEditFormatter = new NumberFormatter ( percentEditFormat ) { public String valueToString ( Object ) throw ParseException { Number number = ( Number ) ; ( number ! = null ) { double = number.doubleValue ( ) * 100.0 ; number = new Double ( ) ; } return super.valueToString ( number ) ; } public Object stringToValue ( String ) throw ParseException { Number number = ( Number ) super.stringToValue ( ) ; ( number ! = null ) { double = number.doubleValue ( ) / 100.0 ; number = new Double ( ) ; } return number ; } } ; rateField = new JFormattedTextField ( new DefaultFormatterFactory ( new NumberFormatter ( percentDisplayFormat ) , new NumberFormatter ( percentDisplayFormat ) , percentEditFormatter ) ) ; ... amountDisplayFormat = NumberFormat.getCurrencyInstance ( ) ; amountDisplayFormat.setMinimumFractionDigits ( 0 ) ; amountEditFormat = NumberFormat.getNumberInstance ( ) ; percentDisplayFormat = NumberFormat.getPercentInstance ( ) ; percentDisplayFormat.setMinimumFractionDigits ( 2 ) ; percentEditFormat = NumberFormat.getNumberInstance ( ) ; percentEditFormat.setMinimumFractionDigits ( 2 ) ; The boldface code highlight call DefaultFormatterFactory constructor . The first argument constructor specify default formatter use formatted text field . The second argument specify display formatter , use field focus . The third argument specify edit formatter , use field focus . The code use fourth argument , , fourth argument would specify null formatter , use field 's value null . Because null formatter specify , default formatter use value null . The code customize formatter use percentEditFormat create subclass NumberFormatter class . This subclass override valueToString stringToValue method NumberFormatter convert displayed number value actually use calculation , convert value number . Specifically , displayed number 100 time actual value . The reason percent format use display formatter automatically display text 100 time value , corresponding editor formatter must display text value . The FormattedTextFieldDemo example need take care conversion demo use one format display editing . You find code entire program FormatterFactoryDemo.java . Formatted Text Field API The following table list commonly use APIs use format text field . Classes Related Formatted Text Fields JFormattedTextField Methods DefaultFormatter Options Classes Related Formatted Text Fields Class Interface Purpose JFormattedTextField Subclass JTextField support format arbitrary value . JFormattedTextField.AbstractFormatter The superclass formatters JFormattedTextField . A formatter enforce edit policy navigation policy , handle string-to-object conversion , manipulate JFormattedTextField necessary enforce desired policy . JFormattedTextField.AbstractFormatterFactory The superclass formatter factory . Each JFormattedTextField use formatter factory obtain formatter best corresponds text field 's state . DefaultFormatterFactory The formatter factory normally use . Provides formatters base detail passed-in parameter focus state . DefaultFormatter Subclass JFormattedTextField.AbstractFormatter format arbitrary object use toString method . MaskFormatter Subclass DefaultFormatter format edit string use specified character mask . ( For example , seven-digit phone number specify use `` # # # - # # # # '' . ) InternationalFormatter Subclass DefaultFormatter use instance java.text.Format handle conversion String . NumberFormatter Subclass InternationalFormatter support number format use instance NumberFormat . DateFormatter Subclass InternationalFormatter support date format use instance DateFormat . JFormattedTextField Methods Method Constructor Purpose JFormattedTextField ( ) JFormattedTextField ( Object ) JFormattedTextField ( Format ) JFormattedTextField ( AbstractFormatter ) JFormattedTextField ( AbstractFormatterFactory ) JFormattedTextField ( AbstractFormatterFactory , Object ) Creates new formatted text field . The Object argument , present , specify initial value field cause appropriate formatter factory create . The Format AbstractFormatter argument specify format formatter use field , cause appropriate formatter factory create . The AbstractFormatterFactory argument specify formatter factory use , determine formatters use field . void setValue ( Object ) Object getValue ( ) Sets obtain value formatted text field . You must cast return type base JFormattedTextField configure . If formatter set yet , call setValue set formatter one return field 's formatter factory . void setFormatterFactory ( AbstractFormatterFactory ) Sets object determine formatters use formatted text field . The object often instance DefaultFormatterFactory class . AbstractFormatter getFormatter ( ) Obtains formatter formatted text field . The formatter often instance DefaultFormatter class . void setFocusLostBehavior ( int ) Specifies outcome field lose focus . Possible value define JFormattedTextField COMMIT_OR_REVERT ( default ) , COMMIT ( commit valid , otherwise leave everything ) , PERSIST ( nothing ) , REVERT ( change text reflect value ) . void commitEdit ( ) Sets value object represent field 's text , determine field 's formatter . If text invalid , value remain ParseException throw . boolean isEditValid ( ) Returns true formatter consider current text valid , determine field 's formatter . DefaultFormatter Options Method Purpose void setCommitsOnValidEdit ( boolean ) boolean getCommitsOnValidEdit ( ) Sets obtains value edits push back JFormattedTextField . If true , commitEdit call every valid edit . This property false default . void setOverwriteMode ( boolean ) boolean getOverwriteMode ( ) Sets obtain behavior insert character . If true , new character overwrite exist character model insert . The default value property true DefaultFormatter ( thus MaskFormatter ) false InternationalFormatter ( thus DateFormatter NumberFormatter ) . void setAllowsInvalid ( boolean ) boolean getAllowsInvalid ( ) Sets interpret whether value edit allow invalid length time . It often convenient enable user type invalid value commitEdit method attempt . DefaultFormatter initialize property true . Of standard Swing formatters , MaskFormatter set property false . Examples That Use Formatted Text Fields This table list example use format text field point example describe . Example Where Described Notes FormattedTextFieldDemo This section Uses four format text field . SpinnerDemo How Use Spinners Customizes appearance formatted text field use two spinner . Converter Using Models Each ConversionPanel pair formatted text field slider . TextInputDemo This section Shows use text field , spinner , format text field together , demonstrate use MaskFormatter . Includes code select text field receive focus . FormatterFactoryDemo This section A variation FormattedTextFieldDemo use formatter factory specify multiple formatters two formatted text field .