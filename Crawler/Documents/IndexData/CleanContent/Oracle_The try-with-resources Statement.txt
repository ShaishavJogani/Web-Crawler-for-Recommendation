The try-with-resources statement try statement declare one resource . A resource object must close program finish . The try-with-resources statement ensure resource close end statement . Any object implement java.lang.AutoCloseable , include object implement java.io.Closeable , use resource . The following example read first line file . It use instance BufferedReader read data file . BufferedReader resource must close program finish : static String readFirstLineFromFile ( String path ) throw IOException { try ( BufferedReader br = new BufferedReader ( new FileReader ( path ) ) ) { return br.readLine ( ) ; } } In example , resource declare try-with-resources statement BufferedReader . The declaration statement appear within parenthesis immediately try keyword . The class BufferedReader , Java SE 7 later , implement interface java.lang.AutoCloseable . Because BufferedReader instance declare try-with-resource statement , closed regardless whether try statement complete normally abruptly ( result method BufferedReader.readLine throw IOException ) . Prior Java SE 7 , use finally block ensure resource closed regardless whether try statement complete normally abruptly . The following example use finally block instead try-with-resources statement : static String readFirstLineFromFileWithFinallyBlock ( String path ) throw IOException { BufferedReader br = new BufferedReader ( new FileReader ( path ) ) ; try { return br.readLine ( ) ; } finally { ( br ! = null ) br.close ( ) ; } } However , example , method readLine close throw exception , method readFirstLineFromFileWithFinallyBlock throw exception thrown finally block ; exception thrown try block suppress . In contrast , example readFirstLineFromFile , exception throw try block try-with-resources statement , method readFirstLineFromFile throw exception thrown try block ; exception thrown try-with-resources block suppress . In Java SE 7 later , retrieve suppressed exception ; see section Suppressed Exceptions information . You may declare one resource try-with-resources statement . The following example retrieve name file package zip file zipFileName create text file contain name file : public static void writeToFileZipFileContents ( String zipFileName , String outputFileName ) throw java.io.IOException { java.nio.charset.Charset charset = java.nio.charset.StandardCharsets.US_ASCII ; java.nio.file.Path outputFilePath = java.nio.file.Paths.get ( outputFileName ) ; // Open zip file create output file // try-with-resources statement try ( java.util.zip.ZipFile zf = new java.util.zip.ZipFile ( zipFileName ) ; java.io.BufferedWriter writer = java.nio.file.Files.newBufferedWriter ( outputFilePath , charset ) ) { // Enumerate entry ( java.util.Enumeration entry = zf.entries ( ) ; entries.hasMoreElements ( ) ; ) { // Get entry name write output file String newLine = System.getProperty ( `` line.separator '' ) ; String zipEntryName = ( ( java.util.zip.ZipEntry ) entries.nextElement ( ) ) .getName ( ) + newLine ; writer.write ( zipEntryName , 0 , zipEntryName.length ( ) ) ; } } } In example , try-with-resources statement contain two declaration separate semicolon : ZipFile BufferedWriter . When block code directly follow terminate , either normally exception , close method BufferedWriter ZipFile object automatically call order . Note close method resource call opposite order creation . The following example use try-with-resources statement automatically close java.sql.Statement object : public static void viewTable ( Connection con ) throw SQLException { String query = `` select COF_NAME , SUP_ID , PRICE , SALES , TOTAL COFFEES '' ; try ( Statement stmt = con.createStatement ( ) ) { ResultSet rs = stmt.executeQuery ( query ) ; ( rs.next ( ) ) { String coffeeName = rs.getString ( `` COF_NAME '' ) ; int supplierID = rs.getInt ( `` SUP_ID '' ) ; float price = rs.getFloat ( `` PRICE '' ) ; int sale = rs.getInt ( `` SALES '' ) ; int total = rs.getInt ( `` TOTAL '' ) ; System.out.println ( coffeeName + `` , `` + supplierID + `` , `` + price + `` , `` + sale + `` , `` + total ) ; } } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } } The resource java.sql.Statement use example part JDBC 4.1 later API . Note : A try-with-resources statement catch finally block like ordinary try statement . In try-with-resources statement , catch finally block run resource declare close . Suppressed Exceptions An exception throw block code associate try-with-resources statement . In example writeToFileZipFileContents , exception throw try block , two exception throw try-with-resources statement try close ZipFile BufferedWriter object . If exception throw try block one exception throw try-with-resources statement , exception throw try-with-resources statement suppress , exception throw block one throw writeToFileZipFileContents method . You retrieve suppressed exception call Throwable.getSuppressed method exception throw try block . Classes That Implement AutoCloseable Closeable Interface See Javadoc AutoCloseable Closeable interface list class implement either interface . The Closeable interface extend AutoCloseable interface . The close method Closeable interface throw exception type IOException close method AutoCloseable interface throw exception type Exception . Consequently , subclass AutoCloseable interface override behavior close method throw specialized exception , IOException , exception .