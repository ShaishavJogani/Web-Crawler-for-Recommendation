In previous section 've explore depth ( ) Java platform Event Model framework . If 're like people , 've find theoretical text confusing actual use model . Certainly confusing necessary explain , really , quite simple framework . In order clear everything bit , let 's examine simple example base Event Model framework . Let 's assume want write program read stream number input user command line process stream somehow . Say , keep track run sum number produce sum stream completely read . Of course could implement program quite simply loop main ( ) method . But instead let 's little creative . Let 's say want divide program neatly class , responsibility ( like proper , object-oriented design ) . And let 's imagine want possible calculate sum number read , perform number calculation number stream . In fact , possible add new calculation relative ease without affect previously exist code . If analyze requirement , come conclusion number different responsibility program : Reading number stream command lineProcessing number stream ( possibly multiple ) Starting entire program Using Event Model framework allow u separate two main responsibility cleanly affords u flexibility look . If implement logic read number stream single class treat reading single number event , Event Model allow u broadcast event ( number ) many stream processor like . The class read number stream act event source program stream processor listener . Since listener class register stream reader ( ) mean model allow u multiple , independent stream processing add without affect code read stream pre-existing stream processor . The Event Model say state associate event include class represent event . That 's perfect u ; implement simple event class record number read command line . Each listener process number see fit . For interesting event set let 's keep thing simple : let 's limit read new number reach end stream . With choice come following design example application : In following section look implementation example . Example basic [ edit ] Let 's start basic . According Event Model rule , must define event class encapsulate interesting event . We call classsomething-somethingEvent . Let 's go forNumberReadEvent , since 's interest u . According Model rule , class encapsulate state belong event occurrence . In case , 's number read stream . And event class must inherit fromjava.util.EventObject . So , following class need : Next , must define listener interface . This interface must define method interest event must extendjava.util.EventListener . We say earlier interesting event `` number read '' `` end stream reach '' , go : Actually thenumberStreamTerminatedmethod little weird , since n't actually `` number read '' event . In real program 'd probably want differently . But let 's keep thing simple example . The event listener implementation [ edit ] So , listener interface define , need one implementation ( actual listener class ) . At least need one keep running sum number read . We add many like , course . But let 's stick one . Obviously , class must implement ourNumberReadListenerinterface . Keeping running summation matter add number field event arrive . And want report sum end stream reach ; since know happen ( i.e . thenumberStreamTerminatedmethod call ) , simpleprintlnstatement : So , code good ? No . It 's yucky terrible thread safe . But example . The event source [ edit ] This thing get interesting : event source class . This interesting place must put code read number stream , code send event listener code tomanagelisteners ( add remove keep track ) . Let 's start think keep track listener . Normally tricky business , since take sort multithreading concern account . But 're simple example , let 's stick simplejava.util.Setof listener . Which initialize constructor : That choice make really easy implement add remove listener : We wo n't actually use remove method example â€” recall Model say must present . Another advantage simple choice notification listener easy well . We assume listener set iterate . And since notification method synchronous ( rule model ) call directly : Note 've make assumption . For starter , 've assume 'll get Double value somewhere . Also , 've assume listener ever care number value end-of-stream notification pass fixed value 0 event . Finally must deal read number stream . We 'll use Console class keep read number : Note 've hook number-reading loop event handle mechanism call notify method ? The entire class look like : Running example [ edit ] Finally , need one class : kickoff point application . This class contain main ( ) method , plus code create NumberReader , listener combine two : If compile run program , result look somewhat like : An example run > java org.wikibooks.en.javaprogramming.example.Main Enter number : 0.1 Enter number : 0.2 Enter number : 0.3 Enter number : 0.4 Enter number : OutputSum number stream : 1.0 Extending example adaptor [ edit ] Next , let 's take look apply adaptor design . Adaptors use add functionality event handle process : general process specific one listener ; oris suppose affect implementation specific listener . According Event Model specification typical use case adaptor add rout logic event . But also add filter log . In case , let 's : add logging number `` proof '' calculation listener . An adaptor , explain earlier , class sit event source listener . From point view event source , masquerade listener ( must implement listener interface ) . From point view listener pretend event source ( add remove method ) . In word , write adaptor repeat code event source ( manage listener ) re-implement event notification method extra stuff pass event actual listener . In case need adaptor write number log file . Keeping simple , let 's settle adaptor : Uses fixed log file name overwrite log file every program run.Opens aFileWriterin constructor keep open.Implements thenumberReadmethod write number theFileWriter.Implements thenumberStreamTerminatedmethod close theFileWriter . Also , make life easy copy code need manage listener theNumberReaderclass . Again , real program 'd want differently . Note notification method implementation also pass event real listener : Of course , make adaptor work make change bootstrap code : But note nicely easily re-link object system . The fact adaptor listener implement listener interface adaptor event source look like event source mean hook adaptor system without change single statement class develop earlier . And course , run example give , number record log file .