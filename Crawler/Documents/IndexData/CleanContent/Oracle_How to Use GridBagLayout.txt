Note : This lesson cover write layout code hand , challenge . If interested learn detail layout management , might prefer use GroupLayout layout manager combine builder tool lay GUI . One builder tool NetBeans IDE . Otherwise , want code hand want use GroupLayout , GridBagLayout recommend next flexible powerful layout manager . If interested use JavaFX create GUI , see Working With Layouts JavaFX . Here picture example use GridBagLayout . Click Launch button run GridBagLayoutDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . The code GridBagDemo GridBagLayoutDemo.java . GridBagLayout one flexible — complex — layout manager Java platform provide . A GridBagLayout place component grid row column , allow specified component span multiple row column . Not row necessarily height . Similarly , column necessarily width . Essentially , GridBagLayout place component rectangle ( cell ) grid , use component ' prefer size determine big cell . The following figure show grid preceding applet . As see , grid three row three column . The button second row span column ; button third row span two right column . If enlarge window show following figure , notice bottom row , contain Button 5 , get new vertical space . The new horizontal space split evenly among column . This resize behavior base weight program assign individual component GridBagLayout . You also notice component take available horizontal space — ( see button 5 ) available vertical space . This behavior also specify program . The way program specify size position characteristic component specify constraint component . The preferred approach set constraint component use Container.add variant , pass GridBagConstraints object , demonstrate next section . The following section explain constraint set provide example . Specifying Constraints The following code typical go container use GridBagLayout . You see detailed example next section . JPanel pane = new JPanel ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; //For component add container : // ... Create component ... // ... Set instance variable GridBagConstraints instance ... pane.add ( theComponent , c ) ; As might guess example , possible reuse GridBagConstraints instance multiple component , even component different constraint . However , recommend reuse GridBagConstraints , easily lead introduce subtle bug forget reset field new instance . Note : The following discussion assume GridBagLayout control container left-to-right component orientation . You set following GridBagConstraints instance variable : gridx , gridy Specify row column upper left component . The leftmost column address gridx=0 top row address gridy=0 . Use GridBagConstraints.RELATIVE ( default value ) specify component place right ( gridx ) ( gridy ) component add container component add . We recommend specify gridx gridy value component rather use GridBagConstraints.RELATIVE ; tend result predictable layout . gridwidth , gridheight Specify number column ( gridwidth ) row ( gridheight ) component 's display area . These constraint specify number cell component use , number pixel use . The default value 1 . Use GridBagConstraints.REMAINDER specify component last one row ( gridwidth ) column ( gridheight ) . Use GridBagConstraints.RELATIVE specify component next last one row ( gridwidth ) column ( gridheight ) . We recommend specify gridwidth gridheight value component rather use GridBagConstraints.RELATIVE GridBagConstraints.REMAINDER ; tend result predictable layout . Note : GridBagLayout allow component span multiple row unless component leftmost column specify positive gridx gridy value component . fill Used component 's display area large component 's request size determine whether resize component . Valid value ( define GridBagConstraints constant ) include NONE ( default ) , HORIZONTAL ( make component wide enough fill display area horizontally , change height ) , VERTICAL ( make component tall enough fill display area vertically , change width ) , BOTH ( make component fill display area entirely ) . ipadx , ipady Specifies internal padding : much add size component . The default value zero . The width component least minimum width plus ipadx*2 pixel , since pad applies side component . Similarly , height component least minimum height plus ipady*2 pixel . inset Specifies external padding component -- minimum amount space component edge display area . The value specify Insets object . By default , component external padding . anchor Used component small display area determine ( within area ) place component . Valid value ( define GridBagConstraints constant ) CENTER ( default ) , PAGE_START , PAGE_END , LINE_START , LINE_END , FIRST_LINE_START , FIRST_LINE_END , LAST_LINE_END , LAST_LINE_START . Here picture value interpret container default , left-to-right component orientation . FIRST_LINE_START PAGE_START FIRST_LINE_END LINE_START CENTER LINE_END LAST_LINE_START PAGE_END LAST_LINE_END Version note : The PAGE_* *LINE_* constant introduce 1.4 . Previous release require value name point compass . For example , NORTHEAST indicate top-right part display area . We recommend use new constant , instead , since enable easy localization . weightx , weighty Specifying weight art significant impact appearance component GridBagLayout control . Weights use determine distribute space among column ( weightx ) among row ( weighty ) ; important specify resize behavior . Unless specify least one non-zero value weightx weighty , component clump together center container . This weight 0.0 ( default ) , GridBagLayout put extra space grid cell edge container . Generally weight specify 0.0 1.0 extreme : number use necessary . Larger number indicate component 's row column get space . For column , weight relate high weightx specify component within column , multicolumn component 's weight split somehow column component . Similarly , row 's weight relate high weighty specify component within row . Extra space tend go toward rightmost column bottom row . The next section discuss constraint depth , context explain example program work . The Example Explained Here , , picture GridBagLayoutDemo application . Click Launch button run GridBagLayoutDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . The following code create GridBagLayout component manage . You find entire source file GridBagLayoutDemo.java . JButton button ; pane.setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; ( shouldFill ) { //natural height , maximum width c.fill = GridBagConstraints.HORIZONTAL ; } button = new JButton ( `` Button 1 '' ) ; ( shouldWeightX ) { c.weightx = 0.5 ; } c.fill = GridBagConstraints.HORIZONTAL ; c.gridx = 0 ; c.gridy = 0 ; pane.add ( button , c ) ; button = new JButton ( `` Button 2 '' ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.weightx = 0.5 ; c.gridx = 1 ; c.gridy = 0 ; pane.add ( button , c ) ; button = new JButton ( `` Button 3 '' ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.weightx = 0.5 ; c.gridx = 2 ; c.gridy = 0 ; pane.add ( button , c ) ; button = new JButton ( `` Long-Named Button 4 '' ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.ipady = 40 ; //make component tall c.weightx = 0.0 ; c.gridwidth = 3 ; c.gridx = 0 ; c.gridy = 1 ; pane.add ( button , c ) ; button = new JButton ( `` 5 '' ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.ipady = 0 ; //reset default c.weighty = 1.0 ; //request extra vertical space c.anchor = GridBagConstraints.PAGE_END ; //bottom space c.insets = new Insets ( 10,0,0,0 ) ; //top pad c.gridx = 1 ; //aligned button 2 c.gridwidth = 2 ; //2 columns wide c.gridy = 2 ; //third row pane.add ( button , c ) ; This example use one GridBagConstraints instance component GridBagLayout manages , however real-life situation recommend reuse GridBagConstraints , easily lead introduce subtle bug forget reset field new instance . Just component add container , code set ( reset default value ) appropriate instance variable GridBagConstraints object . It add component container , specify GridBagConstraints object second argument add method . For example , make button 4 extra tall , example code : c.ipady = 40 ; And set constraint next component , code reset value ipady default : c.ipady = 0 ; If component 's display area large component , specify whereabouts display area component display use GridBagConstraints.anchor constraint . The anchor constraint 's value absolute ( north , south , east , west , ) , orientation-relative ( start page , end line , start first line , ) , relative component 's baseline . For full list possible value anchor constraint , include baseline-relative value , see API documentation GridBagConstraints.anchor . You see code extract Button 5 specifies display end display area set anchor GridBagConstraints.PAGE_END . Note : The Tutorial 's example use specify constraint object different way , might see program well . Rather specify constraint add method , example use invoke setConstraints method GridBagLayout object . For example : GridBagLayout gridbag = new GridBagLayout ( ) ; pane.setLayout ( gridbag ) ; ... gridbag.setConstraints ( button , c ) ; pane.add ( button ) ; However , recommend use Container.add method since make clean code use setConstraints . Here table show constraint component GridBagLayoutDemo 's content pane . Values default mark boldface . Values different previous table entry mark italic . Component Constraints All component ipadx = 0 fill = GridBagConstraints.HORIZONTAL Button 1 ipady = 0 weightx = 0.5 weighty = 0.0 gridwidth = 1 anchor = GridBagConstraints.CENTER inset = new Insets ( 0,0,0,0 ) gridx = 0 gridy = 0 Button 2 weightx = 0.5 gridx = 1 gridy = 0 Button 3 weightx = 0.5 gridx = 2 gridy = 0 Button 4 ipady = 40 weightx = 0.0 gridwidth = 3 gridx = 0 gridy = 1 Button 5 ipady = 0 weightx = 0.0 weighty = 1.0 anchor = GridBagConstraints.PAGE_END inset = new Insets ( 10,0,0,0 ) gridwidth = 2 gridx = 1 gridy = 2 GridBagLayoutDemo two component span multiple column ( button 4 5 ) . To make button 4 tall , add internal padding ( ipady ) . To put space button 4 5 , use inset add minimum 10 pixel button 5 , make button 5 hug bottom edge cell . All component pane container wide possible , give cell occupy . The program accomplishes set GridBagConstraints fill instance variable GridBagConstraints.HORIZONTAL , leave set component . If program specify fill , button would natural width , like : When enlarge GridBagLayoutDemo 's window , column grow proportionately . This component first row , component one column wide , weightx = 0.5 . The actual value component ' weightx unimportant . What matter component , consequently , column , equal weight great 0 . If component manage GridBagLayout weightx set , component ' container make wider , component would stay clump together center container , like : If container give size small big prefered size , space distribute accord GridBagContainer weight . Note enlarge window , last row one get taller . This button 5 weighty great zero . The GridBagLayout API The GridBagLayout GridBagConstraints class one constructor , argument . Instead invoke method GridBagConstraints object , manipulate instance variable , describe Specifying Constraints . Generally , method invoke GridBagLayout object setConstraints , demonstrate The Example Explained . Examples Use GridBagLayout You find example use GridBagLayout throughout tutorial . The following table list . Example Where Described Notes GridBagLayoutDemo This section Uses many feature — weight , inset , internal padding , horizontal fill , exact cell positioning , multi-column cell , anchor ( component positioning within cell ) . TextSamplerDemo Using Text Components Aligns two pair label text field , plus add label across full width container . ContainerEventDemo How Write Container Listener Positions five component within container , use weight , fill , relative positioning .