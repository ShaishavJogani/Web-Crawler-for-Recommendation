Unlike if-then if-then-else statement , switch statement number possible execution path . A switch work byte , short , char , int primitive data type . It also work enumerated type ( discuss Enum Types ) , String class , special class wrap certain primitive type : Character , Byte , Short , Integer ( discuss Numbers Strings ) . The following code example , SwitchDemo , declare int name month whose value represent month . The code display name month , base value month , use switch statement . public class SwitchDemo { public static void main ( String [ ] args ) { int month = 8 ; String monthString ; switch ( month ) { case 1 : monthString = `` January '' ; break ; case 2 : monthString = `` February '' ; break ; case 3 : monthString = `` March '' ; break ; case 4 : monthString = `` April '' ; break ; case 5 : monthString = `` May '' ; break ; case 6 : monthString = `` June '' ; break ; case 7 : monthString = `` July '' ; break ; case 8 : monthString = `` August '' ; break ; case 9 : monthString = `` September '' ; break ; case 10 : monthString = `` October '' ; break ; case 11 : monthString = `` November '' ; break ; case 12 : monthString = `` December '' ; break ; default : monthString = `` Invalid month '' ; break ; } System.out.println ( monthString ) ; } } In case , August print standard output . The body switch statement know switch block . A statement switch block label one case default label . The switch statement evaluate expression , execute statement follow matching case label . You could also display name month if-then-else statement : int month = 8 ; ( month == 1 ) { System.out.println ( `` January '' ) ; } else ( month == 2 ) { System.out.println ( `` February '' ) ; } ... // Deciding whether use if-then-else statement switch statement base readability expression statement test . An if-then-else statement test expression base range value condition , whereas switch statement test expression base single integer , enumerate value , String object . Another point interest break statement . Each break statement terminate enclose switch statement . Control flow continue first statement follow switch block . The break statement necessary without , statement switch block fall : All statement matching case label execute sequence , regardless expression subsequent case label , break statement encounter . The program SwitchDemoFallThrough show statement switch block fall . The program display month correspond integer month month follow year : public class SwitchDemoFallThrough { public static void main ( String [ ] args ) { java.util.ArrayList < String > futureMonths = new java.util.ArrayList < String > ( ) ; int month = 8 ; switch ( month ) { case 1 : futureMonths.add ( `` January '' ) ; case 2 : futureMonths.add ( `` February '' ) ; case 3 : futureMonths.add ( `` March '' ) ; case 4 : futureMonths.add ( `` April '' ) ; case 5 : futureMonths.add ( `` May '' ) ; case 6 : futureMonths.add ( `` June '' ) ; case 7 : futureMonths.add ( `` July '' ) ; case 8 : futureMonths.add ( `` August '' ) ; case 9 : futureMonths.add ( `` September '' ) ; case 10 : futureMonths.add ( `` October '' ) ; case 11 : futureMonths.add ( `` November '' ) ; case 12 : futureMonths.add ( `` December '' ) ; break ; default : break ; } ( futureMonths.isEmpty ( ) ) { System.out.println ( `` Invalid month number '' ) ; } else { ( String monthName : futureMonths ) { System.out.println ( monthName ) ; } } } } This output code : August September October November December Technically , final break require flow fall switch statement . Using break recommend modify code easy less error prone . The default section handle value explicitly handle one case section . The following code example , SwitchDemo2 , show statement multiple case label . The code example calculate number day particular month : class SwitchDemo2 { public static void main ( String [ ] args ) { int month = 2 ; int year = 2000 ; int numDays = 0 ; switch ( month ) { case 1 : case 3 : case 5 : case 7 : case 8 : case 10 : case 12 : numDays = 31 ; break ; case 4 : case 6 : case 9 : case 11 : numDays = 30 ; break ; case 2 : ( ( ( year % 4 == 0 ) & & ! ( year % 100 == 0 ) ) || ( year % 400 == 0 ) ) numDays = 29 ; else numDays = 28 ; break ; default : System.out.println ( `` Invalid month . `` ) ; break ; } System.out.println ( `` Number Days = `` + numDays ) ; } } This output code : Number Days = 29 Using Strings switch Statements In Java SE 7 later , use String object switch statement 's expression . The following code example , StringSwitchDemo , display number month base value String name month : public class StringSwitchDemo { public static int getMonthNumber ( String month ) { int monthNumber = 0 ; ( month == null ) { return monthNumber ; } switch ( month.toLowerCase ( ) ) { case `` january '' : monthNumber = 1 ; break ; case `` february '' : monthNumber = 2 ; break ; case `` march '' : monthNumber = 3 ; break ; case `` april '' : monthNumber = 4 ; break ; case `` may '' : monthNumber = 5 ; break ; case `` june '' : monthNumber = 6 ; break ; case `` july '' : monthNumber = 7 ; break ; case `` august '' : monthNumber = 8 ; break ; case `` september '' : monthNumber = 9 ; break ; case `` october '' : monthNumber = 10 ; break ; case `` november '' : monthNumber = 11 ; break ; case `` december '' : monthNumber = 12 ; break ; default : monthNumber = 0 ; break ; } return monthNumber ; } public static void main ( String [ ] args ) { String month = `` August '' ; int returnedMonthNumber = StringSwitchDemo.getMonthNumber ( month ) ; ( returnedMonthNumber == 0 ) { System.out.println ( `` Invalid month '' ) ; } else { System.out.println ( returnedMonthNumber ) ; } } } The output code 8 . The String switch expression compare expression associate case label String.equals method use . In order StringSwitchDemo example accept month regardless case , month convert lowercase ( toLowerCase method ) , string associate case label lowercase . Note : This example check expression switch statement null . Ensure expression switch statement null prevent NullPointerException throw .