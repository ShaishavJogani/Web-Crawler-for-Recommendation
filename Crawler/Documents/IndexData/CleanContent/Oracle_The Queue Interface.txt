A Queue collection hold element prior processing . Besides basic Collection operation , queue provide additional insertion , removal , inspection operation . The Queue interface follow . public interface Queue < E > extend Collection < E > { E element ( ) ; boolean offer ( E e ) ; E peek ( ) ; E poll ( ) ; E remove ( ) ; } Each Queue method exists two form : ( 1 ) one throw exception operation fail , ( 2 ) return special value operation fail ( either null false , depend operation ) . The regular structure interface illustrate following table . Queue Interface Structure Type Operation Throws exception Returns special value Insert add ( e ) offer ( e ) Remove remove ( ) poll ( ) Examine element ( ) peek ( ) Queues typically , necessarily , order element FIFO ( first-in-first-out ) manner . Among exception priority queue , order element accord value â€” see Object Ordering section detail ) . Whatever ordering use , head queue element would remove call remove poll . In FIFO queue , new element insert tail queue . Other kind queue may use different placement rule . Every Queue implementation must specify ordering property . It possible Queue implementation restrict number element hold ; queue know bound . Some Queue implementation java.util.concurrent bound , implementation java.util . The add method , Queue inherits Collection , insert element unless would violate queue 's capacity restriction , case throw IllegalStateException . The offer method , intend solely use bounded queue , differs add indicate failure insert element return false . The remove poll method remove return head queue . Exactly element get remove function queue 's ordering policy . The remove poll method differ behavior queue empty . Under circumstance , remove throw NoSuchElementException , poll return null . The element peek method return , remove , head queue . They differ one another precisely fashion remove poll : If queue empty , element throw NoSuchElementException , peek return null . Queue implementation generally allow insertion null element . The LinkedList implementation , retrofit implement Queue , exception . For historical reason , permit null element , refrain take advantage , null use special return value poll peek method . Queue implementation generally define element-based version equal hashCode method instead inherit identity-based version Object . The Queue interface define blocking queue method , common concurrent programming . These method , wait element appear space become available , define interface java.util.concurrent.BlockingQueue , extend Queue . In following example program , queue use implement countdown timer . The queue preloaded integer value number specify command line zero , descend order . Then , value remove queue print one-second interval . The program artificial would natural thing without use queue , illustrate use queue store element prior subsequent processing . import java.util . * ; public class Countdown { public static void main ( String [ ] args ) throw InterruptedException { int time = Integer.parseInt ( args [ 0 ] ) ; Queue < Integer > queue = new LinkedList < Integer > ( ) ; ( int = time ; > = 0 ; -- ) queue.add ( ) ; ( ! queue.isEmpty ( ) ) { System.out.println ( queue.remove ( ) ) ; Thread.sleep ( 1000 ) ; } } } In following example , priority queue use sort collection element . Again program artificial reason use favor sort method provide Collections , illustrate behavior priority queue . static < E > List < E > heapSort ( Collection < E > c ) { Queue < E > queue = new PriorityQueue < E > ( c ) ; List < E > result = new ArrayList < E > ( ) ; ( ! queue.isEmpty ( ) ) result.add ( queue.remove ( ) ) ; return result ; }