As already learn , Graphics.drawImage method draw image specific location : boolean Graphics.drawImage ( Image img , int x , int , ImageObserver observer ) ; The x , location specify position top-left image . The observer parameter notify application update image load asynchronously . The observer parameter frequently use directly need BufferedImage class , usually null . The described method address case entire image draw , map image pixel user space coordinate 1:1 . Sometimes application require draw part image ( sub-image ) , scale image cover particular area draw surface , transform filter image draw . The overload drawImage ( ) method perform operation . For example , follow overload drawImage ( ) method enable draw much specified area specified image currently available , scale fit inside specified area destination drawable surface : boolean Graphics.drawImage ( Image img , int dstx1 , int dsty1 , int dstx2 , int dsty2 , int srcx1 , int srcy1 , int srcx2 , int srcy2 , ImageObserver observer ) ; The src parameter represent area image copy draw . The dst parameter display area destination cover source area . The dstx1 , dsty1 coordinate define location draw image . The width height dimension destination area calculate following expression : ( dstx2-dstx1 ) , ( dsty2-dsty1 ) . If dimension source destination area different , Java 2D API scale scale , need . The following code example divide image four quadrant randomly draw quadrant source image different quadrant destination . Note : If n't see applet running , need install least Java SE Development Kit ( JDK ) 7 release.The complete code applet JumbledImageApplet.java . This example use following code paint jumbled duke_skateboard.jpg image . It iterate four sub-images source , draw turn randomly select destination quadrant . /* divide image 'bi ' four rectangular * area draw area * different part image , jumble * image . 'cells ' array * populate value redirect * drawing one subarea another subarea . */ int cellWidth = bi.getWidth ( null ) /2 ; int cellHeight = bi.getHeight ( null ) /2 ; ( int x=0 ; x < 2 ; x++ ) { int sx = x*cellWidth ; ( int y=0 ; < 2 ; y++ ) { int sy = y*cellHeight ; int cell = cell [ x*2+y ] ; int dx = ( cell / 2 ) * cellWidth ; int dy = ( cell % 2 ) * cellHeight ; g.drawImage ( bi , dx , dy , x+cellWidth , dy+cellHeight , sx , sy , sx+cellWidth , sy+cellHeight , null ) ; } } Filtering Images In addition copying scaling image , Java 2D API also filter image . Filtering draw produce new image apply algorithm pixel source image . Image filter apply use following method : void Graphics2D.drawImage ( BufferedImage img , BufferedImageOp op , int x , int ) The BufferedImageOp parameter implement filter . The following applet represent image drawn top text . Drag slider show less text image make image less transparent . Note : If n't see applet running , need install least Java SE Development Kit ( JDK ) 7 release . The following code show filter action operate BufferedImage object alpha channel rescales alpha channel use RescaleOp object . The alpha channel determine translucency pixel . It also specify degree image overwrite . /* Create ARGB BufferedImage */ BufferedImage img = ImageIO.read ( imageSrc ) ; int w = img.getWidth ( null ) ; int h = img.getHeight ( null ) ; BufferedImage bi = new BufferedImage ( w , h , BufferedImage.TYPE_INT_ARGB ) ; Graphics g = bi.getGraphics ( ) ; g.drawImage ( img , 0 , 0 , null ) ; /* * Create rescale filter op make image * 50 % opaque . */ float [ ] scale = { 1f , 1f , 1f , 0.5f } ; float [ ] offset = new float [ 4 ] ; RescaleOp rop = new RescaleOp ( scale , offset , null ) ; /* Draw image , apply filter */ g2d.drawImage ( bi , rop , 0 , 0 ) ; The complete example represent SeeThroughImageApplet.java include code use slider adjust transparency initial 50 % . This example also require duke_skateboard.jpg image . The RescaleOp object one many filter create . The Java 2D API several build filter include following : ConvolveOp . Each output pixel compute surround pixel source image . It may use blur sharpen image . AffineTransformOp . This filter map pixel source different position destination apply transformation pixel location . LookupOp . This filter use application supply lookup table remap pixel color . RescaleOp . This filter multiply color factor . Can use lighten darken image , increase reduce opacity , etc . The following example use described filter well scaling : Note : If n't see applet running , need install least Java SE Development Kit ( JDK ) 7 release . The complete code applet ImageDrawingApplet.java applet require bld.jpg image . Use drop-down menu select image scaling filtering operation .