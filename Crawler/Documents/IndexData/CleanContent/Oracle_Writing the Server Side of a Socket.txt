This section show write server client go . The server client/server pair serve Knock Knock joke . Knock Knock joke favor child usually vehicle bad pun . They go like : Server : `` Knock knock ! '' Client : `` Who 's ? '' Server : `` Dexter . '' Client : `` Dexter ? '' Server : `` Dexter hall bough holly . '' Client : `` Groan . '' The example consist two independently run Java program : client program server program . The client program implement single class , KnockKnockClient , similar EchoClient example previous section . The server program implement two class : KnockKnockServer KnockKnockProtocol . KnockKnockServer , similar EchoServer , contain main method server program perform work listen port , establish connection , read write socket . The class KnockKnockProtocol serve joke . It keep track current joke , current state ( sent knock knock , send clue , ) , return various text piece joke depend current state . This object implement protocol—the language client server agree use communicate . The following section look detail class client server show run . The Knock Knock Server This section walk code implement Knock Knock server program , KnockKnockServer . The server program begin create new ServerSocket object listen specific port ( see statement bold following code segment ) . When run server , choose port already dedicate service . For example , command start server program KnockKnockServer listen port 4444 : java KnockKnockServer 4444 The server program create ServerSocket object try-with-resources statement : int portNumber = Integer.parseInt ( args [ 0 ] ) ; try ( ServerSocket serverSocket = new ServerSocket ( portNumber ) ; Socket clientSocket = serverSocket.accept ( ) ; PrintWriter = new PrintWriter ( clientSocket.getOutputStream ( ) , true ) ; BufferedReader = new BufferedReader ( new InputStreamReader ( clientSocket.getInputStream ( ) ) ) ; ) { ServerSocket java.net class provide system-independent implementation server side client/server socket connection . The constructor ServerSocket throw exception ca n't listen specify port ( example , port already use ) . In case , KnockKnockServer choice exit . If server successfully bind port , ServerSocket object successfully create server continue next step—accepting connection client ( next statement try-with-resources statement ) : clientSocket = serverSocket.accept ( ) ; The accept method wait client start request connection host port server . ( Let 's assume run server program KnockKnockServer computer name knockknockserver.example.com . ) In example , server run port number specify first command-line argument . When connection request successfully establish , accept method return new Socket object bind local port remote address remote port set client . The server communicate client new Socket continue listen client connection request original ServerSocket This particular version program n't listen client connection request . However , modified version program provide Supporting Multiple Clients . After server successfully establish connection client , communicate client use code : try ( // ... PrintWriter = new PrintWriter ( clientSocket.getOutputStream ( ) , true ) ; BufferedReader = new BufferedReader ( new InputStreamReader ( clientSocket.getInputStream ( ) ) ) ; ) { String inputLine , outputLine ; // Initiate conversation client KnockKnockProtocol kkp = new KnockKnockProtocol ( ) ; outputLine = kkp.processInput ( null ) ; out.println ( outputLine ) ; ( ( inputLine = in.readLine ( ) ) ! = null ) { outputLine = kkp.processInput ( inputLine ) ; out.println ( outputLine ) ; ( outputLine.equals ( `` Bye . '' ) ) break ; } This code following : Gets socket 's input output stream open reader writer . Initiates communication client write socket ( show bold ) . Communicates client read write socket ( loop ) . Step 1 already familiar . Step 2 show bold worth comment . The bold statement code segment initiate conversation client . The code create KnockKnockProtocol object—the object keep track current joke , current state within joke , . After KnockKnockProtocol create , code call KnockKnockProtocol 's processInput method get first message server send client . For example , first thing server say `` Knock ! Knock ! '' Next , server write information PrintWriter connect client socket , thereby send message client . Step 3 encode loop . As long client server still something say , server read write socket , send message back forth client server . The server initiate conversation `` Knock ! Knock ! '' afterwards server must wait client say `` Who 's ? '' As result , loop iterate read input stream . The readLine method wait client responds write something output stream ( server 's input stream ) . When client respond , server pass client 's response KnockKnockProtocol object ask KnockKnockProtocol object suitable reply . The server immediately send reply client via output stream connect socket , use call println . If server 's response generate KnockKnockServer object `` Bye . '' indicate client n't want joke loop quits . The Java runtime automatically close input output stream , client socket , server socket create try-with-resources statement . The Knock Knock Protocol The KnockKnockProtocol class implement protocol client server use communicate . This class keep track client server conversation serve server 's response client 's statement . The KnockKnockProtocol object contain text joke make sure client give proper response server 's statement . It would n't client say `` Dexter ? '' server say `` Knock ! Knock ! '' All client/server pair must protocol speak ; otherwise , data pass back forth would meaningless . The protocol client server use depend entirely communication require accomplish task . The Knock Knock Client The KnockKnockClient class implement client program speak KnockKnockServer . KnockKnockClient base EchoClient program previous section , Reading Writing Socket somewhat familiar . But 'll go program anyway look 's happen client context 's go server . When start client program , server already run listen port , wait client request connection . So , first thing client program open socket connect server run specify host name port : String hostName = args [ 0 ] ; int portNumber = Integer.parseInt ( args [ 1 ] ) ; try ( Socket kkSocket = new Socket ( hostName , portNumber ) ; PrintWriter = new PrintWriter ( kkSocket.getOutputStream ( ) , true ) ; BufferedReader = new BufferedReader ( new InputStreamReader ( kkSocket.getInputStream ( ) ) ) ; ) When create socket , KnockKnockClient example use host name first command-line argument , name computer network run server program KnockKnockServer . The KnockKnockClient example use second command-line argument port number create socket . This remote port number—the number port server computer—and port KnockKnockServer listen . For example , following command run KnockKnockClient example knockknockserver.example.com name computer run server program KnockKnockServer 4444 remote port number : java KnockKnockClient knockknockserver.example.com 4444 The client 's socket bind available local port—a port client computer . Remember server get new socket well . If run KnockKnockClient example command-line argument previous example , socket bind local port number 4444 computer run KnockKnockClient example . The server 's socket client 's socket connect . Next come loop implement communication client server . The server speak first , client must listen first . The client read input stream attach socket . If server speak , say `` Bye . '' client exit loop . Otherwise , client display text standard output read response user , type standard input . After user type carriage return , client send text server output stream attach socket . ( ( fromServer = in.readLine ( ) ) ! = null ) { System.out.println ( `` Server : `` + fromServer ) ; ( fromServer.equals ( `` Bye . '' ) ) break ; fromUser = stdIn.readLine ( ) ; ( fromUser ! = null ) { System.out.println ( `` Client : `` + fromUser ) ; out.println ( fromUser ) ; } } The communication end server ask client wish hear another joke , client say , server say `` Bye . '' The client automatically close input output stream socket create try-with-resources statement . Running Programs You must start server program first . To , run server program use Java interpreter , would Java application . Specify command-line argument port number server program listens : java KnockKnockServer 4444 Next , run client program . Note run client computer network ; run computer server . Specify command-line argument host name port number computer run KnockKnockServer server program : java KnockKnockClient knockknockserver.example.com 4444 If quick , might start client server chance initialize begin listen port . If happen , see stack trace client . If happen , restart client . If try start second client first client connect server , second client hang . The next section , Supporting Multiple Clients , talk support multiple client . When successfully get connection client server , see follow text display screen : Server : Knock ! Knock ! Now , must respond : Who 's ? The client echo type send text server . The server respond first line one many Knock Knock joke repertoire . Now screen contain ( text type bold ) : Server : Knock ! Knock ! Who 's ? Client : Who 's ? Server : Turnip Now , respond : Turnip ? Again , client echo type send text server . The server respond punch line . Now screen contain : Server : Knock ! Knock ! Who 's ? Client : Who 's ? Server : Turnip Turnip ? Client : Turnip ? Server : Turnip heat , 's cold ! Want another ? ( y/n ) If want hear another joke , type ; , type n. If type , server begin `` Knock ! Knock ! '' If type n , server say `` Bye . '' thus cause client server exit . If point make typing mistake , KnockKnockServer object catch server respond message similar : Server : You 're suppose say `` Who 's ? '' ! The server start joke : Server : Try . Knock ! Knock ! Note KnockKnockProtocol object particular spell punctuation capitalization . Supporting Multiple Clients To keep KnockKnockServer example simple , design listen handle single connection request . However , multiple client request come port , consequently , ServerSocket . Client connection request queue port , server must accept connection sequentially . However , server service simultaneously use threads—one thread per client connection . The basic flow logic server : ( true ) { accept connection ; create thread deal client ; } The thread read write client connection necessary . Try This : Modify KnockKnockServer service multiple client time . Two class compose solution : KKMultiServer KKMultiServerThread . KKMultiServer loop forever , listen client connection request ServerSocket . When request come , KKMultiServer accept connection , create new KKMultiServerThread object process , hand socket return accept , start thread . Then server go back listen connection request . The KKMultiServerThread object communicate client read write socket . Run new Knock Knock server KKMultiServer run several client succession .