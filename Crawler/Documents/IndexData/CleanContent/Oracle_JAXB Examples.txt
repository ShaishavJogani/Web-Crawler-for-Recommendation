The following section describe use sample application include JAXB RI bundle . The JAXB RI bundle available http : //jaxb.java.net . Download install JAXB RI bundle . The example locate jaxb-ri-install/samples/ directory . These example demonstrate build upon key JAXB feature concept . Follow procedure order present . After read section , feel comfortable enough JAXB : Generate JAXB Java class XML schema Use schema-derived JAXB class unmarshal marshal XML content Java application Create Java content tree use schema-derived JAXB class Validate XML content unmarshalling runtime Customize JAXB schema-to-Java binding This document describe three set example : The basic example ( Modify Marshal , Unmarshal Validate ) demonstrate basic JAXB concept unmarshalling , marshalling , validate XML content use default setting binding . The customize example ( Customize Inline , Datatype Converter , External Customize ) demonstrate various way customize default binding XML schema Java object . The java-to-schema example show use annotation map Java class XML schema . Note : The basic customize example base Purchase Order scenario . Each use XML document , po.xml , write XML schema , po.xsd . These document derive W3C XML Schema Part 0 : Primer , edit David C. Fallside . The basic customize example directory contain several base file : po.xsd XML schema use input JAXB binding compiler , schema-derived JAXB Java class generate . For Customize Inline Datatype Converter examples , file contain inline binding customizations . po.xml Purchase Order XML file contain sample XML content , file unmarshalled Java content tree example . This file almost example ; minor content difference highlight different JAXB concept . Main.java main Java class example . build.xml Ant project file provide convenience . Use Ant tool generate , compile , run schema-derived JAXB class automatically . The build.xml file varies across example . MyDatatypeConverter.java inline-customize example Java class use provide custom data type conversion . binding.xjb External Customize example external binding declaration file pass JAXB bind compiler customize default JAXB binding . The following table briefly describe basic , customize , java-to-schema JAXB example . Table : Basic JAXB Examples Example Name Description Modify Marshal Demonstrates modify Java content tree . Unmarshal Validate Demonstrates enable validation unmarshalling . Table : Customize JAXB Examples Example Name Description Customize Inline Demonstrates customize default JAXB binding use inline annotation XML schema . Datatype Converter Illustrates alternate , terse binding XML simpleType definition Java data type , similar Customize Inline example . External Customize Illustrates use external binding declaration file pass binding customizations read-only schema JAXB binding compiler . Table : Java-to-Schema JAXB Examples Example Name Description Create Marshal Demonstrates use ObjectFactory class create Java content tree marshal XML data . It also demonstrate add content JAXB List property . XmlAccessorOrder Illustrates use @ XmlAccessorOrder @ XmlType.propOrder mapping annotation Java class control order XML content marshal unmarshalled Java type . XmlAdapter Illustrates use interface XmlAdapter annotation @ XmlJavaTypeAdapter provide custom mapping XML content HashMap ( field ) use interger ( int ) key string ( String ) value . XmlAttribute Illustrates use annotation @ XmlAttribute define property field handle XML attribute . XmlRootElement Illustrates use annotation @ XmlRootElement define XML element name XML schema type corresponding class . XmlSchemaType Class Illustrates use annotation @ XmlSchemaType customize mapping property field XML built-in type . XmlType Illustrates use annotation @ XmlType map class enum type XML schema type . JAXB Compiler Options The JAXB XJC schema bind compiler transforms , bind , source XML schema set JAXB content class Java programming language . The compiler class , xjc , provide : xjc.sh Solaris/Linux xjc.bat Windows JAXB RI bundle . The xjc class include JDK class library ( tools.jar ) . Both xjc.sh xjc.bat take command-line option . You display quick usage instruction invoke script without option , -help switch . The syntax follow : xjc [ -options ... ] < schema file/URL/dir/jar > ... [ -b > bindinfo < ] ... If dir specify , schema file directory compile . If jar specify , /META-INF/sun-jaxb.episode binding file compile . The xjc command-line option follow : -nv Do perform strict validation input schema schema . By default , xjc performs strict validation source schema processing . Note mean binding compiler perform validation ; perform less-strict validation . -extension By default , XJC bind compiler strictly enforce rule outline Compatibility chapter JAXB Specification . In default ( strict ) mode , also limit use binding customizations define specification . By use -extension switch , allow use JAXB Vendor Extensions . -b file Specify one external binding file process . ( Each binding file must -b switch . ) The syntax external binding file flexible . You may single binding file contain customizations multiple schema break customizations multiple binding file . In addition , ordering schema file bind file command-line matter . -d dir By default , XJC bind compiler generates Java content class current directory . Use option specify alternate output directory . The directory must already exist ; XJC bind compiler create one . -p package Specify alternate output directory . By default , XJC bind compiler generate Java content class current directory . The output directory must already exist ; XJC bind compiler create one . -httpproxy proxy Specify HTTP/HTTPS proxy . The format [ user [ : password ] @ ] proxyHost [ : proxyPort ] . The old -host -port option still support Reference Implementation backward compatibility , deprecate . -httpproxyfile f Works like -httpproxy option take argument file protect password . -classpath arg Specify find client application class file use < jxb : javaType > < xjc : superClass > customizations . -catalog file Specify catalog file resolve external entity reference . Supports TR9401 , XCatalog , OASIS XML Catalog format . For information , see XML Entity URI Resolvers document examine catalog-resolver sample application . -readOnly Force XJC bind compiler mark generated Java source read-only . By default , XJC bind compiler write-protect Java source file generate . -npa Suppress generation package level annotation **/package-info.java . Using switch cause generated code internalize annotation generated class . -no-header Suppress generation file header timestamp . -target ( 2.0|2.1 ) Behave like XJC 2.0 2.1 generate code doesnt use XJC 2.2 feature . -enableIntrospection Enable correct generation Boolean getters/setters enable Bean Introspection apis . -contentForWildcard Generates content property type multiple x : derived element . -xmlschema Treat input schema W3C XML Schema ( default ) . If specify switch , input schema treat W3C XML Schema . -verbose Be extra verbose compiler output . -quiet Suppress compiler output , progress information warning . -help Display brief summary compiler switch . -version Display compiler version information . -fullversion Display compiler full version information . -Xinject-code Inject specify Java code fragment generated code . -Xlocator Enable source location support generated code . -Xsync-methods Generate accessor method synchronized keyword . -mark-generated Mark generated code - @ javax.annotation . Generated annotation . -episode FILE Generate episode file separate compilation . JAXB Schema Generator Option The JAXB Schema Generator , schemagen , create schema file namespace reference Java class . The schema generator start use appropriate schemagen shell script bin directory platform . The schema generator process Java source file . If Java source reference class , source must accessible system CLASSPATH environment variable ; otherwise error occur schema generate . There way control name generate schema file . You display quick usage instruction invoke script without option use -help option . The syntax follow : schemagen [ -d path ] [ java-source-files ] The -d path option specify location processor-generated javac-generated class file . About Schema-to-Java Bindings When run JAXB bind compiler po.xsd XML schema use basic example ( Unmarshal Read , Modify Marshal , Unmarshal Validate ) , JAXB bind compiler generate Java package name primer.po contain class , describe following table . Table : Schema-Derived JAXB Classes Basic Examples Class Description primer/po/Items.java Public interface bind schema complexType name Items . primer/po/ObjectFactory.java Public class extend com.sun.xml.bind.DefaultJAXBContextImpl ; use create instance specified interface . For example , ObjectFactory createComment ( ) method instantiate Comment object . primer/po/PurchaseOrderType.java Public interface bind schema complexType name PurchaseOrderType . primer/po/USAddress.java Public interface bind schema complexType name USAddress . These class specific binding source XML schema basic example describe following table . Table : Schema-to-Java Bindings Basic Examples XML Schema JAXB Binding < xsd : schema xmlns : xsd= `` http : //www.w3.org/2001/XMLSchema '' > < xsd : complexType name= '' PurchaseOrderType '' > < xsd : sequence > < xsd : element name= '' shipTo '' type= '' USAddress '' / > < xsd : element name= '' billTo '' type= '' USAddress '' / > < xsd : element ref= '' comment '' minOccurs= '' 0 '' / > < xsd : element name= '' item '' type= '' Items '' / > < /xsd : sequence > < xsd : attribute name= '' orderDate '' type= '' xsd : date '' / > < /xsd : complexType > PurchaseOrderType.java < xsd : complexType name= '' USAddress '' > < xsd : sequence > < xsd : element name= '' name '' type= '' xsd : string '' / > < xsd : element name= '' street '' type= '' xsd : string '' / > < xsd : element name= '' city '' type= '' xsd : string '' / > < xsd : element name= '' state '' type= '' xsd : string '' / > < xsd : element name= '' zip '' type= '' xsd : decimal '' / > < /xsd : sequence > < xsd : attribute name= '' country '' type= '' xsd : NMTOKEN '' fixed= '' US '' / > < /xsd : complexType > USAddress.java < xsd : complexType name= '' Items '' > < xsd : sequence > < xsd : element name= '' item '' minOccurs= '' 1 '' maxOccurs= '' unbounded '' > Items.java < xsd : complexType > < xsd : sequence > < xsd : element name= '' productName '' type= '' xsd : string '' / > < xsd : element name= '' quantity '' > < xsd : simpleType > < xsd : restriction base= '' xsd : positiveInteger '' > < xsd : maxExclusive value= '' 100 '' / > < /xsd : restriction > < /xsd : simpleType > < /xsd : element > < xsd : element name= '' USPrice '' type= '' xsd : decimal '' / > < xsd : element ref= '' comment '' minOccurs= '' 0 '' / > < xsd : element name= '' shipDate '' type= '' xsd : date '' minOccurs= '' 0 '' / > < /xsd : sequence > < xsd : attribute name= '' partNum '' type= '' SKU '' use= '' require '' / > < /xsd : complexType > Items.ItemType < /xsd : element > < /xsd : sequence > < /xsd : complexType > < ! -- Stock Keeping Unit , code identifying product -- > < xsd : simpleType name= '' SKU '' > < xsd : restriction base= '' xsd : string '' > < xsd : pattern value= '' \d { 3 } - [ A-Z ] { 2 } '' / > < /xsd : restriction > < /xsd : simpleType > < /xsd : schema > Schema-Derived JAXB Classes The next section briefly explain function follow individual class generate JAXB binding compiler example : Items Class ObjectFactory Class PurchaseOrderType Class USAddress Class Items Class In Items.java : The Items class part primer.po package . The class provide public interface Items ItemType . Content instantiation class bind XML ComplexTypes Items child element ItemType . Item provide getItem ( ) method . ItemType provide method : getPartNum ( ) ; setPartNum ( String value ) ; getComment ( ) ; setComment ( java.lang.String value ) ; getUSPrice ( ) ; setUSPrice ( java.math.BigDecimal value ) ; getProductName ( ) ; setProductName ( String value ) ; getShipDate ( ) ; setShipDate ( java.util.Calendar value ) ; getQuantity ( ) ; setQuantity ( java.math.BigInteger value ) ; ObjectFactory Class In ObjectFactory.java : The ObjectFactory class part primer.po package . ObjectFactory provide factory method instantiate Java interface represent XML content Java content tree . Method name generate concatenate : The string constant create . All Java class name , Java content interface nest within another interface . The name Java content interface . As example , case , Java interface primer.po.Items.ItemType , ObjectFactory create method createItemsItemType ( ) . PurchaseOrderType Class In PurchaseOrderType.java : The PurchaseOrderType class part primer.po package . Content instantiation class bind XML schema child element name PurchaseOrderType . PurchaseOrderType public interface provide following method : getItems ( ) ; setItems ( primer.po.Items value ) ; getOrderDate ( ) ; setOrderDate ( java.util.Calendar value ) ; getComment ( ) ; setComment ( java.lang.String value ) ; getBillTo ( ) ; setBillTo ( primer.po.USAddress value ) ; getShipTo ( ) ; setShipTo ( primer.po.USAddress value ) ; USAddress Class In USAddress.java : The USAddress class part primer.po package . Content instantiation class bind XML schema element name USAddress . USAddress public interface provide following method : getState ( ) ; setState ( String value ) ; getZip ( ) ; setZip ( java.math.BigDecimal value ) ; getCountry ( ) ; setCountry ( String value ) ; getCity ( ) ; setCity ( String value ) ; getStreet ( ) ; setStreet ( String value ) ; getName ( ) ; setName ( String value ) ;