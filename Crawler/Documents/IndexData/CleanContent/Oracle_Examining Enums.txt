Reflection provide three enum-specific APIs : Class.isEnum ( ) Indicates whether class represent enum type Class.getEnumConstants ( ) Retrieves list enum constant define enum order 're declare java.lang.reflect.Field.isEnumConstant ( ) Indicates whether field represent element enumerated type Sometimes necessary dynamically retrieve list enum constant ; non-reflective code accomplish invoke implicitly declare static method value ( ) enum . If instance enum type available way get list possible value invoke Class.getEnumConstants ( ) since impossible instantiate enum type . Given fully qualify name , EnumConstants example show retrieve ordered list constant enum use Class.getEnumConstants ( ) . import java.util.Arrays ; import static java.lang.System.out ; enum Eon { HADEAN , ARCHAEAN , PROTEROZOIC , PHANEROZOIC } public class EnumConstants { public static void main ( String ... args ) { try { Class < ? > c = ( args.length == 0 ? Eon.class : Class.forName ( args [ 0 ] ) ) ; out.format ( `` Enum name : % % nEnum constant : % % n '' , c.getName ( ) , Arrays.asList ( c.getEnumConstants ( ) ) ) ; ( c == Eon.class ) out.format ( `` Eon.values ( ) : % % n '' , Arrays.asList ( Eon.values ( ) ) ) ; // production code handle exception gracefully } catch ( ClassNotFoundException x ) { x.printStackTrace ( ) ; } } } Samples output follow . User input italic . $ java EnumConstants java.lang.annotation.RetentionPolicy Enum name : java.lang.annotation.RetentionPolicy Enum constant : [ SOURCE , CLASS , RUNTIME ] $ java EnumConstants java.util.concurrent.TimeUnit Enum name : java.util.concurrent.TimeUnit Enum constant : [ NANOSECONDS , MICROSECONDS , MILLISECONDS , SECONDS , MINUTES , HOURS , DAYS ] This example also show value return Class.getEnumConstants ( ) identical value return invoke value ( ) enum type . $ java EnumConstants Enum name : Eon Enum constant : [ HADEAN , ARCHAEAN , PROTEROZOIC , PHANEROZOIC ] Eon.values ( ) : [ HADEAN , ARCHAEAN , PROTEROZOIC , PHANEROZOIC ] Since enums class , information may obtain use Reflection APIs describe Fields , Methods , Constructors section trail . The EnumSpy code illustrate use APIs get additional information enum 's declaration . The example use Class.isEnum ( ) restrict set class examine . It also use Field.isEnumConstant ( ) distinguish enum constant field enum declaration ( field enum constant ) . import java.lang.reflect.Constructor ; import java.lang.reflect.Field ; import java.lang.reflect.Method ; import java.lang.reflect.Member ; import java.util.List ; import java.util.ArrayList ; import static java.lang.System.out ; public class EnumSpy { private static final String fmt = `` % 11 : % % % n '' ; public static void main ( String ... args ) { try { Class < ? > c = Class.forName ( args [ 0 ] ) ; ( ! c.isEnum ( ) ) { out.format ( `` % enum type % n '' , c ) ; return ; } out.format ( `` Class : % % n '' , c ) ; Field [ ] flds = c.getDeclaredFields ( ) ; List < Field > cst = new ArrayList < Field > ( ) ; // enum constant List < Field > mbr = new ArrayList < Field > ( ) ; // member field ( Field f : flds ) { ( f.isEnumConstant ( ) ) cst.add ( f ) ; else mbr.add ( f ) ; } ( ! cst.isEmpty ( ) ) print ( cst , `` Constant '' ) ; ( ! mbr.isEmpty ( ) ) print ( mbr , `` Field '' ) ; Constructor [ ] ctors = c.getDeclaredConstructors ( ) ; ( Constructor ctor : ctors ) { out.format ( fmt , `` Constructor '' , ctor.toGenericString ( ) , synthetic ( ctor ) ) ; } Method [ ] mths = c.getDeclaredMethods ( ) ; ( Method : mths ) { out.format ( fmt , `` Method '' , m.toGenericString ( ) , synthetic ( ) ) ; } // production code handle exception gracefully } catch ( ClassNotFoundException x ) { x.printStackTrace ( ) ; } } private static void print ( List < Field > lst , String ) { ( Field f : lst ) { out.format ( fmt , , f.toGenericString ( ) , synthetic ( f ) ) ; } } private static String synthetic ( Member ) { return ( m.isSynthetic ( ) ? `` [ synthetic ] '' : `` '' ) ; } } $ java EnumSpy java.lang.annotation.RetentionPolicy Class : class java.lang.annotation.RetentionPolicy Constant : public static final java.lang.annotation.RetentionPolicy java.lang.annotation.RetentionPolicy.SOURCE Constant : public static final java.lang.annotation.RetentionPolicy java.lang.annotation.RetentionPolicy.CLASS Constant : public static final java.lang.annotation.RetentionPolicy java.lang.annotation.RetentionPolicy.RUNTIME Field : private static final java.lang.annotation.RetentionPolicy [ ] java.lang.annotation.RetentionPolicy . [ synthetic ] Constructor : private java.lang.annotation.RetentionPolicy ( ) Method : public static java.lang.annotation.RetentionPolicy [ ] java.lang.annotation.RetentionPolicy.values ( ) Method : public static java.lang.annotation.RetentionPolicy java.lang.annotation.RetentionPolicy.valueOf ( java.lang.String ) The output show declaration java.lang.annotation.RetentionPolicy contain three enum constant . The enum constant expose public static final field . The field , constructor , method compiler generate . The $ VALUES field relate implementation value ( ) method . Note : For various reason , include support evolution enum type , declaration order enum constant important . Class.getFields ( ) Class.getDeclaredFields ( ) make guarantee order returned value match order declare source code . If ordering require application , use Class.getEnumConstants ( ) . The output java.util.concurrent.TimeUnit show much complicated enums possible . This class include several method well additional field declare static final enum constant . $ java EnumSpy java.util.concurrent.TimeUnit Class : class java.util.concurrent.TimeUnit Constant : public static final java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit.NANOSECONDS Constant : public static final java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit.MICROSECONDS Constant : public static final java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit.MILLISECONDS Constant : public static final java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit.SECONDS Constant : public static final java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit.MINUTES Constant : public static final java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit.HOURS Constant : public static final java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit.DAYS Field : static final long java.util.concurrent.TimeUnit.C0 Field : static final long java.util.concurrent.TimeUnit.C1 Field : static final long java.util.concurrent.TimeUnit.C2 Field : static final long java.util.concurrent.TimeUnit.C3 Field : static final long java.util.concurrent.TimeUnit.C4 Field : static final long java.util.concurrent.TimeUnit.C5 Field : static final long java.util.concurrent.TimeUnit.C6 Field : static final long java.util.concurrent.TimeUnit.MAX Field : private static final java.util.concurrent.TimeUnit [ ] java.util.concurrent.TimeUnit . [ synthetic ] Constructor : private java.util.concurrent.TimeUnit ( ) Constructor : java.util.concurrent.TimeUnit ( java.lang.String , int , java.util.concurrent.TimeUnit ) [ synthetic ] Method : public static java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit.valueOf ( java.lang.String ) Method : public static java.util.concurrent.TimeUnit [ ] java.util.concurrent.TimeUnit.values ( ) Method : public void java.util.concurrent.TimeUnit.sleep ( long ) throw java.lang.InterruptedException Method : public long java.util.concurrent.TimeUnit.toNanos ( long ) Method : public long java.util.concurrent.TimeUnit.convert ( long , java.util.concurrent.TimeUnit ) Method : abstract int java.util.concurrent.TimeUnit.excessNanos ( long , long ) Method : public void java.util.concurrent.TimeUnit.timedJoin ( java.lang.Thread , long ) throw java.lang.InterruptedException Method : public void java.util.concurrent.TimeUnit.timedWait ( java.lang.Object , long ) throw java.lang.InterruptedException Method : public long java.util.concurrent.TimeUnit.toDays ( long ) Method : public long java.util.concurrent.TimeUnit.toHours ( long ) Method : public long java.util.concurrent.TimeUnit.toMicros ( long ) Method : public long java.util.concurrent.TimeUnit.toMillis ( long ) Method : public long java.util.concurrent.TimeUnit.toMinutes ( long ) Method : public long java.util.concurrent.TimeUnit.toSeconds ( long ) Method : static long java.util.concurrent.TimeUnit.x ( long , long , long )