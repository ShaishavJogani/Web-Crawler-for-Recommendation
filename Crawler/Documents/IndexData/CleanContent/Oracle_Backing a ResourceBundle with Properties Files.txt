This section step sample program name PropertiesDemo . 1 . Create Default Properties File A property file simple text file . You create maintain property file text editor . You always create default property file . The name file begin base name ResourceBundle end .properties suffix . In PropertiesDemo program base name LabelsBundle . Therefore default property file call LabelsBundle.properties . This file contain following line : # This default LabelsBundle.properties file s1 = computer s2 = disk s3 = monitor s4 = keyboard Note precede file comment line begin pound sign ( # ) . The line contain key-value pair . The key left side equal sign value right . For instance , s2 key correspond value disk . The key arbitrary . We could call s2 something else , like msg5 diskID . Once define , however , key change reference source code . The value may change . In fact , localizers create new property file accommodate additional language , translate value various language . 2 . Create Additional Properties Files Needed To support additional Locale , localizers create new property file contain translated value . No change source code require , program reference key , value . For example , add support German language , localizers would translate value LabelsBundle.properties place file name LabelsBundle_de.properties . Notice name file , like default file , begin base name LabelsBundle end .properties suffix . However , since file intend specific Locale , base name follow language code ( de ) . The content LabelsBundle_de.properties follow : # This LabelsBundle_de.properties file s1 = Computer s2 = Platte s3 = Monitor s4 = Tastatur The PropertiesDemo sample program ship three property file : LabelsBundle.properties LabelsBundle_de.properties LabelsBundle_fr.properties 3 . Specify Locale The PropertiesDemo program create Locale object follow : Locale [ ] supportedLocales = { Locale.FRENCH , Locale.GERMAN , Locale.ENGLISH } ; These Locale object match property file create previous two step . For example , Locale.FRENCH object correspond LabelsBundle_fr.properties file . The Locale.ENGLISH matching LabelsBundle_en.properties file , default file use . 4 . Create ResourceBundle This step show Locale , property file , ResourceBundle relate . To create ResourceBundle , invoke getBundlemethod , specify base name Locale : ResourceBundle label = ResourceBundle.getBundle ( `` LabelsBundle '' , currentLocale ) ; The getBundle method first look class file match base name Locale . If ca n't find class file , check property file . In PropertiesDemo program 're back ResourceBundle property file instead class file . When getBundle method locate correct property file , return PropertyResourceBundle object contain key-value pair property file . 5 . Fetch Localized Text To retrieve translated value ResourceBundle , invoke getString method follow : String value = labels.getString ( key ) ; The String return getString corresponds key specify . The String proper language , provide property file exists specified Locale . 6 . Iterate All Keys This step optional . When debug program , might want fetch value key ResourceBundle . The getKeys method return Enumeration key ResourceBundle . You iterate Enumeration fetch value getString method . The following line code , PropertiesDemo program , show : ResourceBundle label = ResourceBundle.getBundle ( `` LabelsBundle '' , currentLocale ) ; Enumeration bundleKeys = labels.getKeys ( ) ; ( bundleKeys.hasMoreElements ( ) ) { String key = ( String ) bundleKeys.nextElement ( ) ; String value = labels.getString ( key ) ; System.out.println ( `` key = `` + key + `` , `` + `` value = `` + value ) ; } 7 . Run Demo Program Running PropertiesDemo program generate following output . The first three line show value return getString various Locale object . The program display last four line iterate key getKeys method . Locale = fr , key = s2 , value = Disque dur Locale = de , key = s2 , value = Platte Locale = en , key = s2 , value = disk key = s4 , value = Clavier key = s3 , value = Moniteur key = s2 , value = Disque dur key = s1 , value = Ordinateur