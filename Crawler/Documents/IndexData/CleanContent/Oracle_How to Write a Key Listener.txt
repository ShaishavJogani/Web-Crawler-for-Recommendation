Key event indicate user type keyboard . Specifically , key event fire component keyboard focus user press release keyboard key . For detail information focus , see How Use Focus Subsystem . Note : To define special reaction particular key , use key binding instead key listener . For information , see How Use Key Bindings . Notifications send two basic kind key event : The typing Unicode character The pressing releasing key keyboard The first kind event call key-typed event . The second kind either key-pressed key-released event . In general , react key-typed event unless need know user press key correspond character . For example , know user type Unicode character â whether press one key 'a ' press several key sequence â handle key-typed event . On hand , know user press F1 key , whether user press '3 ' key number pad , handle key-pressed event . Note : To fire keyboard event , component must keyboard focus . To make component get keyboard focus , follow step : Make sure component 's isFocusable method return true . This state allow component receive focus . For example , enable keyboard focus JLabel component call setFocusable ( true ) method label . Make sure component request focus appropriate . For custom component , implement mouse listener call requestFocusInWindow method component click . Version note : The focus subsystem consume focus traversal key , Tab Shift Tab . If need prevent focus traversal key consume , call component.setFocusTraversalKeysEnabled ( false ) component fire key event . Your program must handle focus traversal . Alternatively , use KeyEventDispatcher class pre-listen key event . The focus page detail information focus subsystem . You obtain detailed information particular key-pressed event . For example , query key-pressed event determine fire action key . Examples action key include Copy , Paste , Page Up , Undo , arrow function key . You also query key-pressed key-released event determine location key fire event . Most key event fire standard keyboard , event key , Shift , information whether user press Shift key left right side keyboard . Likewise , number '2 ' type either standard keyboard number pad . For key-typed event obtain key character value well modifier use . Note : You rely key character value return getKeyChar unless involve key-typed event . The following example demonstrate key event . It consist text field type , follow text area display message every time text field fire key event . A button bottom window let clear text field text area . Try : Click Launch button run KeyEventDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Type lowercase 'a ' press release A key keyboard . The text field fire three event : key-pressed event , key-typed event , key-released event . Note key-typed event n't key code information , key-pressed key-released event n't key character information . None event far modifier action key key location , report key-pressed key-released event , likely standard . Press Clear button . You might want following step . Press release Shift key . The text field fire two event : key-pressed key-released . The text field n't fire key-typed event Shift , , n't correspond character . Type uppercase 'A ' press Shift A key . You 'll see following event , although perhaps order : key-pressed ( Shift ) , key-pressed ( A ) , key type ( 'A ' ) , key-released ( A ) , key-released ( Shift ) . Note Shift list modifier key key-typed key-pressed event . Type uppercase 'A ' press release Caps Lock key , press A key . You see following event : key-pressed ( Caps Lock ) , key-pressed ( A ) , key type ( 'A ' ) , key-released ( A ) . Note Caps Lock list modifier key . Press Tab key . No Tab key-pressed key-released event receive key event listener . This focus subsystem consume focus traversal key , Tab Shift Tab . Press Tab twice return focus text area . Press function key , F3 . You 'll see function key action key . Press left Shift key , follow right Shift key . The key-pressed key-released event indicate Shift key type . Press Num Lock key keyboard number pad . As Caps Lock , key-pressed event , key-released event . Press '2 ' key number pad . You see key-pressed , key-typed , key-released event number '2 ' . Press '2 ' key standard keyboard . Again , see three event message . The key-typed event number 2 key identical . But key-pressed key-released event indicate different key code different key location . Press Num Lock key . A key-released event fire . You find example 's code KeyEventDemo.java . Here demo 's key event handle code : public class KeyEventDemo ... implement KeyListener ... { ... //where initialization occur : typingArea = new JTextField ( 20 ) ; typingArea.addKeyListener ( ) ; //Uncomment wish turn focus //traversal . The focus subsystem consume //focus traversal key , Tab Shift Tab . //If uncomment following line code , //disables focus traversal Tab event //become available key event listener . //typingArea.setFocusTraversalKeysEnabled ( false ) ; ... /** Handle key type event text field . */ public void keyTyped ( KeyEvent e ) { displayInfo ( e , `` KEY TYPED : `` ) ; } /** Handle key-pressed event text field . */ public void keyPressed ( KeyEvent e ) { displayInfo ( e , `` KEY PRESSED : `` ) ; } /** Handle key-released event text field . */ public void keyReleased ( KeyEvent e ) { displayInfo ( e , `` KEY RELEASED : `` ) ; } ... private void displayInfo ( KeyEvent e , String keyStatus ) { //You rely key char event //is key type event . int id = e.getID ( ) ; String keyString ; ( id == KeyEvent.KEY_TYPED ) { char c = e.getKeyChar ( ) ; keyString = `` key character = ' '' + c + `` ' '' ; } else { int keyCode = e.getKeyCode ( ) ; keyString = `` key code = `` + keyCode + `` ( `` + KeyEvent.getKeyText ( keyCode ) + `` ) '' ; } int modifiersEx = e.getModifiersEx ( ) ; String modString = `` extended modifier = `` + modifiersEx ; String tmpString = KeyEvent.getModifiersExText ( modifiersEx ) ; ( tmpString.length ( ) > 0 ) { modString += `` ( `` + tmpString + `` ) '' ; } else { modString += `` ( extend modifier ) '' ; } String actionString = `` action key ? `` ; ( e.isActionKey ( ) ) { actionString += `` YES '' ; } else { actionString += `` NO '' ; } String locationString = `` key location : `` ; int location = e.getKeyLocation ( ) ; ( location == KeyEvent.KEY_LOCATION_STANDARD ) { locationString += `` standard '' ; } else ( location == KeyEvent.KEY_LOCATION_LEFT ) { locationString += `` left '' ; } else ( location == KeyEvent.KEY_LOCATION_RIGHT ) { locationString += `` right '' ; } else ( location == KeyEvent.KEY_LOCATION_NUMPAD ) { locationString += `` numpad '' ; } else { // ( location == KeyEvent.KEY_LOCATION_UNKNOWN ) locationString += `` unknown '' ; } ... //Display information KeyEvent ... } } The Key Listener API The KeyListener Interface The corresponding adapter class KeyAdapter . Method Purpose keyTyped ( KeyEvent ) Called user type Unicode character listened-to component . keyPressed ( KeyEvent ) Called user press key listened-to component focus . keyReleased ( KeyEvent ) Called user release key listened-to component focus . The KeyEvent Class The KeyEvent class inherit many useful method InputEvent class , getModifiersEx , couple useful method ComponentEvent AWTEvent class . See InputEvent Class table mouse listener page complete list . Method Purpose int getKeyChar ( ) Obtains Unicode character associate event . Only rely value key-typed event . int getKeyCode ( ) Obtains key code associate event . The key code identify particular key keyboard user press release . The KeyEvent class define many key code constant commonly see key . For example , VK_A specify key label A , VK_ESCAPE specify Escape key . String getKeyText ( int ) String getKeyModifiersText ( int ) Return text description event 's key code modifier key , respectively . int getModifiersEx ( ) String getModifiersExText ( int modifier ) Return extended modifier mask event . There method inherit InputEvent class . Extended modifier represent state modal key . The getModifiersExText method return string describe extend modifier key mouse button . Since getModifiersEx getModifiersExText method provide information key event , prefer getKeyText getKeyModifiersText method . boolean isActionKey ( ) Returns true key fire event action key . Examples action key include Cut , Copy , Paste , Page Up , Caps Lock , arrow function key . This information valid key-pressed key-released event . int getKeyLocation ( ) Returns location key fire event . This provide way distinguish key occur keyboard , two shift key , example . The possible value KEY_LOCATION_STANDARD , KEY_LOCATION_LEFT , KEY_LOCATION_RIGHT , KEY_LOCATION_NUMPAD , KEY_LOCATION_UNKNOWN . This method always return KEY_LOCATION_UNKNOWN key-typed event . Examples Use Key Listeners The follow table list example use key listener . Example Where Described Notes KeyEventDemo This section Reports key event occur text field demonstrate circumstance key event fire .