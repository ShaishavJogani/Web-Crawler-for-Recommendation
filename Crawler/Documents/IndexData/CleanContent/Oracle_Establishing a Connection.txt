First , need establish connection data source want use . A data source DBMS , legacy file system , source data corresponding JDBC driver . Typically , JDBC application connects target data source use one two class : DriverManager : This fully implemented class connect application data source , specify database URL . When class first attempt establish connection , automatically load JDBC 4.0 driver find within class path . Note application must manually load JDBC driver prior version 4.0 . DataSource : This interface prefer DriverManager allow detail underlie data source transparent application . A DataSource object 's property set represent particular data source . See Connecting DataSource Objects information . For information develop application DataSource class , see late The Java EE Tutorial . Note : The sample tutorial use DriverManager class instead DataSource class easy use sample require feature DataSource class . This page cover following topic : Using DriverManager Class Specifying Database Connection URLs Using DriverManager Class Connecting DBMS DriverManager class involve call method DriverManager.getConnection . The following method , JDBCTutorialUtilities.getConnection , establish database connection : public Connection getConnection ( ) throw SQLException { Connection conn = null ; Properties connectionProps = new Properties ( ) ; connectionProps.put ( `` user '' , this.userName ) ; connectionProps.put ( `` password '' , this.password ) ; ( this.dbms.equals ( `` mysql '' ) ) { conn = DriverManager.getConnection ( `` jdbc : '' + this.dbms + `` : // '' + this.serverName + `` : '' + this.portNumber + `` / '' , connectionProps ) ; } else ( this.dbms.equals ( `` derby '' ) ) { conn = DriverManager.getConnection ( `` jdbc : '' + this.dbms + `` : '' + this.dbName + `` ; create=true '' , connectionProps ) ; } System.out.println ( `` Connected database '' ) ; return conn ; } The method DriverManager.getConnection establish database connection . This method require database URL , vary depend DBMS . The following example database URLs : MySQL : jdbc : mysql : //localhost:3306/ , localhost name server host database , 3306 port number Java DB : jdbc : derby : testdb ; create=true , testdb name database connect , create=true instructs DBMS create database . Note : This URL establish database connection Java DB Embedded Driver . Java DB also include Network Client Driver , use different URL . This method specify user name password require access DBMS Properties object . Note : Typically , database URL , also specify name exist database want connect . For example , URL jdbc : mysql : //localhost:3306/mysql represent database URL MySQL database name mysql . The sample tutorial use URL specify specific database sample create new database . In previous version JDBC , obtain connection , first initialize JDBC driver call method Class.forName . This method require object type java.sql.Driver . Each JDBC driver contain one class implement interface java.sql.Driver . The driver Java DB org.apache.derby.jdbc.EmbeddedDriver org.apache.derby.jdbc.ClientDriver , one MySQL Connector/J com.mysql.jdbc.Driver . See documentation DBMS driver obtain name class implement interface java.sql.Driver . Any JDBC 4.0 driver find class path automatically load . ( However , must manually load driver prior JDBC 4.0 method Class.forName . ) The method return Connection object , represent connection DBMS specific database . Query database object . Specifying Database Connection URLs A database connection URL string DBMS JDBC driver use connect database . It contain information search database , name database connect , configuration property . The exact syntax database connection URL specify DBMS . Java DB Database Connection URLs The following database connection URL syntax Java DB : jdbc : derby : [ subsubprotocol : ] [ databaseName ] [ ; attribute=value ] * subsubprotocol specifies Java DB search database , either directory , memory , class path , JAR file . It typically omit . databaseName name database connect . attribute=value represent optional , semicolon-separated list attribute . These attribute enable instruct Java DB perform various task , include following : Create database specify connection URL . Encrypt database specify connection URL . Specify directory store logging trace information . Specify user name password connect database . See Java DB Developer 's Guide Java DB Reference Manual Java DB Technical Documentation information . MySQL Connector/J Database URL The following database connection URL syntax MySQL Connector/J : jdbc : mysql : // [ host ] [ , failoverhost ... ] [ : port ] / [ database ] [ ? propertyName1 ] [ =propertyValue1 ] [ & propertyName2 ] [ =propertyValue2 ] ... host : port host name port number computer host database . If specify , default value host port 127.0.0.1 3306 , respectively . database name database connect . If specify , connection make default database . failover name standby database ( MySQL Connector/J support failover ) . propertyName=propertyValue represent optional , ampersand-separated list property . These attribute enable instruct MySQL Connector/J perform various task . See MySQL Reference Manual information .