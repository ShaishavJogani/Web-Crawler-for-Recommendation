Some method previously discuss , delete , work file , link directory . But list directory top file system ? How list content directory create directory ? This section cover following functionality specific directory : Listing File System 's Root Directories Creating Directory Creating Temporary Directory Listing Directory 's Contents Filtering Directory Listing By Using Globbing Writing Your Own Directory Filter Listing File System 's Root Directories You list root directory file system use FileSystem.getRootDirectories method . This method return Iterable , enable use enhanced statement iterate root directory . The following code snippet print root directory default file system : Iterable < Path > dirs = FileSystems.getDefault ( ) .getRootDirectories ( ) ; ( Path name : dirs ) { System.err.println ( name ) ; } Creating Directory You create new directory use createDirectory ( Path , FileAttribute < ? > ) method . If n't specify FileAttributes , new directory default attribute . For example : Path dir = ... ; Files.createDirectory ( path ) ; The following code snippet create new directory POSIX file system specific permission : Set < PosixFilePermission > perm = PosixFilePermissions.fromString ( `` rwxr-x -- - '' ) ; FileAttribute < Set < PosixFilePermission > > attr = PosixFilePermissions.asFileAttribute ( perm ) ; Files.createDirectory ( file , attr ) ; To create directory several level deep one parent directory might yet exist , use convenience method , createDirectories ( Path , FileAttribute < ? > ) . As createDirectory ( Path , FileAttribute < ? > ) method , specify optional set initial file attribute . The following code snippet use default attribute : Files.createDirectories ( Paths.get ( `` foo/bar/test '' ) ) ; The directory create , need , top . In foo/bar/test example , foo directory exist , create . Next , bar directory create , need , , finally , test directory create . It possible method fail create , , parent directory . Creating Temporary Directory You create temporary directory use one createTempDirectory method : createTempDirectory ( Path , String , FileAttribute < ? > ... ) createTempDirectory ( String , FileAttribute < ? > ... ) The first method allow code specify location temporary directory second method create new directory default temporary-fle directory . Listing Directory 's Contents You list content directory use newDirectoryStream ( Path ) method . This method return object implement DirectoryStream interface . The class implement DirectoryStream interface also implement Iterable , iterate directory stream , read object . This approach scale well large directory . Remember : The returned DirectoryStream stream . If use try-with-resources statement , n't forget close stream finally block . The try-with-resources statement take care . The following code snippet show print content directory : Path dir = ... ; try ( DirectoryStream < Path > stream = Files.newDirectoryStream ( dir ) ) { ( Path file : stream ) { System.out.println ( file.getFileName ( ) ) ; } } catch ( IOException | DirectoryIteratorException x ) { // IOException never throw iteration . // In snippet , throw newDirectoryStream . System.err.println ( x ) ; } The Path object return iterator name entry resolve directory . So , list content /tmp directory , entry return form /tmp/a , /tmp/b , . This method return entire content directory : file , link , subdirectory , hidden file . If want selective content retrieve , use one newDirectoryStream method , describe later page . Note exception directory iteration DirectoryIteratorException throw IOException cause . Iterator method throw exception exception . Filtering Directory Listing By Using Globbing If want fetch file subdirectory name match particular pattern , use newDirectoryStream ( Path , String ) method , provide built-in glob filter . If familiar glob syntax , see What Is Glob ? For example , following code snippet list file relate Java : .class , .java , .jar file . : Path dir = ... ; try ( DirectoryStream < Path > stream = Files.newDirectoryStream ( dir , `` * . { java , class , jar } '' ) ) { ( Path entry : stream ) { System.out.println ( entry.getFileName ( ) ) ; } } catch ( IOException x ) { // IOException never throw iteration . // In snippet , // throw newDirectoryStream . System.err.println ( x ) ; } Writing Your Own Directory Filter Perhaps want filter content directory base condition pattern matching . You create filter implement DirectoryStream.Filter < T > interface . This interface consist one method , accept , determine whether file fulfill search requirement . For example , following code snippet implement filter retrieve directory : DirectoryStream.Filter < Path > filter = newDirectoryStream.Filter < Path > ( ) { public boolean accept ( Path file ) throw IOException { try { return ( Files.isDirectory ( path ) ) ; } catch ( IOException x ) { // Failed determine 's directory . System.err.println ( x ) ; return false ; } } } ; Once filter create , invoke use newDirectoryStream ( Path , DirectoryStream.Filter < ? super Path > ) method . The following code snippet use isDirectory filter print directory 's subdirectory standard output : Path dir = ... ; try ( DirectoryStream < Path > stream = Files.newDirectoryStream ( dir , filter ) ) { ( Path entry : stream ) { System.out.println ( entry.getFileName ( ) ) ; } } catch ( IOException x ) { System.err.println ( x ) ; } This method use filter single directory . However , want find subdirectory file tree , would use mechanism Walking File Tree .