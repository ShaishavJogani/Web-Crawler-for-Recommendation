As describe Generics , Inheritance , Subtypes , generic class interface relate merely relationship type . However , use wildcards create relationship generic class interface . Given follow two regular ( non-generic ) class : class A { /* ... */ } class B extend A { /* ... */ } It would reasonable write following code : B b = new B ( ) ; A = b ; This example show inheritance regular class follow rule subtyping : class B subtype class A B extend A . This rule apply generic type : List < B > lb = new ArrayList < > ( ) ; List < A > la = lb ; // compile-time error Given Integer subtype Number , relationship List < Integer > List < Number > ? The common parent List < ? > . Although Integer subtype Number , List < Integer > subtype List < Number > , fact , two type relate . The common parent List < Number > List < Integer > List < ? > . In order create relationship class code access Number 's method List < Integer > 's element , use upper bound wildcard : List < ? extends Integer > intList = new ArrayList < > ( ) ; List < ? extends Number > numList = intList ; // OK. List < ? extends Integer > subtype List < ? extends Number > Because Integer subtype Number , numList list Number object , relationship exist intList ( list Integer object ) numList . The following diagram show relationship several List class declare upper low bound wildcards . A hierarchy several generic List class declaration . The Guidelines Wildcard Use section information ramification use upper low bound wildcards .