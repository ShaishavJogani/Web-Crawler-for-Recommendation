Deadlock describe situation two thread block forever , wait . Here 's example . Alphonse Gaston friend , great believer courtesy . A strict rule courtesy bow friend , must remain bowed friend chance return bow . Unfortunately , rule account possibility two friend might bow time . This example application , Deadlock , model possibility : public class Deadlock { static class Friend { private final String name ; public Friend ( String name ) { this.name = name ; } public String getName ( ) { return this.name ; } public synchronize void bow ( Friend bower ) { System.out.format ( `` % : % '' + `` bow ! % n '' , this.name , bower.getName ( ) ) ; bower.bowBack ( ) ; } public synchronize void bowBack ( Friend bower ) { System.out.format ( `` % : % '' + `` bow back ! % n '' , this.name , bower.getName ( ) ) ; } } public static void main ( String [ ] args ) { final Friend alphonse = new Friend ( `` Alphonse '' ) ; final Friend gaston = new Friend ( `` Gaston '' ) ; new Thread ( new Runnable ( ) { public void run ( ) { alphonse.bow ( gaston ) ; } } ) .start ( ) ; new Thread ( new Runnable ( ) { public void run ( ) { gaston.bow ( alphonse ) ; } } ) .start ( ) ; } } When Deadlock run , 's extremely likely thread block attempt invoke bowBack . Neither block ever end , thread wait exit bow .