This section explain special type MBean , call MXBeans . An MXBean type MBean reference predefined set data type . In way , sure MBean usable client , include remote client , without requirement client access model-specific class represent type MBeans . MXBeans provide convenient way bundle related value together , without require client specially configure handle bundle . In way standard MBeans , MXBean define write Java interface call SomethingMXBean Java class implement interface . However , unlike standard MBeans , MXBeans require Java class call Something . Every method interface define either attribute operation MXBean . The annotation @ MXBean also use annotate Java interface , instead require interface 's name follow MXBean suffix . MXBeans exist Java 2 Platform , Standard Edition ( J2SE ) 5.0 software , package java.lang.management . However , user define MXBeans , addition standard set define java.lang.management . The main idea behind MXBeans type java.lang.management.MemoryUsage reference MXBean interface , java.lang.management.MemoryMXBean case , map standard set type , so-called Open Types define package javax.management.openmbean . The exact mapping rule appear MXBean specification . However , general principle simple type int String remain unchanged , complex type MemoryUsage get map standard type CompositeDataSupport . The MXBean example consist following file , find jmx_examples.zip : QueueSamplerMXBean interface QueueSampler class implement MXBean interface QueueSample Java type return getQueueSample ( ) method MXBean interface Main , program set run example The MXBean example use class perform following action : Defines simple MXBean manage resource type Queue < String > Declares getter , getQueueSample , MXBean take snapshot queue invoked return Java class QueueSample bundle follow value together : The time snapshot take The queue size The head queue give time Registers MXBean MBean server MXBean Interface The following code show example QueueSamplerMXBean MXBean interface : package com.example ; public interface QueueSamplerMXBean { public QueueSample getQueueSample ( ) ; public void clearQueue ( ) ; } Note declare MXBean interface exactly way declare standard MBean interface . The QueueSamplerMXBean interface declare getter , getQueueSample operation , clearQueue . Defining MXBean Operations The MXBean operation declare QueueSampler example class , follow : package com.example ; import java.util.Date ; import java.util.Queue ; public class QueueSampler implement QueueSamplerMXBean { private Queue < String > queue ; public QueueSampler ( Queue < String > queue ) { this.queue = queue ; } public QueueSample getQueueSample ( ) { synchronize ( queue ) { return new QueueSample ( new Date ( ) , queue.size ( ) , queue.peek ( ) ) ; } } public void clearQueue ( ) { synchronize ( queue ) { queue.clear ( ) ; } } } QueueSampler define getQueueSample ( ) getter clearQueue ( ) operation declare MXBean interface . The getQueueSample ( ) operation return instance QueueSample Java type create value return java.util.Queue method peek ( ) size ( ) , instance java.util.Date . Defining Java Type Returned MXBean Interface The QueueSample instance return QueueSampler define QueueSample class , follow : package com.example ; import java.beans.ConstructorProperties ; import java.util.Date ; public class QueueSample { private final Date date ; private final int size ; private final String head ; @ ConstructorProperties ( { `` date '' , `` size '' , `` head '' } ) public QueueSample ( Date date , int size , String head ) { this.date = date ; this.size = size ; this.head = head ; } public Date getDate ( ) { return date ; } public int getSize ( ) { return size ; } public String getHead ( ) { return head ; } } In QueueSample class , MXBean framework call getters QueueSample convert give instance CompositeData instance use @ ConstructorProperties annotation reconstruct QueueSample instance CompositeData instance . Creating Registering MXBean MBean Server So far , follow define : MXBean interface class implement , well Java type return . Next , MXBean must create register MBean server . These action perform Main example JMX agent use standard MBean example , relevant code show Standard MBean lesson . package com.example ; import java.lang.management.ManagementFactory ; import java.util.Queue ; import java.util.concurrent.ArrayBlockingQueue ; import javax.management.MBeanServer ; import javax.management.ObjectName ; public class Main { public static void main ( String [ ] args ) throw Exception { MBeanServer mbs = ManagementFactory.getPlatformMBeanServer ( ) ; ... ObjectName mxbeanName = new ObjectName ( `` com.example : type=QueueSampler '' ) ; Queue < String > queue = new ArrayBlockingQueue < String > ( 10 ) ; queue.add ( `` Request-1 '' ) ; queue.add ( `` Request-2 '' ) ; queue.add ( `` Request-3 '' ) ; QueueSampler mxbean = new QueueSampler ( queue ) ; mbs.registerMBean ( mxbean , mxbeanName ) ; System.out.println ( `` Waiting ... '' ) ; Thread.sleep ( Long.MAX_VALUE ) ; } } The Main class perform following action : Gets platform MBean server . Creates object name MXBean QueueSampler . Creates Queue instance QueueSampler MXBean process . Feeds Queue instance newly create QueueSampler MXBean . Registers MXBean MBean server exactly way standard MBean . Running MXBean Example The MXBean example use class jmx_examples.zip bundle use Standard MBeans section . This example require version 6 Java SE platform . To run MXBeans example follow step : If already , save jmx_examples.zip work_dir directory . Unzip bundle sample class use following command terminal window . unzip jmx_examples.zip Compile example Java class within work_dir directory . javac com/example/*.java Start Main application . A confirmation Main wait something happen generate . java com.example.Main Start JConsole different terminal window machine . The New Connection dialog box display , present list run JMX agent connect . jconsole In New Connection dialog box , select com.example.Main list click Connect . A summary platform 's current activity display . Click MBeans tab . This panel show MBeans currently register MBean server . In left frame , expand com.example node MBean tree . You see example MBean QueueSampler create register Main . If click QueueSampler , see associate Attributes Operations node MBean tree . Expand Attributes node . You see QueueSample attribute appear right pane , value javax.management.openmbean.CompositeDataSupport . Double-click CompositeDataSupport value . You see QueueSample value date , head , size MXBean framework convert QueueSample instance CompositeData . If define QueueSampler standard MBean rather MXBean , JConsole would find QueueSample class would class path . If QueueSampler standard MBean , would receive ClassNotFoundException message retrieve QueueSample attribute value . The fact JConsole find QueueSampler demonstrate usefulness use MXBeans connect JMX agent generic JMX client JConsole . Expand Operations node . A button invoke clearQueue operation display . Click clearQueue button . A confirmation method invoke successfully display . Expand Attributes node , double click CompositeDataSupport value . The head size value reset . To close JConsole , select Connection - > Exit .