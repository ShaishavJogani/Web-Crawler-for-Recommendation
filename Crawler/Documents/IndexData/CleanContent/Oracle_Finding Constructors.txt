A constructor declaration include name , modifier , parameter , list throwable exception . The java.lang.reflect.Constructor class provide way obtain information . The ConstructorSift example illustrate search class 's declared constructor one parameter give type . import java.lang.reflect.Constructor ; import java.lang.reflect.Type ; import static java.lang.System.out ; public class ConstructorSift { public static void main ( String ... args ) { try { Class < ? > cArg = Class.forName ( args [ 1 ] ) ; Class < ? > c = Class.forName ( args [ 0 ] ) ; Constructor [ ] allConstructors = c.getDeclaredConstructors ( ) ; ( Constructor ctor : allConstructors ) { Class < ? > [ ] pType = ctor.getParameterTypes ( ) ; ( int = 0 ; < pType.length ; i++ ) { ( pType [ ] .equals ( cArg ) ) { out.format ( `` % % n '' , ctor.toGenericString ( ) ) ; Type [ ] gpType = ctor.getGenericParameterTypes ( ) ; ( int j = 0 ; j < gpType.length ; j++ ) { char ch = ( pType [ j ] .equals ( cArg ) ? '* ' : ' ' ) ; out.format ( `` % 7c % [ % ] : % % n '' , ch , `` GenericParameterType '' , j , gpType [ j ] ) ; } break ; } } } // production code handle exception gracefully } catch ( ClassNotFoundException x ) { x.printStackTrace ( ) ; } } } Method.getGenericParameterTypes ( ) consult Signature Attribute class file 's present . If attribute n't available , fall back Method.getParameterType ( ) change introduction generic . The method name getGenericFoo ( ) value Foo reflection implement similarly . The syntax returned value Method.get*Types ( ) describe Class.getName ( ) . Here output constructor java.util.Formatter Locale argument . $ java ConstructorSift java.util.Formatter java.util.Locale public java.util.Formatter ( java.io.OutputStream , java.lang.String , java.util.Locale ) throw java.io.UnsupportedEncodingException GenericParameterType [ 0 ] : class java.io.OutputStream GenericParameterType [ 1 ] : class java.lang.String *GenericParameterType [ 2 ] : class java.util.Locale public java.util.Formatter ( java.lang.String , java.lang.String , java.util.Locale ) throw java.io.FileNotFoundException , java.io.UnsupportedEncodingException GenericParameterType [ 0 ] : class java.lang.String GenericParameterType [ 1 ] : class java.lang.String *GenericParameterType [ 2 ] : class java.util.Locale public java.util.Formatter ( java.lang.Appendable , java.util.Locale ) GenericParameterType [ 0 ] : interface java.lang.Appendable *GenericParameterType [ 1 ] : class java.util.Locale public java.util.Formatter ( java.util.Locale ) *GenericParameterType [ 0 ] : class java.util.Locale public java.util.Formatter ( java.io.File , java.lang.String , java.util.Locale ) throw java.io.FileNotFoundException , java.io.UnsupportedEncodingException GenericParameterType [ 0 ] : class java.io.File GenericParameterType [ 1 ] : class java.lang.String *GenericParameterType [ 2 ] : class java.util.Locale The next example output illustrate search parameter type char [ ] String . $ java ConstructorSift java.lang.String `` [ C '' java.lang.String ( int , int , char [ ] ) GenericParameterType [ 0 ] : int GenericParameterType [ 1 ] : int *GenericParameterType [ 2 ] : class [ C public java.lang.String ( char [ ] , int , int ) *GenericParameterType [ 0 ] : class [ C GenericParameterType [ 1 ] : int GenericParameterType [ 2 ] : int public java.lang.String ( char [ ] ) *GenericParameterType [ 0 ] : class [ C The syntax express array reference primitive type acceptable Class.forName ( ) describe Class.getName ( ) . Note first list constructor package-private , public . It return example code use Class.getDeclaredConstructors ( ) rather Class.getConstructors ( ) , return public constructor . This example show search argument variable arity ( variable number parameter ) require use array syntax : $ java ConstructorSift java.lang.ProcessBuilder `` [ Ljava.lang.String ; '' public java.lang.ProcessBuilder ( java.lang.String [ ] ) *GenericParameterType [ 0 ] : class [ Ljava.lang.String ; This actual declaration ProcessBuilder constructor source code : public ProcessBuilder ( String ... command ) The parameter represent single-dimension array type java.lang.String . This distinguish parameter explicitly array java.lang.String invoke Constructor.isVarArgs ( ) . The final example report output constructor declare generic parameter type : $ java ConstructorSift java.util.HashMap java.util.Map public java.util.HashMap ( java.util.Map < ? extends K , ? extends V > ) *GenericParameterType [ 0 ] : java.util.Map < ? extends K , ? extends V > Exception type may retrieve constructor similar way method . See MethodSpy example describe Obtaining Method Type Information section detail .