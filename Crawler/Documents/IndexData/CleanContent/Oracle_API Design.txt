In short important section , 'll learn simple guideline allow API interoperate seamlessly APIs follow guideline . In essence , rule define take good `` citizen '' world collection . Parameters If API contain method require collection input , paramount importance declare relevant parameter type one collection interface type . Never use implementation type defeat purpose interface-based Collections Framework , allow collection manipulate without regard implementation detail . Further , always use least-specific type make sense . For example , n't require List Set Collection would . It 's never require List Set input ; correct method depend property one interface . For example , many algorithm provide Java platform require List input depend fact list order . As general rule , however , best type use input general : Collection Map . Caution : Never define ad hoc collection class require object class input . By , 'd lose benefit provide Java Collections Framework . Return Values You afford much flexible return value input parameter . It 's fine return object type implement extend one collection interface . This one interface special-purpose type extend implement one interface . For example , one could imagine image-processing package , call ImageList , return object new class implement List . In addition List operation , ImageList could support application-specific operation seem desirable . For example , might provide indexImage operation return image contain thumbnail image graphic ImageList . It 's critical note even API furnishes ImageList instance output , accept arbitrary Collection ( perhaps List ) instance input . In one sense , return value opposite behavior input parameter : It 's best return specific applicable collection interface rather general . For example , 're sure 'll always return SortedMap , give relevant method return type SortedMap rather Map . SortedMap instance time-consuming build ordinary Map instance also powerful . Given module already invest time build SortedMap , make good sense give user access increased power . Furthermore , user able pass returned object method demand SortedMap , well accept Map . Legacy APIs There currently plenty APIs define ad hoc collection type . While unfortunate , 's fact life , give Collections Framework first two major release Java platform . Suppose one APIs ; 's . If possible , retrofit legacy collection type implement one standard collection interface . Then collection return interoperate smoothly collection-based APIs . If impossible ( example , one preexisting type signatures conflict standard collection interface ) , define adapter class wrap one legacy collection object , allow function standard collection . ( The Adapter class example custom implementation . ) Retrofit API new call follow input guideline accept object standard collection interface , possible . Such call coexist call take legacy collection type . If impossible , provide constructor static factory legacy type take object one standard interface return legacy collection contain element ( mapping ) . Either approach allow user pass arbitrary collection API .