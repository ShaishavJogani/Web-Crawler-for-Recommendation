A WebRowSet object special addition offer capability CachedRowSet object , write XML document also read XML document convert back WebRowSet object . Because XML language disparate enterprise communicate , become standard Web Services communication . As consequence , WebRowSet object fill real need enable Web Services send receive data database form XML document . The following topic cover : Creating Populating WebRowSet Objects Writing Reading WebRowSet Objects XML What Is XML Documents Making Changes WebRowSet Objects The Coffee Break company expand sell coffee online . Users order coffee pound Coffee Break Web site . The price list regularly update get late information company 's database . This section demonstrate send price data XML document WebRowSet object single method call . Creating Populating WebRowSet Objects You create new WebRowSet object default constructor define reference implementation , WebRowSetImpl , show following line code : WebRowSet priceList = new WebRowSetImpl ( ) ; Although priceList object data yet , default property BaseRowSet object . Its SyncProvider object first set RIOptimisticProvider implementation , default disconnect RowSet object . However , WebRowSet implementation reset SyncProvider object RIXMLProvider implementation . You use instance RowSetFactory , create RowSetProvider class , create WebRowSet object . See Using RowSetFactory Interface Using JdbcRowSet Objects information . The Coffee Break headquarters regularly send price list update web site . This information WebRowSet object show one way send late price list XML document . The price list consist data column COF_NAME PRICE table COFFEES . The following code fragment set property need populate priceList object price list data : public void getPriceList ( String username , String password ) { priceList.setCommand ( `` SELECT COF_NAME , PRICE FROM COFFEES '' ) ; priceList.setURL ( `` jdbc : mySubprotocol : myDatabase '' ) ; priceList.setUsername ( username ) ; priceList.setPassword ( password ) ; priceList.execute ( ) ; // ... } At point , addition default property , priceList object contain data COF_NAME PRICE column COFFEES table also metadata two column . Writing Reading WebRowSet Object XML To write WebRowSet object XML document , call method writeXml . To read XML document 's content WebRowSet object , call method readXml . Both method work background , mean everything , except result , invisible . Using writeXml Method The method writeXml write WebRowSet object invoke XML document represent current state . It write XML document stream pass . The stream OutputStream object , FileOutputStream object , Writer object , FileWriter object . If pass method writeXml OutputStream object , write byte , handle type data ; pass Writer object , write character . The following code demonstrate write WebRowSet object priceList XML document FileOutputStream object oStream : java.io.FileOutputStream oStream = new java.io.FileOutputStream ( `` priceList.xml '' ) ; priceList.writeXml ( oStream ) ; The following code write XML document represent priceList FileWriter object writer instead OutputStream object . The FileWriter class convenience class write character file . java.io.FileWriter writer = new java.io.FileWriter ( `` priceList.xml '' ) ; priceList.writeXml ( writer ) ; The two version method writeXml let populate WebRowSet object content ResultSet object write stream . In following line code , method writeXml read content ResultSet object r priceList object write priceList FileOutputStream object oStream XML document . priceList.writeXml ( r , oStream ) ; In next line code , writeXml methodpopulates priceList content r , write XML document FileWriter object instead OutputStream object : priceList.writeXml ( r , writer ) ; Using readXml Method The method readXml parse XML document order construct WebRowSet object XML document describes . Similar method writeXml , pass readXml InputStream object Reader object read XML document . java.io.FileInputStream iStream = new java.io.FileInputStream ( `` priceList.xml '' ) ; priceList.readXml ( iStream ) ; java.io.FileReader reader = new java.io.FileReader ( `` priceList.xml '' ) ; priceList.readXml ( reader ) ; Note read XML description new WebRowSet object WebRowSet object call writeXml method . In scenario , price list information send headquarters Web site , would use new WebRowSet object , show following line code : WebRowSet recipient = new WebRowSetImpl ( ) ; java.io.FileReader reader = new java.io.FileReader ( `` priceList.xml '' ) ; recipient.readXml ( reader ) ; What Is XML Documents RowSet object data contain . They property metadata column well . Therefore , XML document represent WebRowSet object include information addition data . Further , data XML document include current value original value . ( Recall original value value exist immediately recent change data make . These value necessary check correspond value database change , thus create conflict value persistent : new value put RowSet object new value someone else put database . ) The WebRowSet XML Schema , XML document , define XML document represent WebRowSet object contain also format must present . Both sender recipient use schema tell sender write XML document ( represent WebRowSet object ) recipient parse XML document . Because actual writing reading internally implementation method writeXml readXml , , user , need understand WebRowSet XML Schema document . XML document contain element subelements hierarchical structure . The following three main element XML document describe WebRowSet object : Properties Metadata Data Element tag signal beginning end element . For example , < property > tag signal beginning property element , < /properties > tag signal end . The < map/ > tag shorthand way say map subelement ( one subelements property element ) assign value . The following sample XML document use space indentation make easy read , use actual XML document , space mean anything . The next three section show three main element contain WebRowSet priceList object , create sample WebRowSetSample.java . Properties Calling method writeXml priceList object would produce XML document describe priceList . The property section XML document would look like following : < property > < command > select COF_NAME , PRICE COFFEES < /command > < concurrency > 1008 < /concurrency > < datasource > < null/ > < /datasource > < escape-processing > true < /escape-processing > < fetch-direction > 1000 < /fetch-direction > < fetch-size > 0 < /fetch-size > < isolation-level > 2 < /isolation-level > < key-columns > < column > 1 < /column > < /key-columns > < map > < /map > < max-field-size > 0 < /max-field-size > < max-rows > 0 < /max-rows > < query-timeout > 0 < /query-timeout > < read-only > true < /read-only > < rowset-type > ResultSet.TYPE_SCROLL_INSENSITIVE < /rowset-type > < show-deleted > false < /show-deleted > < table-name > COFFEES < /table-name > < url > jdbc : mysql : //localhost:3306/testdb < /url > < sync-provider > < sync-provider-name > com.sun.rowset.providers.RIOptimisticProvider < /sync-provider-name > < sync-provider-vendor > Sun Microsystems Inc. < /sync-provider-vendor > < sync-provider-version > 1.0 < /sync-provider-version > < sync-provider-grade > 2 < /sync-provider-grade > < data-source-lock > 1 < /data-source-lock > < /sync-provider > < /properties > Notice property value . For example , datasource property indicate < datasource/ > tag , shorthand way say < datasource > < /datasource > . No value give url property set . Any connection establish use JDBC URL , DataSource object need set . Also , username password property list must remain secret . Metadata The metadata section XML document describe WebRowSet object contain information column WebRowSet object . The following show section look like WebRowSet object priceList . Because priceList object two column , XML document describe two < column-definition > element . Each < column-definition > element subelements give information column describe . < metadata > < column-count > 2 < /column-count > < column-definition > < column-index > 1 < /column-index > < auto-increment > false < /auto-increment > < case-sensitive > false < /case-sensitive > < currency > false < /currency > < nullable > 0 < /nullable > < sign > false < /signed > < searchable > true < /searchable > < column-display-size > 32 < /column-display-size > < column-label > COF_NAME < /column-label > < column-name > COF_NAME < /column-name > < schema-name > < /schema-name > < column-precision > 32 < /column-precision > < column-scale > 0 < /column-scale > < table-name > coffee < /table-name > < catalog-name > testdb < /catalog-name > < column-type > 12 < /column-type > < column-type-name > VARCHAR < /column-type-name > < /column-definition > < column-definition > < column-index > 2 < /column-index > < auto-increment > false < /auto-increment > < case-sensitive > true < /case-sensitive > < currency > false < /currency > < nullable > 0 < /nullable > < sign > true < /signed > < searchable > true < /searchable > < column-display-size > 12 < /column-display-size > < column-label > PRICE < /column-label > < column-name > PRICE < /column-name > < schema-name > < /schema-name > < column-precision > 10 < /column-precision > < column-scale > 2 < /column-scale > < table-name > coffee < /table-name > < catalog-name > testdb < /catalog-name > < column-type > 3 < /column-type > < column-type-name > DECIMAL < /column-type-name > < /column-definition > < /metadata > From metadata section , see two column row . The first column COF_NAME , hold value type VARCHAR . The second column PRICE , hold value type REAL , . Note column type data type use data source , type Java programming language . To get update value COF_NAME column , use method getString updateString , driver make conversion VARCHAR type , usually . Data The data section give value column row WebRowSet object . If populate priceList object make change , data element XML document look like following . In next section see XML document change modify data priceList object . For row < currentRow > element , priceList two column , < currentRow > element contain two < columnValue > element . < data > < currentRow > < columnValue > Colombian < /columnValue > < columnValue > 7.99 < /columnValue > < /currentRow > < currentRow > < columnValue > Colombian_Decaf < /columnValue > < columnValue > 8.99 < /columnValue > < /currentRow > < currentRow > < columnValue > Espresso < /columnValue > < columnValue > 9.99 < /columnValue > < /currentRow > < currentRow > < columnValue > French_Roast < /columnValue > < columnValue > 8.99 < /columnValue > < /currentRow > < currentRow > < columnValue > French_Roast_Decaf < /columnValue > < columnValue > 9.99 < /columnValue > < /currentRow > < /data > Making Changes WebRowSet Objects You make change WebRowSet object way CachedRowSet object . Unlike CachedRowSet object , however , WebRowSet object keep track update , insertion , deletion writeXml method write current value original value . The three section follow demonstrate making change data show XML document describe WebRowSet object look like change . You anything regard XML document ; change make automatically , writing read XML document . Inserting Rows If owner Coffee Break chain want add new coffee price list , code might look like : priceList.absolute ( 3 ) ; priceList.moveToInsertRow ( ) ; priceList.updateString ( COF_NAME , `` Kona '' ) ; priceList.updateFloat ( PRICE , 8.99f ) ; priceList.insertRow ( ) ; priceList.moveToCurrentRow ( ) ; In reference implementation , insertion make immediately follow current row . In preceding code fragment , current row third row , new row would add third row become new fourth row . To reflect insertion , XML document would following < insertRow > element add third < currentRow > element < data > element . The < insertRow > element look similar following . < insertRow > < columnValue > Kona < /columnValue > < columnValue > 8.99 < /columnValue > < /insertRow > Deleting Rows The owner decide Espresso sell enough remove coffee sell The Coffee Break shop . The owner therefore want delete Espresso price list . Espresso third row priceList object , following line code delete : priceList.absolute ( 3 ) ; priceList.deleteRow ( ) ; The following < deleteRow > element appear second row data section XML document , indicate third row delete . < deleteRow > < columnValue > Espresso < /columnValue > < columnValue > 9.99 < /columnValue > < /deleteRow > Modifying Rows The owner far decide price Colombian coffee expensive want lower $ 6.99 pound . The following code set new price Colombian coffee , first row , $ 6.99 pound : priceList.first ( ) ; priceList.updateFloat ( PRICE , 6.99 ) ; The XML document reflect change < updateRow > element give new value . The value first column change , < updateValue > element second column : < currentRow > < columnValue > Colombian < /columnValue > < columnValue > 7.99 < /columnValue > < updateRow > 6.99 < /updateRow > < /currentRow > At point , insertion row , deletion row , modification row , XML document priceList object would look like following : < data > < insertRow > < columnValue > Kona < /columnValue > < columnValue > 8.99 < /columnValue > < /insertRow > < currentRow > < columnValue > Colombian < /columnValue > < columnValue > 7.99 < /columnValue > < updateRow > 6.99 < /updateRow > < /currentRow > < currentRow > < columnValue > Colombian_Decaf < /columnValue > < columnValue > 8.99 < /columnValue > < /currentRow > < deleteRow > < columnValue > Espresso < /columnValue > < columnValue > 9.99 < /columnValue > < /deleteRow > < currentRow > < columnValue > French_Roast < /columnValue > < columnValue > 8.99 < /columnValue > < /currentRow > < currentRow > < columnValue > French_Roast_Decaf < /columnValue > < columnValue > 9.99 < /columnValue > < /currentRow > < /data > WebRowSet Code Example The sample WebRowSetSample.java demonstrate feature describe page .