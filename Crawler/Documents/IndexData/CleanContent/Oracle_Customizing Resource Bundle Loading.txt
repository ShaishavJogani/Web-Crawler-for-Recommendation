Earlier lesson learn create access object ResourceBundle class . This section extents knowledge explain take advantage ResourceBundle.Control class capability . The ResourceBundle.Control create specify locate instantiate resource bundle . It define set callback method invoke ResourceBundle.getBundle factory method bundle loading process . Unlike ResourceBundle.getBundle method describe early , ResourceBundle.getBundle method define resource bundle use specified base name , default locale specify control . public static final ResourceBundle getBundle ( String baseName , ResourceBundle.Control cont // ... The specify control provide information resource bundle load process . The following sample program call RBControl.java illustrate define search path Chinese locale . 1 . Create property Files . As describe load resource either class property file . These file contain description following locale : RBControl.properties – Global RBControl_zh.properties – Language : Simplified Chinese RBControl_zh_cn.properties – Region : China RBControl_zh_hk.properties – Region : Hong Kong RBControl_zh_tw.properties – Taiwan In example application create new locale Hong Kong region . 2 . Create ResourceBundle instance . As example previous section , application create ResourceBundle instance invoke getBundle method : private static void test ( Locale locale ) { ResourceBundle rb = ResourceBundle.getBundle ( `` RBControl '' , locale , new ResourceBundle.Control ( ) { // ... } ) ; The getBundle method search property file RBControl prefix . However , method contain Control parameter , drive process search Chineese locale . 3 . Invoke getCandidateLocales method The getCandidateLocales method return list Locales object candidate locale base name locale . new ResourceBundle.Control ( ) { @ Override public List < Locale > getCandidateLocales ( String baseName , Locale locale ) { // ... } } The default implementation return list Locale object follow : Locale ( language , country ) . However , method overriden implement follow specific behavior : ( baseName == null ) throw new NullPointerException ( ) ; ( locale.equals ( new Locale ( `` zh '' , `` HK '' ) ) ) { return Arrays.asList ( locale , Locale.TAIWAN , // Locale.CHINESE Locale.ROOT ) ; } else ( locale.equals ( Locale.TAIWAN ) ) { return Arrays.asList ( locale , // Locale.CHINESE Locale.ROOT ) ; } Note , last element sequence candidate locale must root locale . 4 . Call test class Call test class following four different locale : public static void main ( String [ ] args ) { test ( Locale.CHINA ) ; test ( new Locale ( `` zh '' , `` HK '' ) ) ; test ( Locale.TAIWAN ) ; test ( Locale.CANADA ) ; } 5 . Run Sample Program You see program output follow : locale : zh_CN region : China language : Simplified Chinese locale : zh_HK region : Hong Kong language : Traditional Chinese locale : zh_TW region : Taiwan language : Traditional Chinese locale : en_CA region : global language : English Note newly create assign Hong Kong region , specify appropriate property file . Traditional Chinese assign language Taiwan locale . Two interest method ResourceBundle.Control class use RBControl example , deserve mention . The getTimeToLive method use determine long resource bundle exist cache . If time limit resource bundle cache expire , needsReload method invoke determine whether resource bundle need reload .