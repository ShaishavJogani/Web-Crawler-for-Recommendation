In lesson title A GroupLayout Example , GroupLayout use create search dialog box call `` Find . '' The program create dialog box , Find.java , use cross platform ( `` Metal '' ) look feel `` Ocean '' theme : This lesson create dialog box Synth , use external XML file . Here listing SynthDialog.javafile . SynthDialog.java exactly Find.java except initLookAndFeel ( ) method , alter use Synth look feel external file call synthDemo.xml . Here new initLookAndFeel ( ) method : private static void initLookAndFeel ( ) { SynthLookAndFeel lookAndFeel = new SynthLookAndFeel ( ) ; // SynthLookAndFeel load ( ) method throw checked exception // ( java.text.ParseException ) must handle try { lookAndFeel.load ( SynthDialog.class.getResourceAsStream ( `` synthDemo.xml '' ) , SynthDialog.class ) ; UIManager.setLookAndFeel ( lookAndFeel ) ; } catch ( ParseException e ) { System.err.println ( `` Could n't get specify look feel ( `` + lookAndFeel + `` ) , reason . `` ) ; System.err.println ( `` Using default look feel . `` ) ; e.printStackTrace ( ) ; } } The XML File The XML file , synthDemo.xml , begin style bound region . It good practice ensure region without style bound contain something . This style make region paint background opaque color . It also set default font default color . < ! -- Style region use -- > < style id= '' backingStyle '' > < ! -- Make region opaque -- > < opaque value= '' TRUE '' / > < font name= '' Dialog '' size= '' 14 '' / > < state > < color value= '' # D8D987 '' type= '' BACKGROUND '' / > < color value= '' RED '' type= '' FOREGROUND '' / > < /state > < /style > < bind style= '' backingStyle '' type= '' region '' key= '' . * '' / > Notes : 1 . The color definition must inside < state > element . This permit change color depend state . The < state > element backingStyle attribute therefore apply region , irrespective state . If region state , state merge precedence give state definition appear later file . 2 . The font definition inside < state > element font change change state ( many component size depend font , change font could cause component change size unintentionally ) . The next < style > element define text field , paint use image . < style id= '' textfield '' > < inset top= '' 4 '' left= '' 6 '' bottom= '' 4 '' right= '' 6 '' / > < state > < font name= '' Verdana '' size= '' 14 '' / > < color value= '' # D2DFF2 '' type= '' BACKGROUND '' / > < color value= '' # 000000 '' type= '' TEXT_FOREGROUND '' / > < /state > < imagePainter method= '' textFieldBorder '' path= '' images/textfield.png '' sourceInsets= '' 4 6 4 6 '' paintCenter= '' false '' / > < /style > < bind style= '' textfield '' type= '' region '' key= '' TextField '' / > Notes : 1 . The font color definition override definition backingStyle . 2 . The inset sourceInsets give value , coincidence unrelated . 3 . The BACKGROUND color , # D2DFF2 , pale blue—the color background image , textfield.png . 4. paintCenter false see background color . The next < style > element button paint different image , depend button state . When mouse pass button , appearance change . When click ( PRESSED ) image change . < style id= '' button '' > < ! -- Shift text one pixel press -- > < property key= '' Button.textShiftOffset '' type= '' integer '' value= '' 1 '' / > < ! -- set size button -- > < inset top= '' 15 '' left= '' 20 '' bottom= '' 15 '' right= '' 20 '' / > < state > < imagePainter method= '' buttonBackground '' path= '' images/button.png '' sourceInsets= '' 10 10 10 10 '' / > < font name= '' Dialog '' size= '' 16 '' / > < color type= '' TEXT_FOREGROUND '' value= '' # FFFFFF '' / > < /state > < state value= '' PRESSED '' > < imagePainter method= '' buttonBackground '' path= '' images/button_press.png '' sourceInsets= '' 10 10 10 10 '' / > < /state > < state value= '' MOUSE_OVER '' > < imagePainter method= '' buttonBackground '' path= '' images/button_over.png '' sourceInsets= '' 10 10 10 10 '' / > < /state > < /style > < bind style= '' button '' type= '' region '' key= '' Button '' / > Notes : 1 . The font color definition inside < state > element without attribute apply button state . This definition state apply ( < state > element without attribute one ) merge font color definition might take precedence . 2 . The sourceInsets value large enough curved corner button image stretch . 3 . The order PRESSED MOUSE_OVER state important . Since mouse always button press , state apply press button first state define ( PRESSED ) apply . When mouse button press , MOUSE_OVER state applies . If order PRESSED MOUSE_OVER state reverse , PRESSED state image never use . The next < style > element checkboxes paint different icon , depend checkbox state . < style id= '' checkbox '' > < imageIcon id= '' check_off '' path= '' images/checkbox_off.png '' / > < imageIcon id= '' check_on '' path= '' images/checkbox_on.png '' / > < property key= '' CheckBox.icon '' value= '' check_off '' / > < state value= '' SELECTED '' > < property key= '' CheckBox.icon '' value= '' check_on '' / > < /state > < /style > < bind style= '' checkbox '' type= '' region '' key= '' Checkbox '' / > Notes : 1 . You must use < imageIcon > element define icon use . 2 . The < inset > element sourceInsets attribute use icon render fixed size stretch . 3 . The icon use render checkbox icon name CheckBox.icon property . ( see javax/swing/plaf/synth/doc-files/componentProperties.html ) , icon id= '' check_off '' unless checkbox state SELECTED . The synthDemo.xml file construct style present , wrap < synth > < /synth > tag . You open complete file click synthDemo.xml . Try : Click Launch button run SynthDialog example use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index < / > .