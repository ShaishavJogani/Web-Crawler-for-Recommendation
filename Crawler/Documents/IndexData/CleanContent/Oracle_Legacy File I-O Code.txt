Interoperability With Legacy Code Prior Java SE 7 release , java.io.File class mechanism use file I/O , several drawback . Many method n't throw exception fail , impossible obtain useful error message . For example , file deletion fail , program would receive `` delete fail '' would n't know file n't exist , user n't permission , problem . The rename method n't work consistently across platform . There real support symbolic link . More support metadata desire , file permission , file owner , security attribute . Accessing file metadata inefficient . Many File method n't scale . Requesting large directory listing server could result hang . Large directory could also cause memory resource problem , result denial service . It possible write reliable code could recursively walk file tree respond appropriately circular symbolic link . Perhaps legacy code use java.io.File would like take advantage java.nio.file.Path functionality minimal impact code . The java.io.File class provide toPath method , convert old style File instance java.nio.file.Path instance , follow : Path input = file.toPath ( ) ; You take advantage rich feature set available Path class . For example , assume code delete file : file.delete ( ) ; You could modify code use Files.delete method , follow : Path fp = file.toPath ( ) ; Files.delete ( fp ) ; Conversely , Path.toFile method construct java.io.File object Path object . Mapping java.io.File Functionality java.nio.file Because Java implementation file I/O completely re-architected Java SE 7 release , swap one method another method . If want use rich functionality offer java.nio.file package , easy solution use File.toPath method suggest previous section . However , want use approach sufficient need , must rewrite file I/O code . There one-to-one correspondence two APIs , following table give general idea functionality java.io.File API map java.nio.file API tell obtain information . java.io.File Functionality java.nio.file Functionality Tutorial Coverage java.io.File java.nio.file.Path The Path Class java.io.RandomAccessFile The SeekableByteChannel functionality . Random Access Files File.canRead , canWrite , canExecute Files.isReadable , Files.isWritable , Files.isExecutable . On UNIX file system , Managing Metadata ( File File Store Attributes ) package use check nine file permission . Checking File Directory Managing Metadata File.isDirectory ( ) , File.isFile ( ) , File.length ( ) Files.isDirectory ( Path , LinkOption ... ) , Files.isRegularFile ( Path , LinkOption ... ) , Files.size ( Path ) Managing Metadata File.lastModified ( ) File.setLastModified ( long ) Files.getLastModifiedTime ( Path , LinkOption ... ) Files.setLastMOdifiedTime ( Path , FileTime ) Managing Metadata The File method set various attribute : setExecutable , setReadable , setReadOnly , setWritable These method replace Files method setAttribute ( Path , String , Object , LinkOption ... ) . Managing Metadata new File ( parent , `` newfile '' ) parent.resolve ( `` newfile '' ) Path Operations File.renameTo Files.move Moving File Directory File.delete Files.delete Deleting File Directory File.createNewFile Files.createFile Creating Files File.deleteOnExit Replaced DELETE_ON_CLOSE option specify createFile method . Creating Files File.createTempFile Files.createTempFile ( Path , String , FileAttributes < ? > ) , Files.createTempFile ( Path , String , String , FileAttributes < ? > ) Creating Files Creating Writing File Using Stream I/O Reading Writing Files Using Channel I/O File.exists Files.exists Files.notExists Verifying Existence File Directory File.compareTo equal Path.compareTo equal Comparing Two Paths File.getAbsolutePath getAbsoluteFile Path.toAbsolutePath Converting Path File.getCanonicalPath getCanonicalFile Path.toRealPath normalize Converting Path ( toRealPath ) Removing Redundancies From Path ( normalize ) File.toURI Path.toURI Converting Path File.isHidden Files.isHidden Retrieving Information About Path File.list listFiles Path.newDirectoryStream Listing Directory 's Contents File.mkdir mkdirs Path.createDirectory Creating Directory File.listRoots FileSystem.getRootDirectories Listing File System 's Root Directories File.getTotalSpace , File.getFreeSpace , File.getUsableSpace FileStore.getTotalSpace , FileStore.getUnallocatedSpace , FileStore.getUsableSpace , FileStore.getTotalSpace File Store Attributes