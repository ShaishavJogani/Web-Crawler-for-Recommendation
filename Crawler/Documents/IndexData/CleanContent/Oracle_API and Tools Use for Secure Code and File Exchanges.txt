This lesson explain digital signature , certificate , keystores need . The lesson also compare use tool versus JDK Security API respect generate signature . Such tool usage demonstrate next two lesson , Signing Code Granting It Permissions Exchanging Files . API usage demonstrate Generating Verifying Signatures lesson . This lesson contain following section Code Document Security Tool API Notes Use JDK Security API Sign Documents Use Tools Sign Code Documents Code Document Security If electronically send someone important document ( document ) , applet application run , recipient need way verify document code come modify transit ( example , malicious user intercept ) . Digital signature , certificate , keystores help ensure security file send . Digital Signatures The basic idea use digital signature follow . You `` sign '' document code use one private key , generate use keytool security API method . That , generate digital signature document code , use jarsigner tool Security API method . You send signed document recipient . You also supply recipient public key . This public key corresponds private key originally use generate signature . Your recipient us public key verify document come modify reach him/her . A recipient need ensure public key authentic he/she use verify signature authentic . Therefore , usually supply certificate contain public key together key Certificate Authority vouch key 's authenticity . See next section detail . For information terminology concept signing verification , explanation benefit , see Signing JAR Files section `` The Packaging Programs JAR Files '' lesson . Certificates A certificate contain : A public key . The `` distinguished-name '' information entity ( person , company , ) whose certificate . This entity refer certificate subject , owner . The distinguished-name information include following attribute ( subset ) : entity 's name , organizational unit , organization , city locality , state province , country code . A digital signature . A certificate sign one entity , issuer , vouch fact enclosed public key actual public key another entity , owner . The distinguished-name information signer ( issuer ) . One way recipient check whether certificate valid verify digital signature , use issuer 's ( signer 's ) public key . That key store within another certificate whose signature also verify use public key next certificate 's issuer , key may also store yet another certificate , . You stop checking reach public key already trust use verify signature corresponding certificate . If recipient establish trust chain , he/she calculate certificate fingerprint ( ) , use keytool -import -printcert command . A fingerprint relatively short number uniquely reliably identify certificate . ( Technically , fingerprint hash value certificate information , use message digest function . ) The recipient phone certificate owner compare fingerprint value received certificate certificate send . If fingerprint , certificate . Thus ensure certificate modify transit . One potential uncertainty work certificate identity sender . Sometimes certificate self-signed , , sign use private key correspond public key certificate ; issuer subject . Self-signing certificate useful develop test application . However , deploy user , obtain certificate trusted third party , refer certification authority ( CA ) . To , send self-signed certificate signing request ( CSR ) CA . The CA verify signature CSR identity , perhaps check driver 's license information . The CA vouch owner public key issue certificate sign ( CA 's ) private key . Anybody trust issuing CA 's public key verify signature certificate . In many case issuing CA may certificate CA high CA hierarchy , lead certificate chain . Certificates entity trust typically import keystore `` trusted certificate . '' The public key certificate may use verify signature generate use corresponding private key . Such verification accomplish : jarsigner tool ( document/code signature appear JAR file ) , API method , runtime system , resource access attempt policy file specifies resource access allow code attempt access signature authentic . The code 's class file ( ) signature must JAR file . If send sign code document others , need supply certificate contain public key correspond private key use sign code/document . The keytool -export command API method export certificate keystore file , send anyone need . A person receive certificate import keystore trusted certificate , use , example , API method keytool -import command . If use jarsigner tool generate signature JAR file , tool retrieve certificate support certificate chain keystore . The tool store , along signature , JAR file . Keystores Private key associate public key certificate store password-protected database call keystores . A keystore contain two type entry : trusted certificate entry discuss , key/certificate entry , contain private key corresponding public key certificate . Each entry keystore identify alias . A keystore owner multiple key keystore , accessed via different alias . An alias typically name particular role keystore owner use associated key . An alias may also identify purpose key . For example , alias signPersonalEmail might use identify keystore entry whose private key use sign personal e-mail , alias signJarFiles might use identify entry whose private key use sign JAR file . The keytool tool use Create private key associate public key certificate Issue certificate request , send appropriate certification authority Import certificate reply , obtain certification authority contact Import public key certificate belong party trusted certificate Manage keystore API method also use access modify keystore . Tool API Notes Note follow regarding use tool API relate digital signature . You use JDK Security API , tool , combination generate key signature import certificate . You use API tool feature securely exchange document others . To use tool document exchange , document ( ) must place JAR ( Java ARchive ) file , may create jar tool . A JAR file good way encapsulate multiple file one spot . When file `` signed '' , result digital signature byte need store somewhere . When JAR file sign , signature go JAR file . This happen use jarsigner tool sign JAR file . If create applet code sign , need place JAR file . The true create application code may similarly restrict run security manager . The reason need JAR file policy file specifies code sign particular entity permit one operation , specific file read writes , code expect come signed JAR file . ( The term `` sign code '' abbreviated way say `` code class file appear JAR file sign . '' ) In order runtime system check code signature , person/organization run code first need import keystore certificate authenticate public key correspond private key use sign code . In order jarsigner tool verify authenticity JAR file signature , person/organization receive JAR file first need import keystore certificate authenticate public key correspond private key use sign code . At time APIs certificate creation . Use JDK Security API Sign Documents The Generating Verifying Signatures show use JDK Security API sign document . The lesson show one program , execute person original document , would generate key , generate digital signature data use private key , export public key signature file . Then show example another program , execute receiver data , signature , public key . It show program Imports public key Verifies authenticity signature . This lesson also show alternative way import supply key , include certificate . Use Tools Sign Code Documents The Signing Code Granting It Permissions lesson show use Java Security tool place code JAR file , sign , export public key . Then show recipient use Java tool import public key certificate add entry policy file grant code permission need access system resource control recipient . The Exchanging Files lesson use Java security tool sign document export public key certificate public key use keytool . correspond private key use sign document use keytool . Then show recipient verify signature instal public key certificate use jarsigner tool verify signature . These two lesson much common . In case , first two step code document sender : Create JAR file contain document class file , use jar tool . Generate key ( n't already exist ) , use keytool -genkey command . The next two step optional : Use keytool -certreq command ; send result certificate signing request certification authority ( CA ) VeriSign . Use keytool -import command import CA 's response . The next two step require : Sign JAR file , use jarsigner tool private key generate earlier . Export public key certificate , use keytool -export command . Then supply signed JAR file certificate receiver . In case , receiver signed JAR file certificate import certificate trusted certificate , use keytool -import command . The keytool attempt construct trust chain certificate import already trusted certificate keystore . If fail , keytool display certificate fingerprint prompt verify . If send code , receiver also need modify policy file permit required resource access code sign private key correspond public key imported certificate . The Policy Tool use . If send one document , receiver need verify authenticity JAR file signature , use jarsigner tool . This lesson discuss two optional step . The step cover next two lesson , Signing Code Granting It Permissions Exchanging Files . Generating Certificate Signing Request ( CSR ) Public Key Certificate When keytool use generate public/private key pair , create keystore entry contain private key self-signed certificate public key . ( That , certificate sign use corresponding private key . ) This adequate develop test application . However , certificate likely trust others sign certification authority ( CA ) . To get certificate sign CA , first generate certificate signing request ( CSR ) , via command following : keytool -certreq -alias alias -file csrFile Here alias use access keystore entry contain private key public key certificate , csrFile specify name use CSR create command . You submit file CA , VeriSign , Inc . The CA authenticate , requestor ( `` subject '' ) , sign return certificate authenticate public key . By sign certificate , CA vouches owner public key . In case , CA return chain certificate , one authenticate public key signer previous certificate chain . Importing Response CA After submit certificate signing request ( CSR ) certification authority ( CA ) , need replace original self-signed certificate keystore certificate chain import certificate ( chain certificate ) return CA . But first need `` trusted certificate '' entry keystore ( cacerts keystore file , describe ) authenticate CA 's public key . With entry CA 's signature verify . That , CA 's signature certificate , final certificate chain CA send response CSR , verify . Importing Certificate CA `` Trusted Certificate '' Before import certificate reply CA , need one `` trusted certificate '' keystore cacerts file . If certificate reply certificate chain , need top certificate chain -- `` root '' CA certificate authenticating CA 's public key . If certificate reply single certificate , need certificate issuing CA ( one sign ) . If certificate self-signed , need certificate signer , , self-signed `` root '' CA certificate . The cacerts file represent system-wide keystore CA certificate . This file reside JRE security property directory , java.home/lib/security , java.home JRE installation directory . IMPORTANT : Verify Your cacerts File Since trust CAs cacerts file entity signing issue certificate entity , must manage cacerts file carefully . The cacerts file contain certificate CAs trust . It responsibility verify trusted root CA certificate bundle cacerts file make trust decision . To remove untrusted CA certificate cacerts file , use delete option keytool command . You find cacerts file JRE installation directory . Contact system administrator permission edit file . The cacerts file contain number trusted CA certificate . If send CSR one trust vendor ( VeriSign ) , wo n't need import vendor 's root certificate trusted certificate keystore ; go next section see import certificate reply CA . A certificate CA usually either self-signed sign another CA , case also need certificate authenticating CA 's public key . Suppose company ABC , Inc. , CA obtain file name ABCCA.cer , purportedly self-signed certificate ABC , authenticate CA 's public key . Be careful ensure certificate valid prior import `` trusted '' certificate ! View first ( use keytool -printcert command keytool -import command without -noprompt option ) , make sure displayed certificate fingerprint ( ) match expected one . You call person send certificate compare fingerprint ( ) see one show secure public key repository show . Only fingerprint equal guarantee certificate replace transit somebody else 's ( example , attacker 's ) certificate . If attack take place check certificate import , would end trust anything attacker sign . If trust certificate valid , add keystore via command following : keytool -import -alias alias -file ABCCA.cer -keystore storefile This command create `` trusted certificate '' entry keystore whose name specify storefile . The entry contain data file ABCCA.cer , assign specified alias . Importing Certificate Reply CA Once 've import required trusted certificate ( ) , describe previous section , already keystore cacerts file , import certificate reply thereby replace self-signed certificate certificate chain . This chain either one return CA response request ( CA reply chain ) one construct ( CA reply single certificate ) use certificate reply trust certificate already available keystore cacerts keystore file . As example , suppose send certificate signing request VeriSign . You import reply via following , assume returned certificate file specify certReplyFile : keytool -import -trustcacerts -keystore storefile -alias alias -file certReplyFile Type command one line . The certificate reply validate use trust certificate keystore optionally use certificate configure cacerts keystore file ( -trustcacerts option specify ) . Each certificate chain verify , use certificate next level higher chain . You need trust top-level `` root '' CA certificate chain . If already trust top-level certificate , keytool display fingerprint certificate ask whether want trust . The new certificate chain specify ( alias ) entry replace old certificate ( chain ) associate entry . The old chain replace valid keypass , password use protect private key entry , supply . If password provide private key password different keystore password , user prompt . For detailed information generate CSRs import certificate reply , see keytool documentation : keytool documentation Windows example keytool documentation UNIX example