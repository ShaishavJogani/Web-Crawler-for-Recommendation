Instead get single object time , Context.lookup ( ) , list entire context use single operation . There two method list context : one return binding one return name-to-object class name pair . The Context.List ( ) Method Context.list ( ) return enumeration NameClassPair . Each NameClassPair consist object 's name class name . The following code fragment list content `` ou=People '' directory ( i.e. , file directory find `` ou=People '' directory ) . NamingEnumeration list = ctx.list ( `` ou=People '' ) ; ( list.hasMore ( ) ) { NameClassPair nc = ( NameClassPair ) list.next ( ) ; System.out.println ( nc ) ; } Running example yield following output . # java List cn=Jon Ruiz : javax.naming.directory.DirContext cn=Scott Seligman : javax.naming.directory.DirContext cn=Samuel Clemens : javax.naming.directory.DirContext cn=Rosanna Lee : javax.naming.directory.DirContext cn=Maxine Erlund : javax.naming.directory.DirContext cn=Niels Bohr : javax.naming.directory.DirContext cn=Uri Geller : javax.naming.directory.DirContext cn=Colleen Sullivan : javax.naming.directory.DirContext cn=Vinnie Ryan : javax.naming.directory.DirContext cn=Rod Serling : javax.naming.directory.DirContext cn=Jonathan Wood : javax.naming.directory.DirContext cn=Aravindan Ranganathan : javax.naming.directory.DirContext cn=Ian Anderson : javax.naming.directory.DirContext cn=Lao Tzu : javax.naming.directory.DirContext cn=Don Knuth : javax.naming.directory.DirContext cn=Roger Waters : javax.naming.directory.DirContext cn=Ben Dubin : javax.naming.directory.DirContext cn=Spuds Mackenzie : javax.naming.directory.DirContext cn=John Fowler : javax.naming.directory.DirContext cn=Londo Mollari : javax.naming.directory.DirContext cn=Ted Geisel : javax.naming.directory.DirContext The Context.listBindings ( ) Method Context.listBindings ( ) return enumeration Binding . Binding subclass NameClassPair . A binding contain object 's name class name , also object . The following code enumerate `` ou=People '' context , print binding 's name object . NamingEnumeration binding = ctx.listBindings ( `` ou=People '' ) ; ( bindings.hasMore ( ) ) { Binding bd = ( Binding ) bindings.next ( ) ; System.out.println ( bd.getName ( ) + `` : `` + bd.getObject ( ) ) ; } Running example yield following output . # java ListBindings cn=Jon Ruiz : com.sun.jndi.ldap.LdapCtx @ 1d4c61c cn=Scott Seligman : com.sun.jndi.ldap.LdapCtx @ 1a626f cn=Samuel Clemens : com.sun.jndi.ldap.LdapCtx @ 34a1fc cn=Rosanna Lee : com.sun.jndi.ldap.LdapCtx @ 176c74b cn=Maxine Erlund : com.sun.jndi.ldap.LdapCtx @ 11b9fb1 cn=Niels Bohr : com.sun.jndi.ldap.LdapCtx @ 913fe2 cn=Uri Geller : com.sun.jndi.ldap.LdapCtx @ 12558d6 cn=Colleen Sullivan : com.sun.jndi.ldap.LdapCtx @ eb7859 cn=Vinnie Ryan : com.sun.jndi.ldap.LdapCtx @ 12a54f9 cn=Rod Serling : com.sun.jndi.ldap.LdapCtx @ 30e280 cn=Jonathan Wood : com.sun.jndi.ldap.LdapCtx @ 16672d6 cn=Aravindan Ranganathan : com.sun.jndi.ldap.LdapCtx @ fd54d6 cn=Ian Anderson : com.sun.jndi.ldap.LdapCtx @ 1415de6 cn=Lao Tzu : com.sun.jndi.ldap.LdapCtx @ 7bd9f2 cn=Don Knuth : com.sun.jndi.ldap.LdapCtx @ 121cc40 cn=Roger Waters : com.sun.jndi.ldap.LdapCtx @ 443226 cn=Ben Dubin : com.sun.jndi.ldap.LdapCtx @ 1386000 cn=Spuds Mackenzie : com.sun.jndi.ldap.LdapCtx @ 26d4f1 cn=John Fowler : com.sun.jndi.ldap.LdapCtx @ 1662dc8 cn=Londo Mollari : com.sun.jndi.ldap.LdapCtx @ 147c5fc cn=Ted Geisel : com.sun.jndi.ldap.LdapCtx @ 3eca90 Terminating NamingEnumeration A NamingEnumeration terminate one three way : naturally , explicitly , unexpectedly . When NamingEnumeration.hasMore ( ) return false , enumeration complete effectively terminate . You terminate enumeration explicitly complete invoke NamingEnumeration.close ( ) . Doing provide hint underlie implementation free resource associate enumeration . If either hasMore ( ) next ( ) throw NamingException , enumeration effectively terminate . Regardless enumeration terminate , terminate longer use . Invoking method terminate enumeration yield undefined result . Why Two Different List Methods ? list ( ) intend browser-style application want display name object context . For example , browser might list name context wait user select one name display perform operation . Such application typically need access object context . listBindings ( ) intend application need perform operation object context en masse . For example , backup application might need perform `` file stats '' operation object file directory . Or printer administration program might want restart printer building . To perform operation , application need obtain object bind context . Thus expedient object return part enumeration . The application use either list ( ) potentially expensive listBindings ( ) , depend type information need .