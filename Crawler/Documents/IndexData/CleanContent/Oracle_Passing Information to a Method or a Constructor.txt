The declaration method constructor declare number type argument method constructor . For example , following method compute monthly payment home loan , base amount loan , interest rate , length loan ( number period ) , future value loan : public double computePayment ( double loanAmt , double rate , double futureValue , int numPeriods ) { double interest = rate / 100.0 ; double partial1 = Math.pow ( ( 1 + interest ) , - numPeriods ) ; double denominator = ( 1 - partial1 ) / interest ; double answer = ( -loanAmt / denominator ) - ( ( futureValue * partial1 ) / denominator ) ; return answer ; } This method four parameter : loan amount , interest rate , future value number period . The first three double-precision float point number , fourth integer . The parameter use method body runtime take value argument pass . Note : Parameters refers list variable method declaration . Arguments actual value pass method invoke . When invoke method , argument use must match declaration 's parameter type order . Parameter Types You use data type parameter method constructor . This include primitive data type , double , float , integer , saw computePayment method , reference data type , object array . Here 's example method accept array argument . In example , method create new Polygon object initialize array Point object ( assume Point class represent x , coordinate ) : public Polygon polygonFrom ( Point [ ] corner ) { // method body go } Note : If want pass method method , use lambda expression method reference . Arbitrary Number Arguments You use construct call varargs pass arbitrary number value method . You use varargs n't know many particular type argument pass method . It 's shortcut create array manually ( previous method could use varargs rather array ) . To use varargs , follow type last parameter ellipsis ( three dot , ... ) , space , parameter name . The method call number parameter , include none . public Polygon polygonFrom ( Point ... corner ) { int numberOfSides = corners.length ; double squareOfSide1 , lengthOfSide1 ; squareOfSide1 = ( corner [ 1 ] .x - corner [ 0 ] .x ) * ( corner [ 1 ] .x - corner [ 0 ] .x ) + ( corner [ 1 ] .y - corner [ 0 ] .y ) * ( corner [ 1 ] .y - corner [ 0 ] .y ) ; lengthOfSide1 = Math.sqrt ( squareOfSide1 ) ; // method body code follow creates return // polygon connect Points } You see , inside method , corner treat like array . The method call either array sequence argument . The code method body treat parameter array either case . You commonly see varargs printing method ; example , printf method : public PrintStream printf ( String format , Object ... args ) allow print arbitrary number object . It call like : System.out.printf ( `` % : % , % % n '' , name , idnum , address ) ; like System.out.printf ( `` % : % , % , % , % % n '' , name , idnum , address , phone , email ) ; yet different number argument . Parameter Names When declare parameter method constructor , provide name parameter . This name use within method body refer passed-in argument . The name parameter must unique scope . It name another parameter method constructor , name local variable within method constructor . A parameter name one class 's field . If case , parameter say shadow field . Shadowing field make code difficult read conventionally use within constructor method set particular field . For example , consider following Circle class setOrigin method : public class Circle { private int x , , radius ; public void setOrigin ( int x , int ) { ... } } The Circle class three field : x , , radius . The setOrigin method two parameter , name one field . Each method parameter shadow field share name . So use simple name x within body method refers parameter , field . To access field , must use qualified name . This discuss later lesson section title `` Using Keyword . '' Passing Primitive Data Type Arguments Primitive argument , int double , pass method value . This mean change value parameter exist within scope method . When method return , parameter go change lose . Here example : public class PassPrimitiveByValue { public static void main ( String [ ] args ) { int x = 3 ; // invoke passMethod ( ) // x argument passMethod ( x ) ; // print x see // value change System.out.println ( `` After invoke passMethod , x = `` + x ) ; } // change parameter passMethod ( ) public static void passMethod ( int p ) { p = 10 ; } } When run program , output : After invoke passMethod , x = 3 Passing Reference Data Type Arguments Reference data type parameter , object , also pass method value . This mean method return , passed-in reference still reference object . However , value object 's field change method , proper access level . For example , consider method arbitrary class move Circle object : public void moveCircle ( Circle circle , int deltaX , int deltaY ) { // code move origin circle x+deltaX , y+deltaY circle.setX ( circle.getX ( ) + deltaX ) ; circle.setY ( circle.getY ( ) + deltaY ) ; // code assign new reference circle circle = new Circle ( 0 , 0 ) ; } Let method invoke argument : moveCircle ( myCircle , 23 , 56 ) Inside method , circle initially refers myCircle . The method change x coordinate object circle reference ( i.e. , myCircle ) 23 56 , respectively . These change persist method return . Then circle assign reference new Circle object x = = 0 . This reassignment permanence , however , reference pass value change . Within method , object point circle change , , method return , myCircle still reference Circle object method call .