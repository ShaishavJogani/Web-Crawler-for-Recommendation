The sample program SAXLocalNameCount use non-validating parser default , also activate validation . Activating validation allow application tell whether XML document contain right tag whether tag right sequence . In word , tell whether document valid . If validation activate , however , tell whether document well-formed , show previous section delete closing tag XML element . For validation possible , XML document need associate DTD XML schema . Both option possible SAXLocalNameCount program . Choosing Parser Implementation If factory class specify , default SAXParserFactory class use . To use parser different manufacturer , change value environment variable point . You command line : java -Djavax.xml.parsers.SAXParserFactory=yourFactoryHere [ ... ] The factory name specify must fully qualified class name ( package prefix include ) . For information , see documentation newInstance ( ) method SAXParserFactory class . Using Validating Parser Up point , lesson concentrate non-validating parser . This section examine validate parser find happen use parse sample program . Two thing must understood validate parser : A schema DTD require . Because schema DTD present , ContentHandler.ignorableWhitespace ( ) method invoke whenever possible . Ignorable White Space When DTD present , parser longer call character ( ) method white space know irrelevant . From standpoint application interested process XML data , good thing application never bother white space exist purely make XML file readable . On hand , write application filter XML data file want output equally readable version file , white space would longer irrelevant : would essential . To get character , would add ignorableWhitespace method application . To process ( generally ) ignorable white space parser see , would need add something like following code implement ignorableWhitespace event handler . public void ignorableWhitespace ( char buf [ ] , int start , int length ) throw SAXException { emit ( `` IGNORABLE '' ) ; } This code simply generate message let know ignorable white space see . However , parser create equal . The SAX specification require method invoke . The Java XML implementation whenever DTD make possible . Configuring Factory The SAXParserFactory need set use validate parser instead default non-validating parser . The following code SAXLocalNameCount example 's main ( ) method show configure factory implement validate parser . static public void main ( String [ ] args ) throw Exception { String filename = null ; boolean dtdValidate = false ; boolean xsdValidate = false ; String schemaSource = null ; ( int = 0 ; < args.length ; i++ ) { ( args [ ] .equals ( `` -dtd '' ) ) { dtdValidate = true ; } else ( args [ ] .equals ( `` -xsd '' ) ) { xsdValidate = true ; } else ( args [ ] .equals ( `` -xsdss '' ) ) { ( == args.length - 1 ) { usage ( ) ; } xsdValidate = true ; schemaSource = args [ ++i ] ; } else ( args [ ] .equals ( `` -usage '' ) ) { usage ( ) ; } else ( args [ ] .equals ( `` -help '' ) ) { usage ( ) ; } else { filename = args [ ] ; ( ! = args.length - 1 ) { usage ( ) ; } } } ( filename == null ) { usage ( ) ; } SAXParserFactory spf = SAXParserFactory.newInstance ( ) ; spf.setNamespaceAware ( true ) ; spf.setValidating ( dtdValidate || xsdValidate ) ; SAXParser saxParser = spf.newSAXParser ( ) ; // ... } Here , SAXLocalNameCount program configure take additional argument start , tell implement validation , DTD validation , XML Schema Definition ( XSD ) validation , XSD validation specific schema source file . ( Descriptions option , -dtd , -xsd , -xsdss also add usage ( ) method , show . ) Then , factory configure produce appropriate validating parser newSAXParser invoke . As see Setting Parser , also use setNamespaceAware ( true ) configure factory return namespace-aware parser . Sun 's implementation support combination configuration option . ( If combination support particular implementation , require generate factory configuration error ) . Validating XML Schema Although full treatment XML Schema beyond scope tutorial , section show step take validate XML document use exist schema write XML Schema language . To learn XML Schema , review online tutorial , XML Schema Part 0 : Primer , http : //www.w3.org/TR/xmlschema-0/ . Note - There multiple schema-definition language , include RELAX NG , Schematron , W3C `` XML Schema '' standard . ( Even DTD qualifies `` schema , '' although one use XML syntax describe schema constraint . ) However , `` XML Schema '' present u terminology challenge . Although phrase `` XML Schema schema '' would precise , use phrase `` XML Schema definition '' avoid appearance redundancy . To notify validation error XML document , parser factory must configure create validate parser , show preceding section . In addition , following must true : The appropriate property must set SAX parser . The appropriate error handler must set . The document must associate schema . Setting SAX Parser Properties It helpful start define constant use set property . The SAXLocalNameCount example set following constant . public class SAXLocalNameCount extend DefaultHandler { static final String JAXP_SCHEMA_LANGUAGE = `` http : //java.sun.com/xml/jaxp/properties/schemaLanguage '' ; static final String W3C_XML_SCHEMA = `` http : //www.w3.org/2001/XMLSchema '' ; static final String JAXP_SCHEMA_SOURCE = `` http : //java.sun.com/xml/jaxp/properties/schemaSource '' ; } Note - The parser factory must configure generate parser namespace-aware well validating . This show Configuring Factory . More information namespaces provide Document Object Model , understand schema validation namespace-oriented process . Because JAXP-compliant parser namespace-aware default , necessary set property schema validation work . Then must configure parser tell schema language use . In SAXLocalNameCount , validation perform either DTD XML Schema . The following code use constant define specify W3C 's XML Schema language one use -xsd option specify program start . // ... ( xsdValidate ) { saxParser.setProperty ( JAXP_SCHEMA_LANGUAGE , W3C_XML_SCHEMA ) ; // ... } In addition error handle describe Setting Error Handling , one error occur configure parser schema-based validation . If parser compliant JAXP spec , therefore support XML Schema , throw SAXNotRecognizedException . To handle case , setProperty ( ) statement wrap try/catch block , show code . // ... ( xsdValidate ) { try { saxParser.setProperty ( JAXP_SCHEMA_LANGUAGE , W3C_XML_SCHEMA ) ; } catch ( SAXNotRecognizedException x ) { System.err.println ( `` Error : JAXP SAXParser property recognize : `` + JAXP_SCHEMA_LANGUAGE ) ; System.err.println ( `` Check see parser conforms JAXP spec . `` ) ; System.exit ( 1 ) ; } } // ... Associating Document Schema To validate data use XML Schema definition , necessary ensure XML document associate one . There two way . By include schema declaration XML document . By specify schema use application . Note - When application specify schema use , override schema declaration document . To specify schema definition document , would create XML : < documentRoot xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : noNamespaceSchemaLocation='YourSchemaDefinition.xsd ' > The first attribute define XML namespace ( xmlns ) prefix , xsi , stand XML Schema instance . The second line specify schema use element document namespace prefix , namely element typically define simple , uncomplicated XML document . Note - More information namespaces include Validating XML Schema Document Object Model . For , think attribute `` magic incantation '' use validate simple XML file use . After learn namespaces , see use XML Schema validate complex document use . Those idea discuss Validating Multiple Namespaces Document Object Model . You also specify schema file application , case SAXLocalNameCount . // ... ( schemaSource ! = null ) { saxParser.setProperty ( JAXP_SCHEMA_SOURCE , new File ( schemaSource ) ) ; } // ... In code , variable schemaSource relate schema source file point SAXLocalNameCount application start -xsdss option provide name schema source file use . Error Handling Validating Parser It important recognize reason exception throw file fails validation result error-handling code show Setting Error Handling . That code reproduce reminder : // ... public void warning ( SAXParseException spe ) throw SAXException { out.println ( `` Warning : `` + getParseExceptionInfo ( spe ) ) ; } public void error ( SAXParseException spe ) throw SAXException { String message = `` Error : `` + getParseExceptionInfo ( spe ) ; throw new SAXException ( message ) ; } public void fatalError ( SAXParseException spe ) throw SAXException { String message = `` Fatal Error : `` + getParseExceptionInfo ( spe ) ; throw new SAXException ( message ) ; } // ... If exception throw , validation error simply ignore . In general , SAX parsing error validation error , although also generate file specify version XML parser prepared handle . Remember application generate validation exception unless supply error handler one . DTD Warnings As mention earlier , warning generate SAX parser process DTD . Some warning generate validate parser . The non-validating parser 's main goal operate rapidly possible , generate warning . The XML specification suggest warning generate result following : Providing additional declaration entity , attribute , notation . ( Such declaration ignore . Only first use . Also , note duplicate definition element always produce fatal error validating , saw early . ) Referencing undeclared element type . ( A validity error occur undeclared type actually use XML document . A warning result undeclared element reference DTD . ) Declaring attribute undeclared element type . The Java XML SAX parser also emit warning case : No < ! DOCTYPE ... > validating . References undefined parameter entity validate . ( When validating , error result . Although nonvalidating parser require read parameter entity , Java XML parser . Because requirement , Java XML parser generate warning , rather error . ) Certain case character-encoding declaration look right . Running SAX Parser Examples Validation In section , SAXLocalNameCount sample program use previously use , except time run validation XML Schema DTD . The best way demonstrate different type validation modify code XML file parse , well associate schema DTDs , break processing get application generate exception . Experimenting DTD Validation Errors As state , example reuse SAXLocalNameCount program . The location find sample associated file give Running SAX Parser Example without Validation . If already , navigate sample directory . % cd install-dir/jaxp-1_4_2-release-date/samples If already , compile example class. % javac sax/* Open file data/rich_iii.xml text editor . This XML file process without validation To Run SAXLocalNameCount Example without Validation . At beginning data/rich_iii.xml , see DOCTYPE declaration point validate parser DTD file call play.dtd . If DTD validation activate , structure XML file parse check structure provide play.dtd . Delete declaration < ! DOCTYPE PLAY SYSTEM `` play.dtd '' > beginning file . Do forget save modification , leave file open , need later . Run SAXLocalNameCount program , DTD validation activate . To , must specify -dtd option run program . % java sax/SAXLocalNameCount -dtd data/rich_iii.xml The result see look something like : Exception thread `` main '' org.xml.sax.SAXException : Error : URI=file : install-dir/JAXP_sources/jaxp-1_4_2-release-date /samples/data/rich_iii.xml Line=12 : Document invalid : grammar find . Note - This message generate JAXP 1.4.2 library . If use different parser , error message likely somewhat different . This message say grammar document rich_iii.txt validate , therefore automatically invalid . In word , message say try validate document , DTD declare , DOCTYPE declaration present . So know DTD requirement valid document . That make sense . Restore < ! DOCTYPE PLAY SYSTEM `` play.dtd '' > declaration data/rich_iii.xml . Again , forget save file , leave open . Return data/rich_iii.xml modify tag character `` KING EDWARD The Fourth '' line 26 . Change start end tag < PERSONA > < /PERSONA > < PERSON > < /PERSON > . Line 26 look like : 26 : < PERSON > KING EDWARD The Fourth < /PERSON > Again , forget save modification , leave file open . Run SAXLocalNameCount program , DTD validation activate . This time , see different error run program : % java sax/SAXLocalNameCount -dtd data/rich_iii.xml Exception thread `` main '' org.xml.sax.SAXException : Error : URI=file : install-dir/JAXP_sources/jaxp-1_4_2-release-date /samples/data/rich_iii.xml Line=26 : Element type `` PERSON '' must declare . Here see parser object element include DTD data/play.dtd . In data/rich_iii.xml correct tag `` KING EDWARD The Fourth '' . Return start end tag original version , < PERSONA > < /PERSONA > . In data/rich_iii.xml , delete < TITLE > Dramatis Personae < /TITLE > line 24 . Once , forget save modification . Run SAXLocalNameCount program , DTD validation activate . As , see another validation error : java sax/SAXLocalNameCount -dtd data/rich_iii.xml Exception thread `` main '' org.xml.sax.SAXException : Error : URI=file : install-dir/JAXP_sources/jaxp-1_4_2-release-date /samples/data/rich_iii.xml Line=85 : The content element type `` PERSONAE '' must match `` ( TITLE , ( PERSONA|PGROUP ) + ) '' . By delete < TITLE > element line 24 , < PERSONAE > element render invalid contain sub-elements DTD expect < PERSONAE > element . Note error message state error line 85 data/rich_iii.xml , even though delete < TITLE > element line 24 . This closing tag < PERSONAE > element locate line 85 parser throw exception reach end element parse . Open DTD file , data/play.dtd text editor . In DTD file , see declaration < PERSONAE > element , well element use XML document conform play DTD . The declaration < PERSONAE > look like . < ! ELEMENT PERSONAE ( TITLE , ( PERSONA | PGROUP ) + ) > As see , < PERSONAE > element require < TITLE > sub-element . The pipe ( | ) key mean either < PERSONA > < PGROUP > sub-elements include < PERSONAE > element , plus ( + ) key ( PERSONA | PGROUP ) grouping mean least one either sub-elements must include . Add question mark ( ? ) key TITLE declaration < PERSONAE > . Adding question mark sub-element 's declaration DTD make presence one instance sub-element optional . < ! ELEMENT PERSONAE ( TITLE ? , ( PERSONA | PGROUP ) + ) > If add asterisk ( * ) element , could include either zero multiple instance sub-element . However , case make sense one title section document . Do forget save modification make data/play.dtd . Run SAXLocalNameCount program , DTD validation activated. % java sax/SAXLocalNameCount -dtd data/rich_iii.xml This time , see proper output SAXLocalNameCount , error . Experimenting Schema Validation Errors The previous exercise demonstrate use SAXLocalNameCount validate XML file DTD . In exercise use SAXLocalNameCount validate different XML file standard XML Schema definition custom schema source file . Again , type validation demonstrate break parsing process modify XML file schema , parser throw error . As state , example reuse SAXLocalNameCount program . The location find sample associated file give Running SAX Parser Example without Validation . If already , navigate sample directory. % cd install-dir/jaxp-1_4_2-release-date/samples If already , compile example class. % javac sax/* Open file data/personal-schema.xml text editor . This simple XML file provide name contact detail employee small company . In XML file , see associate schema definition file personal.xsd . < personnel xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : noNamespaceSchemaLocation='personal.xsd ' > Open file data/personal.xsd text editor . This schema define kinds information require employee order XML document associate schema consider valid . For example , examine schema definition , see person element require name , person 's name must comprise family name give name . Employees also optionally email address URLs . In data/personal.xsd , change minimum number email address require person element 0 1 . The declaration email element follow . < x : element ref= '' email '' minOccurs='1 ' maxOccurs='unbounded'/ > In data/personal-schema.xml , delete email element person element one.worker . Worker One look like : < person id= '' one.worker '' > < name > < family > Worker < /family > < give > One < /given > < /name > < link manager= '' Big.Boss '' / > < /person > Run SAXLocalNameCount personal-schema.xml , schema validation. % java sax/SAXLocalNameCount data/personal-schema.xml SAXLocalNameCount informs number time element occur personal-schema.xml . Local Name `` email '' occur 5 time Local Name `` name '' occur 6 time Local Name `` person '' occur 6 time Local Name `` family '' occur 6 time Local Name `` link '' occur 6 time Local Name `` personnel '' occur 1 time Local Name `` give '' occur 6 time You see email occur five time , whereas six person element personal-schema.xml . So , set minimum occurrence email element 1 per person element , know document invalid . However , SAXLocalNameCount tell validate schema , error report . Run SAXLocalNameCount , time specify personal—schema.xml document validate personal.xsd schema definition . As saw Validating XML Schema , SAXLocalNameCount option enable schema validation . Run SAXLocalNameCount following command . % java sax/SAXLocalNameCount -xsd data/personal-schema.xml This time , see following error message . Exception thread `` main '' org.xml.sax.SAXException : Error : URI=file : install_dir/samples/data/personal-schema.xml Line=19 : cvc-complex-type.2.4.a : Invalid content find start element 'link ' . One ' { email } ' expect . Restore email element person element one.worker . Run SAXLocalNameCount third time , specify personal—schema.xml document validate personal.xsd schema definition. % java sax/SAXLocalNameCount -xsd data/personal-schema.xml This time see correct output , error . Open personal-schema.xml text editor . Delete declaration schema definition personal.xsd personnel element . Remove italicized code personnel element . < personnel xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : noNamespaceSchemaLocation='personal.xsd'/ > Run SAXLocalNameCount , specify schema validation. % java sax/SAXLocalNameCount -xsd data/personal-schema.xml Obviously , work , schema definition validate XML file declare . You see following error . Exception thread `` main '' org.xml.sax.SAXException : Error : URI=file : install_dir/samples/data/personal-schema.xml Line=8 : cvc-elt.1 : Can find declaration element 'personnel ' . Run SAXLocalNameCount , time pass schema definition file command line. % java sax/SAXLocalNameCount -xsdss data/personal.xsd data/personal-schema.xml This time use SAXLocalNameCount option allow specify schema definition hard-coded application . You see correct output .