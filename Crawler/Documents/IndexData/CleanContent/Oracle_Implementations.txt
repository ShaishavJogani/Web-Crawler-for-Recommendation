Implementations data object use store collection , implement interface describe Interfaces section . This lesson describe following kind implementation : General-purpose implementation commonly used implementation , design everyday use . They summarize table title General-purpose-implementations . Special-purpose implementation design use special situation display nonstandard performance characteristic , usage restriction , behavior . Concurrent implementation design support high concurrency , typically expense single-threaded performance . These implementation part java.util.concurrent package . Wrapper implementation use combination type implementation , often general-purpose one , provide added restricted functionality . Convenience implementation mini-implementations , typically make available via static factory method , provide convenient , efficient alternative general-purpose implementation special collection ( example , singleton set ) . Abstract implementation skeletal implementation facilitate construction custom implementation — describe later Custom Collection Implementations section . An advanced topic , 's particularly difficult , relatively people need . The general-purpose implementation summarize following table . General-purpose Implementations Interfaces Hash table Implementations Resizable array Implementations Tree Implementations Linked list Implementations Hash table + Linked list Implementations Set HashSet TreeSet LinkedHashSet List ArrayList LinkedList Queue Deque ArrayDeque LinkedList Map HashMap TreeMap LinkedHashMap As see table , Java Collections Framework provide several general-purpose implementation Set , List , Map interface . In case , one implementation — HashSet , ArrayList , HashMap — clearly one use application , thing equal . Note SortedSet SortedMap interface row table . Each interface one implementation ( TreeSet TreeMap ) list Set Map row . There two general-purpose Queue implementation — LinkedList , also List implementation , PriorityQueue , omit table . These two implementation provide different semantics : LinkedList provide FIFO semantics , PriorityQueue order element accord value . Each general-purpose implementation provide optional operation contain interface . All permit null element , key , value . None synchronize ( thread-safe ) . All fail-fast iterators , detect illegal concurrent modification iteration fail quickly cleanly rather risk arbitrary , nondeterministic behavior undetermined time future . All Serializable support public clone method . The fact implementation unsynchronized represent break past : The legacy collection Vector Hashtable synchronize . The present approach take collection frequently use synchronization benefit . Such us include single-threaded use , read-only use , use part large data object synchronization . In general , good API design practice make user pay feature n't use . Furthermore , unnecessary synchronization result deadlock certain circumstance . If need thread-safe collection , synchronization wrapper , describe Wrapper Implementations section , allow collection transform synchronized collection . Thus , synchronization optional general-purpose implementation , whereas mandatory legacy implementation . Moreover , java.util.concurrent package provide concurrent implementation BlockingQueue interface , extend Queue , ConcurrentMap interface , extend Map . These implementation offer much high concurrency mere synchronize implementation . As rule , think interface , implementation . That program example section . For part , choice implementation affect performance . The preferred style , mention Interfaces section , choose implementation Collection create immediately assign new collection variable corresponding interface type ( pass collection method expect argument interface type ) . In way , program become dependent added method give implementation , leave programmer free change implementation anytime warrant performance concern behavioral detail . The section follow briefly discuss implementation . The performance implementation describe use word constant-time , log , linear , n log ( n ) , quadratic refer asymptotic upper-bound time complexity perform operation . All quite mouthful , n't matter much n't know mean . If 're interested know , refer good algorithm textbook . One thing keep mind sort performance metric limitation . Sometimes , nominally slow implementation may fast . When doubt , measure performance !