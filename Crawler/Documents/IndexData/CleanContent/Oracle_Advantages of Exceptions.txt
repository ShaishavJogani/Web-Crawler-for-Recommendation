Now know exception use , 's time learn advantage use exception program . Advantage 1 : Separating Error-Handling Code `` Regular '' Code Exceptions provide mean separate detail something ordinary happens main logic program . In traditional programming , error detection , reporting , handle often lead confuse spaghetti code . For example , consider pseudocode method read entire file memory . readFile { open file ; determine size ; allocate much memory ; read file memory ; close file ; } At first glance , function seem simple enough , ignore following potential error . What happen file ca n't open ? What happen length file ca n't determine ? What happen enough memory ca n't allocate ? What happen read fail ? What happen file ca n't close ? To handle case , readFile function must code error detection , reporting , handling . Here example function might look like . errorCodeType readFile { initialize errorCode = 0 ; open file ; ( theFileIsOpen ) { determine length file ; ( gotTheFileLength ) { allocate much memory ; ( gotEnoughMemory ) { read file memory ; ( readFailed ) { errorCode = -1 ; } } else { errorCode = -2 ; } } else { errorCode = -3 ; } close file ; ( theFileDidntClose & & errorCode == 0 ) { errorCode = -4 ; } else { errorCode = errorCode -4 ; } } else { errorCode = -5 ; } return errorCode ; } There 's much error detection , reporting , return original seven line code lose clutter . Worse yet , logical flow code also lose , thus make difficult tell whether code right thing : Is file really close function fail allocate enough memory ? It 's even difficult ensure code continue right thing modify method three month write . Many programmer solve problem simply ignore — error report program crash . Exceptions enable write main flow code deal exceptional case elsewhere . If readFile function use exception instead traditional error-management technique , would look like following . readFile { try { open file ; determine size ; allocate much memory ; read file memory ; close file ; } catch ( fileOpenFailed ) { doSomething ; } catch ( sizeDeterminationFailed ) { doSomething ; } catch ( memoryAllocationFailed ) { doSomething ; } catch ( readFailed ) { doSomething ; } catch ( fileCloseFailed ) { doSomething ; } } Note exception n't spare effort work detect , reporting , handle error , help organize work effectively . Advantage 2 : Propagating Errors Up Call Stack A second advantage exception ability propagate error report call stack method . Suppose readFile method fourth method series nested method call make main program : method1 call method2 , call method3 , finally call readFile . method1 { call method2 ; } method2 { call method3 ; } method3 { call readFile ; } Suppose also method1 method interested error might occur within readFile . Traditional error-notification technique force method2 method3 propagate error code return readFile call stack error cod finally reach method1—the method interested . method1 { errorCodeType error ; error = call method2 ; ( error ) doErrorProcessing ; else proceed ; } errorCodeType method2 { errorCodeType error ; error = call method3 ; ( error ) return error ; else proceed ; } errorCodeType method3 { errorCodeType error ; error = call readFile ; ( error ) return error ; else proceed ; } Recall Java runtime environment search backward call stack find method interested handle particular exception . A method duck exception thrown within , thereby allow method far call stack catch . Hence , method care error worry detect error . method1 { try { call method2 ; } catch ( exception e ) { doErrorProcessing ; } } method2 throw exception { call method3 ; } method3 throw exception { call readFile ; } However , pseudocode show , duck exception require effort part middleman method . Any checked exception throw within method must specify throw clause . Advantage 3 : Grouping Differentiating Error Types Because exception throw within program object , grouping categorizing exception natural outcome class hierarchy . An example group related exception class Java platform define java.io — IOException descendant . IOException general represent type error occur perform I/O . Its descendant represent specific error . For example , FileNotFoundException mean file could locate disk . A method write specific handler handle specific exception . The FileNotFoundException class descendant , following handler handle one type exception . catch ( FileNotFoundException e ) { ... } A method catch exception base group general type specify exception 's superclass catch statement . For example , catch I/O exception , regardless specific type , exception handler specify IOException argument . catch ( IOException e ) { ... } This handler able catch I/O exception , include FileNotFoundException , EOFException , . You find detail occur query argument pass exception handler . For example , use follow print stack trace . catch ( IOException e ) { // Output go System.err . e.printStackTrace ( ) ; // Send trace stdout . e.printStackTrace ( System.out ) ; } You could even set exception handler handle Exception handler . // A ( ) general exception handler catch ( Exception e ) { ... } The Exception class close top Throwable class hierarchy . Therefore , handler catch many exception addition handler intend catch . You may want handle exception way want program , example , print error message user exit . In situation , however , want exception handler specific possible . The reason first thing handler must determine type exception occur decide best recovery strategy . In effect , catch specific error , handler must accommodate possibility . Exception handler general make code error-prone catch handle exception n't anticipate programmer handler intend . As note , create group exception handle exception general fashion , use specific exception type differentiate exception handle exception exact fashion .