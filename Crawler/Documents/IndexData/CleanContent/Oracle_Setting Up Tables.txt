This page describe table use JDBC tutorial create : COFFEES Table SUPPLIERS Table COF_INVENTORY Table MERCH_INVENTORY Table COFFEE_HOUSES Table DATA_REPOSITORY Table Creating Tables Populating Tables COFFEES Table The COFFEES table store information coffee available sale The Coffee Break : COF_NAME SUP_ID PRICE SALES TOTAL Colombian 101 7.99 0 0 French_Roast 49 8.99 0 0 Espresso 150 9.99 0 0 Colombian_Decaf 101 8.99 0 0 French_Roast_Decaf 49 9.99 0 0 The following describes column COFFEES table : COF_NAME : Stores coffee name . Holds value SQL type VARCHAR maximum length 32 character . Because name different type coffee sell , name uniquely identify particular coffee serf primary key . SUP_ID : Stores number identify coffee supplier . Holds value SQL type INTEGER . It define foreign key reference column SUP_ID SUPPLIERS table . Consequently , DBMS enforce value column match one value corresponding column SUPPLIERS table . PRICE : Stores cost coffee per pound . Holds value SQL type FLOAT need hold value decimal point . ( Note money value would typically store SQL type DECIMAL NUMERIC , difference among DBMSs avoid incompatibility early version JDBC , tutorial use standard type FLOAT . ) SALES : Stores number pound coffee sell current week . Holds value SQL type INTEGER . TOTAL : Stores number pound coffee sell date . Holds value SQL type INTEGER . SUPPLIERS Table The SUPPLIERS store information supplier : SUP_ID SUP_NAME STREET CITY STATE ZIP 101 Acme , Inc. 99 Market Street Groundsville CA 95199 49 Superior Coffee 1 Party Place Mendocino CA 95460 150 The High Ground 100 Coffee Lane Meadows CA 93966 The following describes column SUPPLIERS table : SUP_ID : Stores number identify coffee supplier . Holds value SQL type INTEGER . It primary key table . SUP_NAME : Stores name coffee supplier . STREET , CITY , STATE , ZIP : These column store address coffee supplier . COF_INVENTORY Table The table COF_INVENTORY store information amount coffee store warehouse : WAREHOUSE_ID COF_NAME SUP_ID QUAN DATE_VAL 1234 House_Blend 49 0 2006_04_01 1234 House_Blend_Decaf 49 0 2006_04_01 1234 Colombian 101 0 2006_04_01 1234 French_Roast 49 0 2006_04_01 1234 Espresso 150 0 2006_04_01 1234 Colombian_Decaf 101 0 2006_04_01 The following describes column COF_INVENTORY table : WAREHOUSE_ID : Stores number identify warehouse . COF_NAME : Stores name particular type coffee . SUP_ID : Stores number identify supplier . QUAN : Stores number indicate amount merchandise available . DATE : Stores timestamp value indicate last time row update . MERCH_INVENTORY Table The table MERCH_INVENTORY store information amount non-coffee merchandise stock : ITEM_ID ITEM_NAME SUP_ID QUAN DATE 00001234 Cup_Large 00456 28 2006_04_01 00001235 Cup_Small 00456 36 2006_04_01 00001236 Saucer 00456 64 2006_04_01 00001287 Carafe 00456 12 2006_04_01 00006931 Carafe 00927 3 2006_04_01 00006935 PotHolder 00927 88 2006_04_01 00006977 Napkin 00927 108 2006_04_01 00006979 Towel 00927 24 2006_04_01 00004488 CofMaker 08732 5 2006_04_01 00004490 CofGrinder 08732 9 2006_04_01 00004495 EspMaker 08732 4 2006_04_01 00006914 Cookbook 00927 12 2006_04_01 The following describes column MERCH_INVENTORY table : ITEM_ID : Stores number identify item . ITEM_NAME : Stores name item . SUP_ID : Stores number identify supplier . QUAN : Stores number indicate amount item available . DATE : Stores timestamp value indicate last time row update . COFFEE_HOUSES Table The table COFFEE_HOUSES store location coffee house : STORE_ID CITY COFFEE MERCH TOTAL 10023 Mendocino 3450 2005 5455 33002 Seattle 4699 3109 7808 10040 SF 5386 2841 8227 32001 Portland 3147 3579 6726 10042 SF 2863 1874 4710 10024 Sacramento 1987 2341 4328 10039 Carmel 2691 1121 3812 10041 LA 1533 1007 2540 33005 Olympia 2733 1550 4283 33010 Seattle 3210 2177 5387 10035 SF 1922 1056 2978 10037 LA 2143 1876 4019 10034 San_Jose 1234 1032 2266 32004 Eugene 1356 1112 2468 The follow describes column COFFEE_HOUSES table : STORE_ID : Stores number identify coffee house . It indicate , among thing , state coffee house locate . A value begin 10 , example , mean state California . STORE_ID value begin 32 indicate Oregon , begin 33 indicate state Washington . CITY : Stores name city coffee house locate . COFFEE : Stores number indicate amount coffee sell . MERCH : Stores number indicate amount merchandise sell . TOTAL : Stores number indicate total amount coffee merchandise sell . DATA_REPOSITORY Table The table DATA_REPOSITORY store URLs reference document data interest The Coffee Break . The script populate_tables.sql add data table . The following describes column table : DOCUMENT_NAME : Stores string identify URL . URL : Stores URL . Creating Tables You create table Apache Ant JDBC API . Creating Tables Apache Ant To create table use tutorial sample code , run following command directory < JDBC tutorial directory > : ant setup This command run several Ant target , include following , build-tables ( build.xml file ) : < target name= '' build-tables '' description= '' Create database table '' > < sql driver= '' $ { DB.DRIVER } '' url= '' $ { DB.URL } '' userid= '' $ { DB.USER } '' password= '' $ { DB.PASSWORD } '' classpathref= '' CLASSPATH '' delimiter= '' $ { DB.DELIMITER } '' autocommit= '' false '' onerror= '' abort '' > < transaction src= `` ./sql/ $ { DB.VENDOR } /create-tables.sql '' / > < /sql > < /target > The sample specifies value following sql Ant task parameter : Parameter Description driver Fully qualify class name JDBC driver . This sample use org.apache.derby.jdbc.EmbeddedDriver Java DB com.mysql.jdbc.Driver MySQL Connector/J . url Database connection URL DBMS JDBC driver use connect database . userid Name valid user DBMS . password Password user specify userid classpathref Full path name JAR file contain class specify driver delimiter String character separate SQL statement . This sample use semicolon ( ; ) . autocommit Boolean value ; set false , SQL statement execute one transaction . onerror Action perform statement fail ; possible value continue , stop , abort . The value abort specifies error occur , transaction abort . The sample store value parameter separate file . The build file build.xml retrieve value import task : < import file= '' $ { ANTPROPERTIES } '' / > The transaction element specify file contain SQL statement execute . The file create-tables.sql contains SQL statement create table describe page . For example , follow excerpt file create table SUPPLIERS COFFEES : create table SUPPLIERS ( SUP_ID integer NOT NULL , SUP_NAME varchar ( 40 ) NOT NULL , STREET varchar ( 40 ) NOT NULL , CITY varchar ( 20 ) NOT NULL , STATE char ( 2 ) NOT NULL , ZIP char ( 5 ) , PRIMARY KEY ( SUP_ID ) ) ; create table COFFEES ( COF_NAME varchar ( 32 ) NOT NULL , SUP_ID int NOT NULL , PRICE numeric ( 10,2 ) NOT NULL , SALES integer NOT NULL , TOTAL integer NOT NULL , PRIMARY KEY ( COF_NAME ) , FOREIGN KEY ( SUP_ID ) REFERENCES SUPPLIERS ( SUP_ID ) ) ; Note : The file build.xml contain another target name drop-tables delete table use tutorial . The setup target run drop-tables run build-tables target . Creating Tables JDBC API The following method , SuppliersTable.createTable , create SUPPLIERS table : public void createTable ( ) throw SQLException { String createString = `` create table `` + dbName + `` .SUPPLIERS `` + `` ( SUP_ID integer NOT NULL , `` + `` SUP_NAME varchar ( 40 ) NOT NULL , `` + `` STREET varchar ( 40 ) NOT NULL , `` + `` CITY varchar ( 20 ) NOT NULL , `` + `` STATE char ( 2 ) NOT NULL , `` + `` ZIP char ( 5 ) , `` + `` PRIMARY KEY ( SUP_ID ) ) '' ; Statement stmt = null ; try { stmt = con.createStatement ( ) ; stmt.executeUpdate ( createString ) ; } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } finally { ( stmt ! = null ) { stmt.close ( ) ; } } } The following method , CoffeesTable.createTable , create COFFEES table : public void createTable ( ) throw SQLException { String createString = `` create table `` + dbName + `` .COFFEES `` + `` ( COF_NAME varchar ( 32 ) NOT NULL , `` + `` SUP_ID int NOT NULL , `` + `` PRICE float NOT NULL , `` + `` SALES integer NOT NULL , `` + `` TOTAL integer NOT NULL , `` + `` PRIMARY KEY ( COF_NAME ) , `` + `` FOREIGN KEY ( SUP_ID ) REFERENCES `` + dbName + `` .SUPPLIERS ( SUP_ID ) ) '' ; Statement stmt = null ; try { stmt = con.createStatement ( ) ; stmt.executeUpdate ( createString ) ; } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } finally { ( stmt ! = null ) { stmt.close ( ) ; } } } In method , con Connection object dbName name database create table . To execute SQL query , specify String createString , use Statement object . To create Statement object , call method Connection.createStatement exist Connection object . To execute SQL query , call method Statement.executeUpdate . All Statement object close connection create close . However , good cod practice explicitly close Statement object soon finish . This allow external resource statement use release immediately . Close statement call method Statement.close . Place statement finally ensure close even normal program flow interrupt exception ( SQLException ) throw . Note : You must create SUPPLIERS table COFFEES COFFEES contain foreign key , SUP_ID reference SUPPLIERS . Populating Tables Similarly , insert data table Apache Ant JDBC API . Populating Tables Apache Ant In addition create table use tutorial , command ant setup also populate table . This command run Ant target populate-tables , run SQL script populate-tables.sql . The following excerpt populate-tables.sql populate table SUPPLIERS COFFEES : insert SUPPLIERS value ( 49 , 'Superior Coffee ' , '1 Party Place ' , 'Mendocino ' , 'CA ' , '95460 ' ) ; insert SUPPLIERS value ( 101 , 'Acme , Inc. ' , '99 Market Street ' , 'Groundsville ' , 'CA ' , '95199 ' ) ; insert SUPPLIERS value ( 150 , 'The High Ground ' , '100 Coffee Lane ' , 'Meadows ' , 'CA ' , '93966 ' ) ; insert COFFEES value ( 'Colombian ' , 00101 , 7.99 , 0 , 0 ) ; insert COFFEES value ( 'French_Roast ' , 00049 , 8.99 , 0 , 0 ) ; insert COFFEES value ( 'Espresso ' , 00150 , 9.99 , 0 , 0 ) ; insert COFFEES value ( 'Colombian_Decaf ' , 00101 , 8.99 , 0 , 0 ) ; insert COFFEES value ( 'French_Roast_Decaf ' , 00049 , 9.99 , 0 , 0 ) ; Populating Tables JDBC API The following method , SuppliersTable.populateTable , insert data table : public void populateTable ( ) throw SQLException { Statement stmt = null ; try { stmt = con.createStatement ( ) ; stmt.executeUpdate ( `` insert `` + dbName + `` .SUPPLIERS `` + `` value ( 49 , 'Superior Coffee ' , `` + `` '1 Party Place ' , `` + `` 'Mendocino ' , 'CA ' , '95460 ' ) '' ) ; stmt.executeUpdate ( `` insert `` + dbName + `` .SUPPLIERS `` + `` value ( 101 , 'Acme , Inc. ' , `` + `` '99 Market Street ' , `` + `` 'Groundsville ' , 'CA ' , '95199 ' ) '' ) ; stmt.executeUpdate ( `` insert `` + dbName + `` .SUPPLIERS `` + `` value ( 150 , `` + `` 'The High Ground ' , `` + `` '100 Coffee Lane ' , `` + `` 'Meadows ' , 'CA ' , '93966 ' ) '' ) ; } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } finally { ( stmt ! = null ) { stmt.close ( ) ; } } } The following method , CoffeesTable.populateTable , insert data table : public void populateTable ( ) throw SQLException { Statement stmt = null ; try { stmt = con.createStatement ( ) ; stmt.executeUpdate ( `` insert `` + dbName + `` .COFFEES `` + `` value ( 'Colombian ' , 00101 , `` + `` 7.99 , 0 , 0 ) '' ) ; stmt.executeUpdate ( `` insert `` + dbName + `` .COFFEES `` + `` value ( 'French_Roast ' , `` + `` 00049 , 8.99 , 0 , 0 ) '' ) ; stmt.executeUpdate ( `` insert `` + dbName + `` .COFFEES `` + `` value ( 'Espresso ' , 00150 , 9.99 , 0 , 0 ) '' ) ; stmt.executeUpdate ( `` insert `` + dbName + `` .COFFEES `` + `` value ( 'Colombian_Decaf ' , `` + `` 00101 , 8.99 , 0 , 0 ) '' ) ; stmt.executeUpdate ( `` insert `` + dbName + `` .COFFEES `` + `` value ( 'French_Roast_Decaf ' , `` + `` 00049 , 9.99 , 0 , 0 ) '' ) ; } catch ( SQLException e ) { JDBCTutorialUtilities.printSQLException ( e ) ; } finally { ( stmt ! = null ) { stmt.close ( ) ; } } }