During type erasure process , Java compiler erase type parameter replaces first bound type parameter bound , Object type parameter unbounded . Consider follow generic class represent node singly link list : public class Node < T > { private T data ; private Node < T > next ; public Node ( T data , Node < T > next ) { this.data = data ; this.next = next ; } public T getData ( ) { return data ; } // ... } Because type parameter T unbounded , Java compiler replaces Object : public class Node { private Object data ; private Node next ; public Node ( Object data , Node next ) { this.data = data ; this.next = next ; } public Object getData ( ) { return data ; } // ... } In following example , generic Node class use bounded type parameter : public class Node < T extend Comparable < T > > { private T data ; private Node < T > next ; public Node ( T data , Node < T > next ) { this.data = data ; this.next = next ; } public T getData ( ) { return data ; } // ... } The Java compiler replace bounded type parameter T first bound class , Comparable : public class Node { private Comparable data ; private Node next ; public Node ( Comparable data , Node next ) { this.data = data ; this.next = next ; } public Comparable getData ( ) { return data ; } // ... }