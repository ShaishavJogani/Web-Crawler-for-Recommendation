The entry point reflection operation java.lang.Class . With exception java.lang.reflect.ReflectPermission , none class java.lang.reflect public constructor . To get class , necessary invoke appropriate method Class . There several way get Class depend whether code access object , name class , type , existing Class . Object.getClass ( ) If instance object available , simple way get Class invoke Object.getClass ( ) . Of course , work reference type inherit Object . Some example follow . Class c = `` foo '' .getClass ( ) ; Returns Class String Class c = System.console ( ) .getClass ( ) ; There unique console associate virtual machine return static method System.console ( ) . The value return getClass ( ) Class correspond java.io.Console . enum E { A , B } Class c = A.getClass ( ) ; A instance enum E ; thus getClass ( ) return Class corresponding enumeration type E. byte [ ] bytes = new byte [ 1024 ] ; Class c = bytes.getClass ( ) ; Since array Objects , also possible invoke getClass ( ) instance array . The returned Class correspond array component type byte . import java.util.HashSet ; import java.util.Set ; Set < String > = new HashSet < String > ( ) ; Class c = s.getClass ( ) ; In case , java.util.Set interface object type java.util.HashSet . The value return getClass ( ) class correspond java.util.HashSet . The .class Syntax If type available instance possible obtain Class append `` .class '' name type . This also easy way obtain Class primitive type . boolean b ; Class c = b.getClass ( ) ; // compile-time error Class c = boolean.class ; // correct Note statement boolean.getClass ( ) would produce compile-time error boolean primitive type dereferenced . The .class syntax return Class corresponding type boolean . Class c = java.io.PrintStream.class ; The variable c Class corresponding type java.io.PrintStream . Class c = int [ ] [ ] [ ] .class ; The .class syntax may use retrieve Class corresponding multi-dimensional array give type . Class.forName ( ) If fully-qualified name class available , possible get corresponding Class use static method Class.forName ( ) . This use primitive type . The syntax name array class describe Class.getName ( ) . This syntax applicable reference primitive type . Class c = Class.forName ( `` com.duke.MyLocaleServiceProvider '' ) ; This statement create class give fully-qualified name . Class cDoubleArray = Class.forName ( `` [ D '' ) ; Class cStringArray = Class.forName ( `` [ [ Ljava.lang.String ; '' ) ; The variable cDoubleArray contain Class correspond array primitive type double ( i.e . double [ ] .class ) . The cStringArray variable contain Class corresponding two-dimensional array String ( i.e . identical String [ ] [ ] .class ) . TYPE Field Primitive Type Wrappers The .class syntax convenient preferred way obtain Class primitive type ; however another way acquire Class . Each primitive type void wrapper class java.lang use boxing primitive type reference type . Each wrapper class contain field name TYPE equal Class primitive type wrap . Class c = Double.TYPE ; There class java.lang.Double use wrap primitive type double whenever Object require . The value Double.TYPE identical double.class . Class c = Void.TYPE ; Void.TYPE identical void.class . Methods Return Classes There several Reflection APIs return class may access Class already obtain either directly indirectly . Class.getSuperclass ( ) Returns super class give class . Class c = javax.swing.JButton.class.getSuperclass ( ) ; The super class javax.swing.JButton javax.swing.AbstractButton . Class.getClasses ( ) Returns public class , interface , enums member class include inherited member . Class < ? > [ ] c = Character.class.getClasses ( ) ; Character contain two member class Character.Subset Character.UnicodeBlock . Class.getDeclaredClasses ( ) Returns class interface , enums explicitly declare class . Class < ? > [ ] c = Character.class.getDeclaredClasses ( ) ; Character contain two public member class Character.Subset Character.UnicodeBlock one private class Character.CharacterCache . Class.getDeclaringClass ( ) java.lang.reflect.Field.getDeclaringClass ( ) java.lang.reflect.Method.getDeclaringClass ( ) java.lang.reflect.Constructor.getDeclaringClass ( ) Returns Class member declare . Anonymous Class Declarations declaring class enclosing class . import java.lang.reflect.Field ; Field f = System.class.getField ( `` '' ) ; Class c = f.getDeclaringClass ( ) ; The field declare System . public class MyClass { static Object = new Object ( ) { public void ( ) { } } ; static Class < c > = o.getClass ( ) .getEnclosingClass ( ) ; } The declare class anonymous class define null . Class.getEnclosingClass ( ) Returns immediately enclose class class . Class c = Thread.State.class ( ) .getEnclosingClass ( ) ; The enclose class enum Thread.State Thread . public class MyClass { static Object = new Object ( ) { public void ( ) { } } ; static Class < c > = o.getClass ( ) .getEnclosingClass ( ) ; } The anonymous class define enclose MyClass .