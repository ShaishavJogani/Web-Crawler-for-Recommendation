If implement cut , copy paste use one Swing text component ( text field , password field , format text field , text area ) work straightforward . These text component utilize DefaultEditorKit provide built-in action cut , copy paste . The default editor kit also handle work remember component last focus . This mean user initiate one action use menu keyboard equivalent , correct component receive action — additional code require . The following demo , TextCutPaste , contain three text field . As see screen shot , cut , copy , paste text field . They also support drag drop . Try : Click Launch button run TextCutPaste use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Select text one text field . Use Edit menu keyboard equivalent cut copy text source . Position caret want text paste . Paste text use menu keyboard equivalent . Perform operation use drag drop . Here code create Edit menu hook built-in cut , copy , paste action define DefaultEditorKit menu item . This work component descend JComponent : /** * Create Edit menu support cut/copy/paste . */ public JMenuBar createMenuBar ( ) { JMenuItem menuItem = null ; JMenuBar menuBar = new JMenuBar ( ) ; JMenu mainMenu = new JMenu ( `` Edit '' ) ; mainMenu.setMnemonic ( KeyEvent.VK_E ) ; menuItem = new JMenuItem ( new DefaultEditorKit.CutAction ( ) ) ; menuItem.setText ( `` Cut '' ) ; menuItem.setMnemonic ( KeyEvent.VK_T ) ; mainMenu.add ( menuItem ) ; menuItem = new JMenuItem ( new DefaultEditorKit.CopyAction ( ) ) ; menuItem.setText ( `` Copy '' ) ; menuItem.setMnemonic ( KeyEvent.VK_C ) ; mainMenu.add ( menuItem ) ; menuItem = new JMenuItem ( new DefaultEditorKit.PasteAction ( ) ) ; menuItem.setText ( `` Paste '' ) ; menuItem.setMnemonic ( KeyEvent.VK_P ) ; mainMenu.add ( menuItem ) ; menuBar.add ( mainMenu ) ; return menuBar ; } Next look accomplish functionality use component built-in support DefaultEditorKit .