A Collection represent group object know element . The Collection interface use pass around collection object maximum generality desire . For example , convention general-purpose collection implementation constructor take Collection argument . This constructor , know conversion constructor , initialize new collection contain element specified collection , whatever give collection 's subinterface implementation type . In word , allow convert collection 's type . Suppose , example , Collection < String > c , may List , Set , another kind Collection . This idiom create new ArrayList ( implementation List interface ) , initially contain element c. List < String > list = new ArrayList < String > ( c ) ; Or — use JDK 7 later — use diamond operator : List < String > list = new ArrayList < > ( c ) ; The Collection interface contain method perform basic operation , int size ( ) , boolean isEmpty ( ) , boolean contains ( Object element ) , boolean add ( E element ) , boolean remove ( Object element ) , Iterator < E > iterator ( ) . It also contain method operate entire collection , boolean containsAll ( Collection < ? > c ) , boolean addAll ( Collection < ? extends E > c ) , boolean removeAll ( Collection < ? > c ) , boolean retainAll ( Collection < ? > c ) , void clear ( ) . Additional method array operation ( Object [ ] toArray ( ) < T > T [ ] toArray ( T [ ] ) exist well . In JDK 8 later , Collection interface also expose method Stream < E > stream ( ) Stream < E > parallelStream ( ) , obtain sequential parallel stream underlie collection . ( See lesson entitle Aggregate Operations information use stream . ) The Collection interface 'd expect give Collection represent group object . It method tell many element collection ( size , isEmpty ) , method check whether give object collection ( contains ) , method add remove element collection ( add , remove ) , method provide iterator collection ( iterator ) . The add method define generally enough make sense collection allow duplicate well n't . It guarantee Collection contain specified element call complete , return true Collection change result call . Similarly , remove method design remove single instance specified element Collection , assume contain element start , return true Collection modify result . Traversing Collections There three way traverse collection : ( 1 ) use aggregate operation ( 2 ) for-each construct ( 3 ) use Iterators . Aggregate Operations In JDK 8 later , preferred method iterate collection obtain stream perform aggregate operation . Aggregate operation often use conjunction lambda expression make program expressive , use less line code . The following code sequentially iterate collection shape print red object : myShapesCollection.stream ( ) .filter ( e - > e.getColor ( ) == Color.RED ) .forEach ( e - > System.out.println ( e.getName ( ) ) ) ; Likewise , could easily request parallel stream , might make sense collection large enough computer enough core : myShapesCollection.parallelStream ( ) .filter ( e - > e.getColor ( ) == Color.RED ) .forEach ( e - > System.out.println ( e.getName ( ) ) ) ; There many different way collect data API . For example , might want convert element Collection String object , join , separate comma : String join = elements.stream ( ) .map ( Object : :toString ) .collect ( Collectors.joining ( `` , `` ) ) ; Or perhaps sum salary employee : int total = employees.stream ( ) .collect ( Collectors.summingInt ( Employee : :getSalary ) ) ) ; These example stream aggregate operation . For information example , see lesson entitle Aggregate Operations . The Collections framework always provide number so-called `` bulk operation '' part API . These include method operate entire collection , containsAll , addAll , removeAll , etc . Do confuse method aggregate operation introduce JDK 8 . The key difference new aggregate operation exist bulk operation ( containsAll , addAll , etc . ) old version mutative , mean modify underlying collection . In contrast , new aggregate operation modify underlying collection . When use new aggregate operation lambda expression , must take care avoid mutation introduce problem future , code run later parallel stream . for-each Construct The for-each construct allow concisely traverse collection array use loop — see The Statement . The following code use for-each construct print element collection separate line . ( Object : collection ) System.out.println ( ) ; Iterators An Iterator object enable traverse collection remove element collection selectively , desire . You get Iterator collection call iterator method . The following Iterator interface . public interface Iterator < E > { boolean hasNext ( ) ; E next ( ) ; void remove ( ) ; //optional } The hasNext method return true iteration element , next method return next element iteration . The remove method remove last element return next underlie Collection . The remove method may call per call next throw exception rule violate . Note Iterator.remove safe way modify collection iteration ; behavior unspecified underlying collection modify way iteration progress . Use Iterator instead for-each construct need : Remove current element . The for-each construct hide iterator , call remove . Therefore , for-each construct usable filter . Iterate multiple collection parallel . The following method show use Iterator filter arbitrary Collection — , traverse collection remove specific element . static void filter ( Collection < ? > c ) { ( Iterator < ? > = c.iterator ( ) ; it.hasNext ( ) ; ) ( ! cond ( it.next ( ) ) ) it.remove ( ) ; } This simple piece code polymorphic , mean work Collection regardless implementation . This example demonstrate easy write polymorphic algorithm use Java Collections Framework . Collection Interface Bulk Operations Bulk operation perform operation entire Collection . You could implement shorthand operation use basic operation , though case implementation would less efficient . The following bulk operation : containsAll — return true target Collection contain element specified Collection . addAll — add element specified Collection target Collection . removeAll — remove target Collection element also contain specified Collection . retainAll — remove target Collection element also contain specified Collection . That , retain element target Collection also contain specified Collection . clear — remove element Collection . The addAll , removeAll , retainAll method return true target Collection modify process execute operation . As simple example power bulk operation , consider follow idiom remove instance specified element , e , Collection , c. c.removeAll ( Collections.singleton ( e ) ) ; More specifically , suppose want remove null element Collection . c.removeAll ( Collections.singleton ( null ) ) ; This idiom use Collections.singleton , static factory method return immutable Set contain specify element . Collection Interface Array Operations The toArray method provide bridge collection old APIs expect array input . The array operation allow content Collection translate array . The simple form argument create new array Object . The complex form allow caller provide array choose runtime type output array . For example , suppose c Collection . The following snippet dump content c newly allocate array Object whose length identical number element c. Object [ ] = c.toArray ( ) ; Suppose c know contain string ( perhaps c type Collection < String > ) . The following snippet dump content c newly allocate array String whose length identical number element c. String [ ] = c.toArray ( new String [ 0 ] ) ;