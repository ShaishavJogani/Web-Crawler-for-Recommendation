This section describe several mini-implementations convenient efficient general-purpose implementation n't need full power . All implementation section make available via static factory method rather public class . List View Array The Arrays.asList method return List view array argument . Changes List write array vice versa . The size collection array change . If add remove method call List , UnsupportedOperationException result . The normal use implementation bridge array-based collection-based APIs . It allow pass array method expect Collection List . However , implementation also another use . If need fixed-size List , 's efficient general-purpose List implementation . This idiom . List < String > list = Arrays.asList ( new String [ size ] ) ; Note reference backing array retain . Immutable Multiple-Copy List Occasionally 'll need immutable List consist multiple copy element . The Collections.nCopies method return list . This implementation two main us . The first initialize newly create List ; example , suppose want ArrayList initially consist 1,000 null element . The following incantation trick . List < Type > list = new ArrayList < Type > ( Collections.nCopies ( 1000 , ( Type ) null ) ; Of course , initial value element need null . The second main use grow exist List . For example , suppose want add 69 copy string `` fruit bat '' end List < String > . It 's clear 'd want thing , let 's suppose . The following 'd . lovablePets.addAll ( Collections.nCopies ( 69 , `` fruit bat '' ) ) ; By use form addAll take index Collection , add new element middle List instead end . Immutable Singleton Set Sometimes 'll need immutable singleton Set , consist single , specified element . The Collections.singleton method return Set . One use implementation remove occurrence specified element Collection . c.removeAll ( Collections.singleton ( e ) ) ; A related idiom remove element map specify value Map . For example , suppose Map — job — map people line work suppose want eliminate lawyer . The following one-liner deed . job.values ( ) .removeAll ( Collections.singleton ( LAWYER ) ) ; One use implementation provide single input value method write accept collection value . Empty Set , List , Map Constants The Collections class provide method return empty Set , List , Map — emptySet , emptyList , emptyMap . The main use constant input method take Collection value n't want provide value , example . tourist.declarePurchases ( Collections.emptySet ( ) ) ;