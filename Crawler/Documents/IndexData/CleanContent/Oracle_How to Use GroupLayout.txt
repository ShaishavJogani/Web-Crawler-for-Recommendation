GroupLayout layout manager develop GUI builder Matisse , GUI builder provide NetBeans IDE . Although layout manager originally design suit GUI builder need , also work well manual coding . This discussion teach GroupLayout work show use GroupLayout build GUIs , whether choose use GUI builder like Matisse write code . Note : This lesson cover write layout code hand , challenge . If interested learn detail layout management , might prefer use GroupLayout layout manager combine builder tool lay GUI . One builder tool NetBeans IDE . Otherwise , want code hand want use GroupLayout , GridBagLayout recommend next flexible powerful layout manager . If interested use JavaFX create GUI , see Working With Layouts JavaFX . Design Principle : Independent Dimensions GroupLayout work horizontal vertical layout separately . The layout define dimension independently . You need worry vertical dimension define horizontal layout , vice versa , layout along axis totally independent layout along axis . When focus one dimension , solve half problem one time . This easy handle dimension . This mean , course , component need define twice layout . If forget , GroupLayout generate exception . Layout Organization : Hierarchical Groups GroupLayout use two type arrangement -- sequential parallel , combine hierarchical composition . With sequential arrangement , component simply place one another , like BoxLayout FlowLayout would along one axis . The position component define relative precede component . The second way place component parallel—on top space . They baseline- , top- , bottom-aligned along vertical axis . Along horizontal axis , left- , right- , center-aligned component size . Usually , component place parallel one dimension sequence , overlap . What make two arrangement powerful nest hierarchically . For purpose GroupLayout define layout group . A group either sequential parallel may contain component , group , gap ( discuss ) . The size sequential group sum size contained element , size parallel group correspond size large element ( although , depend element baseline land , size baseline-aligned group may bit large large element ) . Defining layout mean define component group combine sequential parallel arrangement . Let u use simple example see work practice . An Example Let u start something simple , three component row : We express layout use group . Starting horizontal axis easy see sequential group 3 component arrange leave right . Along vertical axis parallel group 3 component location , size , baseline : In pseudo code , layout specification might look like ( real code Writing Code section ) : horizontal layout = sequential group { c1 , c2 , c3 } vertical layout = parallel group ( BASELINE ) { c1 , c2 , c3 } This illustrate principle mention earlier : component group sequentially one dimension usually form parallel group dimension . Now let u add one component , C4 , left-aligned C3 : Along horizontal axis new component occupy horizontal space C3 form parallel group C3 . Along vertical axis C4 form sequential group original parallel group three component . In pseudo code , layout specification look like : horizontal layout = sequential group { c1 , c2 , parallel group ( LEFT ) { c3 , c4 } } vertical layout = sequential group { parallel group ( BASELINE ) { c1 , c2 , c3 } , c4 } Now understand important aspect design layout GroupLayout . There detail explain : add gap , define size resize behavior , define justify layout , write real code . Gaps A gap think invisible component certain size . Gaps arbitrary size add group like component group . Using gap precisely control distance component container border . GroupLayout also define automatic gap correspond prefer distance neighbor component ( component container border ) . The size gap compute dynamically base look feel application use ( LayoutStyle class use ) . There two advantage use automatic ( prefer ) gap : specify pixel size gap , automatically adjust look feel UI run , reflect actual look feel guideline . GroupLayout distinguishes ( ) preferred gap two component ( b ) preferred gap component container border . There correspond method GroupLayout API add gap ( addPreferredGap addContainerGap ) . There three type component gap : relate , unrelated indented . The LayoutStyle.ComponentPlacement enum defines correspond constant use parameter addPreferredGap method : RELATED , UNRELATED INDENT . The difference relate unrelated gap size—the distance unrelated component bit big . Indented represent preferred horizontal distance two component one position underneath second indent . As mention , GroupLayout insert gap automatically—if add gap explicitly , add related preferred gap . This default behavior , however . You turn feature invoke setAutoCreateGaps ( true ) setAutoCreateContainerGaps ( true ) GroupLayout . Then get correct space automatically . Writing Code Now , let u take look actual code create layout describe . Let u assume container name panel four component already present ( c1 , c2 , c3 , c4 ) . First , create new GroupLayout object associate panel : GroupLayout layout = new GroupLayout ( panel ) ; panel.setLayout ( layout ) ; We specify automatic gap insertion : layout.setAutoCreateGaps ( true ) ; layout.setAutoCreateContainerGaps ( true ) ; Then , define group add component . We establish root group dimension use setHorizontalGroup setVerticalGroup method . Groups create via createSequentialGroup createParallelGroup method . Components add group use addComponent method . layout.setHorizontalGroup ( layout.createSequentialGroup ( ) .addComponent ( c1 ) .addComponent ( c2 ) .addGroup ( layout.createParallelGroup ( GroupLayout.Alignment.LEADING ) .addComponent ( c3 ) .addComponent ( c4 ) ) ) ; layout.setVerticalGroup ( layout.createSequentialGroup ( ) .addGroup ( layout.createParallelGroup ( GroupLayout.Alignment.BASELINE ) .addComponent ( c1 ) .addComponent ( c2 ) .addComponent ( c3 ) ) .addComponent ( c4 ) ) ; You specify alignment parallel group . It one following constant define GroupLayout.Alignment enum : LEADING , TRAILING , CENTER , BASELINE . These constant use dimension depend whether component orientation left-to-right right-to-left ( top-to-bottom bottom-to-top ) . For example , horizontal ( vertical ) component orientation left-to-right ( top-to-bottom ) LEADING mean leave ( top ) TRAILING mean right ( bottom ) . CENTER mean `` centered '' dimension . If specify alignment , LEADING use . The BASELINE alignment valid vertical dimension . Note : Alignment layout group meaning component different size . Components size automatically align GroupLayout.Alignment constant . Some comment code : You need add component directly container—that implicitly use one addComponent method . Note chained call addComponent method use fill group . The addComponent method always return group call . Thanks need use local variable hold group . It good idea indent code easy see hierarchical structure group . Give component new line , add one level indent new group hierarchy . A good source editor help pair parenthesis close createXXXGroup method . By follow simple rule , easy add new component remove exist one . Component Size Resizability There limit number resizable component layout . The size component GroupLayout constrain three value ; minimum size , preferred size maximum size . These size control component resize within layout . The GroupLayout.addComponent ( ... ) method allow size constraint specify . If specify explicitly , layout ask component default size ( use component 's getMinimumSize ( ) , getPreferredSize ( ) getMaximumSize ( ) method ) . You need specify anything component , like make JTextField resizable JButton fix , component desire resizing behavior default . On hand override default behavior . For example make JTextField fix JButton resizable . GroupLayout defines constant provide precise control resize behavior . They use parameter addComponent ( Component comp , int min , int pref , int max ) method . Here two example : To force component resizable ( allow shrinking grow ) : group.addComponent ( component , 0 , GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE ) ... This allow component resize zero size ( minimum ) size ( Short.MAX_VALUE maximum size mean `` infinite '' ) . If want component shrink default minimum size , would use GroupLayout.DEFAULT_SIZE instead 0 second parameter . To make component fix size ( suppress resize ) : group.addComponent ( component , GroupLayout.PREFERRED_SIZE , GroupLayout.DEFAULT_SIZE , GroupLayout.PREFERRED_SIZE ) ... In example initial size component alter , default size component 's preferred size . If want specific size component , would specify second parameter instead use GroupLayout.DEFAULT_SIZE . Resizable gap Specifying size resizability applies gap well , include preferred one . For example , specify preferred gap two component act like spring push component away ( opposite side container ) . The preferred distance two component use minimum size gap . See following snippet : layout.createSequentialGroup ( ) .addComponent ( c1 ) .addPreferredGap ( LayoutStyle.ComponentPlacement.RELATED , GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE ) .addComponent ( c2 ) ; Sizing Parallel Groups Resizable element place parallel group stretch fill space group determine large element group , end align size . GroupLayout also provide control whether enclose parallel group resize . If group resizing suppress , prevent contained element grow preferred size group . This way make block component align side , constrain individual component size . Let u try achieve size two component example ( c3 c4 horizontal dimension ) : layout.createParallelGroup ( GroupLayout.Alignment.LEADING , false ) .addComponent ( c3 , GroupLayout.DEFAULT_SIZE , GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE ) .addComponent ( c4 , GroupLayout.DEFAULT_SIZE , GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE ) ; The underlie mechanism work follow : The size parallel group set preferred size large element ; preferred size c4 example . Resizable element stretch size group . In example , c3 effectively stretch , size c4 already correspond size group . As result , c3 c4 would width . The component would resize far parallel group resizable ( second parameter createParallelGroup method , , false ) . Question attentive reader : Why define component parallel group resizable example ? It seem enough c3 resizable since c4 stretch anyway ... The answer : platform localization independence . Otherwise would rely c4 component always big c3 . But may change application run different platform translate another language . By component resizeable adjust , matter one big give moment . Making Components Same Size The previous case special component parallel group . But want unrelated component size ? Clearly , size always ensure group . The OK Cancel button row bottom dialog good example . For purpose GroupLayout provide linkSize method . This method allow size arbitrary component link regardless place . The result size link component set accord large component . For example : layout.linkSize ( SwingConstants.HORIZONTAL , c3 , c4 ) ; In example , size link selectively horizontal dimension . Runtime Changes Your GUI There two important method use make change GUI runtime , replace ( ) setHonorsVisibility ( ) . Using two method , exchange component change visibility component runtime GUI rearrange accordingly . replace ( Component existingComponent , Component newComponent ) replace exist component new one . One common operation need dynamic layout ability replace component like . For example , perhaps check box toggle component display graph tree . GroupLayout make scenario simple replace ( ) method . You swap component without recreate group . Another common operation user interface dynamically change visibility component . Perhaps component show user complete early portion form . To avoid component shuffle around scenario , space take regardless visibility component . GroupLayout offer two way configure invisible component treat . The setHonorsVisibility ( boolean ) method globally set invisible component handle . A value true , default , indicate invisible component treat . On hand , value false provide space invisible component , treat though visible . The setHonorsVisibility ( Component , Boolean ) method use configure behavior level specific component . To determine visibility handle , GroupLayout first check value specify Component , , check setting global property . Some history : GroupLayout Java Standard Edition 6 consists three distinct body work : ability get baseline component , ability get preferred gap component ( LayoutStyle ) , GroupLayout . This work originally open source project http : //java.net/projects/swing-layout/ NetBeans 5.0 support GroupLayout way swing-layout project . Because success work , three portion roll GroupLayout Java Standard Edition version 6 . The main difference GroupLayout Java SE 6 swing-layout package name method name . NetBeans 5.5 provide ability target either GroupLayout Java SE 6 , GroupLayout swing-layout . Which version NetBeans target determine version Java platform project target . A project target Java SE 6 use GroupLayout Java SE , otherwise GroupLayout swing-layout use .