Instance Methods An instance method subclass signature ( name , plus number type parameter ) return type instance method superclass override superclass 's method . The ability subclass override method allow class inherit superclass whose behavior `` close enough '' modify behavior need . The override method name , number type parameter , return type method override . An override method also return subtype type return overridden method . This subtype call covariant return type . When override method , might want use @ Override annotation instruct compiler intend override method superclass . If , reason , compiler detect method exist one superclass , generate error . For information @ Override , see Annotations . Static Methods If subclass define static method signature static method superclass , method subclass hide one superclass . The distinction hide static method override instance method important implication : The version overridden instance method get invoke one subclass . The version hidden static method get invoked depends whether invoke superclass subclass . Consider example contain two class . The first Animal , contain one instance method one static method : public class Animal { public static void testClassMethod ( ) { System.out.println ( `` The static method Animal '' ) ; } public void testInstanceMethod ( ) { System.out.println ( `` The instance method Animal '' ) ; } } The second class , subclass Animal , call Cat : public class Cat extend Animal { public static void testClassMethod ( ) { System.out.println ( `` The static method Cat '' ) ; } public void testInstanceMethod ( ) { System.out.println ( `` The instance method Cat '' ) ; } public static void main ( String [ ] args ) { Cat myCat = new Cat ( ) ; Animal myAnimal = myCat ; Animal.testClassMethod ( ) ; myAnimal.testInstanceMethod ( ) ; } } The Cat class override instance method Animal hide static method Animal . The main method class create instance Cat invokes testClassMethod ( ) class testInstanceMethod ( ) instance . The output program follow : The static method Animal The instance method Cat As promise , version hidden static method get invoke one superclass , version overridden instance method get invoke one subclass . Interface Methods Default method abstract method interface inherit like instance method . However , supertypes class interface provide multiple default method signature , Java compiler follow inheritance rule resolve name conflict . These rule drive following two principle : Instance method prefer interface default method . Consider following class interface : public class Horse { public String identifyMyself ( ) { return `` I horse . `` ; } } public interface Flyer { default public String identifyMyself ( ) { return `` I able fly . `` ; } } public interface Mythical { default public String identifyMyself ( ) { return `` I mythical creature . `` ; } } public class Pegasus extend Horse implement Flyer , Mythical { public static void main ( String ... args ) { Pegasus myApp = new Pegasus ( ) ; System.out.println ( myApp.identifyMyself ( ) ) ; } } The method Pegasus.identifyMyself return string I horse . Methods already override candidate ignore . This circumstance arise supertypes share common ancestor . Consider following interface class : public interface Animal { default public String identifyMyself ( ) { return `` I animal . `` ; } } public interface EggLayer extend Animal { default public String identifyMyself ( ) { return `` I able lay egg . `` ; } } public interface FireBreather extend Animal { } public class Dragon implement EggLayer , FireBreather { public static void main ( String ... args ) { Dragon myApp = new Dragon ( ) ; System.out.println ( myApp.identifyMyself ( ) ) ; } } The method Dragon.identifyMyself return string I able lay egg . If two independently define default method conflict , default method conflict abstract method , Java compiler produce compiler error . You must explicitly override supertype method . Consider example computer-controlled car fly . You two interface ( OperateCar FlyCar ) provide default implementation method , ( startEngine ) : public interface OperateCar { // ... default public int startEngine ( EncryptedKey key ) { // Implementation } } public interface FlyCar { // ... default public int startEngine ( EncryptedKey key ) { // Implementation } } A class implement OperateCar FlyCar must override method startEngine . You could invoke default implementation super keyword . public class FlyingCar implement OperateCar , FlyCar { // ... public int startEngine ( EncryptedKey key ) { FlyCar.super.startEngine ( key ) ; OperateCar.super.startEngine ( key ) ; } } The name precede super ( example , FlyCar OperateCar ) must refer direct superinterface define inherit default invoked method . This form method invocation restrict differentiate multiple implemented interface contain default method signature . You use super keyword invoke default method class interface . Inherited instance method class override abstract interface method . Consider following interface class : public interface Mammal { String identifyMyself ( ) ; } public class Horse { public String identifyMyself ( ) { return `` I horse . `` ; } } public class Mustang extend Horse implement Mammal { public static void main ( String ... args ) { Mustang myApp = new Mustang ( ) ; System.out.println ( myApp.identifyMyself ( ) ) ; } } The method Mustang.identifyMyself return string I horse . The class Mustang inherit method identifyMyself class Horse , override abstract method name interface Mammal . Note : Static method interface never inherit . Modifiers The access specifier override method allow , less , access overridden method . For example , protected instance method superclass make public , private , subclass . You get compile-time error attempt change instance method superclass static method subclass , vice versa . Summary The follow table summarize happen define method signature method superclass . Defining Method Same Signature Superclass 's Method Superclass Instance Method Superclass Static Method Subclass Instance Method Overrides Generates compile-time error Subclass Static Method Generates compile-time error Hides Note : In subclass , overload method inherit superclass . Such overload method neither hide override superclass instance methodsâ€”they new method , unique subclass .