The Files class primary entrypoint java.nio.file package . This class offer rich set static method reading , writing , manipulate file directory . The Files method work instance Path object . Before proceed remain section , familiarize following common concept : Releasing System Resources Catching Exceptions Varargs Atomic Operations Method Chaining What Is Glob ? Link Awareness Releasing System Resources Many resource use API , stream channel , implement extend java.io.Closeable interface . A requirement Closeable resource close method must invoke release resource longer require . Neglecting close resource negative implication application 's performance . The try-with-resources statement , describe next section , handle step . Catching Exceptions With file I/O , unexpected condition fact life : file exist ( n't exist ) expect , program n't access file system , default file system implementation support particular function , . Numerous error encounter . All method access file system throw IOException . It best practice catch exception embed method try-with-resources statement , introduce Java SE 7 release . The try-with-resources statement advantage compiler automatically generate code close resource ( ) longer require . The following code show might look : Charset charset = Charset.forName ( `` US-ASCII '' ) ; String = ... ; try ( BufferedWriter writer = Files.newBufferedWriter ( file , charset ) ) { writer.write ( , 0 , s.length ( ) ) ; } catch ( IOException x ) { System.err.format ( `` IOException : % % n '' , x ) ; } For information , see The try-with-resources Statement . Alternatively , embed file I/O method try block catch exception catch block . If code open stream channel , close finally block . The previous example would look something like follow use try-catch-finally approach : Charset charset = Charset.forName ( `` US-ASCII '' ) ; String = ... ; BufferedWriter writer = null ; try { writer = Files.newBufferedWriter ( file , charset ) ; writer.write ( , 0 , s.length ( ) ) ; } catch ( IOException x ) { System.err.format ( `` IOException : % % n '' , x ) ; } finally { ( writer ! = null ) writer.close ( ) ; } For information , see Catching Handling Exceptions . In addition IOException , many specific exception extend FileSystemException . This class useful method return file involve ( getFile ) , detailed message string ( getMessage ) , reason file system operation fail ( getReason ) , `` '' file involve , ( getOtherFile ) . The following code snippet show getFile method might use : try ( ... ) { ... } catch ( NoSuchFileException x ) { System.err.format ( `` % exist\n '' , x.getFile ( ) ) ; } For purpose clarity , file I/O examples lesson may show exception handling , code always include . Varargs Several Files method accept arbitrary number argument flag specify . For example , following method signature , ellipsis notation CopyOption argument indicate method accept variable number argument , varargs , typically call : Path Files.move ( Path , Path , CopyOption ... ) When method accept varargs argument , pass comma-separated list value array ( CopyOption [ ] ) value . In move example , method invoke follow : import static java.nio.file.StandardCopyOption . * ; Path source = ... ; Path target = ... ; Files.move ( source , target , REPLACE_EXISTING , ATOMIC_MOVE ) ; For information varargs syntax , see Arbitrary Number Arguments . Atomic Operations Several Files method , move , perform certain operation atomically file system . An atomic file operation operation interrupt `` partially '' perform . Either entire operation perform operation fail . This important multiple process operate area file system , need guarantee process access complete file . Method Chaining Many file I/O method support concept method chaining . You first invoke method return object . You immediately invoke method object , return yet another object , . Many I/O example use following technique : String value = Charset.defaultCharset ( ) .decode ( buf ) .toString ( ) ; UserPrincipal group = file.getFileSystem ( ) .getUserPrincipalLookupService ( ) . lookupPrincipalByName ( `` '' ) ; This technique produce compact code enable avoid declare temporary variable n't need . What Is Glob ? Two method Files class accept glob argument , glob ? You use glob syntax specify pattern-matching behavior . A glob pattern specify string match string , directory file name . Glob syntax follow several simple rule : An asterisk , * , match number character ( include none ) . Two asterisk , ** , work like * cross directory boundary . This syntax generally use match complete path . A question mark , ? , match exactly one character . Braces specify collection subpatterns . For example : { sun , moon , star } match `` sun '' , `` moon '' , `` star '' . { temp* , tmp* } match string begin `` temp '' `` tmp '' . Square bracket convey set single character , hyphen character ( - ) use , range character . For example : [ aeiou ] match lowercase vowel . [ 0-9 ] match digit . [ A-Z ] match uppercase letter . [ a-z , A-Z ] match uppercase lowercase letter . Within square bracket , * , ? , \ match . All character match . To match * , ? , special character , escape use backslash character , \ . For example : \\ match single backslash , \ ? match question mark . Here example glob syntax : *.html – Matches string end .html ? ? ? – Matches string exactly three letter digit * [ 0-9 ] * – Matches string contain numeric value * . { htm , html , pdf } – Matches string end .htm , .html .pdf ? *.java – Matches string beginning , follow least one letter digit , end .java { foo* , * [ 0-9 ] * } – Matches string begin foo string contain numeric value Note : If type glob pattern keyboard contain one special character , must put pattern quote ( `` * '' ) , use backslash ( \* ) , use whatever escape mechanism support command line . The glob syntax powerful easy use . However , sufficient need , also use regular expression . For information , see Regular Expressions lesson . For information glob sytnax , see API specification getPathMatcher method FileSystem class . Link Awareness The Files class `` link aware . '' Every Files method either detect symbolic link encounter , provide option enable configure behavior symbolic link encounter .