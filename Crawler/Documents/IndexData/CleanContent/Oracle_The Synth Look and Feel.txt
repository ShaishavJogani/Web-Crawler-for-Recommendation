Creating custom look feel , modify exist one , daunt task . The javax.swing.plaf.synth package use create custom look feel much less effort . You create Synth look feel either programatically use external XML file . The discussion devote creation Synth look feel use external XML file . Creating Synth c programatically discuss API documentation . With Synth look feel , provide `` look . '' Synth provide `` feel . '' Thus , think Synth L & F `` skin . '' The Synth Architecture Recall previous topic responsibility L & F provide concrete implementation many ComponentUI subclass define Swing . The Synth L & F take care . To use Synth , need create ComponentUIs—rather need specify component paint , along various property effect layout size . Synth operate granular level component—this granular level call `` region . '' Each component one region . Many component one region , JButton . Others multiple region , JScrollBar . Each ComponentUIs provide Synth associate SynthStyle region define ComponentUI . For example , Synth define three region JScrollBar : track , thumb scroll bar . The ScrollBarUI ( ComponentUI subclass define JScrollBar ) implementation Synth associate SynthStyle region . SynthStyle provide style information use Synth ComponentUI implementation . For example , SynthStyle define foreground background color , font information , forth . In addition , SynthStyle SynthPainter use paint region . For example , SynthPainter define two method paintScrollBarThumbBackground paintScrollBarThumbBorder , use paint scroll bar thumb region . Each ComponentUIs Synth obtain SynthStyles use SynthStyleFactory . There two way define SynthStyleFactory : Synth XML file , programatically . The following code show load XML file dictate look Synth—beneath cover create SynthStyleFactory implementation populate SynthStyles XML file : SynthLookAndFeel laf = new SynthLookAndFeel ( ) ; laf.load ( MyClass.class.getResourceAsStream ( `` laf.xml '' ) , MyClass.class ) ; UIManager.setLookAndFeel ( laf ) ; The programmatic route involve create implementation SynthStyleFactory return SynthStyles . The following code create custom SynthStyleFactory return distinct SynthStyles button tree : class MyStyleFactory extend SynthStyleFactory { public SynthStyle getStyle ( JComponent c , Region id ) { ( id == Region.BUTTON ) { return buttonStyle ; } else ( id == Region.TREE ) { return treeStyle ; } return defaultStyle ; } } SynthLookAndFeel laf = new SynthLookAndFeel ( ) ; UIManager.setLookAndFeel ( laf ) ; SynthLookAndFeel.setStyleFactory ( new MyStyleFactory ( ) ) ; The XML File An explanation DTD Synth XML file find javax.swing.plaf.synth/doc-files/synthFileFormat.html . When load Synth look feel , GUI component ( region ) definition ( `` style '' bound region , discuss ) render . There default behavior components—without style definition Synth XML file , GUI blank canvas . To specify rendering component ( region ) , XML file must contain < style > element , bind region use < bind > element . As example , let 's define style include font , foreground color , background color , bind style component . It good idea include element Synth XML file develop it—then , component n't yet define least color font : < synth > < style id= '' basicStyle '' > < font name= '' Verdana '' size= '' 16 '' / > < state > < color value= '' WHITE '' type= '' BACKGROUND '' / > < color value= '' BLACK '' type= '' FOREGROUND '' / > < /state > < /style > < bind style= '' basicStyle '' type= '' region '' key= '' . * '' / > < /synth > Let 's analyse style definition : The < style > element basic building block Synth XML file . It contain information need describe region 's rendering . A < style > element describe one region , . In general , though , best create < style > element component region . Note < style > element give identifier , string `` basicStyle . '' This identifier use later < bind > element . The < font > element < style > element set font Verdana , size 16 . The < state > element < style > element discuss . The < state > element region one , mixture , seven possible value . When value specify , definition applies state , intention . Therefore , background foreground color `` state '' define element . Finally , < style > element identifier `` basicStyle '' define bind region . The < bind > element bind `` basicStyle '' `` region '' type . Which region type type binding applies give `` key '' attribute , `` . * '' case , regular expression `` . '' Let 's look piece Synth XML file create working example . We 'll start < bind > element , show give < style > apply component region . The < bind > Element Whenever < style > element define , must bind one component region effect . The < bind > element use purpose . It require three attribute : style unique identifier previously define style . type either `` name '' `` region . '' If type name , obtain name component.getName ( ) method . If type region , use appropriate constant define Region class javax.swing.plaf.synth package . key regular expression use determine component region style bind . A Region way identify component part component . Regions base constant Region class , modify strip underscore : For example , identify SPLIT_PANE region would use SPLITPANE , splitpane , SplitPane ( case insensitive ) . When bind style region , style apply component region . You bind style one region , bind one style region . For example , < style id= '' styleOne '' > < ! -- styleOne definition go -- > < /style > < style id= '' styleTwo '' > < ! -- styleTwo definition go -- > < /style > < bind style= '' styleOne '' type= '' region '' key= '' Button '' / > < bind style= '' styleOne '' type= '' region '' key= '' RadioButton '' / > < bind style= '' styleOne '' type= '' region '' key= '' ArrowButton '' / > < bind style= '' styleTwo '' type= '' region '' key= '' ArrowButton '' / > You bind individual , name component , whether also bind region . For example , suppose want `` OK '' `` Cancel '' button GUI treat differently button . First , would give OK Cancel button names , use component.setName ( ) method . Then , would define three style : one button general ( region = `` Button '' ) , one OK button ( name = `` OK '' ) , one Cancel button ( name = `` Cancel '' ) . Finally , would bind style like : < bind style= '' styleButton '' type= '' region '' key= '' Button '' > < bind style= '' styleOK '' type= '' name '' key= '' OK '' > < bind style= '' styleCancel '' type= '' name '' key= '' Cancel '' > As result , `` OK '' button bind `` styleButton '' `` styleOK , '' `` Cancel '' button bind `` styleButton '' `` styleCancel . '' When component region bind one style , style merge Note : Just style bind multiple region name , multiple style bind region name . These multiple style merge region name . Precedence give style define later file . The < state > Element The < state > element allow define look region depend `` state . '' For example , usually want button PRESSED look different button ENABLED state . There seven possible value < state > define Synth XML DTD . They : ENABLED MOUSE_OVER PRESSED DISABLED FOCUSED SELECTED DEFAULT You also composite state , separate 'and'—for example , ENABLED FOCUSED . If specify value , defined look apply state . As example , style specify painter per state . All button paint certain way , unless state `` PRESSED , '' case paint differently : < style id= '' buttonStyle '' > < property key= '' Button.textShiftOffset '' type= '' integer '' value= '' 1 '' / > < inset top= '' 10 '' left= '' 10 '' right= '' 10 '' bottom= '' 10 '' / > < state > < imagePainter method= '' buttonBackground '' path= '' images/button.png '' sourceInsets= '' 10 10 10 10 '' / > < /state > < state value= '' PRESSED '' > < color value= '' # 9BC3B1 '' type= '' BACKGROUND '' / > < imagePainter method= '' buttonBackground '' path= '' images/button2.png '' sourceInsets= '' 10 10 10 10 '' / > < /state > < /style > < bind style= '' buttonStyle '' type= '' region '' key= '' Button '' / > Ignoring < property > < inset > element moment , see pressed button paint differently unpressed button . The < state > value use defined state closely match state region . Matching determine number value match state region . If none state value match , state value use . If match , state individual match choose . For example , following code defines three state : < state id= '' zero '' > < color value= '' RED '' type= '' BACKGROUND '' / > < /state > < state value= '' SELECTED PRESSED '' id= '' one '' > < color value= '' RED '' type= '' BACKGROUND '' / > < /state > < state value= '' SELECTED '' id= '' two '' > < color value= '' BLUE '' type= '' BACKGROUND '' / > < /state > If state region contain least SELECTED PRESSED , state one choose . If state contains SELECTED , contain PRESSED , state two use . If state contain neither SELECTED PRESSED , state zero use . When current state match number value two state definition , one use first one define style . For example , MOUSE_OVER state always true PRESSED button ( ca n't press button unless mouse ) . So , MOUSE_OVER state declare first , always choose PRESSED , painting define PRESSED . < state value= '' PRESSED '' > < imagePainter method= '' buttonBackground '' path= '' images/button_press.png '' sourceInsets= '' 9 10 9 10 '' / > < color type= '' TEXT_FOREGROUND '' value= '' # FFFFFF '' / > < /state > < state value= '' MOUSE_OVER '' > < imagePainter method= '' buttonBackground '' path= '' images/button_on.png '' sourceInsets= '' 10 10 10 10 '' / > < color type= '' TEXT_FOREGROUND '' value= '' # FFFFFF '' / > < /state > The code work properly . However , reverse order MOUSE_OVER PRESSED state file , PRESSED state never use . This state PRESSED state also MOUSE_OVER state . Since MOUSE_OVER state define first , one use . Colors Fonts The < color > element require two attribute : value one java.awt.Color constant , RED , WHITE , BLACK , BLUE , etc . It also hex representation RGB value , # FF00FF # 326A3B . type describe color applies—it BACKGROUND , FOREGROUND , FOCUS , TEXT_BACKGROUND , OR TEXT_FOREGROUND . For example : < style id= '' basicStyle '' > < state > < color value= '' WHITE '' type= '' BACKGROUND '' / > < color value= '' BLACK '' type= '' FOREGROUND '' / > < /state > < /style > The < font > element three attribute : name—the name font . For example , Arial Verdana . size—the size font pixel . style ( optional ) —BOLD , ITALIC , OR BOLD ITALIC . If omit , get normal font . For example : < style id= '' basicStyle '' > < font name= '' Verdana '' size= '' 16 '' / > < /style > Each < color > element < font > element alternate usage . Each id attribute idref attribute . Using id attribute , define color reuse later use idref attribute . For example , < color id= '' backColor '' value= '' WHITE '' type= '' BACKGROUND '' / > < font id= '' textFont '' name= '' Verdana '' size= '' 16 '' / > ... ... ... < color idref= '' backColor '' / > < font idref= '' textFont '' / > Insets The inset add size component draw . For example , without inset , button caption Cancel large enough contain caption chosen font . With < inset > element like < inset top= '' 15 '' left= '' 20 '' right= '' 20 '' bottom= '' 15 '' / > , button make large 15 pixel caption 20 pixel left right caption . Painting With Images Synth 's file format allow customize painting way image . Synth 's image painter break image nine distinct area : top , top right , right , bottom right , bottom , bottom leave , leave , top left , center . Each area paint destination . The top , leave , bottom , right edge tile stretch , corner portion ( sourceInsets ) remain fixed . Note : There relation < inset > element sourceInsets attribute . The < inset > element define space take region , sourceInsets attribute define paint image . The < inset > sourceInsets often similar , need . You specify whether center area paint paintCenter attribute . The following image show nine area : Let 's create button example . To use following image ( show large actual size ) : The red box upper left corner 10 pixel square ( include box border ) —it show corner region stretch painting . To achieve , top left sourceInsets set 10 . We 'll use following style binding : < style id= '' buttonStyle '' > < inset top= '' 15 '' left= '' 20 '' right= '' 20 '' bottom= '' 15 '' / > < state > < imagePainter method= '' buttonBackground '' path= '' images/button.png '' sourceInsets= '' 10 10 10 10 '' / > < /state > < /style > < bind style= '' buttonStyle '' type= '' region '' key= '' button '' / > The line inside < state > element specify background button paint use image images/button.png . That path relative Class pass SynthLookAndFeel 's load method . The sourceInsets attribute specify area image stretch . In case top , leave , bottom , right inset 10 . This cause painter stretch 10 x 10 pixel area corner image . The < bind > bind buttonStyle button . The < imagePainter > element provide information need render portion region . It require attribute : method—this specifies method javax.swing.plaf.synth.SynthPainter class use painting . The SynthPainter class contain 100 method begin paint . When determine one need , remove paint prefix , change remain first letter lowercase , use result method attribute . For example , SynthPainter method paintButtonBackground become attribute buttonBackground . path—the path image use , relative Class pass SynthLookAndFeel 's load method . sourceInsets—the inset pixel , represent width height corner area stretch They map top , leave , bottom , right , order . paintCenter ( optional ) : This attribute let keep center image get rid ( text field , example , text draw ) . The listing show XML code load different image depend < state > button < style id= '' buttonStyle '' > < property key= '' Button.textShiftOffset '' type= '' integer '' value= '' 1 '' / > < inset top= '' 15 '' left= '' 20 '' right= '' 20 '' bottom= '' 15 '' / > < state > < imagePainter method= '' buttonBackground '' path= '' images/button.png '' sourceInsets= '' 10 10 10 10 '' / > < /state > < state value= '' PRESSED '' > < imagePainter method= '' buttonBackground '' path= '' images/button2.png '' sourceInsets= '' 10 10 10 10 '' / > < /state > < /style > < bind style= '' buttonStyle '' type= '' region '' key= '' button '' / > button2.png show depressed version button.png , shift one pixel right . The line < property key= '' Button.textShiftOffset '' type= '' integer '' value= '' 1 '' / > shift button text accordingly , discuss next section . The < property > Element < property > element use add key value pair < style > element . Many component use key value pair configure visual appearance . The < property > element three attribute : key—the name property . type—the data type property . value—the value property . There property table ( componentProperties.html ) list property component support : javax/swing/plaf/synth/doc-files/componentProperties.html . Since button2.png image shift visual button one pixel depressed , also shift button text . There button property : < property key= '' Button.textShiftOffset '' type= '' integer '' value= '' 1 '' / > An Example Here example , use button style define . The button style , plus `` backing style '' definition font color bind region ( similar `` basicStyle '' show section title `` The XML File , '' ) combine buttonSkin.xmlHere listing buttonSkin.xml : < ! -- Synth skin include image button -- > < synth > < ! -- Style region use -- > < style id= '' backingStyle '' > < ! -- Make region use skin opaque -- > < opaque value= '' TRUE '' / > < font name= '' Dialog '' size= '' 12 '' / > < state > < ! -- Provide default color -- > < color value= '' # 9BC3B1 '' type= '' BACKGROUND '' / > < color value= '' RED '' type= '' FOREGROUND '' / > < /state > < /style > < bind style= '' backingStyle '' type= '' region '' key= '' . * '' / > < style id= '' buttonStyle '' > < ! -- Shift text one pixel press -- > < property key= '' Button.textShiftOffset '' type= '' integer '' value= '' 1 '' / > < inset top= '' 15 '' left= '' 20 '' right= '' 20 '' bottom= '' 15 '' / > < state > < imagePainter method= '' buttonBackground '' path= '' images/button.png '' sourceInsets= '' 10 10 10 10 '' / > < /state > < state value= '' PRESSED '' > < imagePainter method= '' buttonBackground '' path= '' images/button2.png '' sourceInsets= '' 10 10 10 10 '' / > < /state > < /style > < ! -- Bind buttonStyle JButtons -- > < bind style= '' buttonStyle '' type= '' region '' key= '' button '' / > < /synth > We load XML file use Synth look feel simple application call SynthApplication.java . The GUI application include button label . Every time button click , label increment . Note : The label paint , even though buttonSkin.xml contain style . This general `` backingStyle '' include font color . Here listing SynthApplication.javafile . Try : Click Launch button run SynthApplication example use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Painting With Icons Radio button check box typically render state fixed-size icon . For , create icon bind appropriate property ( refer property table , javax/swing/plaf/synth/doc-files/componentProperties.html ) . For example , paint radio button select unselected , use code : < style id= '' radioButton '' > < imageIcon id= '' radio_off '' path= '' images/radio_button_off.png '' / > < imageIcon id= '' radio_on '' path= '' images/radio_button_on.png '' / > < property key= '' RadioButton.icon '' value= '' radio_off '' / > < state value= '' SELECTED '' > < property key= '' RadioButton.icon '' value= '' radio_on '' / > < /state > < /style > < bind style= '' radioButton '' type= '' region '' key= '' RadioButton '' / > Custom Painters Synth 's file format allow embed arbitrary object way long-term persistence JavaBeans component . This ability particularly useful provide painter beyond image-based one Synth provide . For example , following XML code specifies gradient render background text field : < synth > < object id= '' gradient '' class= '' GradientPainter '' / > < style id= '' textfield '' > < painter method= '' textFieldBackground '' idref= '' gradient '' / > < /style > < bind style= '' textfield '' type= '' region '' key= '' textfield '' / > < /synth > Where GradientPainter class look like : public class GradientPainter extend SynthPainter { public void paintTextFieldBackground ( SynthContext context , Graphics g , int x , int , int w , int h ) { // For simplicity always recreate GradientPaint . In // real app cache avoid garbage . Graphics2D g2 = ( Graphics2D ) g ; g2.setPaint ( new GradientPaint ( ( float ) x , ( float ) , Color.WHITE , ( float ) ( x + w ) , ( float ) ( + h ) , Color.RED ) ) ; g2.fillRect ( x , , w , h ) ; g2.setPaint ( null ) ; } } Conclusion In lesson , cover use javax.swing.plaf.synth package create custom look feel . The emphasis lesson use external XML file define look feel . The next lesson present sample application create search dialog box use Synth framework XML file .