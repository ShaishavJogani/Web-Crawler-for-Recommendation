Up , primarily focus attach TransferHandler one JComponent subclass . But also set TransferHandler directly top-level container , JFrame JDialog . This particularly useful application import file , editor , IDEs , image manipulation program , CD burn program . Such application generally include menu , toolbar , area edit document , probably list mechanism switch open document . We example demo read file , provide Java Web Start version — download compile demo . As see screen shot , TopLevelTransferHandlerDemo menu ( empty , except Demo submenu ) , ( non-functional ) toolbar , area ( left ) display list open document , area ( right ) display content open document . At startup blue document area assign transfer handler support file import — place accept drop . Try : Compile run TopLevelTransferHandlerDemo example , consult example index would like download zip file structure NetBeans . Drag file native desktop file system drop blue document area right . The file open frame fill content appear . The document area , JDesktopPane , contain transfer handler support import javaFileListFlavor . Drag another file attempt drop document area . You find drop top frame display last file . You also drop list , menu , toolbar . The place drop blue portion document area menu bar previously open frame . Inside content frame text component 's transfer handler n't understand file drop — drop text area , file . From menu , choose Demo- > Use Top-Level TransferHandler install transfer handler top-level container — JFrame . Try drag demo . The number area accept drop increase . You drop anywhere application include menu bar , toolbar , frame 's title bar , except list ( left ) content area previously open file . Neither JList 's text area 's transfer handler know import file . Disable transfer handler remain component choose Demo- > Remove TransferHandler List Text menu . Drag demo . You drop file anywhere application ! From menu , choose Demo- > Use COPY Action . Drag demo . Note mouse cursor show COPY cursor — provide accurate feedback successful drop remove file source . The target program select available drop action describe Choosing Drop Action . Note one undesirable side effect disable default transfer handler text component : You longer drag drop ( cut/copy/paste ) text within edit area . To fix , need implement custom transfer handler text component accept file drop also re-implements miss support text transfer . You might want watch RFE 4830695 would allow add data import top exist TransferHandler . Here source code TopLevelTransferHandlerDemo.java : /** * Demonstration top-level { @ code TransferHandler } * support { @ code JFrame } . */ public class TopLevelTransferHandlerDemo extend JFrame { private static boolean DEMO = false ; private JDesktopPane dp = new JDesktopPane ( ) ; private DefaultListModel listModel = new DefaultListModel ( ) ; private JList list = new JList ( listModel ) ; private static int leave ; private static int top ; private JCheckBoxMenuItem copyItem ; private JCheckBoxMenuItem nullItem ; private JCheckBoxMenuItem thItem ; private class Doc extend InternalFrameAdapter implement ActionListener { String name ; JInternalFrame frame ; TransferHandler th ; JTextArea area ; public Doc ( File file ) { this.name = file.getName ( ) ; try { init ( file.toURI ( ) .toURL ( ) ) ; } catch ( MalformedURLException e ) { e.printStackTrace ( ) ; } } public Doc ( String name ) { this.name = name ; init ( getClass ( ) .getResource ( name ) ) ; } private void init ( URL url ) { frame = new JInternalFrame ( name ) ; frame.addInternalFrameListener ( ) ; listModel.add ( listModel.size ( ) , ) ; area = new JTextArea ( ) ; area.setMargin ( new Insets ( 5 , 5 , 5 , 5 ) ) ; try { BufferedReader reader = new BufferedReader ( new InputStreamReader ( url.openStream ( ) ) ) ; String ; ( ( = reader.readLine ( ) ) ! = null ) { area.append ( ) ; area.append ( `` \n '' ) ; } reader.close ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; return ; } th = area.getTransferHandler ( ) ; area.setFont ( new Font ( `` monospaced '' , Font.PLAIN , 12 ) ) ; area.setCaretPosition ( 0 ) ; area.setDragEnabled ( true ) ; area.setDropMode ( DropMode.INSERT ) ; frame.getContentPane ( ) .add ( new JScrollPane ( area ) ) ; dp.add ( frame ) ; frame.show ( ) ; ( DEMO ) { frame.setSize ( 300 , 200 ) ; } else { frame.setSize ( 400 , 300 ) ; } frame.setResizable ( true ) ; frame.setClosable ( true ) ; frame.setIconifiable ( true ) ; frame.setMaximizable ( true ) ; frame.setLocation ( leave , top ) ; incr ( ) ; SwingUtilities.invokeLater ( new Runnable ( ) { public void run ( ) { select ( ) ; } } ) ; nullItem.addActionListener ( ) ; setNullTH ( ) ; } public void internalFrameClosing ( InternalFrameEvent event ) { listModel.removeElement ( ) ; nullItem.removeActionListener ( ) ; } public void internalFrameOpened ( InternalFrameEvent event ) { int index = listModel.indexOf ( ) ; list.getSelectionModel ( ) .setSelectionInterval ( index , index ) ; } public void internalFrameActivated ( InternalFrameEvent event ) { int index = listModel.indexOf ( ) ; list.getSelectionModel ( ) .setSelectionInterval ( index , index ) ; } public String toString ( ) { return name ; } public void select ( ) { try { frame.toFront ( ) ; frame.setSelected ( true ) ; } catch ( java.beans.PropertyVetoException e ) { } } public void actionPerformed ( ActionEvent ae ) { setNullTH ( ) ; } public void setNullTH ( ) { ( nullItem.isSelected ( ) ) { area.setTransferHandler ( null ) ; } else { area.setTransferHandler ( th ) ; } } } private TransferHandler handler = new TransferHandler ( ) { public boolean canImport ( TransferHandler.TransferSupport support ) { ( ! support.isDataFlavorSupported ( DataFlavor.javaFileListFlavor ) ) { return false ; } ( copyItem.isSelected ( ) ) { boolean copySupported = ( COPY & support.getSourceDropActions ( ) ) == COPY ; ( ! copySupported ) { return false ; } support.setDropAction ( COPY ) ; } return true ; } public boolean importData ( TransferHandler.TransferSupport support ) { ( ! canImport ( support ) ) { return false ; } Transferable = support.getTransferable ( ) ; try { java.util.List < File > l = ( java.util.List < File > ) t.getTransferData ( DataFlavor.javaFileListFlavor ) ; ( File f : l ) { new Doc ( f ) ; } } catch ( UnsupportedFlavorException e ) { return false ; } catch ( IOException e ) { return false ; } return true ; } } ; private static void incr ( ) { leave += 30 ; top += 30 ; ( top == 150 ) { top = 0 ; } } public TopLevelTransferHandlerDemo ( ) { super ( `` TopLevelTransferHandlerDemo '' ) ; setJMenuBar ( createDummyMenuBar ( ) ) ; getContentPane ( ) .add ( createDummyToolBar ( ) , BorderLayout.NORTH ) ; JSplitPane sp = new JSplitPane ( JSplitPane.HORIZONTAL_SPLIT , list , dp ) ; sp.setDividerLocation ( 120 ) ; getContentPane ( ) .add ( sp ) ; //new Doc ( `` sample.txt '' ) ; //new Doc ( `` sample.txt '' ) ; //new Doc ( `` sample.txt '' ) ; list.getSelectionModel ( ) .setSelectionMode ( ListSelectionModel.SINGLE_SELECTION ) ; list.addListSelectionListener ( new ListSelectionListener ( ) { public void valueChanged ( ListSelectionEvent e ) { ( e.getValueIsAdjusting ( ) ) { return ; } Doc val = ( Doc ) list.getSelectedValue ( ) ; ( val ! = null ) { val.select ( ) ; } } } ) ; final TransferHandler th = list.getTransferHandler ( ) ; nullItem.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent ae ) { ( nullItem.isSelected ( ) ) { list.setTransferHandler ( null ) ; } else { list.setTransferHandler ( th ) ; } } } ) ; thItem.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent ae ) { ( thItem.isSelected ( ) ) { setTransferHandler ( handler ) ; } else { setTransferHandler ( null ) ; } } } ) ; dp.setTransferHandler ( handler ) ; } private static void createAndShowGUI ( String [ ] args ) { try { UIManager.setLookAndFeel ( UIManager.getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception e ) { } TopLevelTransferHandlerDemo test = new TopLevelTransferHandlerDemo ( ) ; test.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; ( DEMO ) { test.setSize ( 493 , 307 ) ; } else { test.setSize ( 800 , 600 ) ; } test.setLocationRelativeTo ( null ) ; test.setVisible ( true ) ; test.list.requestFocus ( ) ; } public static void main ( final String [ ] args ) { SwingUtilities.invokeLater ( new Runnable ( ) { public void run ( ) { //Turn metal 's use bold font UIManager.put ( `` swing.boldMetal '' , Boolean.FALSE ) ; createAndShowGUI ( args ) ; } } ) ; } private JToolBar createDummyToolBar ( ) { JToolBar tb = new JToolBar ( ) ; JButton b ; b = new JButton ( `` New '' ) ; b.setRequestFocusEnabled ( false ) ; tb.add ( b ) ; b = new JButton ( `` Open '' ) ; b.setRequestFocusEnabled ( false ) ; tb.add ( b ) ; b = new JButton ( `` Save '' ) ; b.setRequestFocusEnabled ( false ) ; tb.add ( b ) ; b = new JButton ( `` Print '' ) ; b.setRequestFocusEnabled ( false ) ; tb.add ( b ) ; b = new JButton ( `` Preview '' ) ; b.setRequestFocusEnabled ( false ) ; tb.add ( b ) ; tb.setFloatable ( false ) ; return tb ; } private JMenuBar createDummyMenuBar ( ) { JMenuBar mb = new JMenuBar ( ) ; mb.add ( createDummyMenu ( `` File '' ) ) ; mb.add ( createDummyMenu ( `` Edit '' ) ) ; mb.add ( createDummyMenu ( `` Search '' ) ) ; mb.add ( createDummyMenu ( `` View '' ) ) ; mb.add ( createDummyMenu ( `` Tools '' ) ) ; mb.add ( createDummyMenu ( `` Help '' ) ) ; JMenu demo = new JMenu ( `` Demo '' ) ; demo.setMnemonic ( KeyEvent.VK_D ) ; mb.add ( demo ) ; thItem = new JCheckBoxMenuItem ( `` Use Top-Level TransferHandler '' ) ; thItem.setMnemonic ( KeyEvent.VK_T ) ; demo.add ( thItem ) ; nullItem = new JCheckBoxMenuItem ( `` Remove TransferHandler List Text '' ) ; nullItem.setMnemonic ( KeyEvent.VK_R ) ; demo.add ( nullItem ) ; copyItem = new JCheckBoxMenuItem ( `` Use COPY Action '' ) ; copyItem.setMnemonic ( KeyEvent.VK_C ) ; demo.add ( copyItem ) ; return mb ; } private JMenu createDummyMenu ( String str ) { JMenu menu = new JMenu ( str ) ; JMenuItem item = new JMenuItem ( `` [ Empty ] '' ) ; item.setEnabled ( false ) ; menu.add ( item ) ; return menu ; } }