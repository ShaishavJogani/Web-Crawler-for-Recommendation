Many program internationalize first write . These program may start prototype , perhaps intend international distribution . If must internationalize exist program , take following step : Identify Culturally Dependent Data Text message obvious form data varies culture . However , type data may vary region language . The following list contains example culturally dependent data : Messages Labels GUI component Online help Sounds Colors Graphics Icons Dates Times Numbers Currencies Measurements Phone number Honorifics personal title Postal address Page layouts Isolate Translatable Text Resource Bundles Translation costly . You help reduce cost isolate text must translate ResourceBundle object . Translatable text include status message , error message , log file entry , GUI component label . This text hardcoded program n't internationalize . You need locate occurrence hardcoded text display end user . For example , clean code like : String buttonLabel = `` OK '' ; // ... JButton okButton = new JButton ( buttonLabel ) ; See section Isolating Locale-Specific Data detail . Deal Compound Messages Compound message contain variable data . In message `` The disk contain 1100 file . '' integer 1100 may vary . This message difficult translate position integer sentence language . The following message translatable , order sentence element hardcoded concatenation : Integer fileCount ; // ... String diskStatus = `` The disk contain `` + fileCount.toString ( ) + `` file '' ; Whenever possible , avoid construct compound message , difficult translate . However , application require compound message , handle technique describe section Messages . Format Numbers Currencies If application display number currency , must format locale-independent manner . The following code yet internationalize , display number correctly country : Double amount ; TextField amountField ; // ... String displayAmount = amount.toString ( ) ; amountField.setText ( displayAmount ) ; You replace precede code routine format number correctly . The Java programming language provide several class format number currency . These class discuss section Numbers Currencies . Format Dates Times Date time format differ region language . If code contain statement like following , need change : Date currentDate = new Date ( ) ; TextField dateField ; // ... String dateString = currentDate.toString ( ) ; dateField.setText ( dateString ) ; If use date-formatting class , application display date time correctly around world . For example instruction , see section Dates Times . Use Unicode Character Properties The follow code try verify character letter : char ch ; // This code incorrect ( ( ch > = 'a ' & & ch < = 'z ' ) || ( ch > = 'A ' & & ch < = 'Z ' ) ) Watch code like , wo n't work language English . For example , statement miss character ü German word Grün . The Character comparison method use Unicode standard identify character property . Thus replace previous code following : char ch ; // ... ( Character.isLetter ( ch ) ) For information Character comparison method , see section Checking Character Properties . Compare Strings Properly When sort text often compare string . If text display , n't use comparison method String class . A program n't internationalize might compare string follow : String target ; String candidate ; // ... ( target.equals ( candidate ) ) { // ... ( target.compareTo ( candidate ) < 0 ) { // ... The String.equals String.compareTo method perform binary comparison , ineffective sort language . Instead use Collator class , describe section Comparing Strings . Convert Non-Unicode Text Characters Java programming language encode Unicode . If application handle non-Unicode text , might need translate Unicode . For information , see section Converting Non-Unicode Text .