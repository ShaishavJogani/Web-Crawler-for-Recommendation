The example feature section consist two application : client server . The server continuously receive datagram packet datagram socket . Each datagram packet receive server indicate client request quotation . When server receive datagram , reply send datagram packet contain one-line `` quote moment '' back client . The client application example fairly simple . It send single datagram packet server indicating client would like receive quote moment . The client wait server send datagram packet response . Two class implement server application : QuoteServer QuoteServerThread . A single class implement client application : QuoteClient . Let 's investigate class , start class contain main method server application . Working With Server-Side Application contain applet version QuoteClient class . The QuoteServer Class The QuoteServer class , show entirety , contain single method : main method quote server application . The main method simply create new QuoteServerThread object start : import java.io . * ; public class QuoteServer { public static void main ( String [ ] args ) throw IOException { new QuoteServerThread ( ) .start ( ) ; } } The QuoteServerThread class implement main logic quote server . The QuoteServerThread Class When create , QuoteServerThread create DatagramSocket port 4445 ( arbitrarily choose ) . This DatagramSocket server communicate client . public QuoteServerThread ( ) throw IOException { ( `` QuoteServer '' ) ; } public QuoteServerThread ( String name ) throw IOException { super ( name ) ; socket = new DatagramSocket ( 4445 ) ; try { = new BufferedReader ( new FileReader ( `` one-liners.txt '' ) ) ; } catch ( FileNotFoundException e ) { System.err.println ( `` Could n't open quote file . Serving time instead . `` ) ; } } Remember certain port dedicate well-known service use . If specify port use , creation DatagramSocket fail . The constructor also open BufferedReader file name one-liners.txt contain list quote . Each quote file line . Now interesting part QuoteServerThread : run method . The run method override run Thread class provide implementation thread . For information thread , see Defining Starting Thread . The run method contain loop continue long quote file . During iteration loop , thread wait DatagramPacket arrive DatagramSocket . The packet indicate request client . In response client 's request , QuoteServerThread get quote file , put DatagramPacket send DatagramSocket client ask . Let 's look first section receive request client : byte [ ] buf = new byte [ 256 ] ; DatagramPacket packet = new DatagramPacket ( buf , buf.length ) ; socket.receive ( packet ) ; The first statement create array byte use create DatagramPacket . The DatagramPacket use receive datagram socket constructor use create . This constructor require two argument : byte array contain client-specific data length byte array . When construct DatagramPacket send DatagramSocket , also must supply Internet address port number packet 's destination . You 'll see later discuss server respond client request . The last statement previous code snippet receive datagram socket ( information receive client get copy packet ) . The receive method wait forever packet receive . If packet receive , server make progress wait . Now assume , server receive request client quote . Now server must respond . This section code run method construct response : String dString = null ; ( == null ) dString = new Date ( ) .toString ( ) ; else dString = getNextQuote ( ) ; buf = dString.getBytes ( ) ; If quote file get open reason , equal null . If case , quote server serve time day instead . Otherwise , quote server get next quote already open file . Finally , code convert string array byte . Now , run method send response client DatagramSocket code : InetAddress address = packet.getAddress ( ) ; int port = packet.getPort ( ) ; packet = new DatagramPacket ( buf , buf.length , address , port ) ; socket.send ( packet ) ; The first two statement code segment get Internet address port number , respectively , datagram packet receive client . The Internet address port number indicate datagram packet come . This server must send response . In example , byte array datagram packet contain relevant information . The arrival packet indicate request client find Internet address port number indicate datagram packet . The third statement create new DatagramPacket object intend send datagram message datagram socket . You tell new DatagramPacket intend send data socket constructor use create . This constructor require four argument . The first two argument require constructor use create receive datagrams : byte array contain message sender receiver length array . The next two argument different : Internet address port number . These two argument complete address destination datagram packet must supply sender datagram . The last line code send DatagramPacket way . When server read quote quote file , loop terminates run method clean : socket.close ( ) ; The QuoteClient Class The QuoteClient class implement client application QuoteServer . This application send request QuoteServer , wait response , , response receive , display standard output . Let 's look code detail . The QuoteClient class contain one method , main method client application . The top main method declare several local variable use : int port ; InetAddress address ; DatagramSocket socket = null ; DatagramPacket packet ; byte [ ] sendBuf = new byte [ 256 ] ; First , main method process command-line argument use invoke QuoteClient application : ( args.length ! = 1 ) { System.out.println ( `` Usage : java QuoteClient < hostname > '' ) ; return ; } The QuoteClient application require one command-line argument : name machine QuoteServer run . Next , main method create DatagramSocket : DatagramSocket socket = new DatagramSocket ( ) ; The client use constructor require port number . This constructor bind DatagramSocket available local port . It n't matter port client bind DatagramPackets contain address information . The server get port number DatagramPackets send response port . Next , QuoteClient program send request server : byte [ ] buf = new byte [ 256 ] ; InetAddress address = InetAddress.getByName ( args [ 0 ] ) ; DatagramPacket packet = new DatagramPacket ( buf , buf.length , address , 4445 ) ; socket.send ( packet ) ; The code segment get Internet address host name command line ( presumably name machine server run ) . This InetAddress port number 4445 ( port number server use create DatagramSocket ) use create DatagramPacket destine Internet address port number . Therefore DatagramPacket deliver quote server . Note code create DatagramPacket empty byte array . The byte array empty datagram packet simply request server information . All server need know send response -- address port number reply -- automatically part packet . Next , client get response server display : packet = new DatagramPacket ( buf , buf.length ) ; socket.receive ( packet ) ; String receive = new String ( packet.getData ( ) , 0 , packet.getLength ( ) ) ; System.out.println ( `` Quote Moment : `` + receive ) ; To get response server , client create `` receive '' packet use DatagramSocket receive method receive reply server . The receive method wait datagram packet destine client come socket . Note server 's reply somehow lose , client wait forever no-guarantee policy datagram model . Normally , client set timer n't wait forever reply ; reply arrive , timer go client retransmits . When client receive reply server , client use getData method retrieve data packet . The client convert data string display . Running Server Client After 've successfully compile server client program , run . You run server program first . Just use Java interpreter specify QuoteServer class name . Once server start , run client program . Remember run client program one command-line argument : name host QuoteServer run . After client send request receive response server , see output similar : Quote Moment : Good programming 99 % sweat 1 % coffee .