A raw type name generic class interface without type argument . For example , give generic Box class : public class Box < T > { public void set ( T ) { /* ... */ } // ... } To create parameterized type Box < T > , supply actual type argument formal type parameter T : Box < Integer > intBox = new Box < > ( ) ; If actual type argument omit , create raw type Box < T > : Box rawBox = new Box ( ) ; Therefore , Box raw type generic type Box < T > . However , non-generic class interface type raw type . Raw type show legacy code lot API class ( Collections class ) generic prior JDK 5.0 . When use raw type , essentially get pre-generics behavior â€” Box give Objects . For backward compatibility , assign parameterized type raw type allow : Box < String > stringBox = new Box < > ( ) ; Box rawBox = stringBox ; // OK But assign raw type parameterized type , get warning : Box rawBox = new Box ( ) ; // rawBox raw type Box < T > Box < Integer > intBox = rawBox ; // warning : unchecked conversion You also get warning use raw type invoke generic method define corresponding generic type : Box < String > stringBox = new Box < > ( ) ; Box rawBox = stringBox ; rawBox.set ( 8 ) ; // warning : unchecked invocation set ( T ) The warning show raw type bypass generic type check , defer catch unsafe code runtime . Therefore , avoid use raw type . The Type Erasure section information Java compiler use raw type . Unchecked Error Messages As mention previously , mix legacy code generic code , may encounter warn message similar following : Note : Example.java us unchecked unsafe operation . Note : Recompile -Xlint : unchecked detail . This happen use old API operate raw type , show following example : public class WarningDemo { public static void main ( String [ ] args ) { Box < Integer > bi ; bi = createBox ( ) ; } static Box createBox ( ) { return new Box ( ) ; } } The term `` unchecked '' mean compiler enough type information perform type check necessary ensure type safety . The `` unchecked '' warning disable , default , though compiler give hint . To see `` unchecked '' warning , recompile -Xlint : unchecked . Recompiling previous example -Xlint : unchecked reveal following additional information : WarningDemo.java:4 : warning : [ unchecked ] unchecked conversion find : Box require : Box < java.lang.Integer > bi = createBox ( ) ; ^ 1 warn To completely disable unchecked warning , use -Xlint : -unchecked flag . The @ SuppressWarnings ( `` unchecked '' ) annotation suppresses unchecked warning . If unfamiliar @ SuppressWarnings syntax , see Annotations .