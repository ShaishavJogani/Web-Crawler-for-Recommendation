This tutorial discuss java.time.chrono package detail . However , might useful know package provide several predefined chronology ISO-based , Japanese , Hijrah , Minguo , Thai Buddhist . You also use package create chronology . This section show convert ISO-based date date one predefined chronology . Converting Non-ISO-Based Date You convert ISO-based date date another chronology use ( TemporalAccessor ) method , JapaneseDate.from ( TemporalAccessor ) . This method throw DateTimeException unable convert date valid instance . The following code convert LocalDateTime instance several predefined non-ISO calendar date : LocalDateTime date = LocalDateTime.of ( 2013 , Month.JULY , 20 , 19 , 30 ) ; JapaneseDate jdate = JapaneseDate.from ( date ) ; HijrahDate hdate = HijrahDate.from ( date ) ; MinguoDate mdate = MinguoDate.from ( date ) ; ThaiBuddhistDate tdate = ThaiBuddhistDate.from ( date ) ; The StringConverter example convert LocalDate ChronoLocalDate String back . The toString method take instance LocalDate Chronology return converted string use provided Chronology . The DateTimeFormatterBuilder use build string use print date : /** * Converts LocalDate ( ISO ) value ChronoLocalDate date * use provided Chronology , format * ChronoLocalDate String use DateTimeFormatter * SHORT pattern base Chronology current Locale . * * @ param localDate - ISO date convert format . * @ param chrono - optional Chronology . If null , IsoChronology use . */ public static String toString ( LocalDate localDate , Chronology chrono ) { ( localDate ! = null ) { Locale locale = Locale.getDefault ( Locale.Category.FORMAT ) ; ChronoLocalDate cDate ; ( chrono == null ) { chrono = IsoChronology.INSTANCE ; } try { cDate = chrono.date ( localDate ) ; } catch ( DateTimeException ex ) { System.err.println ( ex ) ; chrono = IsoChronology.INSTANCE ; cDate = localDate ; } DateTimeFormatter dateFormatter = DateTimeFormatter.ofLocalizedDate ( FormatStyle.SHORT ) .withLocale ( locale ) .withChronology ( chrono ) .withDecimalStyle ( DecimalStyle.of ( locale ) ) ; String pattern = `` M/d/yyyy GGGGG '' ; return dateFormatter.format ( cDate ) ; } else { return `` '' ; } } When method invoke following date predefined chronology : LocalDate date = LocalDate.of ( 1996 , Month.OCTOBER , 29 ) ; System.out.printf ( `` % % n '' , StringConverter.toString ( date , JapaneseChronology.INSTANCE ) ) ; System.out.printf ( `` % % n '' , StringConverter.toString ( date , MinguoChronology.INSTANCE ) ) ; System.out.printf ( `` % % n '' , StringConverter.toString ( date , ThaiBuddhistChronology.INSTANCE ) ) ; System.out.printf ( `` % % n '' , StringConverter.toString ( date , HijrahChronology.INSTANCE ) ) ; The output look like : 10/29/0008 H 10/29/0085 1 10/29/2539 B.E . 6/16/1417 1 Converting ISO-Based Date You convert non-ISO date LocalDate instance use static LocalDate.from method , show following example : LocalDate date = LocalDate.from ( JapaneseDate.now ( ) ) ; Other temporal-based class also provide method , throw DateTimeException date convert . The fromString method , StringConverter example , parse String contain non-ISO date return LocalDate instance . /** * Parses String ChronoLocalDate use DateTimeFormatter * short pattern base current Locale * provide Chronology , convert LocalDate ( ISO ) * value . * * @ param text - input date text SHORT format expect * Chronology current Locale . * * @ param chrono - optional Chronology . If null , IsoChronology * use . */ public static LocalDate fromString ( String text , Chronology chrono ) { ( text ! = null & & ! text.isEmpty ( ) ) { Locale locale = Locale.getDefault ( Locale.Category.FORMAT ) ; ( chrono == null ) { chrono = IsoChronology.INSTANCE ; } String pattern = `` M/d/yyyy GGGGG '' ; DateTimeFormatter df = new DateTimeFormatterBuilder ( ) .parseLenient ( ) .appendPattern ( pattern ) .toFormatter ( ) .withChronology ( chrono ) .withDecimalStyle ( DecimalStyle.of ( locale ) ) ; TemporalAccessor temporal = df.parse ( text ) ; ChronoLocalDate cDate = chrono.date ( temporal ) ; return LocalDate.from ( cDate ) ; } return null ; } When method invoke following string : System.out.printf ( `` % % n '' , StringConverter.fromString ( `` 10/29/0008 H '' , JapaneseChronology.INSTANCE ) ) ; System.out.printf ( `` % % n '' , StringConverter.fromString ( `` 10/29/0085 1 '' , MinguoChronology.INSTANCE ) ) ; System.out.printf ( `` % % n '' , StringConverter.fromString ( `` 10/29/2539 B.E . `` , ThaiBuddhistChronology.INSTANCE ) ) ; System.out.printf ( `` % % n '' , StringConverter.fromString ( `` 6/16/1417 1 '' , HijrahChronology.INSTANCE ) ) ; The printed string convert back October 29th , 1996 : 1996-10-29 1996-10-29 1996-10-29 1996-10-29