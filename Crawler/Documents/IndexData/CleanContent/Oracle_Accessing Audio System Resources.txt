The Java Sound API take flexible approach system configuration . Different sort audio device ( mixer ) instal computer . The API make assumption device instal capability . Instead , provide way system report available audio component , way program access . The following section show program learn sampled-audio resource instal computer , gain access available resource . Among thing , resource include mixer various type line mixer . The AudioSystem Class The AudioSystem class act clearinghouse audio component , include built-in service separately instal service third-party provider . AudioSystem serve application program 's entry point access instal sampled-audio resource . You query AudioSystem learn sort resource instal , obtain access . For example , application program might start ask AudioSystem class whether mixer certain configuration , one input output configuration illustrate earlier discussion line . From mixer , program would obtain data line , . Here resource application program obtain AudioSystem : Mixers — A system typically multiple mixer instal . There usually least one audio input one audio output . There might also mixer n't I/O port instead accept audio application program deliver mixed audio back program . The AudioSystem class provide list installed mixer . Lines — Even though every line associate mixer , application program get line directly AudioSystem , without deal explicitly mixer . Format conversion — An application program use format conversion translate audio data one format another . Files stream — The AudioSystem class provide method translate audio file audio stream . It also report file format sound file write file different format . Information Objects Several class Java Sound API provide useful information associated interface . For example , Mixer.Info provide detail installed mixer , mixer 's vendor , name , description , version . Line.Info obtain class specific line . Subclasses Line.Info include Port.Info DataLine.Info , obtain detail relevant specific port data line , respectively . Each class describe far appropriate section . It 's important confuse Info object mixer line object describe . Getting Mixer Usually , one first thing program use Java Sound API need obtain mixer , least one line mixer , get sound computer . Your program might need specific kind mixer , might want display list available mixer user select one . In either case , need learn kind mixer instal . AudioSystem provide following method : static Mixer.Info [ ] getMixerInfo ( ) Each Mixer.Info object return method identify one type mixer instal . ( Usually system one mixer give type . If happen one give type , returned array still one Mixer.Info type . ) An application program iterate Mixer.Info object find appropriate one , accord need . The Mixer.Info include following string identify kind mixer : Name Version Vendor Description These arbitrary string , application program need specific mixer must know expect compare string . The company provide mixer include information documentation . Alternatively , perhaps typically , application program display Mixer.Info object ' string user let user choose corresponding mixer . Once appropriate mixer find , application program invoke following AudioSystem method obtain desired mixer : static Mixer getMixer ( Mixer.Info info ) What program need mixer certain capability , n't need specific mixer make specific vendor ? And ca n't depend user 's knowing mixer choose ? In case , information Mixer.Info object wo n't much use . Instead , iterate Mixer.Info object return getMixerInfo , get mixer invoke getMixer , query mixer capability . For example , might need mixer write mixed audio data certain number target data line simultaneously . In case , would query mixer use Mixer method : int getMaxLines ( Line.Info info ) Here , Line.Info would specify TargetDataLine . The Line.Info class discuss next section . Getting Line Desired Type There two way get line : Directly AudioSystem object From mixer already obtain AudioSystem object Getting Line Directly AudioSystem Let 's assume n't obtain mixer , program simple one really need certain kind line ; detail mixer n't matter . You use AudioSystem method : static Line getLine ( Line.Info info ) analogous getMixer method discuss previously . Unlike Mixer.Info , Line.Info use argument n't store textual information specify desired line . Instead , store information class line desire . Line.Info abstract class , use one subclass ( Port.Info DataLine.Info ) obtain line . The following code excerpt use DataLine.Info subclass obtain open target data line : TargetDataLine line ; DataLine.Info info = new DataLine.Info ( TargetDataLine.class , format ) ; // format AudioFormat object ( ! AudioSystem.isLineSupported ( info ) ) { // Handle error. } // Obtain open line . try { line = ( TargetDataLine ) AudioSystem.getLine ( info ) ; line.open ( format ) ; } catch ( LineUnavailableException ex ) { // Handle error . // ... } This code obtain TargetDataLine object without specify attribute class audio format . You use analogous code obtain kind line . For SourceDataLine Clip , substitute class TargetDataLine class line variable , also first argument DataLine.Info constructor . For Port , use static instance Port.Info , code like following : ( AudioSystem.isLineSupported ( Port.Info.MICROPHONE ) ) { try { line = ( Port ) AudioSystem.getLine ( Port.Info.MICROPHONE ) ; } } Note use method isLineSupported see whether mixer even line desired type . Recall source line input mixer , namely , Port object mixer represent audio-input device , SourceDataLine Clip object mixer represent audio-output device . Similarly , target line output mixer : Port object audio-output mixer , TargetDataLine object audio-input mixer . What mixer n't connect external hardware device ? For example , consider internal software-only mixer get audio application program deliver mixed audio back program . This kind mixer SourceDataLine Clip object input line TargetDataLine object output line . You also use following AudioSystem method learn source target line specified type support installed mixer : static Line.Info [ ] getSourceLineInfo ( Line.Info info ) static Line.Info [ ] getTargetLineInfo ( Line.Info info ) Note array return method indicate unique type line , necessarily line . For example , two mixer 's line , two line different mixer , identical Line.Info object , two line represent one Line.Info returned array . Getting Line Mixer The Mixer interface include variation AudioSystem access method source target line , describe . These Mixer method include one take Line.Info argument , AudioSystem 's method . However , Mixer also include variant , take argument : Line.Info [ ] getSourceLineInfo ( ) Line.Info [ ] getTargetLineInfo ( ) These method return array Line.Info object particular mixer . Once 've obtain array , iterate , call Mixer 's getLine method obtain line , follow Line 's open method reserve use line program . Selecting Input Output Ports The previous section , regard obtain line desired type , applies port well type line . You obtain source ( i.e. , input ) target ( i.e , output ) port pass Port.Info object AudioSystem ( Mixer ) method getSourceLineInfo getTargetLineInfo take Line.Info argument . You iterate returned array object invoke Mixer 's getLine method get port . You open Port invoke Line 's open method . Opening port mean turn onâthat , allow sound come port . Similarly , close port n't want sound travel , port might already open even obtain . Some platform leave port default ; user system administrator might select certain port , use another application program operating-system software . Warning : If want select certain port make sure sound actually go port , open port described . However , consider user-hostile behavior ! For example , user might speaker port turn disturb co-worker . She would rather upset program suddenly override wish start blare music . As another example , user might want assure computer 's microphone never turn without knowledge , avoid eavesdropping . In general , recommend open close port unless program respond user 's intention , express user interface . Instead , respect setting user operating system already select . It n't necessary open close port mixer 's attach function correctly . For example , start play back sound audio-output mixer , even though output port close . The data still flow mixer ; playback n't block . The user wo n't hear anything . As soon user open output port , sound audible port , start whatever point medium playback already reach . Also , n't need access port learn whether mixer certain port . To learn whether mixer actually audio-output mixer , example , invoke getTargetLineInfo see whether output port . There 's reason access port unless want change setting ( open-or-closed state , setting control might ) . Permission Use Audio Resources The Java Sound API include AudioPermission class indicate kinds access applet ( application run security manager ) sampled-audio system . Permission record sound control separately . This permission grant care , help prevent security risk unauthorized eavesdropping . By default , applet application grant permission follow : An applet run applet security manager play , record , audio . An application run security manager play record audio . An application run default security manager play , record , audio . In general , applet run scrutiny security manager n't permit record sound . Applications , hand , n't automatically install security manager , able record sound . ( However , default security manager invoke explicitly application , application n't permit record sound . ) Both applet application record sound even run security manager grant explicit permission . If program n't permission record ( play ) sound , exception throw attempt open line . There nothing program , catch exception report problem user , permission ca n't change API . ( If could , would pointless , nothing would secure ! ) Generally , permission set one policy configuration file , user system administrator edit use text editor Policy Tool program .