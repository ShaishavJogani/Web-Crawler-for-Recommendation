Many component – even primarily operate mouse , button – operate keyboard . For key press affect component , component must keyboard focus . From user 's point view , component keyboard focus generally prominent – dotted black border , example . The window contain component also prominent window onscreen . These visual cue let user know component typing relate . Only one component time window system keyboard focus . Exactly window gain focus depend windowing system . There foolproof way , across platform , ensure window gain focus . On operating system , Microsoft Windows , front window usually become focused window . In case , Window.toFront method move window front , thereby give focus . However , operate system , Solaris™ Operating System , window manager may choose focus window base cursor position , case behavior Window.toFront method different . A component generally gain focus user click , user tab component , otherwise interacts component . A component also give focus programmatically , containing frame dialog-box make visible . This code snippet show give particular component focus every time window gain focus : //Make textField get focus whenever frame activate . frame.addWindowFocusListener ( new WindowAdapter ( ) { public void windowGainedFocus ( WindowEvent e ) { textField.requestFocusInWindow ( ) ; } } ) ; If want ensure particular component gain focus first time window activate , call requestFocusInWindow method component component realize , frame display . The following sample code show operation : // ... Where initialization occur ... JFrame frame = new JFrame ( `` Test '' ) ; JPanel panel = new JPanel ( new BorderLayout ( ) ) ; // ... Create variety component ... //Create component initial focus . JButton button = new JButton ( `` I first '' ) ; panel.add ( button ) ; frame.getContentPane ( ) .add ( panel ) ; //Add panel frame.pack ( ) ; //Realize component . //This button initial focus . button.requestFocusInWindow ( ) ; frame.setVisible ( true ) ; //Display window . Alternatively , apply custom FocusTraversalPolicy frame call getDefaultComponent method determine component gain focus . The rest section cover following topic : Introduction Focus Subsystem Validating Input Making Custom Component Focusable Customizing Focus Traversal Tracking Focus Changes Multiple Components Timing Focus Transfers The Focus API Focus Examples Introduction Focus Subsystem The focus subsystem design right thing invisibly possible . In case behave reasonable manner , tweak behavior various way . Some common scenario might include : The ordering right first component focus set . As show code snippet preceding section , use requestFocusInWindow method set focus component window become visible . The ordering wrong . To fix issue , change containment hierarchy , change order component add container , create custom focus traversal policy . For detail see Customizing Focus Traversal . A component must prevent lose focus , need check value component lose focus . Input verification solution problem . A custom component get focus . To fix issue , need make sure satisfy requirement outline Making Custom Component Focusable . The FocusConceptsDemo example illustrate concept . Try : Click Launch button run FocusConceptsDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . If necessary , click window give focus . Move focus component component use Tab key . You notice focus move text area , stay text area . Move focus text area use Control-Tab . Move focus opposite direction use Shift-Tab . Move focus text area opposite direction use Control-Shift-Tab . The KeyboardFocusManager critical element focus subsystem . It manage state initiate change . The keyboard manager track focus owner â component receive type keyboard . The focused window window contain focus owner . JWindow focus : To use JWindow component GUI , know JWindow component 's owning frame must visible order component window get focus . By default , specify owning frame JWindow component , invisible owning frame create . The result component JWindow component might able get focus . The solution either specify visible owning frame create JWindow component , use undecorated JFrame component instead . A focus cycle ( focus traversal cycle ) set component share common ancestor containment hierarchy . The focus cycle root container root particular focus traversal cycle . By default , every JWindow JInternalFrame component focus cycle root . A focus cycle root contain one focus cycle root . The follow Swing object focus cycle root : JApplet , JDesktopPane , JDialog , JEditorPane , JFrame , JInternalFrame , JWindow . While might appear JTable JTree object focus cycle root , . A focus traversal policy determine order group component navigate . Swing provide LayoutFocusTraversalPolicy class , decide order navigation base layout manager-dependent factor , size , location , orientation component . Within focus cycle , component navigate forward backward direction . In hierarchy focus cycle root , upwards traversal take focus current cycle parent cycle . In Look Feel model , component navigate use Tab Shift-Tab key . These key default focus traversal key change programmatically . For example , add Enter forward focus traversal key follow four line code : Set forwardKeys = getFocusTraversalKeys ( KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS ) ; Set newForwardKeys = new HashSet ( forwardKeys ) ; newForwardKeys.add ( KeyStroke.getKeyStroke ( KeyEvent.VK_ENTER , 0 ) ) ; setFocusTraversalKeys ( KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS , newForwardKeys ) ; Tab shift focus forward direction . Shift-Tab move focus backward direction . For example , FocusConceptsDemo , first button initial focus . Tabbing move focus button text area . Additional tabbing move cursor within text area text area , inside text area , Tab focus traversal key . However , Control-Tab move focus text area first text field . Likewise , Control-Shift-Tab move focus text area previous component . The Control key use convention move focus component treat Tab special way , JTable . You receive brief introduction focus architecture . If want detail , see specification Focus Subsystem . Validating Input A common requirement GUI design component restrict user 's input â example , text field allow numeric input decimal format ( money , example ) text field allow 5 digit zip code . An easy-to-use format text field component allow input restrict variety localizable format . You also specify custom formatter text field , perform special check determine whether value format correctly , also reasonable . You use input verifier alternative custom formatter , component text field . An input verifier allow reject specific value , properly format invalid zip code , value outside desired range , example body temperature high 110°F . To use input verifier , create subclass InputVerifier , create instance subclass , set instance input verifier one component . A component 's input verifier consult whenever component lose focus . If component 's value acceptable , input verifier take appropriate action , refuse yield focus component replace user 's input last valid value allow focus transfer next component . However , InputVerifier call focus transfer another toplevel component . The following two example show mortgage calculator . One use format text field us input verification standard text field . Try : Click Launch button run FormattedTextFieldDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Click Launch button run InputVerificationDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Compare two mortgage calculator side side . You see input verification demo specifies valid input value associated label editable text field . Try enter badly format value example observe behavior . Then try enter properly format , unacceptable value . You find code Input Verification demo InputVerificationDemo.java . Here code InputVerifier subclass , MyVerifier : class MyVerifier extend InputVerifier implement ActionListener { double MIN_AMOUNT = 10000.0 ; double MAX_AMOUNT = 10000000.0 ; double MIN_RATE = 0.0 ; int MIN_PERIOD = 1 ; int MAX_PERIOD = 40 ; public boolean shouldYieldFocus ( JComponent input ) { boolean inputOK = verify ( input ) ; makeItPretty ( input ) ; updatePayment ( ) ; ( inputOK ) { return true ; } else { Toolkit.getDefaultToolkit ( ) .beep ( ) ; return false ; } } protect void updatePayment ( ) { double amount = DEFAULT_AMOUNT ; double rate = DEFAULT_RATE ; int numPeriods = DEFAULT_PERIOD ; double payment = 0.0 ; //Parse value . try { amount = moneyFormat.parse ( amountField.getText ( ) ) . doubleValue ( ) ; } catch ( ParseException pe ) { pe.printStackTrace ( ) ; } try { rate = percentFormat.parse ( rateField.getText ( ) ) . doubleValue ( ) ; } catch ( ParseException pe ) { pe.printStackTrace ( ) ; } try { numPeriods = decimalFormat.parse ( numPeriodsField.getText ( ) ) . intValue ( ) ; } catch ( ParseException pe ) { pe.printStackTrace ( ) ; } //Calculate result update GUI . payment = computePayment ( amount , rate , numPeriods ) ; paymentField.setText ( paymentFormat.format ( payment ) ) ; } //This method check input , cause side effect . public boolean verify ( JComponent input ) { return checkField ( input , false ) ; } protect void makeItPretty ( JComponent input ) { checkField ( input , true ) ; } protect boolean checkField ( JComponent input , boolean changeIt ) { ( input == amountField ) { return checkAmountField ( changeIt ) ; } else ( input == rateField ) { return checkRateField ( changeIt ) ; } else ( input == numPeriodsField ) { return checkNumPeriodsField ( changeIt ) ; } else { return true ; //should happen } } //Checks amount field valid . If valid , //it return true ; otherwise , return false . If //change argument true , method set //value minimum maximum value necessary // ( even ) set parsed number // look good -- letter , example . protect boolean checkAmountField ( boolean change ) { boolean wasValid = true ; double amount = DEFAULT_AMOUNT ; //Parse value . try { amount = moneyFormat.parse ( amountField.getText ( ) ) . doubleValue ( ) ; } catch ( ParseException pe ) { pe.printStackTrace ( ) ; wasValid = false ; } //Value invalid . ( ( amount < MIN_AMOUNT ) || ( amount > MAX_AMOUNT ) ) { wasValid = false ; ( change ) { ( amount < MIN_AMOUNT ) { amount = MIN_AMOUNT ; } else { // amount great MAX_AMOUNT amount = MAX_AMOUNT ; } } } //Whether value valid , format nicely . ( change ) { amountField.setText ( moneyFormat.format ( amount ) ) ; amountField.selectAll ( ) ; } return wasValid ; } //Checks rate field valid . If valid , //it return true ; otherwise , return false . If //change argument true , method reign //value necessary ( even ) set //parsed number look good -- letter , //for example . protect boolean checkRateField ( boolean change ) { ... //Similar checkAmountField ... } //Checks numPeriods field valid . If valid , //it return true ; otherwise , return false . If //change argument true , method reign //value necessary ( even ) set //parsed number look good -- letter , //for example . protect boolean checkNumPeriodsField ( boolean change ) { ... //Similar checkAmountField ... } public void actionPerformed ( ActionEvent e ) { JTextField source = ( JTextField ) e.getSource ( ) ; shouldYieldFocus ( source ) ; //ignore return value source.selectAll ( ) ; } } Note verify method implement detect invalid value nothing else . The verify method exist determine whether input valid â never bring dialog-box cause side effect . The shouldYieldFocus method call verify , value invalid , set minimum maximum value . The shouldYieldFocus method allow cause side effect , case , always format text field may also change value . In example , shouldYieldFocus method always return true transfer focus never actually prevent . This one way verification implement . Find another version demo call InputVerificationDialogDemo put dialog-box user input invalid require user enter legal value . The input verifier instal use setInputVerifier method JComponent class . For example , InputVerificationDemo following code : private MyVerifier verifier = new MyVerifier ( ) ; ... amountField.setInputVerifier ( verifier ) ; Making Custom Component Focusable For component gain focus , must satisfy three requirement : must visible , enable , focusable . An input map may also give . For information input map , read How Use Key Bindings . The TrackFocusDemo example define simple component Picture . Its constructor show : public Picture ( Image image ) { this.image = image ; setFocusable ( true ) ; addMouseListener ( ) ; addFocusListener ( ) ; } The call setFocusable ( true ) method make component focusable . If explicitly give component key binding WHEN_FOCUSED input map , need call setFocusable method . To visually show change focus ( draw red border component focus ) , Picture focus listener . To gain focus user click picture , component mouse listener . The listener 's mouseClicked method request focus transfer picture . Here code : public void mouseClicked ( MouseEvent e ) { //Since user click u , let u get focus ! requestFocusInWindow ( ) ; } See Tracking Focus Changes Multiple Components discussion TrackFocusDemo example . Customizing Focus Traversal The focus subsystem determine default order apply use focus traversal key ( Tab ) navigate . The policy Swing application determine LayoutFocusTraversalPolicy . You set focus traversal policy Container use setFocusCycleRoot method . However , container focus cycle root , may apparent effect . Alternatively pass focus traversal policy provider FocusTraversalPolicy method instead focus cycle root . Use isFocusTraversalPolicyProvider ( ) method determine whether Container focus traversal policy provider . Use setFocusTraversalPolicyProvider ( ) method set container provide focus traversal policy . The FocusTraversalDemo example demonstrate customize focus behavior . Try : Click Launch button run FocusTraversalDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Click window , necessary , give focus . Note focus order tab component . The focus order determine order component add content pane . Note also check box never get focus ; remove focus cycle . To move focus table , use Control-Tab Control-Shift-Tab . Click Custom FocusTraversalPolicy check box . This box install custom focus traversal policy frame . Try tabbing component . Note focus order left-to-right , top-down order . You find demo 's code FocusTraversalDemo.java . The check box remove focus cycle line code : togglePolicy.setFocusable ( false ) ; Here application 's custom FocusTraversalPolicy : ... JTextField tf1 = new JTextField ( `` Field 1 '' ) ; JTextField tf2 = new JTextField ( `` A Bigger Field 2 '' ) ; JTextField tf3 = new JTextField ( `` Field 3 '' ) ; JTextField tf4 = new JTextField ( `` A Bigger Field 4 '' ) ; JTextField tf5 = new JTextField ( `` Field 5 '' ) ; JTextField tf6 = new JTextField ( `` A Bigger Field 6 '' ) ; JTable table = new JTable ( 4,3 ) ; ... public FocusTraversalDemo ( ) { super ( new BorderLayout ( ) ) ; JTextField tf1 = new JTextField ( `` Field 1 '' ) ; JTextField tf2 = new JTextField ( `` A Bigger Field 2 '' ) ; JTextField tf3 = new JTextField ( `` Field 3 '' ) ; JTextField tf4 = new JTextField ( `` A Bigger Field 4 '' ) ; JTextField tf5 = new JTextField ( `` Field 5 '' ) ; JTextField tf6 = new JTextField ( `` A Bigger Field 6 '' ) ; JTable table = new JTable ( 4,3 ) ; togglePolicy = new JCheckBox ( `` Custom FocusTraversalPolicy '' ) ; togglePolicy.setActionCommand ( `` toggle '' ) ; togglePolicy.addActionListener ( ) ; togglePolicy.setFocusable ( false ) ; //Remove focus cycle . //Note HTML allow break run text //across two line . label = new JLabel ( `` < html > Use Tab ( Shift-Tab ) navigate component component. < p > Control-Tab ( Control-Shift-Tab ) allow break JTable. < /html > '' ) ; JPanel leftTextPanel = new JPanel ( new GridLayout ( 3,2 ) ) ; leftTextPanel.add ( tf1 , BorderLayout.PAGE_START ) ; leftTextPanel.add ( tf3 , BorderLayout.CENTER ) ; leftTextPanel.add ( tf5 , BorderLayout.PAGE_END ) ; leftTextPanel.setBorder ( BorderFactory.createEmptyBorder ( 0,0,5,5 ) ) ; JPanel rightTextPanel = new JPanel ( new GridLayout ( 3,2 ) ) ; rightTextPanel.add ( tf2 , BorderLayout.PAGE_START ) ; rightTextPanel.add ( tf4 , BorderLayout.CENTER ) ; rightTextPanel.add ( tf6 , BorderLayout.PAGE_END ) ; rightTextPanel.setBorder ( BorderFactory.createEmptyBorder ( 0,0,5,5 ) ) ; JPanel tablePanel = new JPanel ( new GridLayout ( 0,1 ) ) ; tablePanel.add ( table , BorderLayout.CENTER ) ; tablePanel.setBorder ( BorderFactory.createEtchedBorder ( ) ) ; JPanel bottomPanel = new JPanel ( new GridLayout ( 2,1 ) ) ; bottomPanel.add ( togglePolicy , BorderLayout.PAGE_START ) ; bottomPanel.add ( label , BorderLayout.PAGE_END ) ; add ( leftTextPanel , BorderLayout.LINE_START ) ; add ( rightTextPanel , BorderLayout.CENTER ) ; add ( tablePanel , BorderLayout.LINE_END ) ; add ( bottomPanel , BorderLayout.PAGE_END ) ; setBorder ( BorderFactory.createEmptyBorder ( 20,20,20,20 ) ) ; Vector < Component > order = new Vector < Component > ( 7 ) ; order.add ( tf1 ) ; order.add ( tf2 ) ; order.add ( tf3 ) ; order.add ( tf4 ) ; order.add ( tf5 ) ; order.add ( tf6 ) ; order.add ( table ) ; newPolicy = new MyOwnFocusTraversalPolicy ( order ) ; } To use custom FocusTraversalPolicy , implement following code focus cycle root . MyOwnFocusTraversalPolicy newPolicy = new MyOwnFocusTraversalPolicy ( ) ; frame.setFocusTraversalPolicy ( newPolicy ) ; You remove custom focus traversal policy set FocusTraversalPolicy null , restore default policy . Tracking Focus Changes Multiple Components In situation application may need track component focus . This information might use dynamically update menu perhaps status bar . If need track focus specific component , may make sense implement focus event listener . If focus listener appropriate , instead register PropertyChangeListener KeyboardFocusManager . The property change listener notify every change involve focus , include change focus owner , focused window , default focus traversal policy . See KeyboardFocusManager Properties table complete list . The following example demonstrate track focus owner instal property change listener keyboard focus manager . Try : Click Launch button run TrackFocusDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . If necessary , click window give focus . The window show six image , display Picture component . The Picture focus indicate red border . A label bottom window describe Picture focus . Move focus another Picture use Tab Shift-Tab , click image . Because property change listener register keyboard focus manager , change focus detect label update appropriately . You view demo 's code TrackFocusDemo.java . The custom component use draw image find Picture.java . Here code defines install property change listener : KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager ( ) ; focusManager.addPropertyChangeListener ( new PropertyChangeListener ( ) { public void propertyChange ( PropertyChangeEvent e ) { String prop = e.getPropertyName ( ) ; ( ( `` focusOwner '' .equals ( prop ) ) & & ( ( e.getNewValue ( ) ) instanceof Picture ) ) { Component comp = ( Component ) e.getNewValue ( ) ; String name = comp.getName ( ) ; Integer num = new Integer ( name ) ; int index = num.intValue ( ) ; ( index < 0 || index > comments.length ) { index = 0 ; } info.setText ( comment [ index ] ) ; } } } ) ; The custom component , Picture , responsible draw image . All six component define manner : pic1 = new Picture ( createImageIcon ( `` images/ '' + mayaString + `` .gif '' , mayaString ) .getImage ( ) ) ; pic1.setName ( `` 1 '' ) ; Timing Focus Transfers Focus transfer asynchronous . This quality lead odd timing-related problem assumption , especially automatic transfer focus . For example , imagine application window contain Start button , Cancel button text field . The component add order : Start button Text field Cancel button When application launch , LayoutFocusTraversalPolicy determine focus traversal policy â case , order component add container . In example , desired behavior Start button initial focus , Start button click , disable , Cancel button receive focus . The correct way implement behavior would add component container desired order create custom focus traversal policy . If , reason , possible , implement behavior following code snippet : public void actionPerformed ( ActionEvent e ) { //This work . start.setEnabled ( false ) ; cancel.requestFocusInWindow ( ) ; } As desired , focus go Start button Cancel button , rather text field . But different result would occur method call opposite order follow : public void actionPerformed ( ActionEvent e ) { //This work . cancel.requestFocusInWindow ( ) ; start.setEnabled ( false ) ; } In case , focus request Cancel button leave Start button . The call requestFocusInWindow method initiate focus transfer , immediately move focus Cancel button . When Start button disable , focus transfer next component ( always component focus ) , case , would move focus text field , Cancel button . There several situation need make focus request change might affect focus apply : Hiding focus owner . Making focus owner non-focusable . Calling removeNotify method focus owner . Doing operation container focus owner , cause change focus policy container longer accept component focus owner . Disposing top-level window contain focus owner . The Focus API The following table list commonly use constructor method relate focus . The focus API fall four category : Useful Methods Components Creating Using Custom FocusTraversalPolicy Input Verification API KeyboardFocusManager Properties For detailed information focus architecture , see specification Focus Subsystem . You may also find How Write Focus Listener useful . Useful Methods Components Method ( Component ) Purpose isFocusOwner ( ) Returns true component focus owner . setRequestFocusEnabled ( boolean ) isRequestFocusEnabled ( ) ( JComponent ) Sets check whether component get focus . Setting setRequestFocusEnabled false typically prevents mouse click give component focus , still allow keyboard navigation give component focus . This method apply component receive mouse event . For example , use method JButton , JPanel . If write custom component honor property . This method recommend setFocusable method allow program work well user employ assistive technology . setFocusable ( boolean ) isFocusable ( ) Sets get focusable state component . A component must focusable order gain focus . When component remove focus cycle setFocusable ( false ) , longer navigate keyboard . The setRequestFocusEnabled method recommend program run user employ assistive technology . requestFocusInWindow ( ) Requests component get focus . The component 's window must current focus window . For request grant subclass JComponent must visible , enable , focusable , input map request grant . It assume component focus fire FOCUS_GAINED event . This method prefer requestFocus method , platform-dependent . setFocusTraversalKeys ( int , Set ) getFocusTraversalKeys ( int ) areFocusTraversalKeysSet ( int ) ( java.awt.Container ) Sets get focus traversal key particular direction determines whether focus traversal key explicitly set container . If focus traversal key set , inherit ancestor keyboard focus manager . Focus traversal key set following direction : KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS , KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS , KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS . If set UP_CYCLE_TRAVERSAL_KEYS DOWN_CYCLE_TRAVERSAL_KEYS , must also invoke setImplicitDownCycleTraversal ( false ) focus traversal policy . Creating Using Custom FocusTraversalPolicy Class Method Purpose LayoutFocusTraversalPolicy The class , default , determine focus traversal policy Swing component . getComponentAfter ( Container , Component ) Given component pass input , return component next focus . getComponentBefore ( Container , Component ) Given component pass input , return component focus component . The method use backward tabbing . getDefaultComponent ( Container ) ( javax.swing.SortingFocusTraversalPolicy ) Returns component default focus . getFirstComponent ( Container ) Returns first component traversal cycle . getInitialComponent ( Container ) Returns component receive focus window make visible first time . getLastComponent ( Container ) Returns last component traversal cycle . setFocusTraversalPolicy ( FocusTraversalPolicy ) getFocusTraversalPolicy ( FocusTraversalPolicy ) ( java.awt.Container ) Sets get focus traversal policy determines policy set . Note set focus traversal policy container focus cycle root may apparent effect . A value null mean policy explicitly set . If policy set , policy inherit parent focus cycle root . isFocusCycleRoot ( ) setFocusCycleRoot ( boolean ) ( java.awt.Container ) Checks set whether container root focus traversal cycle . isFocusTraversalPolicyProvider ( ) setFocusTraversalPolicyProvider ( boolean ) ( java.awt.Container ) Checks set whether container use provide focus traversal policy . Input Verification API Class Method Purpose InputVerifier Abstract class allow input validation via focus mechanism . When attempt make shift focus component contain input verifier , focus relinquish verifier satisfied . shouldYieldFocus ( JComponent ) ( InputVerifier ) When component input verifier , method call system determine whether focus leave component . This method may cause side effect , bring dialog-box . If method return false , focus remain component pass method . verify ( JComponent ) ( InputVerifier ) You need override method check component 's input valid . It return true valid , otherwise return false . This method cause side effect , bring dialog-box . This method call shouldYieldFocus . setInputVerifier ( inputVerifier ) getInputVerifier ( ) ( JComponent ) Sets get input verifier assign component . By default , component input verifier . setVerifyInputWhenFocusTarget ( boolean ) getVerifyInputWhenFocusTarget ( ) ( JComponent ) Sets get whether input verifier current focus owner call component request focus . The default true . This method set false component , Cancel button scroll bar , receive focus even input invalid . KeyboardFocusManager Properties This table define bound property KeyboardFocusManager . A listener register property call addPropertyChangeListener . Property Purpose focusOwner The component currently receive key event . permanentFocusOwner The component recently receive permanent FOCUS_GAINED event . Typically focusOwner , unless temporary focus change currently effect . focusedWindow The window contain focus owner . activeWindow The component must always either Frame Dialog . The active window either focused window , first frame dialog-box owner focused window . defaultFocusTraversalPolicy The default focus traversal policy , set setFocusTraversalPolicy method Container class . forwardDefaultFocusTraversalKeys The set default focus key forward traversal . For multi-line text component , key default Control-Tab . For component , key default Tab Control-Tab . backwardDefaultFocusTraversalKeys The set default focus key backward traversal . For multi-line text component key default Control-Shift-Tab . For component key default Shift-Tab Control-Shift-Tab . upCycleDefaultFocusTraversalKeys The set default focus key cycle . These key null , default , Swing component . If set key KeyboardFocusManager , set downCycleFocusTraversalKeys focus cycle root , must also invoke setImplicitDownCycleTraversal ( false ) method focus traversal policy . downCycleDefaultFocusTraversalKeys The set default focus key cycle . These key null , default , Swing component . If set key KeyboardFocusManager , set upCycleFocusTraversalKeys focus cycle root , must also invoke setImplicitDownCycleTraversal ( false ) method focus traversal policy . currentFocusCycleRoot The container current focus cycle root . Examples Use Focus The follow table list examples manipulate focus : Example Where Described Notes FocusConceptsDemo This section Demonstrates basic default focus behavior . FocusTraversalDemo This section Demonstrates override default focus order . TrackFocusDemo This section Demonstrates use PropertyChangeListener track focus owner . Also implement custom focusable component . InputVerificationDemo This section Demonstrates implement InputVerifier validate user input . InputVerificationDialogDemo This section Demonstrates implement InputVerifier put dialog-box user input invalid . FocusEventDemo How Write Focus Listener Reports focus event occur several component demonstrate circumstance focus event fire .