At core compute engine protocol enable task submit compute engine , compute engine run task , result task return client . This protocol express interface support compute engine . The remote communication protocol illustrate following figure . Each interface contain single method . The compute engine 's remote interface , Compute , enable task submit engine . The client interface , Task , define compute engine execute submitted task . The compute.Compute interface define remotely accessible part , compute engine . Here source code Compute interface : package compute ; import java.rmi.Remote ; import java.rmi.RemoteException ; public interface Compute extend Remote { < T > T executeTask ( Task < T > ) throw RemoteException ; } By extend interface java.rmi.Remote , Compute interface identifies interface whose method invoke another Java virtual machine . Any object implement interface remote object . As member remote interface , executeTask method remote method . Therefore , method must define capable throw java.rmi.RemoteException . This exception throw RMI system remote method invocation indicate either communication failure protocol error occur . A RemoteException checked exception , code invoke remote method need handle exception either catch declare throw clause . The second interface need compute engine Task interface , type parameter executeTask method Compute interface . The compute.Task interface define interface compute engine work need , provide way start work . Here source code Task interface : package compute ; public interface Task < T > { T execute ( ) ; } The Task interface define single method , execute , parameter throw exception . Because interface extend Remote , method interface n't need list java.rmi.RemoteException throw clause . The Task interface type parameter , T , represent result type task 's computation . This interface 's execute method return result computation thus return type T. The Compute interface 's executeTask method , turn , return result execution Task instance pass . Thus , executeTask method type parameter , T , associate return type result type pass Task instance . RMI use Java object serialization mechanism transport object value Java virtual machine . For object consider serializable , class must implement java.io.Serializable marker interface . Therefore , class implement Task interface must also implement Serializable , must class object use task result . Different kind task run Compute object long implementation Task type . The class implement interface contain data need computation task method need computation . Here RMI make simple compute engine possible . Because RMI assume Task object write Java programming language , implementation Task object previously unknown compute engine download RMI compute engine 's Java virtual machine need . This capability enable client compute engine define new kind task run server machine without need code explicitly instal machine . The compute engine , implement ComputeEngine class , implement Compute interface , enable different task submit call executeTask method . These task run use task 's implementation execute method result , return remote client .