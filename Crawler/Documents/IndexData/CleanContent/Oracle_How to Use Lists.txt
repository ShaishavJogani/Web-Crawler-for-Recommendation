A JList present user group item , display one column , choose . Lists many item , often put scroll pane . In addition list , follow Swing component present multiple selectable item user : combo box , menu , table , group check box radio button . To display hierarchical data , use tree . The following figure show two application use list . This section use example basis discussion follow . ListDialog ( use ListDialogRunner ) ListDemo Try : Click Launch button run ListDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Click Launch button run ListDialogRunner . Alternatively , compile run example , consult example index . To bring ListDialog , click Pick new name ... button window title Name That Baby . The result dialog ListDialog instance customize title Name Chooser . In ListDemo , try add ( hire ) remove ( fire ) item . This rest section discuss following topic : Creating Model Initializing List Selecting Items List Adding Items Removing Items List Writing Custom Cell Renderer The List API Examples Use Lists Creating Model There three way create list model : DefaultListModel — everything pretty much take care . The example page use DefaultListModel . AbstractListModel — manage data invoke `` fire '' method . For approach , must subclass AbstractListModel implement getSize getElementAt method inherit ListModel interface . ListModel — manage everything . Initializing List Here code ListDialog.java create set list : list = new JList ( data ) ; //data type Object [ ] list.setSelectionMode ( ListSelectionModel.SINGLE_INTERVAL_SELECTION ) ; list.setLayoutOrientation ( JList.HORIZONTAL_WRAP ) ; list.setVisibleRowCount ( -1 ) ; ... JScrollPane listScroller = new JScrollPane ( list ) ; listScroller.setPreferredSize ( new Dimension ( 250 , 80 ) ) ; The code pass array list 's constructor . The array fill string pass another object . In example , string happen boys ' name . Other JList constructor let initialize list Vector object adhere ListModel interface . If initialize list array vector , constructor implicitly create default list model . The default list model immutable — add , remove , replace item list . To create list whose item change individually , set list 's model instance mutable list model class , instance DefaultListModel . You set list 's model create list call setModel method . See Adding Items Removing Items List example . The call setSelectionMode specifies many item user select , whether must contiguous ; next section tell selection mode . The call setLayoutOrientation let list display data multiple column . The value JList.HORIZONTAL_WRAP specify list display item leave right wrap new row . Another possible value JList.VERTICAL_WRAP , specify data display top bottom ( usual ) wrap new column . The following figure show two wrapping possibility , together default , JList.VERTICAL . HORIZONTAL_WRAP VERTICAL_WRAP VERTICAL In combination call setLayoutOrientation , invoke setVisibleRowCount ( -1 ) make list display maximum number item possible available space onscreen . Another common use setVisibleRowCount specify list 's scroll pane many row list prefers display . Selecting Items List A list use instance ListSelectionModel manage selection . By default , list selection model allow combination item select time . You specify different selection mode call setSelectionMode method list . For example , ListDialog ListDemo set selection mode SINGLE_SELECTION ( constant define ListSelectionModel ) one item list select . The follow table describe three list selection mode : Mode Description SINGLE_SELECTION Only one item select time . When user select item , previously select item deselected first . SINGLE_INTERVAL_SELECTION Multiple , contiguous item select . When user begin new selection range , previously select item deselected first . MULTIPLE_INTERVAL_SELECTION The default . Any combination item select . The user must explicitly deselect item . No matter selection mode list us , list fire list selection event whenever selection change . You process event add list selection listener list addListSelectionListener method . A list selection listener must implement one method : valueChanged . Here valueChanged method listener ListDemo : public void valueChanged ( ListSelectionEvent e ) { ( e.getValueIsAdjusting ( ) == false ) { ( list.getSelectedIndex ( ) == -1 ) { //No selection , disable fire button . fireButton.setEnabled ( false ) ; } else { //Selection , enable fire button . fireButton.setEnabled ( true ) ; } } } Many list selection event generate single user action mouse click . The getValueIsAdjusting method return true user still manipulate selection . This particular program interested final result user 's action , valueChanged method something getValueIsAdjusting return false . Because list single-selection mode , code use getSelectedIndex get index just-selected item . JList provide method set get selection selection mode allow one item select . If want , listen event list 's list selection model rather list . ListSelectionDemo example show listen list selection event list selection model let change selection mode list dynamically . Adding Items Removing Items List The ListDemo example show previously feature list whose content change . You find source code ListDemo ListDemo.java . Here ListDemo code create mutable list model object , put initial item , use list model create list : listModel = new DefaultListModel ( ) ; listModel.addElement ( `` Jane Doe '' ) ; listModel.addElement ( `` John Smith '' ) ; listModel.addElement ( `` Kathy Green '' ) ; list = new JList ( listModel ) ; This particular program use instance DefaultListModel , class provide Swing . In spite class name , list DefaultListModel unless program explicitly make . If DefaultListModel suit need , write custom list model , must adhere ListModel interface . The following code snippet show actionPerformed method action listener register Fire button . The bold line code remove selected item list . The remain line method disable fire button list empty , make another selection . public void actionPerformed ( ActionEvent e ) { int index = list.getSelectedIndex ( ) ; listModel.remove ( index ) ; int size = listModel.getSize ( ) ; ( size == 0 ) { //Nobody 's left , disable firing . fireButton.setEnabled ( false ) ; } else { //Select index . ( index == listModel.getSize ( ) ) { //removed item last position index -- ; } list.setSelectedIndex ( index ) ; list.ensureIndexIsVisible ( index ) ; } } Here actionPerformed method action listener share Hire button text field : public void actionPerformed ( ActionEvent e ) { String name = employeeName.getText ( ) ; //User type unique name ... ( name.equals ( `` '' ) || alreadyInList ( name ) ) { Toolkit.getDefaultToolkit ( ) .beep ( ) ; employeeName.requestFocusInWindow ( ) ; employeeName.selectAll ( ) ; return ; } int index = list.getSelectedIndex ( ) ; //get select index ( index == -1 ) { //no selection , insert begin index = 0 ; } else { //add selected item index++ ; } listModel.insertElementAt ( employeeName.getText ( ) , index ) ; //Reset text field . employeeName.requestFocusInWindow ( ) ; employeeName.setText ( `` '' ) ; //Select new item make visible . list.setSelectedIndex ( index ) ; list.ensureIndexIsVisible ( index ) ; } This code use list model 's insertElementAt method insert new name current selection , selection exist , beginning list . If wish add end list , use DefaultListModel 's addElement method instead . Whenever item add , remove , modify list , list model fire list data event . Refer How Write List Data Listener information listen event . That section contain example similar ListDemo , add button move item list . Writing Custom Cell Renderer A list use object call cell renderer display item . The default cell renderer know display string icon display Objects invoke toString . If want change way default renderer display icon string , want behavior different provide toString , implement custom cell renderer . Take step provide custom cell renderer list : Write class implement ListCellRenderer interface . Create instance class call list 's setCellRenderer use instance argument . We provide example list custom cell renderer , example combo box custom renderer — combo box use type renderer list . See example describe Providing Custom Renderer . The List API The following table list commonly used JList constructor method . Other method likely invoke JList object setPreferredSize superclass provide . See The JComponent API table commonly use inherit method . Much operation list manage object . The item list manage list model object , selection manage list selection model object , program put list scroll pane handle scrolling . For part , need worry model JList create necessary interact implicitly JList 's convenience method . That say , API use list fall category : Initializing List Data Displaying List Managing List 's Selection Managing List Data Initializing List Data Method Constructor Purpose JList ( ListModel ) JList ( Object [ ] ) JList ( Vector ) JList ( ) Create list initial list item specify . The second third constructor implicitly create immutable ListModel ; subsequently modify passed-in array Vector . void setModel ( ListModel ) ListModel getModel ( ) Set get model contain content list . void setListData ( Object [ ] ) void setListData ( Vector ) Set item list . These method implicitly create immutable ListModel . Displaying List Method Purpose void setVisibleRowCount ( int ) int getVisibleRowCount ( ) Set get visibleRowCount property . For VERTICAL layout orientation , set get preferred number row display without require scrolling . For HORIZONTAL_WRAP VERTICAL_WRAP layout orientation , define cell wrap . See setLayoutOrientation ( int ) information . The default value property VERTICAL . void setLayoutOrientation ( int ) int getLayoutOrientation ( ) Set get way list cell lay . The possible layout format specify JList-defined value VERTICAL ( single column cell ; default ) , HORIZONTAL_WRAP ( `` newspaper '' style content flow horizontally vertically ) , VERTICAL_WRAP ( `` newspaper '' style content flow vertically horizontally ) . int getFirstVisibleIndex ( ) int getLastVisibleIndex ( ) Get index first last visible item . void ensureIndexIsVisible ( int ) Scroll specified index visible within viewport list . Managing List 's Selection Method Purpose void addListSelectionListener ( ListSelectionListener ) Register receive notification selection change . void setSelectedIndex ( int ) void setSelectedIndices ( int [ ] ) void setSelectedValue ( Object , boolean ) void setSelectionInterval ( int , int ) Set current selection indicated . Use setSelectionMode set range selection acceptable . The boolean argument specify whether list attempt scroll selected item visible . int getAnchorSelectionIndex ( ) int getLeadSelectionIndex ( ) int getSelectedIndex ( ) int getMinSelectionIndex ( ) int getMaxSelectionIndex ( ) int [ ] getSelectedIndices ( ) Object getSelectedValue ( ) Object [ ] getSelectedValues ( ) Get information current selection indicated . void setSelectionMode ( int ) int getSelectionMode ( ) Set get selection mode . Acceptable value : SINGLE_SELECTION , SINGLE_INTERVAL_SELECTION , MULTIPLE_INTERVAL_SELECTION ( default ) , define ListSelectionModel . void clearSelection ( ) boolean isSelectionEmpty ( ) Set get whether item select . boolean isSelectedIndex ( int ) Determine whether specified index select . Managing List Data Class Method Purpose int getNextMatch ( String , int , javax.swing.text.Position.Bias ) Given start index , search list item start specify string return index ( -1 string find ) . The third argument , specify search direction , either Position.Bias.Forward Position.Bias.Backward . For example , 6-item list , getNextMatch ( `` Matisse '' , 5 , javax.swing.text.Position.Bias.Forward ) search string `` Matisse '' item index 5 , ( necessary ) index 0 , index 1 , . void setDragEnabled ( boolean ) boolean getDragEnabled ( ) Set get property determine whether automatic drag handling enable . See Drag Drop Data Transfer detail . Examples Use Lists This table show example use JList example describe . Example Where Described Notes SplitPaneDemo How Use Split Panes Contains single-selection , immutable list . ListDemo This section Demonstrates add remove item list runtime . ListDialog This section , How Use BoxLayout Implements modal dialog single-selection list . ListDataEventDemo How Write List Data Listener Demonstrates listen list data event list model . ListSelectionDemo How Write List Selection Listener Contains list table share selection model . You dynamically choose selection mode . SharedModelDemo Using Models Modifies ListSelectionDemo list table share data model . CustomComboBoxDemo Providing Custom Renderer Shows provide custom renderer combo box . Because list combo box use type renderer , use learn apply list . In fact , list combo box share renderer . See Using JavaFX UI Controls : List View tutorial learn create list JavaFX .