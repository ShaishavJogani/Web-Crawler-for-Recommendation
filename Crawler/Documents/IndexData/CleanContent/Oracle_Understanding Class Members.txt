In section , discuss use static keyword create field method belong class , rather instance class . Class Variables When number object create class blueprint , distinct copy instance variable . In case Bicycle class , instance variable cadence , gear , speed . Each Bicycle object value variable , store different memory location . Sometimes , want variable common object . This accomplish static modifier . Fields static modifier declaration call static field class variable . They associate class , rather object . Every instance class share class variable , one fixed location memory . Any object change value class variable , class variable also manipulate without create instance class . For example , suppose want create number Bicycle object assign serial number , begin 1 first object . This ID number unique object therefore instance variable . At time , need field keep track many Bicycle object create know ID assign next one . Such field relate individual object , class whole . For need class variable , numberOfBicycles , follow : public class Bicycle { private int cadence ; private int gear ; private int speed ; // add instance variable object ID private int id ; // add class variable // number Bicycle object instantiated private static int numberOfBicycles = 0 ; ... } Class variable reference class name , Bicycle.numberOfBicycles This make clear class variable . Note : You also refer static field object reference like myBike.numberOfBicycles discourage make clear class variable . You use Bicycle constructor set id instance variable increment numberOfBicycles class variable : public class Bicycle { private int cadence ; private int gear ; private int speed ; private int id ; private static int numberOfBicycles = 0 ; public Bicycle ( int startCadence , int startSpeed , int startGear ) { gear = startGear ; cadence = startCadence ; speed = startSpeed ; // increment number Bicycles // assign ID number id = ++numberOfBicycles ; } // new method return ID instance variable public int getID ( ) { return id ; } ... } Class Methods The Java programming language support static method well static variable . Static method , static modifier declaration , invoke class name , without need create instance class , ClassName.methodName ( args ) Note : You also refer static method object reference like instanceName.methodName ( args ) discourage make clear class method . A common use static method access static field . For example , could add static method Bicycle class access numberOfBicycles static field : public static int getNumberOfBicycles ( ) { return numberOfBicycles ; } Not combination instance class variable method allow : Instance method access instance variable instance method directly . Instance method access class variable class method directly . Class method access class variable class method directly . Class method access instance variable instance method directlyâ€”they must use object reference . Also , class method use keyword instance refer . Constants The static modifier , combination final modifier , also use define constant . The final modifier indicate value field change . For example , follow variable declaration define constant name PI , whose value approximation pi ( ratio circumference circle diameter ) : static final double PI = 3.141592653589793 ; Constants define way reassign , compile-time error program try . By convention , name constant value spell uppercase letter . If name compose one word , word separate underscore ( _ ) . Note : If primitive type string define constant value know compile time , compiler replace constant name everywhere code value . This call compile-time constant . If value constant outside world change ( example , legislate pi actually 3.975 ) , need recompile class use constant get current value . The Bicycle Class After modification make section , Bicycle class : public class Bicycle { private int cadence ; private int gear ; private int speed ; private int id ; private static int numberOfBicycles = 0 ; public Bicycle ( int startCadence , int startSpeed , int startGear ) { gear = startGear ; cadence = startCadence ; speed = startSpeed ; id = ++numberOfBicycles ; } public int getID ( ) { return id ; } public static int getNumberOfBicycles ( ) { return numberOfBicycles ; } public int getCadence ( ) { return cadence ; } public void setCadence ( int newValue ) { cadence = newValue ; } public int getGear ( ) { return gear ; } public void setGear ( int newValue ) { gear = newValue ; } public int getSpeed ( ) { return speed ; } public void applyBrake ( int decrement ) { speed -= decrement ; } public void speedUp ( int increment ) { speed += increment ; } }