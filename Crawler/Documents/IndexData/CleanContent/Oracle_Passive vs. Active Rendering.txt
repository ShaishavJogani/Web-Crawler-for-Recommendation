As mention , full-screen application usually function good helm draw . In traditional windowed GUI application , question paint usually handle operating system . When operating windowed environment , make perfect sense . A windowed application know user go move , resize , expose , cover application another window actually happen . In Java GUI application , operating system deliver paint event AWT , figure need paint , create java.awt.Graphics object appropriate clipping region , call paint method Graphics object : // Traditional GUI Application paint method : // This call time , usually // event dispatch thread public void paint ( Graphics g ) { // Use g draw Component } This sometimes refer passive rendering . As imagine , system incur lot overhead , much annoyance many performance-sensitive AWT Swing programmer . When full-screen exclusive mode , n't worry anymore window resize , move , expose , occlude ( unless 've ignore suggestion turn resize ) . Instead , application window draw directly screen ( active rendering ) . This simplify paint quite bit , since n't ever need worry paint event . In fact , paint event deliver operating system may even deliver inappropriate unpredictable time full-screen exclusive mode . Instead rely paint method full-screen exclusive mode , draw code usually appropriately rendering loop : public void myRenderingLoop ( ) { ( ! ) { Graphics myGraphics = getPaintGraphics ( ) ; // Draw appropriate use myGraphics myGraphics.dispose ( ) ; } } Such render loop thread , either helper thread part main application thread . Programming Tips Some tip use active rendering : Do n't put draw code paint routine . You may never know routine may get call ! Instead , use another method name , render ( Graphics g ) , call paint method operating windowed mode , alternately call graphic render loop . Use setIgnoreRepaint method application window component turn paint event dispatch operating system completely , since may call inappropriate time , bad , end call paint , lead race condition AWT event thread rendering loop . Separate draw code render loop , operate fully full-screen exclusive windowed mode . Optimize render n't draw everything screen time ( unless use page-flipping double-buffering , discuss ) . Do rely update repaint method deliver paint event . Do use heavyweight component , since still incur overhead involve AWT platform 's windowing system . If use lightweight component , Swing component , may fiddle bit draw use Graphics , directly result call paint method . Feel free call Swing method paintComponents , paintComponent , paintBorder , paintChildren directly render loop . Feel free use passive rendering want simple full-screen Swing AWT application , remember paint event may somewhat unreliable unnecessary full-screen exclusive mode . Additionally , use passive rendering , able use advanced technique page-flipping . Finally , careful avoid deadlock decide use active passive rendering simultaneously -- approach recommend .