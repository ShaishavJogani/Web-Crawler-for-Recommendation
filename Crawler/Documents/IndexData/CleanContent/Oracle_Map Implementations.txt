Map implementation group general-purpose , special-purpose , concurrent implementation . General-Purpose Map Implementations The three general-purpose Map implementation HashMap , TreeMap LinkedHashMap . If need SortedMap operation key-ordered Collection-view iteration , use TreeMap ; want maximum speed n't care iteration order , use HashMap ; want near-HashMap performance insertion-order iteration , use LinkedHashMap . In respect , situation Map analogous Set . Likewise , everything else Set Implementations section also apply Map implementation . LinkedHashMap provide two capability available LinkedHashSet . When create LinkedHashMap , order base key access rather insertion . In word , merely look value associate key brings key end map . Also , LinkedHashMap provide removeEldestEntry method , may override impose policy remove stale mapping automatically new mapping add map . This make easy implement custom cache . For example , override allow map grow many 100 entry delete eldest entry time new entry add , maintain steady state 100 entry . private static final int MAX_ENTRIES = 100 ; protect boolean removeEldestEntry ( Map.Entry eldest ) { return size ( ) > MAX_ENTRIES ; } Special-Purpose Map Implementations There three special-purpose Map implementation â€” EnumMap , WeakHashMap IdentityHashMap . EnumMap , internally implement array , high-performance Map implementation use enum key . This implementation combine richness safety Map interface speed approach array . If want map enum value , always use EnumMap preference array . WeakHashMap implementation Map interface store weak reference key . Storing weak reference allow key-value pair garbage-collected key longer reference outside WeakHashMap . This class provide easy way harness power weak reference . It useful implement `` registry-like '' data structure , utility entry vanishes key longer reachable thread . IdentityHashMap identity-based Map implementation base hash table . This class useful topology-preserving object graph transformation , serialization deep-copying . To perform transformation , need maintain identity-based `` node table '' keep track object already see . Identity-based map also use maintain object-to-meta-information mapping dynamic debugger similar system . Finally , identity-based map useful thwart `` spoof attack '' result intentionally perverse equal method IdentityHashMap never invoke equal method key . An added benefit implementation fast . Concurrent Map Implementations The java.util.concurrent package contain ConcurrentMap interface , extend Map atomic putIfAbsent , remove , replace method , ConcurrentHashMap implementation interface . ConcurrentHashMap highly concurrent , high-performance implementation back hash table . This implementation never block perform retrieval allow client select concurrency level update . It intend drop-in replacement Hashtable : addition implement ConcurrentMap , support legacy method peculiar Hashtable . Again , n't need legacy operation , careful manipulate ConcurrentMap interface .