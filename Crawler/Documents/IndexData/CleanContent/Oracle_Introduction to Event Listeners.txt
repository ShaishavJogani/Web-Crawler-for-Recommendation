If read component how-to page , probably already know basic event listener . Let u look one simple event handle example possible . It call Beeper , feature button beep click . Click Launch button run Beeper use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . You find entire program Beeper.java . Here code implement event handle button : public class Beeper ... implement ActionListener { ... //where initialization occur : button.addActionListener ( ) ; ... public void actionPerformed ( ActionEvent e ) { ... //Make beep sound ... } } The Beeper class implement ActionListener interface , contain one method : actionPerformed . Since Beeper implement ActionListener , Beeper object register listener action event button fire . Once Beeper register use Button addActionListener method , Beeper 's actionPerformed method call every time button click . A More Complex Example The event model , saw simple preceding example , quite powerful flexible . Any number event listener object listen kind event number event source object . For example , program might create one listener per event source . Or program might single listener event source . A program even one listener single kind event single event source . Multiple listener register notify event particular type particular source . Also , listener listen notification different object . Each event represent object give information event identify event source . Event source often component model , kind object also event source . Whenever want detect event particular component , first check how-to section component . A list component how-to section . The how-to section give example handle event likely care . In How Use Color Choosers , instance , find example write change listener track color change color chooser . The following example demonstrate event listener register multiple object event send multiple listener . The example contain two event source ( JButton instance ) two event listener . One event listener ( instance class call MultiListener ) listen event button . When receive event , add event 's `` action command '' ( set text button 's label ) top text area . The second event listener ( instance class call Eavesdropper ) listen event one button . When receive event , add action command bottom text area . Try : Click Launch button run MultiListener use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Click Blah blah blah button . Only MultiListener object register listen button . Click You say ! button . Both MultiListener object Eavesdropper object register listen button . You find entire program MultiListener.java . Here code implement event handle button : public class MultiListener ... implement ActionListener { ... //where initialization occur : button1.addActionListener ( ) ; button2.addActionListener ( ) ; button2.addActionListener ( new Eavesdropper ( bottomTextArea ) ) ; } public void actionPerformed ( ActionEvent e ) { topTextArea.append ( e.getActionCommand ( ) + newline ) ; } } class Eavesdropper implement ActionListener { ... public void actionPerformed ( ActionEvent e ) { myTextArea.append ( e.getActionCommand ( ) + newline ) ; } } In code , MultiListener Eavesdropper implement ActionListener interface register action listener use JButton addActionListener method . Both class ' implementation actionPerformed method similar : simply add event 's action command text area .