This page cover following topic : Overview SQLException Retrieving Exceptions Retrieving Warnings Categorized SQLExceptions Other Subclasses SQLException Overview SQLException When JDBC encounter error interaction data source , throw instance SQLException oppose Exception . ( A data source context represent database Connection object connect . ) The SQLException instance contain following information help determine cause error : A description error . Retrieve String object contain description call method SQLException.getMessage . A SQLState code . These code respective meaning standardize ISO/ANSI Open Group ( X/Open ) , although code reserve database vendor define . This String object consist five alphanumeric character . Retrieve code call method SQLException.getSQLState . An error code . This integer value identify error cause SQLException instance throw . Its value meaning implementation-specific might actual error code return underlie data source . Retrieve error call method SQLException.getErrorCode . A cause . A SQLException instance might causal relationship , consist one Throwable object cause SQLException instance throw . To navigate chain cause , recursively call method SQLException.getCause null value return . A reference chained exception . If one error occur , exception reference chain . Retrieve exception call method SQLException.getNextException exception throw . Retrieving Exceptions The following method , JDBCTutorialUtilities.printSQLException output SQLState , error code , error description , cause ( one ) contain SQLException well exception chain : public static void printSQLException ( SQLException ex ) { ( Throwable e : ex ) { ( e instanceof SQLException ) { ( ignoreSQLException ( ( ( SQLException ) e ) . getSQLState ( ) ) == false ) { e.printStackTrace ( System.err ) ; System.err.println ( `` SQLState : `` + ( ( SQLException ) e ) .getSQLState ( ) ) ; System.err.println ( `` Error Code : `` + ( ( SQLException ) e ) .getErrorCode ( ) ) ; System.err.println ( `` Message : `` + e.getMessage ( ) ) ; Throwable = ex.getCause ( ) ; ( ! = null ) { System.out.println ( `` Cause : `` + ) ; = t.getCause ( ) ; } } } } } For example , call method CoffeesTable.dropTable Java DB DBMS , table COFFEES exist , remove call JDBCTutorialUtilities.ignoreSQLException , output similar following : SQLState : 42Y55 Error Code : 30000 Message : 'DROP TABLE ' perform 'TESTDB.COFFEES ' exist . Instead output SQLException information , could instead first retrieve SQLState process SQLException accordingly . For example , method JDBCTutorialUtilities.ignoreSQLException return true SQLState equal code 42Y55 ( use Java DB DBMS ) , cause JDBCTutorialUtilities.printSQLException ignore SQLException : public static boolean ignoreSQLException ( String sqlState ) { ( sqlState == null ) { System.out.println ( `` The SQL state define ! `` ) ; return false ; } // X0Y32 : Jar file already exist schema ( sqlState.equalsIgnoreCase ( `` X0Y32 '' ) ) return true ; // 42Y55 : Table already exist schema ( sqlState.equalsIgnoreCase ( `` 42Y55 '' ) ) return true ; return false ; } Retrieving Warnings SQLWarning object subclass SQLException deal database access warning . Warnings stop execution application , exception ; simply alert user something happen plan . For example , warning might let know privilege attempt revoke revoke . Or warning might tell error occur requested disconnection . A warning report Connection object , Statement object ( include PreparedStatement CallableStatement object ) , ResultSet object . Each class getWarnings method , must invoke order see first warning report call object . If getWarnings return warning , call SQLWarning method getNextWarning get additional warning . Executing statement automatically clear warning previous statement , build . This mean , however , want retrieve warning report statement , must execute another statement . The following method JDBCTutorialUtilities illustrate get complete information warning report Statement ResultSet object : public static void getWarningsFromResultSet ( ResultSet r ) throw SQLException { JDBCTutorialUtilities.printWarnings ( rs.getWarnings ( ) ) ; } public static void getWarningsFromStatement ( Statement stmt ) throw SQLException { JDBCTutorialUtilities.printWarnings ( stmt.getWarnings ( ) ) ; } public static void printWarnings ( SQLWarning warn ) throw SQLException { ( warn ! = null ) { System.out.println ( `` \n -- -Warning -- -\n '' ) ; ( warn ! = null ) { System.out.println ( `` Message : `` + warning.getMessage ( ) ) ; System.out.println ( `` SQLState : `` + warning.getSQLState ( ) ) ; System.out.print ( `` Vendor error code : `` ) ; System.out.println ( warning.getErrorCode ( ) ) ; System.out.println ( `` '' ) ; warn = warning.getNextWarning ( ) ; } } The common warning DataTruncation warning , subclass SQLWarning . All DataTruncation object SQLState 01004 , indicate problem reading write data . DataTruncation method let find column parameter data truncate , whether truncation read write operation , many byte transfer , many byte actually transfer . Categorized SQLExceptions Your JDBC driver might throw subclass SQLException correspond common SQLState common error state associate specific SQLState class value . This enable write portable error-handling code . These exception subclass one following class : SQLNonTransientException SQLTransientException SQLRecoverableException See late Javadoc java.sql package documentation JDBC driver information subclass . Other Subclasses SQLException The following subclass SQLException also throw : BatchUpdateException throw error occur batch update operation . In addition information provide SQLException , BatchUpdateException provide update count statement execute error occur . SQLClientInfoException throw one client information property could set Connection . In addition information provide SQLException , SQLClientInfoException provide list client information property set .