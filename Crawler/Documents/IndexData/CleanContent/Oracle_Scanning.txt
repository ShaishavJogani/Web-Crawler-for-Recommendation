Objects type Scanner useful break format input token translate individual token accord data type . Breaking Input Tokens By default , scanner use white space separate token . ( White space character include blank , tab , line terminator . For full list , refer documentation Character.isWhitespace . ) To see scanning work , let 's look ScanXan , program read individual word xanadu.txt print , one per line . import java.io . * ; import java.util.Scanner ; public class ScanXan { public static void main ( String [ ] args ) throw IOException { Scanner = null ; try { = new Scanner ( new BufferedReader ( new FileReader ( `` xanadu.txt '' ) ) ) ; ( s.hasNext ( ) ) { System.out.println ( s.next ( ) ) ; } } finally { ( ! = null ) { s.close ( ) ; } } } } Notice ScanXan invoke Scanner 's close method scanner object . Even though scanner stream , need close indicate 're underlying stream . The output ScanXan look like : In Xanadu Kubla Khan A stately pleasure-dome ... To use different token separator , invoke useDelimiter ( ) , specify regular expression . For example , suppose want token separator comma , optionally follow white space . You would invoke , s.useDelimiter ( `` , \\s* '' ) ; Translating Individual Tokens The ScanXan example treat input token simple String value . Scanner also support token Java language 's primitive type ( except char ) , well BigInteger BigDecimal . Also , numeric value use thousand separator . Thus , US locale , Scanner correctly read string `` 32,767 '' represent integer value . We mention locale , thousand separator decimal symbol locale specific . So , following example would work correctly locale n't specify scanner use US locale . That 's something usually worry , input data usually come source use locale . But example part Java Tutorial get distribute world . The ScanSum example read list double value add . Here 's source : import java.io.FileReader ; import java.io.BufferedReader ; import java.io.IOException ; import java.util.Scanner ; import java.util.Locale ; public class ScanSum { public static void main ( String [ ] args ) throw IOException { Scanner = null ; double sum = 0 ; try { = new Scanner ( new BufferedReader ( new FileReader ( `` usnumbers.txt '' ) ) ) ; s.useLocale ( Locale.US ) ; ( s.hasNext ( ) ) { ( s.hasNextDouble ( ) ) { sum += s.nextDouble ( ) ; } else { s.next ( ) ; } } } finally { s.close ( ) ; } System.out.println ( sum ) ; } } And 's sample input file , usnumbers.txt 8.5 32,767 3.14159 1,000,000.1 The output string `` 1032778.74159 '' . The period different character locale , System.out PrintStream object , class n't provide way override default locale . We could override locale whole program â€” could use formatting , describe next topic , Formatting .