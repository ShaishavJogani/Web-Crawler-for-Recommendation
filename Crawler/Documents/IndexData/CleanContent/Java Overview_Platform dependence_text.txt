In C C++ programming , start write source code : ... compile machine code file : ... execute : In situation , machine code file execution specific platform ( Windows , Linux , Mac OS , ... ) compile , say thetargeted platform : ... compiled file machine code file design work specific platform hardware . It would produce different results/output another platform . So want program run several platform , compile program several time : It pose great vulnerability risk . Note certain code compile executable format , executable change dynamically . It would need recompiled change code change reflect finish executable.Modularity ( divide code module ) isnotpresent Java 's predecessor . If instead single executable , output application form module , one could easily change single module review change application . In C/C++ hand , slight change code require whole application recompiled . The idea Java compile source code intermediate language interpret . The source codeThe intermediate fileThe interpreter The intermediate language thebyte code . The interpreter theJava Virtual Machine ( JVM ) . The byte code file universal JVM platform specific : So JVM cod platform . And 's case . So generate unique byte code file ( a.classfile ) . The first implementation language use interpreted virtual machine achieve portability , many implementation still . These implementation produce program run slowly fully-compiled program create typical C++ compiler , language suffer reputation produce slow program . Since Java 1.2 , Java VM produce program run much faster , use multiple technique . The first simply compile directly native code like traditional compiler , skip bytecode entirely . This achieve great performance , expense portability . This really use . Another technique , thejust-in-time ( JIT ) compiler , compile Java bytecode native code time program run , keep compiled code use . More sophisticated VMs even usedynamic recompilation , VM analyze behavior run program selectively recompile optimize critical part program . Both technique allow program take advantage speed native code without lose portability . Portability technically difficult goal achieve , Java 's success goal matter controversy . Although indeed possible write program Java platform behave consistently across many host platform , large number available platform small error inconsistency lead parody Sun 's `` Write , run anywhere '' slogan `` Write , debug everywhere '' .