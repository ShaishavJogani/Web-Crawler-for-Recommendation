Note : This lesson cover write layout code hand , challenge . If interested learn detail layout management , might prefer use GroupLayout layout manager combine builder tool lay GUI . One builder tool NetBeans IDE . Otherwise , want code hand want use GroupLayout , GridBagLayout recommend next flexible powerful layout manager . If interested use JavaFX create GUI , see Working With Layouts JavaFX . The Swing package include general purpose layout manager name BoxLayout . BoxLayout either stack component top place row — choice . You might think version FlowLayout , great functionality . Here picture application demonstrate use BoxLayout display centered column component : Click Launch button run BoxLayoutDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . You see code BoxLayoutDemo.java . The following figure show GUI use two instance BoxLayout . In top part GUI , top-to-bottom box layout place label scroll pane . In bottom part GUI , left-to-right box layout place two button next . A BorderLayout combine two part GUI ensure excess space give scroll pane . You find link run ListDialog source file example index Using Swing Components . The following code , take ListDialog.java , lay GUI . This code constructor dialog , implement JDialog subclass . The bold line code set box layout add component . JScrollPane listScroller = new JScrollPane ( list ) ; listScroller.setPreferredSize ( new Dimension ( 250 , 80 ) ) ; listScroller.setAlignmentX ( LEFT_ALIGNMENT ) ; ... //Lay label scroll pane top bottom . JPanel listPane = new JPanel ( ) ; listPane.setLayout ( new BoxLayout ( listPane , BoxLayout.PAGE_AXIS ) ) ; JLabel label = new JLabel ( labelText ) ; ... listPane.add ( label ) ; listPane.add ( Box.createRigidArea ( new Dimension ( 0,5 ) ) ) ; listPane.add ( listScroller ) ; listPane.setBorder ( BorderFactory.createEmptyBorder ( 10,10,10,10 ) ) ; //Lay button leave right . JPanel buttonPane = new JPanel ( ) ; buttonPane.setLayout ( new BoxLayout ( buttonPane , BoxLayout.LINE_AXIS ) ) ; buttonPane.setBorder ( BorderFactory.createEmptyBorder ( 0 , 10 , 10 , 10 ) ) ; buttonPane.add ( Box.createHorizontalGlue ( ) ) ; buttonPane.add ( cancelButton ) ; buttonPane.add ( Box.createRigidArea ( new Dimension ( 10 , 0 ) ) ) ; buttonPane.add ( setButton ) ; //Put everything together , use content pane 's BorderLayout . Container contentPane = getContentPane ( ) ; contentPane.add ( listPane , BorderLayout.CENTER ) ; contentPane.add ( buttonPane , BorderLayout.PAGE_END ) ; The first bold line create top-to-bottom box layout set layout manager listPane . The two argument BoxLayout constructor container manage axis along component lay . The PAGE_AXIS constant specifies component lay direction line flow across page determine target container 's ComponentOrientation property . The LINE_AXIS constant specifies component lay direction line text determine target container 's ComponentOrientation property . These constant allow internationalization , lay component container correct left-to-right , right-to-left top-to-bottom orientation language use . The next three bold line add label scroll pane container , separate rigid area — invisible component use add space component . In case , rigid area width put exactly 5 pixel label scroll pane . Rigid area discuss later , Using Invisible Components Filler . The next chunk bold code create left-to-right box layout set buttonPane container . Then code add two button container , use rigid area put 10 pixel button . To place button right side container , first component add container glue . This glue invisible component grow necessary absorb extra space container . Glue discuss Using Invisible Components Filler . As alternative use invisible component , sometimes use empty border create space around component , particularly panel . For example , precede code snippet use empty border put 10 pixel side dialog content , two part content . Borders completely independent layout manager . They simply Swing component draw edge provide pad content component edge . See How Use Borders information . The following section discuss BoxLayout detail : Box layout feature Using invisible component filler Fixing alignment problem Specifying component size The box layout API Examples use box layout Do let length BoxLayout discussion scare ! You probably use BoxLayout information already . If run trouble want take advantage BoxLayout 's power , read . Box Layout Features As say , BoxLayout arrange component either top row . As box layout arrange component , take component ' alignment minimum , prefer , maximum size account . In section , talk top-to-bottom layout . The concept apply left-to-right right-to-left layout . You simply substitute X Y , height width , . Version note : Before JDK version 1.4 , constant exist specify box layout 's axis localizable way . Instead , specify X_AXIS ( leave right ) Y_AXIS ( top bottom ) create BoxLayout . Our example use constant LINE_AXIS PAGE_AXIS , prefer enable program adjust language different orientation . In default , left-to-right orientation , LINE_AXIS specify left-to-right layout PAGE_AXIS specifies top-to-bottom layout . When BoxLayout lay component top bottom , try size component component 's preferred height . If vertical space layout match sum preferred height , BoxLayout try resize component fill space . The component either grow shrink fill space , BoxLayout honor minimum maximum size component . Any extra space appear bottom container . For top-to-bottom box layout , preferred width container maximum preferred width child . If container force wide , BoxLayout attempt size width component container 's width ( minus inset ) . If maximum size component small width container , X alignment come play . The X alignment affect component ' position relative , also location component ( group ) within container . The following figure illustrate alignment component restrict maximum width . In first figure , three component X alignment 0.0 ( Component.LEFT_ALIGNMENT ) . This mean component ' leave side align . Furthermore , mean three component position far leave container possible . In second figure , three component X alignment 0.5 ( Component.CENTER_ALIGNMENT ) . This mean component ' center align , component position horizontal center container . In third figure , component X alignment 1.0 ( Component.RIGHT_ALIGNMENT ) . You guess mean component ' alignment position relative container . You might wonder happen component restrict maximum size different X alignment . The next figure show example : As see , left side component X alignment 0.0 ( Component.LEFT_ALIGNMENT ) align center component 0.5 X alignment ( Component.CENTER_ALIGNMENT ) , align right side component X alignment 1.0 ( Component.RIGHT_ALIGNMENT ) . Mixed alignment like discuss Fixing Alignment Problems . What none component maximum width ? In case , component identical X alignment , component make wide container . If X alignment different , component X alignment 0.0 ( leave ) 1.0 ( right ) small . All component intermediate X alignment ( center ) wide container . Here two example : To get know BoxLayout good , run experiment BoxLayoutDemo2 . Try : Click Launch button run BoxLayoutDemo2 use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . You see code BoxLayoutDemo2.java . You see window like one contain three rectangle . Each rectangle instance BLDComponent , JComponent subclass . Click inside one rectangle . This change rectangle 's X alignment . Click check box bottom window . This turn restricted sizing rectangle . Make window taller . This make rectangle ' container large sum rectangle ' prefer size . The container JPanel red outline , tell container 's edge . Using Invisible Components Filler Each component control box layout butt neighboring component . If want space component , either add empty border one component , insert invisible component provide space . You create invisible component help Box class . The Box class define nested class , Box.Filler , transparent component paint nothing , use provide space component . However , Filler actually invisible , setVisible ( false ) invoke . The Box class provide convenience method help create common kind filler . The follow table give detail create invisible component Box Box.Filler . Type Size Constraints How Create rigid area Box.createRigidArea ( size ) glue , horizontal Box.createHorizontalGlue ( ) glue , vertical Box.createVerticalGlue ( ) custom Box.Filler ( specify ) new Box.Filler ( minSize , prefSize , maxSize ) Here generally use type filler : Rigid area Use want fixed-size space two component . For example , put 5 pixel two component left-to-right box , use code : container.add ( firstComponent ) ; container.add ( Box.createRigidArea ( new Dimension ( 5,0 ) ) ) ; container.add ( secondComponent ) ; Note : The Box class provide another kind filler put fixed space component : vertical horizontal strut . Unfortunately , strut unlimited maximum height width ( horizontal vertical strut , respectively ) . This mean use horizontal box within vertical box , example , horizontal box sometimes become tall . For reason , recommend use rigid area instead strut . Glue Use specify excess space layout go . Think kind elastic glue — stretchy expandable , yet take space unless pull apart component stick . For example , put horizontal glue two component left-to-right box , make extra space go component , instead right component . Here example make space left-to-right box go two component , instead right component : container.add ( firstComponent ) ; container.add ( Box.createHorizontalGlue ( ) ) ; container.add ( secondComponent ) ; Custom Box.Filler Use specify component whatever minimum , prefer , maximum size want . For example , create filler left-to-right layout put least 5 pixel two component ensure container minimum height 100 pixel , could use code : container.add ( firstComponent ) ; Dimension minSize = new Dimension ( 5 , 100 ) ; Dimension prefSize = new Dimension ( 5 , 100 ) ; Dimension maxSize = new Dimension ( Short.MAX_VALUE , 100 ) ; container.add ( new Box.Filler ( minSize , prefSize , maxSize ) ) ; container.add ( secondComponent ) ; Fixing Alignment Problems Two type alignment problem sometimes occur BoxLayout : A group component alignment , want change alignment make look good . For example , instead center group left-to-right button line , might want bottom button align . Here example : Two component control BoxLayout different default alignment , cause mis-aligned . For example , following show , label panel top-to-bottom box layout , label 's left edge , default , align center panel . In general , component control top-to-bottom BoxLayout object X alignment . Similarly , component control left-to-right Boxlayout generally Y alignment . You set JComponent 's X alignment invoke setAlignmentX method . An alternative available component override getAlignmentX method custom subclass component class . Similarly , set Y alignment component invoke setAlignmentY method override getAlignmentY . Here example , take application call BoxAlignmentDemo , change Y alignment two button bottom button align : button1.setAlignmentY ( Component.BOTTOM_ALIGNMENT ) ; button2.setAlignmentY ( Component.BOTTOM_ALIGNMENT ) ; Click Launch button run BoxAlignmentDemo use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . By default , component center X Y alignment . However , button , combo box , label , menu item different default X alignment value : LEFT_ALIGNMENT . The previous picture show happen put left-aligned component label together center-aligned component container control top-to-bottom BoxLayout . The BoxAlignmentDemo program give example fix mismatched alignment problem . Usually , simple make offend button label center align . For example : label.setAlignmentX ( Component.CENTER_ALIGNMENT ) ; Specifying Component Sizes As mention , BoxLayout pay attention component 's request minimum , prefer , maximum size . While fine-tune layout , might need adjust size . Sometimes need adjust size obvious . For example , button 's maximum size generally preferred size . If want button draw wider additional space available , need change maximum size . Sometimes , however , need adjust size obvious . You might get unexpected result box layout , might know . In case , usually best treat problem alignment problem first . If adjust alignment help , might size problem . We 'll discuss bit later . Note : Although BoxLayout pay attention component 's maximum size , many layout manager . For example , put button bottom part BorderLayout , button probably wide preferred width , matter button 's maximum size . BoxLayout , hand , never make button wide maximum size . You change minimum , prefer , maximum size two way : By invoke appropriate setXxxSize method ( define JComponent class ) . For example : comp.setMinimumSize ( new Dimension ( 50 , 25 ) ) ; comp.setPreferredSize ( new Dimension ( 50 , 25 ) ) ; comp.setMaximumSize ( new Dimension ( Short.MAX_VALUE , Short.MAX_VALUE ) ) ; By override appropriate getXxxSize method . For example : ... //in subclass component class : public Dimension getMaximumSize ( ) { size = getPreferredSize ( ) ; size.width = Short.MAX_VALUE ; return size ; } If run trouble box layout rule alignment problem , trouble might well size-related . For example , container control box layout take much space , one component container probably need maximum size restrict . You use two technique track size trouble box layout : Add garish line border outside Swing component question . This let see size really . For example : comp.setBorder ( BorderFactory.createCompoundBorder ( BorderFactory.createLineBorder ( Color.red ) , comp.getBorder ( ) ) ) ; Use System.out.println print component ' minimum , prefer , maximum size , perhaps bound . The Box Layout API The following table list commonly use BoxLayout Box constructor method . The API use box layout fall category : Creating BoxLayout object Creating space filler Other useful method Creating BoxLayout Objects Constructor Method Purpose BoxLayout ( Container , int ) Creates BoxLayout instance control specified Container . The integer argument specify axis along container 's component lay . When container default component orientation , BoxLayout.LINE_AXIS specify component lay leave right , BoxLayout.PAGE_AXIS specifies component lay top bottom . Box ( int ) Creates Box — container use BoxLayout specify axis . static Box createHorizontalBox ( ) ( Box ) Creates Box lay component leave right . static Box createVerticalBox ( ) ( Box ) Creates Box lay component top bottom . Creating Space Fillers These method define Box class . Constructor Method Purpose Component createRigidArea ( Dimension ) Create rigid component . Component createHorizontalGlue ( ) Component createVerticalGlue ( ) Component createGlue ( ) Create glue component . Horizontal glue vertical glue useful . Component createHorizontalStrut ( ) Component createVerticalStrut ( ) Create `` strut '' component . We recommend use rigid area instead strut . Box.Filler ( Dimension , Dimension , Dimension ) Creates component specified minimum , prefer , maximum size ( argument specify order ) . See custom Box.Filler discussion , earlier section , detail . Other Useful Methods Method Purpose void changeShape ( Dimension , Dimension , Dimension ) ( Box.Filler ) Change minimum , prefer , maximum size recipient Box.Filler object . The layout change accordingly . Examples Use Box Layouts The follow table list many example use box layout . Example Where Described Notes BoxLayoutDemo2 This page Uses box layout create centered column component . BoxAlignmentDemo This page Demonstrates fix common alignment problem . BoxLayoutDemo This page Lets play alignment maximum size . ListDialog This page A simple yet realistic example use top-to-bottom box layout left-to-right one . Uses horizontal glue , rigid area , empty border . Also set X alignment component . InternalFrameEventDemo How Write Internal Frame Listener Uses top-to-bottom layout center button scroll pane internal frame . MenuGlueDemo Customizing Menu Layout Shows right-align menu menu bar , use glue component . MenuLayoutDemo Customizing Menu Layout Shows customize menu layout change menu bar use top-to-bottom box layout , popup menu use left-to-right box layout . ConversionPanel.java Converter demo How Use Panels Aligns two component different box-layout-controlled container set component ' width , container ' width .