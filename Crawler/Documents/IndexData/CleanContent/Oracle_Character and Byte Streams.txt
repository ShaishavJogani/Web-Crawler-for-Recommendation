The java.io package provide class allow convert Unicode character stream byte stream non-Unicode text . With InputStreamReader class , convert byte stream character stream . You use OutputStreamWriter class translate character stream byte stream . The following figure illustrate conversion process : When create InputStreamReader OutputStreamWriter object , specify byte encode want convert . For example , translate text file UTF-8 encoding Unicode , create InputStreamReader follow : FileInputStream fis = new FileInputStream ( `` test.txt '' ) ; InputStreamReader isr = new InputStreamReader ( fis , `` UTF8 '' ) ; If omit encode identifier , InputStreamReader OutputStreamWriter rely default encoding . You determine encode InputStreamReader OutputStreamWriter us invoke getEncoding method , follow : InputStreamReader defaultReader = new InputStreamReader ( fis ) ; String defaultEncoding = defaultReader.getEncoding ( ) ; The example follow show perform character-set conversion InputStreamReader OutputStreamWriter class . The full source code example StreamConverter.java . This program display Japanese character . Before try , verify appropriate font instal system . If use JDK software compatible version 1.1 , make copy font.properties file replace font.properties.ja file . The StreamConverter program convert sequence Unicode character String object FileOutputStream byte encode UTF-8 . The method perform conversion call writeOutput : static void writeOutput ( String str ) { try { FileOutputStream fos = new FileOutputStream ( `` test.txt '' ) ; Writer = new OutputStreamWriter ( fo , `` UTF8 '' ) ; out.write ( str ) ; out.close ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } The readInput method read byte encode UTF-8 file create writeOutput method . An InputStreamReader object convert byte UTF-8 Unicode return result String . The readInput method follow : static String readInput ( ) { StringBuffer buffer = new StringBuffer ( ) ; try { FileInputStream fis = new FileInputStream ( `` test.txt '' ) ; InputStreamReader isr = new InputStreamReader ( fis , `` UTF8 '' ) ; Reader = new BufferedReader ( isr ) ; int ch ; ( ( ch = in.read ( ) ) > -1 ) { buffer.append ( ( char ) ch ) ; } in.close ( ) ; return buffer.toString ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; return null ; } } The main method StreamConverter program invoke writeOutput method create file byte encode UTF-8 . The readInput method read file , convert byte back Unicode . Here source code main method : public static void main ( String [ ] args ) { String jaString = new String ( `` \u65e5\u672c\u8a9e\u6587\u5b57\u5217 '' ) ; writeOutput ( jaString ) ; String inputString = readInput ( ) ; String displayString = jaString + `` `` + inputString ; new ShowString ( displayString , `` Conversion Demo '' ) ; } The original string ( jaString ) identical newly create string ( inputString ) . To show two string , program concatenate display ShowString object . The ShowString class display string Graphics.drawString method . The source code class ShowString.java . When StreamConverter program instantiates ShowString , follow window appear . The repetition character display verifies two string identical :