The break Statement The break statement two form : label unlabeled . You saw unlabeled form previous discussion switch statement . You also use unlabeled break terminate , , do-while loop , show following BreakDemo program : class BreakDemo { public static void main ( String [ ] args ) { int [ ] arrayOfInts = { 32 , 87 , 3 , 589 , 12 , 1076 , 2000 , 8 , 622 , 127 } ; int searchfor = 12 ; int ; boolean foundIt = false ; ( = 0 ; < arrayOfInts.length ; i++ ) { ( arrayOfInts [ ] == searchfor ) { foundIt = true ; break ; } } ( foundIt ) { System.out.println ( `` Found `` + searchfor + `` index `` + ) ; } else { System.out.println ( searchfor + `` array '' ) ; } } } This program search number 12 array . The break statement , show boldface , terminate loop value find . Control flow transfer statement loop . This program 's output : Found 12 index 4 An unlabeled break statement terminate innermost switch , , , do-while statement , labeled break terminate statement . The following program , BreakWithLabelDemo , similar previous program , use nest loop search value two-dimensional array . When value find , labeled break terminate outer loop ( label `` search '' ) : class BreakWithLabelDemo { public static void main ( String [ ] args ) { int [ ] [ ] arrayOfInts = { { 32 , 87 , 3 , 589 } , { 12 , 1076 , 2000 , 8 } , { 622 , 127 , 77 , 955 } } ; int searchfor = 12 ; int ; int j = 0 ; boolean foundIt = false ; search : ( = 0 ; < arrayOfInts.length ; i++ ) { ( j = 0 ; j < arrayOfInts [ ] .length ; j++ ) { ( arrayOfInts [ ] [ j ] == searchfor ) { foundIt = true ; break search ; } } } ( foundIt ) { System.out.println ( `` Found `` + searchfor + `` `` + + `` , `` + j ) ; } else { System.out.println ( searchfor + `` array '' ) ; } } } This output program . Found 12 1 , 0 The break statement terminate labeled statement ; transfer flow control label . Control flow transfer statement immediately follow label ( terminate ) statement . The continue Statement The continue statement skip current iteration , , do-while loop . The unlabeled form skip end innermost loop 's body evaluate boolean expression control loop . The following program , ContinueDemo , step String , count occurences letter `` p '' . If current character p , continue statement skip rest loop proceeds next character . If `` p '' , program increments letter count . class ContinueDemo { public static void main ( String [ ] args ) { String searchMe = `` peter piper pick `` + `` peck pickled pepper '' ; int max = searchMe.length ( ) ; int numPs = 0 ; ( int = 0 ; < max ; i++ ) { // interest p's ( searchMe.charAt ( ) ! = 'p ' ) continue ; // process p's numPs++ ; } System.out.println ( `` Found `` + numPs + `` p 's string . `` ) ; } } Here output program : Found 9 p 's string . To see effect clearly , try remove continue statement recompiling . When run program , count wrong , say find 35 p 's instead 9 . A labeled continue statement skip current iteration outer loop mark give label . The following example program , ContinueWithLabelDemo , use nested loop search substring within another string . Two nested loop require : one iterate substring one iterate string search . The following program , ContinueWithLabelDemo , use labeled form continue skip iteration outer loop . class ContinueWithLabelDemo { public static void main ( String [ ] args ) { String searchMe = `` Look substring '' ; String substring = `` sub '' ; boolean foundIt = false ; int max = searchMe.length ( ) - substring.length ( ) ; test : ( int = 0 ; < = max ; i++ ) { int n = substring.length ( ) ; int j = ; int k = 0 ; ( n -- ! = 0 ) { ( searchMe.charAt ( j++ ) ! = substring.charAt ( k++ ) ) { continue test ; } } foundIt = true ; break test ; } System.out.println ( foundIt ? `` Found '' : `` Did n't find '' ) ; } } Here output program . Found The return Statement The last branching statement return statement . The return statement exit current method , control flow return method invoke . The return statement two form : one return value , one n't . To return value , simply put value ( expression calculate value ) return keyword . return ++count ; The data type returned value must match type method 's declared return value . When method declare void , use form return n't return value . return ; The Classes Objects lesson cover everything need know write method .