Questions A sequence aggregate operation know ___ . Each pipeline contain zero ___ operation . Each pipeline end ___ operation . What kind operation produce another stream output ? Describe one way forEach aggregate operation differs enhance statement iterators . True False : A stream similar collection data structure store element . Identify intermediate terminal operation code : double average = roster .stream ( ) .filter ( p - > p.getGender ( ) == Person.Sex.MALE ) .mapToInt ( Person : :getAge ) .average ( ) .getAsDouble ( ) ; The code p - > p.getGender ( ) == Person.Sex.MALE example ? The code Person : :getAge example ? Terminal operation combine content stream return one value know ? Name one important difference Stream.reduce method Stream.collect method . If want process stream name , extract male name , store new List , would Stream.reduce Stream.collect appropriate operation use ? True False : Aggregate operation make possible implement parallelism non-thread-safe collection . Streams always serial unless otherwise specify . How request stream process parallel ? Exercises Write following enhance statement pipeline lambda expression . Hint : Use filter intermediate operation forEach terminal operation . ( Person p : roster ) { ( p.getGender ( ) == Person.Sex.MALE ) { System.out.println ( p.getName ( ) ) ; } } Convert following code new implementation use lambda expression aggregate operation instead nest loop . Hint : Make pipeline invoke filter , sort , collect operation , order . List < Album > favs = new ArrayList < > ( ) ; ( Album : album ) { boolean hasFavorite = false ; ( Track : a.tracks ) { ( t.rating > = 4 ) { hasFavorite = true ; break ; } } ( hasFavorite ) favs.add ( ) ; } Collections.sort ( favs , new Comparator < Album > ( ) { public int compare ( Album a1 , Album a2 ) { return a1.name.compareTo ( a2.name ) ; } } ) ; Check answer .