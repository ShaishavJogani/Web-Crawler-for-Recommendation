A generic type generic class interface parameterized type . The following Box class modify demonstrate concept . A Simple Box Class Begin examine non-generic Box class operate object type . It need provide two method : set , add object box , get , retrieve : public class Box { private Object object ; public void set ( Object object ) { this.object = object ; } public Object get ( ) { return object ; } } Since method accept return Object , free pass whatever want , provide one primitive type . There way verify , compile time , class use . One part code may place Integer box expect get Integers , another part code may mistakenly pass String , result runtime error . A Generic Version Box Class A generic class define following format : class name < T1 , T2 , ... , Tn > { /* ... */ } The type parameter section , delimit angle bracket ( < > ) , follow class name . It specify type parameter ( also call type variable ) T1 , T2 , ... , Tn . To update Box class use generic , create generic type declaration change code `` public class Box '' `` public class Box < T > '' . This introduce type variable , T , use anywhere inside class . With change , Box class become : /** * Generic version Box class . * @ param < T > type value boxed */ public class Box < T > { // T stand `` Type '' private T ; public void set ( T ) { this.t = ; } public T get ( ) { return ; } } As see , occurrence Object replace T. A type variable non-primitive type specify : class type , interface type , array type , even another type variable . This technique apply create generic interface . Type Parameter Naming Conventions By convention , type parameter name single , uppercase letter . This stand sharp contrast variable naming convention already know , good reason : Without convention , would difficult tell difference type variable ordinary class interface name . The commonly use type parameter name : E - Element ( use extensively Java Collections Framework ) K - Key N - Number T - Type V - Value S , U , V etc . - 2nd , 3rd , 4th type You 'll see name use throughout Java SE API rest lesson . Invoking Instantiating Generic Type To reference generic Box class within code , must perform generic type invocation , replace T concrete value , Integer : Box < Integer > integerBox ; You think generic type invocation similar ordinary method invocation , instead pass argument method , pass type argument — Integer case — Box class . Type Parameter Type Argument Terminology : Many developer use term `` type parameter '' `` type argument '' interchangeably , term . When coding , one provide type argument order create parameterized type . Therefore , T Foo < T > type parameter String Foo < String > f type argument . This lesson observe definition use term . Like variable declaration , code actually create new Box object . It simply declare integerBox hold reference `` Box Integer '' , Box < Integer > read . An invocation generic type generally know parameterized type . To instantiate class , use new keyword , usual , place < Integer > class name parenthesis : Box < Integer > integerBox = new Box < Integer > ( ) ; The Diamond In Java SE 7 later , replace type argument require invoke constructor generic class empty set type argument ( < > ) long compiler determine , infer , type argument context . This pair angle bracket , < > , informally call diamond . For example , create instance Box < Integer > following statement : Box < Integer > integerBox = new Box < > ( ) ; For information diamond notation type inference , see Type Inference . Multiple Type Parameters As mention previously , generic class multiple type parameter . For example , generic OrderedPair class , implement generic Pair interface : public interface Pair < K , V > { public K getKey ( ) ; public V getValue ( ) ; } public class OrderedPair < K , V > implement Pair < K , V > { private K key ; private V value ; public OrderedPair ( K key , V value ) { this.key = key ; this.value = value ; } public K getKey ( ) { return key ; } public V getValue ( ) { return value ; } } The following statement create two instantiation OrderedPair class : Pair < String , Integer > p1 = new OrderedPair < String , Integer > ( `` Even '' , 8 ) ; Pair < String , String > p2 = new OrderedPair < String , String > ( `` hello '' , `` world '' ) ; The code , new OrderedPair < String , Integer > , instantiate K String V Integer . Therefore , parameter type OrderedPair 's constructor String Integer , respectively . Due autoboxing , valid pass String int class . As mention The Diamond , Java compiler infer K V type declaration OrderedPair < String , Integer > , statement shorten use diamond notation : OrderedPair < String , Integer > p1 = new OrderedPair < > ( `` Even '' , 8 ) ; OrderedPair < String , String > p2 = new OrderedPair < > ( `` hello '' , `` world '' ) ; To create generic interface , follow convention create generic class . Parameterized Types You also substitute type parameter ( i.e. , K V ) parameterized type ( i.e. , List < String > ) . For example , use OrderedPair < K , V > example : OrderedPair < String , Box < Integer > > p = new OrderedPair < > ( `` prime '' , new Box < Integer > ( ... ) ) ;