You use upper bound wildcard relax restriction variable . For example , say want write method work List < Integer > , List < Double > , List < Number > ; achieve use upper bound wildcard . To declare upper-bounded wildcard , use wildcard character ( ' ? ' ) , follow extends keyword , follow upper bound . Note , context , extend use general sense mean either `` extends '' ( class ) `` implement '' ( interface ) . To write method work list Number subtypes Number , Integer , Double , Float , would specify List < ? extends Number > . The term List < Number > restrictive List < ? extends Number > former match list type Number , whereas latter match list type Number subclass . Consider following process method : public static void process ( List < ? extends Foo > list ) { /* ... */ } The upper bound wildcard , < ? extends Foo > , Foo type , match Foo subtype Foo . The process method access list element type Foo : public static void process ( List < ? extends Foo > list ) { ( Foo elem : list ) { // ... } } In foreach clause , elem variable iterates element list . Any method define Foo class use elem . The sumOfList method return sum number list : public static double sumOfList ( List < ? extends Number > list ) { double = 0.0 ; ( Number n : list ) += n.doubleValue ( ) ; return ; } The following code , use list Integer object , print sum = 6.0 : List < Integer > li = Arrays.asList ( 1 , 2 , 3 ) ; System.out.println ( `` sum = `` + sumOfList ( li ) ) ; A list Double value use sumOfList method . The following code print sum = 7.0 : List < Double > ld = Arrays.asList ( 1.2 , 2.3 , 3.5 ) ; System.out.println ( `` sum = `` + sumOfList ( ld ) ) ;