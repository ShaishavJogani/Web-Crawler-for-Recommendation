When launch use Java Network Launch Protocol ( JNLP ) , rich Internet application ( RIAs ) access client user 's permission . Consider Text Editor applet example understand use JNLP API base service . The Text Editor text area button label Open , Save , SaveAs . The Text Editor use open exist text file , edit , save back disk . The Text Editor applet show next . // < ! [ CDATA [ var attribute = { code : 'TextEditorApplet.class ' , archive : 'examples/dist/applet_JNLP_API/applet_JNLP_API.jar ' , width:500 , height:300 } ; var parameter = { jnlp_href : 'examples/dist/applet_JNLP_API/texteditor_applet.jnlp ' } ; deployJava.runApplet ( attribute , parameter , '1.6 ' ) ; // ] ] > A browser JavaScript enable require page operate properly . Note : If n't see applet running , need install least Java SE Development Kit ( JDK ) 6 update 10 release.Note : If n't see example running , might need enable JavaScript interpreter browser Deployment Toolkit script function properly . The TextEditor TextEditorApplet class lay user interface display applet . The FileHandler class contain core functionality respect use JNLP API base service . Remember , technique describe topic apply Java Web Start application well . To make use JNLP service , first retrieve reference service . The initialize method FileHandler class retrieve reference JNLP service show following code snippet : private static synchronize void initialize ( ) { ... try { fos = ( FileOpenService ) ServiceManager.lookup ( `` javax.jnlp.FileOpenService '' ) ; fss = ( FileSaveService ) ServiceManager.lookup ( `` javax.jnlp.FileSaveService '' ) ; } catch ( UnavailableServiceException e ) { ... } } After reference required service , invoke method service perform necessary operation . The open method FileHandler class invoke openFileDialog method FileOpenService class display file chooser . The open method return content select file . public static String open ( ) { initialize ( ) ; try { fc = fos.openFileDialog ( null , null ) ; return readFromFile ( fc ) ; } catch ( IOException ioe ) { ioe.printStackTrace ( System.out ) ; return null ; } } Similarly , save saveAs method FileHandler class invoke correspond method FileSaveService class enable user select file name save content text area disk . public static void saveAs ( String txt ) { initialize ( ) ; try { ( fc == null ) { // If already save . // Save-as like save save ( txt ) ; } else { fc = fss.saveAsFileDialog ( null , null , fc ) ; save ( txt ) ; } } catch ( IOException ioe ) { ioe.printStackTrace ( System.out ) ; } } At runtime , RIA attempt open save file , user see security dialog ask want allow action . The operation proceed user allow RIA access environment . The complete source FileHandler class show next . // add javaws.jar classpath compilation import javax.jnlp.FileOpenService ; import javax.jnlp.FileSaveService ; import javax.jnlp.FileContents ; import javax.jnlp.ServiceManager ; import javax.jnlp.UnavailableServiceException ; import java.io . * ; public class FileHandler { static private FileOpenService fo = null ; static private FileSaveService f = null ; static private FileContents fc = null ; // retrieve reference JNLP service private static synchronize void initialize ( ) { ( f ! = null ) { return ; } try { fos = ( FileOpenService ) ServiceManager.lookup ( `` javax.jnlp.FileOpenService '' ) ; fss = ( FileSaveService ) ServiceManager.lookup ( `` javax.jnlp.FileSaveService '' ) ; } catch ( UnavailableServiceException e ) { fos = null ; f = null ; } } // display open file dialog read select file use FileOpenService public static String open ( ) { initialize ( ) ; try { fc = fos.openFileDialog ( null , null ) ; return readFromFile ( fc ) ; } catch ( IOException ioe ) { ioe.printStackTrace ( System.out ) ; return null ; } } // display saveFileDialog save file use FileSaveService public static void save ( String txt ) { initialize ( ) ; try { // Show save dialog name already give ( fc == null ) { fc = fss.saveFileDialog ( null , null , new ByteArrayInputStream ( txt.getBytes ( ) ) , null ) ; // file save , return ; } // use filename know ( fc ! = null ) { writeToFile ( txt , fc ) ; } } catch ( IOException ioe ) { ioe.printStackTrace ( System.out ) ; } } // display saveAsFileDialog save file use FileSaveService public static void saveAs ( String txt ) { initialize ( ) ; try { ( fc == null ) { // If already save . Save-as like save save ( txt ) ; } else { fc = fss.saveAsFileDialog ( null , null , fc ) ; save ( txt ) ; } } catch ( IOException ioe ) { ioe.printStackTrace ( System.out ) ; } } private static void writeToFile ( String txt , FileContents fc ) throw IOException { int sizeNeeded = txt.length ( ) * 2 ; ( sizeNeeded > fc.getMaxLength ( ) ) { fc.setMaxLength ( sizeNeeded ) ; } BufferedWriter = new BufferedWriter ( new OutputStreamWriter ( fc.getOutputStream ( true ) ) ) ; os.write ( txt ) ; os.close ( ) ; } private static String readFromFile ( FileContents fc ) throw IOException { ( fc == null ) { return null ; } BufferedReader br = new BufferedReader ( new InputStreamReader ( fc.getInputStream ( ) ) ) ; StringBuffer sb = new StringBuffer ( ( int ) fc.getLength ( ) ) ; String line = br.readLine ( ) ; ( line ! = null ) { sb.append ( line ) ; sb.append ( `` \n '' ) ; line = br.readLine ( ) ; } br.close ( ) ; return sb.toString ( ) ; } } Note : To compile Java code reference class javax.jnlp package , include < JDK path > /jre/lib/javaws.jar classpath . At runtime , Java Runtime Environment software automatically make class available RIAs . Download source code Text Editor Applet example experiment far .