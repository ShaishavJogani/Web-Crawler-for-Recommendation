Random access file permit nonsequential , random , access file 's content . To access file randomly , open file , seek particular location , read write file . This functionality possible SeekableByteChannel interface . The SeekableByteChannel interface extend channel I/O notion current position . Methods enable set query position , read data , write data , location . The API consist , easy use , method : position – Returns channel 's current position position ( long ) – Sets channel 's position read ( ByteBuffer ) – Reads bytes buffer channel write ( ByteBuffer ) – Writes byte buffer channel truncate ( long ) – Truncates file ( entity ) connect channel Reading Writing Files With Channel I/O show Path.newByteChannel method return instance SeekableByteChannel . On default file system , use channel , cast FileChannel give access advanced feature , map region file directly memory fast access , lock region file , reading write byte absolute location without affect channel 's current position . The following code snippet open file reading writing use one newByteChannel method . The SeekableByteChannel return cast FileChannel . Then , 12 byte read beginning file , string `` I ! '' write location . The current position file move end , 12 byte beginning append . Finally , string , `` I ! '' append , channel file close . String = `` I ! \n '' ; byte data [ ] = s.getBytes ( ) ; ByteBuffer = ByteBuffer.wrap ( data ) ; ByteBuffer copy = ByteBuffer.allocate ( 12 ) ; try ( FileChannel fc = ( FileChannel.open ( file , READ , WRITE ) ) ) { // Read first 12 // byte file . int nread ; { nread = fc.read ( copy ) ; } ( nread ! = -1 & & copy.hasRemaining ( ) ) ; // Write `` I ! '' beginning file . fc.position ( 0 ) ; ( out.hasRemaining ( ) ) fc.write ( ) ; out.rewind ( ) ; // Move end file . Copy first 12 byte // end file . Then write `` I ! '' . long length = fc.size ( ) ; fc.position ( length-1 ) ; copy.flip ( ) ; ( copy.hasRemaining ( ) ) fc.write ( copy ) ; ( out.hasRemaining ( ) ) fc.write ( ) ; } catch ( IOException x ) { System.out.println ( `` I/O Exception : `` + x ) ; }