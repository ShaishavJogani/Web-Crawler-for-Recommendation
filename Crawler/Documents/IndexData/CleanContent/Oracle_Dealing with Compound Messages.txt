A compound message may contain several kind variable : date , time , string , number , currency , percentage . To format compound message locale-independent manner , construct pattern apply MessageFormat object , store pattern ResourceBundle . By step sample program , section demonstrate internationalize compound message . The sample program make use MessageFormat class . The full source code program file call MessageFormatDemo.java . The German locale property file call MessageBundle_de_DE.properties . 1 . Identify Variables Message Suppose want internationalize following message : Notice 've underline variable data identify kind object represent data . 2 . Isolate Message Pattern ResourceBundle Store message ResourceBundle name MessageBundle , follow : ResourceBundle message = ResourceBundle.getBundle ( `` MessageBundle '' , currentLocale ) ; This ResourceBundle back property file Locale . Since ResourceBundle call MessageBundle , property file U.S. English name MessageBundle_en_US.properties . The content file follow : template = At { 2 , time , short } { 2 , date , long } , \ detect { 1 , number , integer } spaceships \ planet { 0 } . planet = Mars The first line property file contain message pattern . If compare pattern message text show step 1 , 'll see argument enclose brace replaces variable message text . Each argument start digit call argument number , match index element Object array hold argument value . Note pattern argument number particular order . You place argument anywhere pattern . The requirement argument number matching element array argument value . The next step discuss argument value array , first let 's look argument pattern . The following table provide detail argument : Arguments template MessageBundle_en_US.properties Argument Description { 2 , time , short } The time portion Date object . The short style specify DateFormat.SHORT formatting style . { 2 , date , long } The date portion Date object . The Date object use date time variable . In Object array argument index element hold Date object 2 . ( This describe next step . ) { 1 , number , integer } A Number object , far qualify integer number style . { 0 } The String ResourceBundle correspond planet key . For full description argument syntax , see API documentation MessageFormat class . 3 . Set Message Arguments The following line code assign value argument pattern . The index element messageArguments array match argument number pattern . For example , Integer element index 1 corresponds { 1 , number , integer } argument pattern . Because must translate , String object element 0 fetch ResourceBundle getString method . Here code define array message argument : Object [ ] messageArguments = { messages.getString ( `` planet '' ) , new Integer ( 7 ) , new Date ( ) } ; 4 . Create Formatter Next , create MessageFormat object . You set Locale message contain Date Number object , format locale-sensitive manner . MessageFormat formatter = new MessageFormat ( `` '' ) ; formatter.setLocale ( currentLocale ) ; 5 . Format Message Using Pattern Arguments This step show pattern , message argument , formatter work together . First , fetch pattern String ResourceBundle getString method . The key pattern template . Pass pattern String formatter applyPattern method . Then format message use array message argument , invoke format method . The String return format method ready display . All accomplish two line code : formatter.applyPattern ( messages.getString ( `` template '' ) ) ; String output = formatter.format ( messageArguments ) ; 6 . Run Demo Program The demo program print translated message English German locale properly format date time variable . Note English German verb ( `` detect '' `` entdeckt '' ) different location relative variable : currentLocale = en_US At 10:16 AM July 31 , 2009 , detect 7 spaceship planet Mars . currentLocale = de_DE Um 10:16 31 . Juli 2009 haben wir 7 Raumschiffe auf dem Planeten Mars entdeckt .