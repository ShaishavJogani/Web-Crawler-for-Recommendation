The word message may vary plural singular word form possible . With ChoiceFormat class , map number word phrase , allow construct grammatically correct message . In English plural singular form word usually different . This present problem construct message refer quantity . For example , message report number file disk , following variation possible : There file XDisk . There one file XDisk . There 2 file XDisk . The fast way solve problem create MessageFormat pattern like : There { 0 , number } file ( ) { 1 } . Unfortunately precede pattern result incorrect grammar : There 1 file ( ) XDisk . You good , provide use ChoiceFormat class . In section 'll learn deal plural message step sample program call ChoiceFormatDemo . This program also use MessageFormat class , discuss previous section , Dealing Compound Messages . 1 . Define Message Pattern First , identify variable message : Next , replace variable message argument , create pattern apply MessageFormat object : There { 0 } { 1 } . The argument disk name , represent { 1 } , easy enough deal . You treat like String variable MessageFormat pattern . This argument match element index 1 array argument value . ( See step 7 . ) Dealing argument { 0 } complex , couple reason : The phrase argument replace varies number file . To construct phrase run time , need map number file particular String . For example , number 1 map String contain phrase one file . The ChoiceFormat class allow perform necessary mapping . If disk contain multiple file , phrase include integer . The MessageFormat class let insert number phrase . 2 . Create ResourceBundle Because message text must translate , isolate ResourceBundle : ResourceBundle bundle = ResourceBundle.getBundle ( `` ChoiceBundle '' , currentLocale ) ; The sample program back ResourceBundle property file . The ChoiceBundle_en_US.propertiescontains following line : pattern = There { 0 } { 1 } . noFiles = file oneFile = one file multipleFiles = { 2 } file The content property file show message construct format . The first line contain pattern MessageFormat . ( See step 1 . ) The line contain phrase replace argument { 0 } pattern . The phrase multipleFiles key contain argument { 2 } , replace number . Here French version property file , ChoiceBundle_fr_FR.properties pattern = Il { 0 } sur { 1 } . noFiles = n'y pa de fichiers oneFile = un fichier multipleFiles = { 2 } fichiers 3 . Create Message Formatter In step instantiate MessageFormat set Locale : MessageFormat messageForm = new MessageFormat ( `` '' ) ; messageForm.setLocale ( currentLocale ) ; 4 . Create Choice Formatter The ChoiceFormat object allow choose , base double number , particular String . The range double number , String object map , specify array : double [ ] fileLimits = { 0,1,2 } ; String [ ] fileStrings = { bundle.getString ( `` noFiles '' ) , bundle.getString ( `` oneFile '' ) , bundle.getString ( `` multipleFiles '' ) } ; ChoiceFormat map element double array element String array index . In sample code 0 map String return call bundle.getString ( `` noFiles '' ) . By coincidence index value fileLimits array . If code set fileLimits [ 0 ] seven , ChoiceFormat would map number 7 fileStrings [ 0 ] . You specify double String array instantiate ChoiceFormat : ChoiceFormat choiceForm = new ChoiceFormat ( fileLimits , fileStrings ) ; 5 . Apply Pattern Remember pattern construct step 1 ? It 's time retrieve pattern ResourceBundle apply MessageFormat object : String pattern = bundle.getString ( `` pattern '' ) ; messageForm.applyPattern ( pattern ) ; 6 . Assign Formats In step assign MessageFormat object ChoiceFormat object create step 4 : Format [ ] format = { choiceForm , null , NumberFormat.getInstance ( ) } ; messageForm.setFormats ( format ) ; The setFormats method assigns Format object argument message pattern . You must invoke applyPattern method call setFormats method . The follow table show element Format array correspond argument message pattern : The Format Array ChoiceFormatDemo Program Array Element Pattern Argument choiceForm { 0 } null { 1 } NumberFormat.getInstance ( ) { 2 } 7 . Set Arguments Format Message At run time program assign variable array argument pass MessageFormat object . The element array correspond argument pattern . For example , messageArgument [ 1 ] map pattern argument { 1 } , String contain name disk . In previous step program assign ChoiceFormat object argument { 0 } pattern . Therefore number assign messageArgument [ 0 ] determines String ChoiceFormat object selects . If messageArgument [ 0 ] great equal 2 , String contain phrase { 2 } file replaces argument { 0 } pattern . The number assign messageArgument [ 2 ] substitute place pattern argument { 2 } . Here 's code try : Object [ ] messageArguments = { null , `` XDisk '' , null } ; ( int numFiles = 0 ; numFiles < 4 ; numFiles++ ) { messageArguments [ 0 ] = new Integer ( numFiles ) ; messageArguments [ 2 ] = new Integer ( numFiles ) ; String result = messageForm.format ( messageArguments ) ; System.out.println ( result ) ; } 8 . Run Demo Program Compare message display program phrase ResourceBundle step 2 . Notice ChoiceFormat object select correct phrase , MessageFormat object us construct proper message . The output ChoiceFormatDemo program follow : currentLocale = en_US There file XDisk . There one file XDisk . There 2 file XDisk . There 3 file XDisk . currentLocale = fr_FR Il n'y pa des fichiers sur XDisk . Il un fichier sur XDisk . Il 2 fichiers sur XDisk . Il 3 fichiers sur XDisk .