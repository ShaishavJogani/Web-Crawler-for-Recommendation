This page map section Java Tutorials topic cover Upgrade Java SE 8 OCP ( Oracle Certified Professional ) ( Java SE 6 prior version ) Upgrade Java SE 7 Java SE 8 OCP exam . These exam associate Oracle Certified Professional , Java SE 8 Programmer certificate . Upgrade Java SE 8 OCP ( Java SE 6 prior version ) The topic cover exam : Language Enhancements Concurrency Localization Java File I/O ( NIO.2 ) Lambda Java Collections Java Streams Section 1 : Language Enhancements Item 1 : Develop code use String object switch statement , binary literal , numeric literal , include underscore literal The switch Statement Primitive Data Types Primitive Data Types Item 2 : Develop code use try-with-resources statement , include use class implement AutoCloseable interface The try-with-resources Statement Item 3 : Develop code handle multiple Exception type single catch block The catch Blocks Item 4 : Use static default method interface include inheritance rule default method Default Methods Section 2 : Concurrency Item 1 : Use class java.util.concurrent package include CyclicBarrier CopyOnWriteArrayList focus advantage difference traditional java.util collection Item 2 : Use Lock , ReadWriteLock , ReentrantLock class java.util.concurrent.locks java.util.concurrent.atomic package support lock-free thread-safe programming single variable Atomic Variables Item 3 : Use Executor , ExecutorService , Executors , Callable , Future execute task use thread pool Executor Interfaces Item 4 : Use parallel Fork/Join Framework Fork/Join Section 3 : Localization Item 1 : Describe advantage localize application develop code defines , read , set locale Locale object Introduction Creating Locale Item 2 : Build resource bundle locale call resource bundle application Isolating Locale-Specific Data Item 3 : Create manage date- time-based event use LocalDate , LocalTime , LocalDateTime , Instant , Period , Duration , include combination date time single object Date Classes Date Time Classes Instant Class Period Duration Item 4 : Format date , number , currency value localization NumberFormat DateFormat class , include number date format pattern Numbers Currencies Dates Times Item 5 : Work date time across time zone manage change result daylight saving Time Zone Offset Classes Section 4 : Java File I/O ( NIO.2 ) Item 1 : Operate file directory path use java.nio.Path class Path Operations Item 2 : Check , delete , copy , move file directory use java.nio.Files class Checking File Directory Deleting File Directory Copying File Directory Moving File Directory Item 3 : Recursively access directory tree use DirectoryStream FileVisitor interface Creating Reading Directories Walking File Tree Item 4 : Find file use PathMatcher interface , use Java SE 8 I/O improvement , include Files.find , Files.walk , Files.lines method Finding Files Walking File Tree Item 5 : Observe change directory use WatchService interface Watching Directory Changes Section 5 : Lambda The section Lambda Expressions Aggregate Operations cover following item : Item 1 : Define write functional interface describe interface java.util.function package Item 2 : Describe lambda expression ; refactor code use anonymous inner class use lambda expression ; describe type inference target type Item 3 : Develop code use built-in interface include java.util.function package , Function , Consumer , Supplier , UnaryOperator , Predicate , Optional APIs , include primitive binary variation interface Item 4 : Develop code use method reference , include refactoring lambda expression method reference Section 6 : Java Collections The section Lambda Expressions Aggregate Operations cover following item : Item 1 : Develop code use diamond generic declaration The Diamond Item 2 : Develop code iterate collection , filter collection , sort collection use lambda expression Item 3 : Search data use method , findFirst , findAny , anyMatch , allMatch , noneMatch Item 4 : Perform calculation Java stream use count , max , min , average , sum method save result collection use collect method Collector class , include averagingDouble , groupingBy , joining , partitioningBy method Item 5 : Develop code use Java SE 8 collection improvement , include Collection.removeIf , List.replaceAll , Map.computeIfAbsent , Map.computeIfPresent method Item 6 : Develop code use merge , flatMap , map method Java streams Section 7 : Java Streams The section Lambda Expressions Aggregate Operations cover following item : Item 1 : Describe Stream interface pipeline ; create stream use Arrays.stream IntStream.range method ; identify lambda operation lazy Item 2 : Develop code use parallel stream , include decomposition operation reduction operation stream Upgrade Java SE 7 Java SE 8 OCP Programmer The topic cover exam : Lambda Expressions Using Built-in Lambda Types Java Collections Streams Lambdas Collection Operations Lambda Parallel Streams Lambda Cookbook Method Enhancements Use Java SE 8 Date/Time API Section 1 : Lambda Expressions Item 1 : Describe develop code use Java inner class , include nested class , static class , local class , anonymous class Nested Classes Local Classes Anonymous Classes When Use Nested Classes , Local Classes , Anonymous Classes , Lambda Expressions Item 2 : Describe write functional interface Lambda Expressions Item 3 : Describe lambda expression ; refactor code use anonymous inner class use lambda expression ; describe type inference target type Lambda Expressions Section 2 : Using Built-in Lambda Types The section Lambda Expressions Aggregate Operations cover following item : Item 1 : Describe interface java.util.function package Item 2 : Develop code use Function interface Item 3 : Develop code use Consumer interface Item 4 : Develop code use Supplier interface Item 5 : Develop code use UnaryOperator interface Item 6 : Develop code use Predicate interface Item 7 : Develop code use primitive binary variation base interface java.util.function package Item 8 : Develop code use method reference , include refactoring lambda expression method reference Section 3 : Java Collections Streams Lambdas The section Lambda Expressions Aggregate Operations cover following item : Item 1 : Develop code iterate collection use forEach ( ) method method chain Item 2 : Describe Stream interface pipeline Item 3 : Filter collection use lambda expression Item 4 : Identify operation , stream , lazy Section 4 : Collection Operations Lambda The section Lambda Expressions Aggregate Operations cover following item : Item 1 : Develop code extract data object use map ( ) method Item 2 : Search data use method findFirst ( ) , findAny ( ) , anyMatch ( ) , allMatch ( ) , noneMatch ( ) Item 3 : Describe unique characteristic Optional class Item 4 : Perform calculation use Java Stream method , count ( ) , max ( ) , min ( ) , average ( ) , sum ( ) Item 5 : Sort collection use lambda expression Item 6 : Develop code use Stream.collect ( ) method Collectors class method , averagingDouble ( ) , groupingBy ( ) , join ( ) , partitioningBy ( ) Section 5 : Parallel Streams Item 1 : Develop code use parallel stream Parallelism Item 2 : Implement decomposition reduction stream Reduction