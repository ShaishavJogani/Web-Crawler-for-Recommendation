So far , 've focus simple playback recording MIDI data . This section briefly describe advanced feature available method Sequencer interface Sequence class . Moving Arbitrary Position Sequence There two Sequencer method obtain sequencer 's current position sequence . The first : long getTickPosition ( ) return position measure MIDI tick beginning sequence . The second method : long getMicrosecondPosition ( ) return current position microsecond . This method assume sequence play default rate store MIDI file Sequence . It return different value 've change playback speed describe . You similarly set sequencer 's current position accord one unit : void setTickPosition ( long tick ) void setMicrosecondPosition ( long microsecond ) Changing Playback Speed As indicate earlier , sequence 's speed indicate tempo , vary course sequence . A sequence contain event encapsulate standard MIDI tempo-change message . When sequencer process event , change speed playback reflect indicated tempo . In addition , programmatically change tempo invoke Sequencer method : public void setTempoInBPM ( float bpm ) public void setTempoInMPQ ( float mpq ) public void setTempoFactor ( float factor ) The first two method set tempo beat per minute microsecond per quarter note , respectively . The tempo stay specified value one method invoked , tempo-change event encounter sequence , point current tempo override newly specify one . The third method , setTempoFactor , different nature . It scale whatever tempo set sequencer ( whether tempo-change event one first two method ) . The default scalar 1.0 ( change ) . Although method cause playback recording faster slow nominal tempo ( unless factor 1.0 ) , n't alter nominal tempo . In word , tempo value return getTempoInBPM getTempoInMPQ unaffected tempo factor , even though tempo factor affect actual rate playback recording . Also , tempo change tempo-change event one first two method , still get scale whatever tempo factor last set . If load new sequence , however , tempo factor reset 1.0 . Note tempo-change directive ineffectual sequence 's division type one SMPTE type , instead PPQ . Muting Soloing Individual Tracks Sequence It 's often convenient user sequencer able turn certain track , hear clearly exactly happen music . A full-featured sequencer program let user choose track sound playback . ( Speaking precisely , since sequencer n't actually create sound , user choose track contribute stream MIDI message sequencer produce . ) Typically , two type graphical control track : mute button solo button . If mute button activate , track sound circumstance , mute button deactivate . Soloing less well-known feature . It 's roughly opposite muting . If solo button track activate , track whose solo button activate sound . This feature let user quickly audition small number track without mute track . The mute button typically take priority solo button : activate , track n't sound . Using Sequencer method , mute solo track ( well query track 's current mute solo state ) easily accomplish . Let 's assume obtain default Sequencer 've load sequence data . Muting fifth track sequence would accomplish follow : sequencer.setTrackMute ( 4 , true ) ; boolean mute = sequencer.getTrackMute ( 4 ) ; ( ! mute ) { return ; // mute fail } There couple thing note code snippet . First , track sequence number start 0 end total number track minus 1 . Also , second argument setTrackMute boolean . If 's true , request mute track ; otherwise request unmute specified track . Lastly , order test muting take effect , invoke Sequencer getTrackMute method , pass track number 're query . If return true , 'd expect case , mute request work . If return false , fail . Mute request may fail various reason . For example , track number specify setTrackMute call might exceed total number track , sequencer might support muting . By call getTrackMute , determine request succeed fail . As aside , boolean 's return getTrackMute , indeed , tell u failure occur , ca n't tell u occur . We could test see failure cause pass invalid track number setTrackMute method . To , would call getTracks method Sequence , return array contain track sequence . If track number specify setTrackMute call exceed length array , know specify invalid track number . If mute request succeed , example , fifth track sound sequence play , track currently mute . The method technique solo track similar mute . To solo track , invoke setTrackSolo method Sequence : void setTrackSolo ( int track , boolean bSolo ) As setTrackMute , first argument specify zero-based track number , second argument , true , specifies track solo mode ; otherwise track solo . By default , track neither mute solo . Synchronizing Other MIDI Devices Sequencer inner class call Sequencer.SyncMode . A SyncMode object represent one way MIDI sequencer 's notion time synchronize master slave device . If sequencer synchronize master , sequencer revise current time response certain MIDI message master . If sequencer slave , sequencer similarly send MIDI message control slave 's timing . There three predefined mode specify possible master sequencer : INTERNAL_CLOCK , MIDI_SYNC , MIDI_TIME_CODE . The latter two work sequencer receive MIDI message another device . In two mode , sequencer 's time get reset base system real-time timing clock message MIDI time code ( MTC ) message , respectively . ( See MIDI specification information type message . ) These two mode also use slave mode , case sequencer send corresponding type MIDI message receiver . A fourth mode , NO_SYNC , use indicate sequencer send time information receiver . By call setMasterSyncMode method supported SyncMode object argument , specify sequencer 's timing control . Likewise , setSlaveSyncMode method determine time information sequencer send receiver . This information control timing device use sequencer master time source . Specifying Special Event Listeners Each track sequence contain many different kind MidiEvents . Such event include Note On Note Off message , program change , control change , meta event . The Java Sound API specify `` listener '' interface last two event type ( control change event meta event ) . You use interface receive notification event occur playback sequence . Objects support ControllerEventListener interface receive notification Sequencer process particular control-change message . A control-change message standard type MIDI message represent change value MIDI controller , pitch-bend wheel data slider . ( See MIDI specification complete list control-change message . ) When message process playback sequence , message instruct device ( probably synthesizer ) 's receive data sequencer update value parameter . The parameter usually control aspect sound synthesis , pitch currently sound note controller pitch-bend wheel . When sequence record , control-change message mean controller external physical device create message move , move simulate software . Here 's ControllerEventListener interface use . Let 's assume 've develop class implement ControllerEventListener interface , mean class contain following method : void controlChange ( ShortMessage msg ) Let 's also assume 've create instance class assign variable call myListener . If include following statement somewhere within program : int [ ] controllersOfInterest = { 1 , 2 , 4 } ; sequencer.addControllerEventListener ( myListener , controllersOfInterest ) ; class 's controlChange method invoke every time sequencer process control-change message MIDI controller number 1 , 2 , 4 . In word , Sequencer process request set value registered controller , Sequencer invoke class 's controlChange method . ( Note assignment MIDI controller number specific control device detail MIDI 1.0 Specification . ) The controlChange method pass ShortMessage contain controller number affect , new value controller set . You obtain controller number use ShortMessage.getData1 method , new setting controller 's value use ShortMessage.getData2 method . The kind special event listener define MetaEventListener interface . Meta message , accord Standard MIDI Files 1.0 specification , message present MIDI wire protocol embed MIDI file . They meaningful synthesizer , interpret sequencer . Meta message include instruction ( tempo change command ) , lyric text , indicator ( end-of-track ) . The MetaEventListener mechanism analogous ControllerEventListener . Implement MetaEventListener interface class whose instance need notify MetaMessage process sequencer . This involve add follow method class : void meta ( MetaMessage msg ) You register instance class pass argument Sequencer addMetaEventListener method : boolean b = sequencer.addMetaEventListener ( myMetaListener ) ; This slightly different approach take ControllerEventListener interface , register receive MetaMessages , select one interest . If sequencer encounter MetaMessage sequence , invoke myMetaListener.meta , pass MetaMessage encounter . The meta method invoke getType MetaMessage argument obtain integer 0 127 indicate message type , define Standard MIDI Files 1.0 specification .