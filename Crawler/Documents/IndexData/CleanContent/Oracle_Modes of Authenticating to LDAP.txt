In LDAP , authentication information supply `` bind '' operation . In LDAP v2 , client initiate connection LDAP server send server `` bind '' operation contain authentication information . In LDAP v3 , operation serve purpose , optional . A client send LDAP request without `` bind '' treat anonymous client ( see Anonymous section detail ) . In LDAP v3 , `` bind '' operation may send time , possibly , connection . A client send `` bind '' request middle connection change identity . If request successful , outstanding request use old identity connection discard connection associate new identity . The authentication information supply `` bind '' operation depend authentication mechanism client choose . See Authentication Mechanisms discussion authentication mechanism . Authenticating LDAP Using JNDI In JNDI , authentication information specify environment property . When create initial context use InitialDirContext class ( superclass subclass ) , supply set environment property , might contain authentication information . You use following environment property specify authentication information . Context.SECURITY_AUTHENTICATION ( `` java.naming.security.authentication '' ) . Specifies authentication mechanism use . For LDAP service provider JDK , one following string : `` none '' , `` simple '' , sasl_mech , sasl_mech space-separated list SASL mechanism name . See Authentication Mechanisms description string . Context.SECURITY_PRINCIPAL ( `` java.naming.security.principal '' ) . Specifies name user/program authentication depend value Context.SECURITY_AUTHENTICATION property . See next section lesson detail example . Context.SECURITY_CREDENTIALS ( `` java.naming.security.credentials '' ) . Specifies credential user/program authentication depend value Context.SECURITY_AUTHENTICATION property . See next section lesson detail example . When initial context create , underlie LDAP service provider extract authentication information environment property use LDAP `` bind '' operation pass server . The following example show , use simple clear-text password , client authenticate LDAP server . // Set environment create initial context Hashtable < String , Object > env = new Hashtable < String , Object > ( ) ; env.put ( Context.INITIAL_CONTEXT_FACTORY , `` com.sun.jndi.ldap.LdapCtxFactory '' ) ; env.put ( Context.PROVIDER_URL , `` ldap : //localhost:389/o=JNDITutorial '' ) ; // Authenticate S. User password `` mysecret '' env.put ( Context.SECURITY_AUTHENTICATION , `` simple '' ) ; env.put ( Context.SECURITY_PRINCIPAL , `` cn=S . User , ou=NewHires , o=JNDITutorial '' ) ; env.put ( Context.SECURITY_CREDENTIALS , `` mysecret '' ) ; // Create initial context DirContext ctx = new InitialDirContext ( env ) ; // ... something useful ctx Using Different Authentication Information Context If want use different authentication information exist context , use Context.addToEnvironment ( ) Context.removeFromEnvironment ( ) update environment property contain authentication information . Subsequent invocation method context use new authentication information communicate server . The following example show authentication information context change `` none '' context create . // Authenticate S. User password `` mysecret '' env.put ( Context.SECURITY_AUTHENTICATION , `` simple '' ) ; env.put ( Context.SECURITY_PRINCIPAL , `` cn=S . User , ou=NewHires , o=JNDITutorial '' ) ; env.put ( Context.SECURITY_CREDENTIALS , `` mysecret '' ) ; // Create initial context DirContext ctx = new InitialDirContext ( env ) ; // ... something useful ctx // Change use authentication ctx.addToEnvironment ( Context.SECURITY_AUTHENTICATION , `` none '' ) ; // ... something useful ctx Authentication Failures Authentication fail number reason . For example , supply incorrect authentication information , incorrect password principal name , AuthenticationException throw . Here example variation previous example . This time , incorrect password cause authentication fail . // Authenticate S. User give incorrect password env.put ( Context.SECURITY_AUTHENTICATION , `` simple '' ) ; env.put ( Context.SECURITY_PRINCIPAL , `` cn=S . User , ou=NewHires , o=JNDITutorial '' ) ; env.put ( Context.SECURITY_CREDENTIALS , `` notmysecret '' ) ; This produce following output . javax.naming.AuthenticationException : [ LDAP : error code 49 - Invalid Credentials ] ... Because different server support different authentication mechanism , might request authentication mechanism server support . In case , AuthenticationNotSupportedException throw . Here example variation previous example . This time , unsupported authentication mechanism ( `` custom '' ) cause authentication fail . // Authenticate S. User password `` mysecret '' env.put ( Context.SECURITY_AUTHENTICATION , `` custom '' ) ; env.put ( Context.SECURITY_PRINCIPAL , `` cn=S . User , ou=NewHires , o=JNDITutorial '' ) ; env.put ( Context.SECURITY_CREDENTIALS , `` mysecret '' ) ; This produce following output . javax.naming.AuthenticationNotSupportedException : custom ...