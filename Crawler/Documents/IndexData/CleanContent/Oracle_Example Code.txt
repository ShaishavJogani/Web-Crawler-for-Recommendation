This section step example StAX code include JAXP reference implementation bundle . All example directory use section locate INSTALL_DIR/jaxp-version/samples/stax directory . The topic cover section follow : Example Code Organization Example XML Document Cursor Example Cursor-to-Event Example Event Example Filter Example Read-and-Write Example Writer Example Example Code Organization The INSTALL_DIR/jaxp-version/samples/stax directory contain six StAX example directory : Cursor example : The cursor directory contain CursorParse.java , illustrate use XMLStreamReader ( cursor ) API read XML file . Cursor-to-Event example : The cursor2event directory contain CursorApproachEventObject.java , illustrate application get information XMLEvent object use cursor API . Event example : The event directory contain EventParse.java , illustrate use XMLEventReader ( event iterator ) API read XML file . Filter example : The filter directory contain MyStreamFilter.java , illustrate use StAX Stream Filter APIs . In example , filter accept StartElement EndElement event , filter remainder event . Read-and-Write example : The readnwrite directory contains EventProducerConsumer.java , illustrate StAX producer/consumer mechanism use simultaneously read write XML stream . Writer example : The writer directory contain CursorWriter.java , illustrate use XMLStreamWriter write XML file programatically . All StAX examples except Writer example use example XML document , BookCatalog.xml . Example XML Document The example XML document , BookCatalog.xml , use StAX example class , simple book catalog base common BookCatalogue namespace . The content BookCatalog.xml list : < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < BookCatalogue xmlns= '' http : //www.publishing.org '' > < Book > < Title > Yogasana Vijnana : Science Yoga < /Title > < author > Dhirendra Brahmachari < /Author > < Date > 1966 < /Date > < ISBN > 81-40-34319-4 < /ISBN > < Publisher > Dhirendra Yoga Publications < /Publisher > < Cost currency= '' INR '' > 11.50 < /Cost > < /Book > < Book > < Title > The First Last Freedom < /Title > < Author > J . Krishnamurti < /Author > < Date > 1954 < /Date > < ISBN > 0-06-064831-7 < /ISBN > < Publisher > Harper & amp ; Row < /Publisher > < Cost currency= '' USD '' > 2.95 < /Cost > < /Book > < /BookCatalogue > Cursor Example Located INSTALL_DIR/jaxp-version/samples/stax/cursor/ directory , CursorParse.java demonstrate use StAX cursor API read XML document . In Cursor example , application instruct parser read next event XML input stream call next ( ) . Note next ( ) return integer constant corresponding underlying event parser position . The application need call relevant function get information relate underlying event . You imagine approach virtual cursor move across XML input stream . There various accessor method call virtual cursor particular event . Stepping Events In example , client application pull next event XML stream call next method parser ; example : try { ( int = 0 ; < count ; i++ ) { // pas file name.. relative entity // reference resolve // base URI . XMLStreamReader xmlr = xmlif.createXMLStreamReader ( filename , new FileInputStream ( filename ) ) ; // XMLStreamReader create , // position START_DOCUMENT event . int eventType = xmlr.getEventType ( ) ; printEventType ( eventType ) ; printStartDocument ( xmlr ) ; // check event // input stream ( xmlr.hasNext ( ) ) { eventType = xmlr.next ( ) ; printEventType ( eventType ) ; // function print information // particular event call // relevant function printStartElement ( xmlr ) ; printEndElement ( xmlr ) ; printText ( xmlr ) ; printPIData ( xmlr ) ; printComment ( xmlr ) ; } } } Note next return integer constant corresponding event underlie current cursor location . The application call relevant function get information relate underlying event . There various accessor method call cursor particular event . Returning String Representations Because next method return integer correspond underlie event type , typically need map integer string representation event ; example : public final static String getEventTypeString ( int eventType ) { switch ( eventType ) { case XMLEvent.START_ELEMENT : return `` START_ELEMENT '' ; case XMLEvent.END_ELEMENT : return `` END_ELEMENT '' ; case XMLEvent.PROCESSING_INSTRUCTION : return `` PROCESSING_INSTRUCTION '' ; case XMLEvent.CHARACTERS : return `` CHARACTERS '' ; case XMLEvent.COMMENT : return `` COMMENT '' ; case XMLEvent.START_DOCUMENT : return `` START_DOCUMENT '' ; case XMLEvent.END_DOCUMENT : return `` END_DOCUMENT '' ; case XMLEvent.ENTITY_REFERENCE : return `` ENTITY_REFERENCE '' ; case XMLEvent.ATTRIBUTE : return `` ATTRIBUTE '' ; case XMLEvent.DTD : return `` DTD '' ; case XMLEvent.CDATA : return `` CDATA '' ; case XMLEvent.SPACE : return `` SPACE '' ; } return `` UNKNOWN_EVENT_TYPE , `` + eventType ; } To Run Cursor Example To compile run cursor example , terminal window , go INSTALL_DIR/jaxp-version/samples/ directory type following : javac stax/cursor/*.java Run CursorParse sample BookCatalogue.xml file , following command . CursorParse print element BookCatalogue.xml file . java stax/event/CursorParse stax/data/BookCatalogue.xml Cursor-to-Event Example Located tut-install/javaeetutorial5/examples/stax/cursor2event/ directory , CursorApproachEventObject.java demonstrate get information return XMLEvent object even use cursor API . The idea cursor API ’ XMLStreamReader return integer constant correspond particular event , event iterator API ’ XMLEventReader return immutable persistent event object . XMLStreamReader efficient , XMLEventReader easy use , information relate particular event encapsulate returned XMLEvent object . However , disadvantage event approach extra overhead create object every event , consume time memory . With mind , XMLEventAllocator use get event information XMLEvent object , even use cursor API . Instantiating XMLEventAllocator The first step create new XMLInputFactory instantiate XMLEventAllocator : XMLInputFactory xmlif = XMLInputFactory.newInstance ( ) ; System.out.println ( `` FACTORY : `` + xmlif ) ; xmlif.setEventAllocator ( new XMLEventAllocatorImpl ( ) ) ; allocator = xmlif.getEventAllocator ( ) ; XMLStreamReader xmlr = xmlif.createXMLStreamReader ( filename , new FileInputStream ( filename ) ) ; Creating Event Iterator The next step create event iterator : int eventType = xmlr.getEventType ( ) ; ( xmlr.hasNext ( ) ) { eventType = xmlr.next ( ) ; // Get `` Book '' element XMLEvent object ( eventType == XMLStreamConstants.START_ELEMENT & & xmlr.getLocalName ( ) .equals ( `` Book '' ) ) { // get immutable XMLEvent StartElement event = getXMLEvent ( xmlr ) .asStartElement ( ) ; System.out.println ( `` EVENT : `` + event.toString ( ) ) ; } } Creating Allocator Method The final step create XMLEventAllocator method : private static XMLEvent getXMLEvent ( XMLStreamReader reader ) throw XMLStreamException { return allocator.allocate ( reader ) ; } To Run Cursor-to-Event Example To compile run cursor—to—event example , terminal window , go INSTALL_DIR/jaxp-version/samples/ directory type following : javac -classpath ../lib/jaxp-ri.jar stax/cursor2event/*.java Run CursorApproachEventObject sample BookCatalogue.xml file , following command . java stax/cursor2event/CursorApproachEventObject stax/data/BookCatalogue.xml CursorApproachEventObject print list event define BookCatalogue.xml file . Event Example Located INSTALL_DIR/jaxp-version/samples/stax/event/ directory , EventParse.java demonstrate use StAX event API read XML document . Creating Input Factory The first step create new instance XMLInputFactory : XMLInputFactory factory = XMLInputFactory.newInstance ( ) ; System.out.println ( `` FACTORY : `` + factory ) ; Creating Event Reader The next step create instance XMLEventReader : XMLEventReader r = factory.createXMLEventReader ( filename , new FileInputStream ( filename ) ) ; Creating Event Iterator The third step create event iterator : XMLEventReader r = factory.createXMLEventReader ( filename , new FileInputStream ( filename ) ) ; ( r.hasNext ( ) ) { XMLEvent e = r.nextEvent ( ) ; System.out.println ( e.toString ( ) ) ; } Getting Event Stream The final step get underlying event stream : public final static String getEventTypeString ( int eventType ) { switch ( eventType ) { case XMLEvent.START_ELEMENT : return `` START_ELEMENT '' ; case XMLEvent.END_ELEMENT : return `` END_ELEMENT '' ; case XMLEvent.PROCESSING_INSTRUCTION : return `` PROCESSING_INSTRUCTION '' ; case XMLEvent.CHARACTERS : return `` CHARACTERS '' ; case XMLEvent.COMMENT : return `` COMMENT '' ; case XMLEvent.START_DOCUMENT : return `` START_DOCUMENT '' ; case XMLEvent.END_DOCUMENT : return `` END_DOCUMENT '' ; case XMLEvent.ENTITY_REFERENCE : return `` ENTITY_REFERENCE '' ; case XMLEvent.ATTRIBUTE : return `` ATTRIBUTE '' ; case XMLEvent.DTD : return `` DTD '' ; case XMLEvent.CDATA : return `` CDATA '' ; case XMLEvent.SPACE : return `` SPACE '' ; } return `` UNKNOWN_EVENT_TYPE , '' + eventType ; } Returning Output When run Event example , EventParse class compile , XML stream parse event return STDOUT . For example , instance Author element return : < [ ’ http : //www.publishing.org ’ ] : :Author > Dhirendra Brahmachari < / [ ’ http : //www.publishing.org ’ ] : :Author > Note example event comprise opening closing tag , include namespace . The content element return string within tag . Similarly , instance Cost element return : < [ ’ http : //www.publishing.org ’ ] : :Cost currency= ’ INR ’ > 11.50 < / [ ’ http : //www.publishing.org ’ ] : :Cost In case , currency attribute value return opening tag event . To Run Event Example To compile run event example , terminal window , go INSTALL_DIR/jaxp-version/samples/ directory type following : javac -classpath ../lib/jaxp-ri.jar stax/event/*.java Run EventParse sample BookCatalogue.xml file , following command . java stax/event/EventParse stax/data/BookCatalogue.xml EventParse print data element define BookCatalogue.xml file . Filter Example Located INSTALL_DIR/jaxp-version/samples/stax/filter/ directory , MyStreamFilter.java demonstrate use StAX stream filter API filter event need application . In example , parser filter event except StartElement EndElement . Implementing StreamFilter Class The MyStreamFilter class implement javax.xml.stream.StreamFilter : public class MyStreamFilter implement javax.xml.stream.StreamFilter { // ... } Creating Input Factory The next step create instance XMLInputFactory . In case , various property also set factory : XMLInputFactory xmlif = null ; try { xmlif = XMLInputFactory.newInstance ( ) ; xmlif.setProperty ( XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES , Boolean.TRUE ) ; xmlif.setProperty ( XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES , Boolean.FALSE ) ; xmlif.setProperty ( XMLInputFactory.IS_NAMESPACE_AWARE , Boolean.TRUE ) ; xmlif.setProperty ( XMLInputFactory.IS_COALESCING , Boolean.TRUE ) ; } catch ( Exception ex ) { ex.printStackTrace ( ) ; } System.out.println ( `` FACTORY : `` + xmlif ) ; System.out.println ( `` filename = `` + filename ) ; Creating Filter The next step instantiate file input stream create stream filter : FileInputStream fis = new FileInputStream ( filename ) ; XMLStreamReader xmlr = xmlif.createFilteredReader ( xmlif.createXMLStreamReader ( fis ) , new MyStreamFilter ( ) ) ; int eventType = xmlr.getEventType ( ) ; printEventType ( eventType ) ; ( xmlr.hasNext ( ) ) { eventType = xmlr.next ( ) ; printEventType ( eventType ) ; printName ( xmlr , eventType ) ; printText ( xmlr ) ; ( xmlr.isStartElement ( ) ) { printAttributes ( xmlr ) ; } printPIData ( xmlr ) ; System.out.println ( `` -- -- -- -- -- -- -- -- -- -- -- - '' ) ; } Capturing Event Stream The next step capture event stream . This basically way Event example . Filtering Stream The final step filter stream : public boolean accept ( XMLStreamReader reader ) { ( ! reader.isStartElement ( ) & & ! reader.isEndElement ( ) ) return false ; else return true ; } Returning Output When run Filter example , MyStreamFilter class compile , XML stream parse event return STDOUT . For example , Author event return follow : EVENT TYPE ( 1 ) : START_ELEMENT HAS NAME : Author HAS NO TEXT HAS NO ATTRIBUTES -- -- -- -- -- -- -- -- -- -- -- -- -- -- - EVENT TYPE ( 2 ) : END_ELEMENT HAS NAME : Author HAS NO TEXT -- -- -- -- -- -- -- -- -- -- -- -- -- -- - Similarly , Cost event return follow : EVENT TYPE ( 1 ) : START_ELEMENT HAS NAME : Cost HAS NO TEXT HAS ATTRIBUTES : ATTRIBUTE-PREFIX : ATTRIBUTE-NAMESP : null ATTRIBUTE-NAME : currency ATTRIBUTE-VALUE : USD ATTRIBUTE-TYPE : CDATA -- -- -- -- -- -- -- -- -- -- -- -- -- -- - EVENT TYPE ( 2 ) : END_ELEMENT HAS NAME : Cost HAS NO TEXT -- -- -- -- -- -- -- -- -- -- -- -- -- -- - See Iterator API Reading XML Streams detailed discussion StAX event parsing . To Run Filter Example To compile run Filter example , terminal window , go INSTALL_DIR/jaxp-version/samples/ directory type following : javac -classpath ../lib/jaxp-ri.jar stax/filter/*.java Run MyStreamFilter sample BookCatalogue.xml file , following command . This example require java.endorsed.dirs system property set , point samples/lib directory . java -Djava.endorsed.dirs=../lib stax/filter/MyStreamFilter -f stax/data/BookCatalogue.xml MyStreamFilter print event define BookCatalogue.xml file XML stream . Read-and-Write Example Located INSTALL_DIR/jaxp-version/samples/stax/readnwrite/ directory , EventProducerConsumer.java demonstrate use StAX parser simultaneously producer consumer . The StAX XMLEventWriter API extend XMLEventConsumer interface , refer event consumer . By contrast , XMLEventReader event producer . StAX support simultaneous reading write , possible read one XML stream sequentially simultaneously write another stream . The Read-and-Write example show StAX producer/consumer mechanism use read write simultaneously . This example also show stream modify new event add dynamically write different stream . Creating Event Producer/Consumer The first step instantiate event factory create instance event producer/consumer : XMLEventFactory m_eventFactory = XMLEventFactory.newInstance ( ) ; public EventProducerConsumer ( ) { // ... try { EventProducerConsumer = new EventProducerConsumer ( ) ; XMLEventReader reader = XMLInputFactory.newInstance ( ) . createXMLEventReader ( new java.io.FileInputStream ( args [ 0 ] ) ) ; XMLEventWriter writer = XMLOutputFactory.newInstance ( ) .createXMLEventWriter ( System.out ) ; } // ... } Creating Iterator The next step create iterator parse stream : ( reader.hasNext ( ) ) { XMLEvent event = ( XMLEvent ) reader.next ( ) ; ( event.getEventType ( ) == event.CHARACTERS ) { writer.add ( ms.getNewCharactersEvent ( event.asCharacters ( ) ) ) ; } else { writer.add ( event ) ; } } writer.flush ( ) ; Creating Writer The final step create stream writer form new Character event : Characters getNewCharactersEvent ( Characters event ) { ( event.getData ( ) .equalsIgnoreCase ( `` Name1 '' ) ) { return m_eventFactory.createCharacters ( Calendar.getInstance ( ) .getTime ( ) .toString ( ) ) ; } // else return event else { return event ; } } Returning Output When run Read-and-Write example , EventProducerConsumer class compile , XML stream parse event write back STDOUT . The output content BookCatalog.xml file describe Example XML Document . To Run Read-and-Write Example To compile run Read—and—Write example , terminal window , go INSTALL_DIR/jaxp-version/samples/ directory type following : javac -classpath ../lib/jaxp-ri.jar stax/readnwrite/*.java Run EventProducerConsumer sample BookCatalogue.xml file , following command . java stax/readnwrite/EventProducerConsumer stax/data/BookCatalogue.xml EventProducerConsumer print content BookCatalogue.xml file . Writer Example Located INSTALL_DIR/jaxp-version/samples/stax/writer/ directory , CursorWriter.java demonstrate use StAX cursor API write XML stream . Creating Output Factory The first step create instance XMLOutputFactory : XMLOutputFactory xof = XMLOutputFactory.newInstance ( ) ; Creating Stream Writer The next step create instance XMLStreamWriter : XMLStreamWriter xtw = null ; Writing Stream The final step write XML stream . Note stream flush close final EndDocument write : xtw = xof.createXMLStreamWriter ( new FileWriter ( fileName ) ) ; xtw.writeComment ( `` element explicitly HTML namespace '' ) ; xtw.writeStartDocument ( `` utf-8 '' , '' 1.0 '' ) ; xtw.setPrefix ( `` html '' , `` http : //www.w3.org/TR/REC-html40 '' ) ; xtw.writeStartElement ( `` http : //www.w3.org/TR/REC-html40 '' , '' html '' ) ; xtw.writeNamespace ( `` html '' , `` http : //www.w3.org/TR/REC-html40 '' ) ; xtw.writeStartElement ( `` http : //www.w3.org/TR/REC-html40 '' , `` head '' ) ; xtw.writeStartElement ( `` http : //www.w3.org/TR/REC-html40 '' , `` title '' ) ; xtw.writeCharacters ( `` Frobnostication '' ) ; xtw.writeEndElement ( ) ; xtw.writeEndElement ( ) ; xtw.writeStartElement ( `` http : //www.w3.org/TR/REC-html40 '' , `` body '' ) ; xtw.writeStartElement ( `` http : //www.w3.org/TR/REC-html40 '' , `` p '' ) ; xtw.writeCharacters ( `` Moved '' ) ; xtw.writeStartElement ( `` http : //www.w3.org/TR/REC-html40 '' , `` '' ) ; xtw.writeAttribute ( `` href '' , '' http : //frob.com '' ) ; xtw.writeCharacters ( `` '' ) ; xtw.writeEndElement ( ) ; xtw.writeEndElement ( ) ; xtw.writeEndElement ( ) ; xtw.writeEndElement ( ) ; xtw.writeEndDocument ( ) ; xtw.flush ( ) ; xtw.close ( ) ; Returning Output When run Writer example , CursorWriter class compile , XML stream parse event write file name dist/CursorWriter-Output : < ! -- element explicitly HTML namespace -- > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < html : html xmlns : html= '' http : //www.w3.org/TR/REC-html40 '' > < html : head > < html : title > Frobnostication < /html : title > < /html : head > < html : body > < html : p > Moved < html : href= '' http : //frob.com '' > < /html : > < /html : p > < /html : body > < /html : html > In actual dist/CursorWriter-Output file , stream write without line break ; break add make listing easy read . In example , object stream Event example , namespace prefix add opening closing HTML tag . Adding prefix require StAX specification , good practice final scope output stream definitively know . To Run Writer Example To compile run Writer example , terminal window , go INSTALL_DIR/jaxp-version/samples/ directory type following : javac -classpath \ ../lib/jaxp-ri.jar stax/writer/*.java Run CursorWriter sample , specify name file output write . java stax/writer/CursorWriter -f output_file CursorWriter create output file appropriate name , contain data show Returning Output .