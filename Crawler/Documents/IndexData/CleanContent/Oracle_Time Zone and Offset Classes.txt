A time zone region earth standard time use . Each time zone describe identifier usually format region/city ( Asia/Tokyo ) offset Greenwich/UTC time . For example , offset Tokyo +09:00 . ZoneId ZoneOffset The Date-Time API provide two class specify time zone offset : ZoneId specify time zone identifier provide rule convert Instant LocalDateTime . ZoneOffset specify time zone offset Greenwich/UTC time . Offsets Greenwich/UTC time usually define whole hour , exception . The following code , TimeZoneId example , print list time zone use offset Greenwich/UTC define whole hour . Set < String > allZones = ZoneId.getAvailableZoneIds ( ) ; LocalDateTime dt = LocalDateTime.now ( ) ; // Create List use set zone sort . List < String > zoneList = new ArrayList < String > ( allZones ) ; Collections.sort ( zoneList ) ; ... ( String : zoneList ) { ZoneId zone = ZoneId.of ( ) ; ZonedDateTime zdt = dt.atZone ( zone ) ; ZoneOffset offset = zdt.getOffset ( ) ; int secondsOfHour = offset.getTotalSeconds ( ) % ( 60 * 60 ) ; String = String.format ( `` % 35s % 10 % n '' , zone , offset ) ; // Write time zone whole hour offset // standard . ( secondsOfHour ! = 0 ) { System.out.printf ( ) ; } ... } This example print following list standard : America/Caracas -04:30 America/St_Johns -02:30 Asia/Calcutta +05:30 Asia/Colombo +05:30 Asia/Kabul +04:30 Asia/Kathmandu +05:45 Asia/Katmandu +05:45 Asia/Kolkata +05:30 Asia/Rangoon +06:30 Asia/Tehran +04:30 Australia/Adelaide +09:30 Australia/Broken_Hill +09:30 Australia/Darwin +09:30 Australia/Eucla +08:45 Australia/LHI +10:30 Australia/Lord_Howe +10:30 Australia/North +09:30 Australia/South +09:30 Australia/Yancowinna +09:30 Canada/Newfoundland -02:30 Indian/Cocos +06:30 Iran +04:30 NZ-CHAT +12:45 Pacific/Chatham +12:45 Pacific/Marquesas -09:30 Pacific/Norfolk +11:30 The TimeZoneId example also print list time zone IDs file call timeZones . The Date-Time Classes The Date-Time API provide three temporal-based class work time zone : ZonedDateTime handle date time corresponding time zone time zone offset Greenwich/UTC . OffsetDateTime handle date time corresponding time zone offset Greenwich/UTC , without time zone ID . OffsetTime handle time corresponding time zone offset Greenwich/UTC , without time zone ID . When would use OffsetDateTime instead ZonedDateTime ? If write complex software model rule date time calculation base geographic location , store time-stamps database track absolute offset Greenwich/UTC time , might want use OffsetDateTime . Also , XML network format define date-time transfer OffsetDateTime OffsetTime . Although three class maintain offset Greenwich/UTC time , ZonedDateTime use ZoneRules , part java.time.zone package , determine offset varies particular time zone . For example , time zone experience gap ( typically 1 hour ) move clock forward daylight save time , time overlap move clock back standard time last hour transition repeat . The ZonedDateTime class accommodate scenario , whereas OffsetDateTime OffsetTime class , access ZoneRules , . ZonedDateTime The ZonedDateTime class , effect , combine LocalDateTime class ZoneId class . It use represent full date ( year , month , day ) time ( hour , minute , second , nanosecond ) time zone ( region/city , Europe/Paris ) . The following code , Flight example , define departure time flight San Francisco Tokyo ZonedDateTime America/Los Angeles time zone . The withZoneSameInstant plusMinutes method use create instance ZonedDateTime represent projected arrival time Tokyo , 650 minute flight . The ZoneRules.isDaylightSavings method determine whether daylight save time flight arrive Tokyo . A DateTimeFormatter object use format ZonedDateTime instance printing : DateTimeFormatter format = DateTimeFormatter.ofPattern ( `` MMM yyyy hh : mm '' ) ; // Leaving San Francisco July 20 , 2013 , 7:30 p.m. LocalDateTime leave = LocalDateTime.of ( 2013 , Month.JULY , 20 , 19 , 30 ) ; ZoneId leavingZone = ZoneId.of ( `` America/Los_Angeles '' ) ; ZonedDateTime departure = ZonedDateTime.of ( leave , leavingZone ) ; try { String out1 = departure.format ( format ) ; System.out.printf ( `` LEAVING : % ( % ) % n '' , out1 , leavingZone ) ; } catch ( DateTimeException exc ) { System.out.printf ( `` % ca n't format ! % n '' , departure ) ; throw exc ; } // Flight 10 hour 50 minute , 650 minute ZoneId arrivingZone = ZoneId.of ( `` Asia/Tokyo '' ) ; ZonedDateTime arrival = departure.withZoneSameInstant ( arrivingZone ) .plusMinutes ( 650 ) ; try { String out2 = arrival.format ( format ) ; System.out.printf ( `` ARRIVING : % ( % ) % n '' , out2 , arrivingZone ) ; } catch ( DateTimeException exc ) { System.out.printf ( `` % ca n't format ! % n '' , arrival ) ; throw exc ; } ( arrivingZone.getRules ( ) .isDaylightSavings ( arrival.toInstant ( ) ) ) System.out.printf ( `` ( % daylight save time effect . ) % n '' , arrivingZone ) ; else System.out.printf ( `` ( % standard time effect . ) % n '' , arrivingZone ) ; This produce following output : LEAVING : Jul 20 2013 07:30 PM ( America/Los_Angeles ) ARRIVING : Jul 21 2013 10:20 PM ( Asia/Tokyo ) ( Asia/Tokyo standard time effect . ) OffsetDateTime The OffsetDateTime class , effect , combine LocalDateTime class ZoneOffset class . It use represent full date ( year , month , day ) time ( hour , minute , second , nanosecond ) offset Greenwich/UTC time ( +/-hours : minute , +06:00 -08:00 ) . The following example use OffsetDateTime TemporalAdjuster.lastDay method find last Thursday July 2013 . // Find last Thursday July 2013 . LocalDateTime localDate = LocalDateTime.of ( 2013 , Month.JULY , 20 , 19 , 30 ) ; ZoneOffset offset = ZoneOffset.of ( `` -08:00 '' ) ; OffsetDateTime offsetDate = OffsetDateTime.of ( localDate , offset ) ; OffsetDateTime lastThursday = offsetDate.with ( TemporalAdjusters.lastInMonth ( DayOfWeek.THURSDAY ) ) ; System.out.printf ( `` The last Thursday July 2013 % sth. % n '' , lastThursday.getDayOfMonth ( ) ) ; The output run code : The last Thursday July 2013 25th . OffsetTime The OffsetTime class , effect , combine LocalTime class ZoneOffset class . It use represent time ( hour , minute , second , nanosecond ) offset Greenwich/UTC time ( +/-hours : minute , +06:00 -08:00 ) . The OffsetTime class use situation OffsetDateTime class , track date need .