The following topic cover : Introduction Dictionary Service Example Running DictionaryServiceDemo Sample Compiling Running DictionaryServiceDemo Sample Understanding DictionaryServiceDemo Sample Define Service Provider Interface Define Service That Retrieves Service Provider Implementations The Singleton Design Pattern Implement Service Provider Register Service Providers Create Client That Uses Service Service Providers Package Service Providers , Service , Service Client JAR Files Packaging Service Providers JAR Files Packaging Dictionary SPI Dictionary Service JAR File Packaging Client JAR File Run Client The ServiceLoader Class Limitations ServiceLoader API Summary Introduction An extensible application one extend without modify original code base . You enhance functionality new plug-in module . Developers , software vendor , customer add new functionality application programming interface ( APIs ) add new Java Archive ( JAR ) file onto application class path application-specific extension directory . This section describe create application extensible service , enable others provide service implementation require modification original application . By design extensible application , provide way upgrade enhance specific part product without change core application . One example extensible application word processor allow end user add new dictionary spell checker . In example , word processor provide dictionary spelling feature developer , even customer , extend provide implementation feature . The follow term definition important understand extensible application : Service A set program interface class provide access specific application functionality feature . The service define interface functionality way retrieve implementation . In word-processor example , dictionary service define way retrieve dictionary definition word , implement underlying feature set . Instead , rely service provider implement functionality . Service provider interface ( SPI ) The set public interface abstract class service defines . The SPI define class method available application . Service Provider Implements SPI . An application extensible service enable , vendor , customer add service provider without modify original application . Dictionary Service Example Consider might design dictionary service word processor editor . One way define service represent class name DictionaryService service provider interface name Dictionary . The DictionaryService provide singleton DictionaryService object . ( See section The Singleton Design Pattern information . ) This object retrieve definition word Dictionary provider . Dictionary service client — application code — retrieve instance service , service search , instantiate , use Dictionary service provider . Although word-processor developer would likely provide basic , general dictionary original product , customer might require specialized dictionary , perhaps contain legal technical term . Ideally , customer able create purchase new dictionary add exist application . The DictionaryServiceDemo sample show implement Dictionary service , create Dictionary service provider add additional dictionary , create simple Dictionary service client test service . This sample , package zip file DictionaryServiceDemo.zip , consist following file : build.xml DictionaryDemo build.xml build dist DictionaryDemo.jar src dictionary DictionaryDemo.java DictionaryServiceProvider build.xml build dist DictionaryServiceProvider.jar src dictionary DictionaryService.java spi Dictionary.java ExtendedDictionary build.xml build dist ExtendedDictionary.jar src dictionary ExtendedDictionary.java META-INF service dictionary.spi.Dictionary GeneralDictionary build.xml build dist GeneralDictionary.jar src dictionary GeneralDictionary.java META-INF service dictionary.spi.Dictionary Note : The build directory contain compiled class file Java source file contain src directory level . Running DictionaryServiceDemo Sample Because zip file DictionaryServiceDemo.zip contain compile class file , unzip file computer run sample without compile follow step : Download unzip sample code : Download unzip file DictionaryServiceDemo.zip computer . It These step assume unzip content file directory C : \DictionaryServiceDemo . Change current directory C : \DictionaryServiceDemo\DictionaryDemo follow step Run Client . Compiling Running DictionaryServiceDemo Sample The DictionaryServiceDemo sample include Apache Ant build file , name build.xml . The following step show use Apache Ant compile , build , run DictionaryServiceDemo sample : Install Apache Ant : Go follow link download install Apache Ant : http : //ant.apache.org/ Ensure directory contain Apache Ant executable file PATH environment variable run directory . In addition , ensure JDK 's bin directory , contain java javac executables ( java.exe javac.exe Microsoft Windows ) . PATH environment variable . See PATH CLASSPATH information set PATH environment variable . Download unzip sample code : Download unzip file DictionaryServiceDemo.zip computer . These step assume unzip content file directory C : \DictionaryServiceDemo . Compile code : Change current directory C : \DictionaryServiceDemo run following command : ant compile-all This command compile source code src directory contain directory DictionaryDemo , DictionaryServiceProvider , ExtendedDictionary , GeneralDictionary , put generated class file corresponding build directory . Package compiled Java file JAR file : Ensure current directory C : \DictionaryServiceDemo run following command : ant jar This command create following JAR file : DictionaryDemo/dist/DictionaryDemo.jar DictionaryServiceProvider/dist/DictionaryServiceProvider.jar GeneralDictionary/dist/GeneralDictionary.jar ExtendedDictionary/dist/ExtendedDictionary.jar Run sample : Ensure directory contain java executable PATH environment variable . See PATH CLASSPATH information . Change current directory C : \DictionaryServiceDemo\DictionaryDemo run following command : ant run The sample print following : book : set write print page , usually bind protective covereditor : person editsxml : document standard often use web service , among thingsREST : architecture style create , reading , update , delete data attempt use common vocabulary HTTP protocol ; Representational State Transfer Understanding DictionaryServiceDemo Sample The following step show re-create content file DictionaryServiceDemo.zip . These step show sample work run . 1 . Define Service Provider Interface The DictionaryServiceDemo sample define one SPI , Dictionary.java interface . It contain one method : package dictionary.spi ; public interface Dictionary { public String getDefinition ( String word ) ; } The sample store compiled class file directory DictionaryServiceProvider/build . 2 . Define Service That Retrieves Service Provider Implementations The DictionaryService.java class load access available Dictionary service provider behalf dictionary service client : package dictionary ; import dictionary.spi.Dictionary ; import java.util.Iterator ; import java.util.ServiceConfigurationError ; import java.util.ServiceLoader ; public class DictionaryService { private static DictionaryService service ; private ServiceLoader < Dictionary > loader ; private DictionaryService ( ) { loader = ServiceLoader.load ( Dictionary.class ) ; } public static synchronize DictionaryService getInstance ( ) { ( service == null ) { service = new DictionaryService ( ) ; } return service ; } public String getDefinition ( String word ) { String definition = null ; try { Iterator < Dictionary > dictionaries = loader.iterator ( ) ; ( definition == null & & dictionaries.hasNext ( ) ) { Dictionary = dictionaries.next ( ) ; definition = d.getDefinition ( word ) ; } } catch ( ServiceConfigurationError serviceError ) { definition = null ; serviceError.printStackTrace ( ) ; } return definition ; } } The sample store compiled class file directory DictionaryServiceProvider/build . The DictionaryService class implement singleton design pattern . This mean single instance DictionaryService class ever create . See section The Singleton Design Pattern information . The DictionaryService class dictionary service client 's entry point use installed Dictionary service provider . Use ServiceLoader.load method retrieve private static member DictionaryService.service , singleton service entry point . Then application call getDefinition method , iterate available Dictionary provider find targeted word . The getDefinition method return null Dictionary instance contain specified definition word . The dictionary service use ServiceLoader.load method find target class . The SPI define interface dictionary.spi.Dictionary , example use class load method 's argument . The default load method search application class path default class loader . However , overloaded version method enable specify custom class loader wish . That enable sophisticated class search . A particularly enthusiastic programmer might , example , create ClassLoader instance search application-specific subdirectory contain provider JARs add runtime . The result application require restart access new provider class . After loader class exist , use iterator method access use provider find . The getDefinition method use Dictionary iterator go provider find definition specified word . The iterator method cache Dictionary instance , successive call require little additional processing time . If new provider place service since last invocation , iterator method add list . The DictionaryDemo.java class use service . To use service , application obtain DictionaryService instance call getDefinition method . If definition available , application print . If definition available , application print message state available dictionary carry word . The Singleton Design Pattern A design pattern general solution common problem software design . The idea solution get translate code , code apply different situation problem occur . The singleton pattern describe technique ensure single instance class ever create . In essence , technique take following approach : Do let anyone outside class create instance object . For example , DictionaryService class implement singleton pattern follow : Declares DictionaryService constructor private , prevent class , except DictionaryService , create instance . Defines DictionaryService member variable service static , ensure one instance DictionaryService exists . Defines method getInstance , enable class control access DictionaryService member variable service . 3 . Implement Service Provider To provide service , must create Dictionary.java implementation . To keep thing simple , create general dictionary define word . You implement dictionary database , set property file , technology . The easy way demonstrate provider pattern include word definition within single file . The following code show implementation Dictionary SPI , GeneralDictionary.java class . Notice provide no-argument constructor implement getDefinition method define SPI . package dictionary ; import dictionary.spi.Dictionary ; import java.util.SortedMap ; import java.util.TreeMap ; public class GeneralDictionary implement Dictionary { private SortedMap < String , String > map ; public GeneralDictionary ( ) { map = new TreeMap < String , String > ( ) ; map.put ( `` book '' , `` set write print page , usually bind `` + `` protective cover '' ) ; map.put ( `` editor '' , `` person edit '' ) ; } @ Override public String getDefinition ( String word ) { return map.get ( word ) ; } } The sample store compiled class file directory GeneralDictionary/build . Note : You must compile class dictionary.DictionaryService dictionary.spi.Dictionary class GeneralDictionary . The GeneralDictionary provider example define two word : book editor . Obviously , usable dictionary would provide substantial list generally use vocabulary . To demonstrate multiple provider implement SPI , following code show yet another possible provider . The ExtendedDictionary.java service provider extended dictionary contain technical term familiar software developer . package dictionary ; import dictionary.spi.Dictionary ; import java.util.SortedMap ; import java.util.TreeMap ; public class ExtendedDictionary implement Dictionary { private SortedMap < String , String > map ; public ExtendedDictionary ( ) { map = new TreeMap < String , String > ( ) ; map.put ( `` xml '' , `` document standard often use web service , among `` + `` thing '' ) ; map.put ( `` REST '' , `` architecture style create , reading , updating , `` + `` delete data attempt use common `` + `` vocabulary HTTP protocol ; Representational State `` + `` Transfer '' ) ; } @ Override public String getDefinition ( String word ) { return map.get ( word ) ; } } The sample store compiled class file directory ExtendedDictionary/build . Note : You must compile class dictionary.DictionaryService dictionary.spi.Dictionary class ExtendedDictionary . It easy imagine customer use complete set Dictionary provider special need . The service loader API enable add new dictionary application need preference change . Because underlying word-processor application extensible , additional coding require customer use new provider . 4 . Register Service Providers To register service provider , create provider configuration file , store META-INF/services directory service provider 's JAR file . The name configuration file fully qualified class name service provider , component name separate period ( . ) , nested class separate dollar sign ( $ ) . The provider configuration file contain fully qualified class name service provider , one name per line . The file must UTF-8 encoded . Additionally , include comment file begin comment line number sign ( # ) . For example , register service provider GeneralDictionary create text file name dictionary.spi.Dictionary . This file contain one line : dictionary.GeneralDictionary Similarly , register service provider ExtendedDictionary create text file name dictionary.spi.Dictionary . This file contain one line : dictionary.ExtendedDictionary 5 . Create Client That Uses Service Service Providers Because develop full word-processor application significant undertaking , tutorial provide simpler application use DictionaryService Dictionary SPI . The DictionaryDemo sample search word book , editor , xml , REST word Dictionary provider class path retrieve definition . The following DictionaryDemo sample . It request definition target word DictionaryService instance , pass request know Dictionary provider . package dictionary ; import dictionary.DictionaryService ; public class DictionaryDemo { public static void main ( String [ ] args ) { DictionaryService dictionary = DictionaryService.getInstance ( ) ; System.out.println ( DictionaryDemo.lookup ( dictionary , `` book '' ) ) ; System.out.println ( DictionaryDemo.lookup ( dictionary , `` editor '' ) ) ; System.out.println ( DictionaryDemo.lookup ( dictionary , `` xml '' ) ) ; System.out.println ( DictionaryDemo.lookup ( dictionary , `` REST '' ) ) ; } public static String lookup ( DictionaryService dictionary , String word ) { String outputString = word + `` : `` ; String definition = dictionary.getDefinition ( word ) ; ( definition == null ) { return outputString + `` Can find definition word . `` ; } else { return outputString + definition ; } } } The sample store compiled class file directory DictionaryDemo/build . Note : You must compile class dictionary.DictionaryService dictionary.spi.Dictionary class DictionaryDemo . 6 . Package Service Providers , Service , Service Client JAR Files See lesson Packaging Programs JAR Files information create JAR file . Packaging Service Providers JAR Files To package GeneralDictionary service provider , create JAR file name GeneralDictionary/dist/GeneralDictionary.jar contain compiled class file service provider configuration file following directory structure : META-INF service dictionary.spi.Dictionary dictionary GeneralDictionary.class Similarly , package ExtendedDictionary service provider , create JAR file name ExtendedDictionary/dist/ExtendedDictionary.jar contain compiled class file service provider configuration file following directory structure : META-INF service dictionary.spi.Dictionary dictionary ExtendedDictionary.class Note provider configuration file must directory META-INF/services JAR file . Packaging Dictionary SPI Dictionary Service JAR File Create JAR file name DictionaryServiceProvider/dist/DictionaryServiceProvider.jar contain following file : dictionary DictionaryService.class spi Dictionary.class Packaging Client JAR File Create JAR file name DictionaryDemo/dist/DictionaryDemo.jar contain follow file : dictionary DictionaryDemo.class 7 . Run Client The following command run DictionaryDemo sample GeneralDictionary service provider : Linux Solaris : java -Djava.ext.dirs=../DictionaryServiceProvider/dist : ../GeneralDictionary/dist -cp dist/DictionaryDemo.jar dictionary.DictionaryDemo Windows : java -Djava.ext.dirs=..\DictionaryServiceProvider\dist ; ..\GeneralDictionary\dist -cp dist\DictionaryDemo.jar dictionary.DictionaryDemo When use command , following assume : The current directory DictionaryDemo . The following JAR file exist : DictionaryDemo/dist/DictionaryDemo.jar : Contains DictionaryDemo class DictionaryServiceProvider/dist/DictionaryServiceProvider.jar : Contains Dictionary SPI DictionaryService class GeneralDictionary/dist/GeneralDictionary.jar : Contains GeneralDictionary service provider configuration file The command print following : book : set write print page , usually bind protective cover editor : person edit xml : Can find definition word . REST : Can find definition word . Suppose run following command ExtendedDictionary/dist/ExtendedDictionary.jar exists : Linux Solaris : java -Djava.ext.dirs=../DictionaryServiceProvider/dist : ../ExtendedDictionary/dist -cp dist/DictionaryDemo.jar dictionary.DictionaryDemo Windows : java -Djava.ext.dirs=..\DictionaryServiceProvider\dist ; ..\ExtendedDictionary\dist -cp dist\DictionaryDemo.jar dictionary.DictionaryDemo The command print following : book : Can find definition word . editor : Can find definition word . xml : document standard often use web service , among thing REST : architecture style create , reading , update , delete data attempt use common vocabulary HTTP protocol ; Representational State Transfer The ServiceLoader Class The java.util.ServiceLoader class help find , load , use service provider . It search service provider application 's class path runtime environment 's extension directory . It load enable application use provider 's APIs . If add new provider class path runtime extension directory , ServiceLoader class find . If application know provider interface , find use different implementation interface . You use first loadable instance interface iterate available interface . The ServiceLoader class final , mean make subclass override load algorithm . You , example , change algorithm search service different location . From perspective ServiceLoader class , service single type , usually single interface abstract class . The provider contain one concrete class extend service type implementation specific purpose . The ServiceLoader class require single expose provider type default constructor , require argument . This enable ServiceLoader class easily instantiate service provider find . Providers locate instantiate demand . A service loader maintain cache provider load . Each invocation loader 's iterator method return iterator first yield element cache , instantiation order . The service loader locate instantiate new provider , add one cache turn . You clear provider cache reload method . To create loader specific class , provide class load loadInstalled method . You use default class loader provide ClassLoader subclass . The loadInstalled method search runtime environment 's extension directory installed runtime provider . The default extension location runtime environment 's jre/lib/ext directory . You use extension location well-known , trust provider location become part class path application . In article , provider use extension directory instead depend application-specific class path . Limitations ServiceLoader API The ServiceLoader API useful , limitation . For example , impossible derive class ServiceLoader class , modify behavior . You use custom ClassLoader subclass change class find , ServiceLoader extend . Also , current ServiceLoader class tell application new provider available runtime . Additionally , add change-listeners loader find whether new provider place application-specific extension directory . The public ServiceLoader API available Java SE 6 . Although loader service exist early JDK 1.3 , API private available internal Java runtime code . Summary Extensible application provide service point extend service provider . The easy way create extensible application use ServiceLoader , available Java SE 6 later . Using class , add provider implementation application class path make new functionality available . The ServiceLoader class final , modify ability .