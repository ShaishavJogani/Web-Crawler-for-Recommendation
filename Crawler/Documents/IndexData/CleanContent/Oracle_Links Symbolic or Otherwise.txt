As mention previously , java.nio.file package , Path class particular , `` link aware . '' Every Path method either detect symbolic link encounter , provide option enable configure behavior symbolic link encounter . The discussion far symbolic soft link , file system also support hard link . Hard link restrictive symbolic link , follow : The target link must exist . Hard link generally allow directory . Hard link allow cross partition volume . Therefore , exist across file system . A hard link look , behaves , like regular file , hard find . A hard link , intent purpose , entity original file . They file permission , time stamp , . All attribute identical . Because restriction , hard link use often symbolic link , Path method work seamlessly hard link . Several method deal specifically link cover following section : Creating Symbolic Link Creating Hard Link Detecting Symbolic Link Finding Target Link Creating Symbolic Link If file system support , create symbolic link use createSymbolicLink ( Path , Path , FileAttribute < ? > ) method . The second Path argument represent target file directory might might exist . The following code snippet create symbolic link default permission : Path newLink = ... ; Path target = ... ; try { Files.createSymbolicLink ( newLink , target ) ; } catch ( IOException x ) { System.err.println ( x ) ; } catch ( UnsupportedOperationException x ) { // Some file system support symbolic link . System.err.println ( x ) ; } The FileAttributes vararg enable specify initial file attribute set atomically link create . However , argument intend future use currently implement . Creating Hard Link You create hard ( regular ) link exist file use createLink ( Path , Path ) method . The second Path argument locate exist file , must exist NoSuchFileException throw . The following code snippet show create link : Path newLink = ... ; Path existingFile = ... ; try { Files.createLink ( newLink , existingFile ) ; } catch ( IOException x ) { System.err.println ( x ) ; } catch ( UnsupportedOperationException x ) { // Some file system // support add exist // file directory . System.err.println ( x ) ; } Detecting Symbolic Link To determine whether Path instance symbolic link , use isSymbolicLink ( Path ) method . The following code snippet show : Path file = ... ; boolean isSymbolicLink = Files.isSymbolicLink ( file ) ; For information , see Managing Metadata . Finding Target Link You obtain target symbolic link use readSymbolicLink ( Path ) method , follow : Path link = ... ; try { System.out.format ( `` Target link '' + `` ' % ' ' % ' % n '' , link , Files.readSymbolicLink ( link ) ) ; } catch ( IOException x ) { System.err.println ( x ) ; } If Path symbolic link , method throw NotLinkException .