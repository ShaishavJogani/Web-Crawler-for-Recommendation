The JLayer class flexible powerful decorator Swing component . It enable draw component respond component event without modify underlying component directly . This document describe example show power JLayer class . Full source code available . Using JLayer Class Using LayerUI Class Drawing Components Responding Events Animating Busy Indicator Validating Text Fields For brief introduction material page , watch following video . A JavaScript-enabled web browser Internet connection require video . If see video , try view YouTube . Using JLayer Class The javax.swing.JLayer class half team . The half javax.swing.plaf.LayerUI class . Suppose want custom draw atop JButton object ( decorate JButton object ) . The component want decorate target . Create target component . Create instance LayerUI subclass drawing . Create JLayer object wrap target LayerUI object . Use JLayer object user interface would use target component . For example , add instance JPanel subclass JFrame object , would something similar : JFrame f = new JFrame ( ) ; JPanel panel = createPanel ( ) ; f.add ( panel ) ; To decorate JPanel object , something similar instead : JFrame f = new JFrame ( ) ; JPanel panel = createPanel ( ) ; LayerUI < JPanel > layerUI = new MyLayerUISubclass ( ) ; JLayer < JPanel > jlayer = new JLayer < JPanel > ( panel , layerUI ) ; f.add ( jlayer ) ; Use generic ensure JPanel object LayerUI object compatible type . In previous example , JLayer object LayerUI object use JPanel class . The JLayer class usually generified exact type view component , LayerUI class design use JLayer class generic parameter ancestor . For example , LayerUI < JComponent > object use JLayer < AbstractButton > object . A LayerUI object responsible custom decoration event handling JLayer object . When create instance LayerUI subclass , custom behavior applicable every JLayer object appropriate generic type . That JLayer class final ; custom behavior encapsulate LayerUI subclass , need make JLayer subclass . Using LayerUI Class The LayerUI class inherit behavior ComponentUI class . Here commonly overridden method : The paint ( Graphics g , JComponent c ) method call target component need draw . To render component way Swing render , call super.paint ( g , c ) method . The installUI ( JComponent c ) method call instance LayerUI subclass associate component . Perform necessary initialization . The component pass correspond JLayer object . Retrieve target component JLayer class ' getView ( ) method . The uninstallUI ( JComponent c ) method call instance LayerUI subclass longer associate give component . Clean necessary . Drawing Components To use JLayer class , need good LayerUI subclass . The simple kind LayerUI class change component draw . Here one , example , paint transparent color gradient component . class WallpaperLayerUI extend LayerUI < JComponent > { @ Override public void paint ( Graphics g , JComponent c ) { super.paint ( g , c ) ; Graphics2D g2 = ( Graphics2D ) g.create ( ) ; int w = c.getWidth ( ) ; int h = c.getHeight ( ) ; g2.setComposite ( AlphaComposite.getInstance ( AlphaComposite.SRC_OVER , .5f ) ) ; g2.setPaint ( new GradientPaint ( 0 , 0 , Color.yellow , 0 , h , Color.red ) ) ; g2.fillRect ( 0 , 0 , w , h ) ; g2.dispose ( ) ; } } The paint ( ) method custom draw take place . The call super.paint ( ) method draw content JPanel object . After set 50 % transparent composite , color gradient draw . After LayerUI subclass define , use simple . Here source code use WallpaperLayerUI class : import java.awt . * ; import javax.swing . * ; import javax.swing.plaf.LayerUI ; public class Wallpaper { public static void main ( String [ ] args ) { javax.swing.SwingUtilities.invokeLater ( new Runnable ( ) { public void run ( ) { createUI ( ) ; } } ) ; } public static void createUI ( ) { JFrame f = new JFrame ( `` Wallpaper '' ) ; JPanel panel = createPanel ( ) ; LayerUI < JComponent > layerUI = new WallpaperLayerUI ( ) ; JLayer < JComponent > jlayer = new JLayer < JComponent > ( panel , layerUI ) ; f.add ( jlayer ) ; f.setSize ( 300 , 200 ) ; f.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; f.setLocationRelativeTo ( null ) ; f.setVisible ( true ) ; } private static JPanel createPanel ( ) { JPanel p = new JPanel ( ) ; ButtonGroup entreeGroup = new ButtonGroup ( ) ; JRadioButton radioButton ; p.add ( radioButton = new JRadioButton ( `` Beef '' , true ) ) ; entreeGroup.add ( radioButton ) ; p.add ( radioButton = new JRadioButton ( `` Chicken '' ) ) ; entreeGroup.add ( radioButton ) ; p.add ( radioButton = new JRadioButton ( `` Vegetable '' ) ) ; entreeGroup.add ( radioButton ) ; p.add ( new JCheckBox ( `` Ketchup '' ) ) ; p.add ( new JCheckBox ( `` Mustard '' ) ) ; p.add ( new JCheckBox ( `` Pickles '' ) ) ; p.add ( new JLabel ( `` Special request : '' ) ) ; p.add ( new JTextField ( 20 ) ) ; JButton orderButton = new JButton ( `` Place Order '' ) ; p.add ( orderButton ) ; return p ; } } Here result : Source code : Wallpaper NetBeans Project Wallpaper.java Run Java Web Start : The LayerUI class ' paint ( ) method give complete control component draw . Here another LayerUI subclass show entire content panel modify use Java 2D image processing : class BlurLayerUI extend LayerUI < JComponent > { private BufferedImage mOffscreenImage ; private BufferedImageOp mOperation ; public BlurLayerUI ( ) { float ninth = 1.0f / 9.0f ; float [ ] blurKernel = { ninth , ninth , ninth , ninth , ninth , ninth , ninth , ninth , ninth } ; mOperation = new ConvolveOp ( new Kernel ( 3 , 3 , blurKernel ) , ConvolveOp.EDGE_NO_OP , null ) ; } @ Override public void paint ( Graphics g , JComponent c ) { int w = c.getWidth ( ) ; int h = c.getHeight ( ) ; ( w == 0 || h == 0 ) { return ; } // Only create offscreen image one // wrong size . ( mOffscreenImage == null || mOffscreenImage.getWidth ( ) ! = w || mOffscreenImage.getHeight ( ) ! = h ) { mOffscreenImage = new BufferedImage ( w , h , BufferedImage.TYPE_INT_RGB ) ; } Graphics2D ig2 = mOffscreenImage.createGraphics ( ) ; ig2.setClip ( g.getClip ( ) ) ; super.paint ( ig2 , c ) ; ig2.dispose ( ) ; Graphics2D g2 = ( Graphics2D ) g ; g2.drawImage ( mOffscreenImage , mOperation , 0 , 0 ) ; } } In paint ( ) method , panel render offscreen image . The offscreen image process convolution operator , draw screen . The entire user interface still live , blurry : Source code : Myopia NetBeans Project Myopia.java Run Java Web Start : Responding Events Your LayerUI subclass also receive event corresponding component . However , JLayer instance must register interest specific type event . This happen JLayer class ' setLayerEventMask ( ) method . Typically , however , call make initialization perform LayerUI class ' installUI ( ) method . For example , follow excerpt show portion LayerUI subclass register receive mouse mouse motion event . public void installUI ( JComponent c ) { super.installUI ( c ) ; JLayer jlayer = ( JLayer ) c ; jlayer.setLayerEventMask ( AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK ) ; } All event go JLayer subclass get rout event handler method whose name match event type . For example , respond mouse mouse motion event override correspond method : protect void processMouseEvent ( MouseEvent e , JLayer l ) { // ... } protect void processMouseMotionEvent ( MouseEvent e , JLayer l ) { // ... } The following LayerUI subclass draw translucent circle wherever mouse move inside panel . class SpotlightLayerUI extend LayerUI < JPanel > { private boolean mActive ; private int mX , mY ; @ Override public void installUI ( JComponent c ) { super.installUI ( c ) ; JLayer jlayer = ( JLayer ) c ; jlayer.setLayerEventMask ( AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK ) ; } @ Override public void uninstallUI ( JComponent c ) { JLayer jlayer = ( JLayer ) c ; jlayer.setLayerEventMask ( 0 ) ; super.uninstallUI ( c ) ; } @ Override public void paint ( Graphics g , JComponent c ) { Graphics2D g2 = ( Graphics2D ) g.create ( ) ; // Paint view . super.paint ( g2 , c ) ; ( mActive ) { // Create radial gradient , transparent middle . java.awt.geom.Point2D center = new java.awt.geom.Point2D.Float ( mX , mY ) ; float radius = 72 ; float [ ] dist = { 0.0f , 1.0f } ; Color [ ] color = { new Color ( 0.0f , 0.0f , 0.0f , 0.0f ) , Color.BLACK } ; RadialGradientPaint p = new RadialGradientPaint ( center , radius , dist , color ) ; g2.setPaint ( p ) ; g2.setComposite ( AlphaComposite.getInstance ( AlphaComposite.SRC_OVER , .6f ) ) ; g2.fillRect ( 0 , 0 , c.getWidth ( ) , c.getHeight ( ) ) ; } g2.dispose ( ) ; } @ Override protect void processMouseEvent ( MouseEvent e , JLayer l ) { ( e.getID ( ) == MouseEvent.MOUSE_ENTERED ) mActive = true ; ( e.getID ( ) == MouseEvent.MOUSE_EXITED ) mActive = false ; l.repaint ( ) ; } @ Override protect void processMouseMotionEvent ( MouseEvent e , JLayer l ) { Point p = SwingUtilities.convertPoint ( e.getComponent ( ) , e.getPoint ( ) , l ) ; mX = p.x ; mY = p.y ; l.repaint ( ) ; } } The mActive variable indicate whether mouse inside coordinate panel . In installUI ( ) method , setLayerEventMask ( ) method call indicate LayerUI subclass ' interest receive mouse mouse motion event . In processMouseEvent ( ) method , mActive flag set depend position mouse . In processMouseMotionEvent ( ) method , coordinate mouse movement store mX mY member variable use later paint ( ) method . The paint ( ) method show default appearance panel , overlay radial gradient spotlight effect : Source code : Diva NetBeans Project Diva.java Run Java Web Start : Animating Busy Indicator This example animated busy indicator . It demonstrate animation LayerUI subclass feature fade-in fade-out . It complicated previous example , base principle define paint ( ) method custom drawing . Click Place Order button see busy indicator 4 second . Notice panel gray indicator spin . The element indicator vary level transparency . The LayerUI subclass , WaitLayerUI class , show fire property change event update component . The WaitLayerUI class use Timer object update state 24 time second . This happen timer 's target method , actionPerformed ( ) method . The actionPerformed ( ) method use firePropertyChange ( ) method indicate internal state update . This trigger call applyPropertyChange ( ) method , repaint JLayer object : Source code : TapTapTap NetBeans Project TapTapTap.java Run Java Web Start : Validating Text Fields The final example document show JLayer class use decorate text field show contain valid data . While example use JLayer class wrap panel general component , example show wrap JFormattedTextField component specifically . It also demonstrate single LayerUI subclass implementation use multiple JLayer instance . The JLayer class use provide visual indication field invalid data . When ValidationLayerUI class paint text field , draw red X field content parse . Here example : Source code : FieldValidator NetBeans Project FieldValidator.java Run Java Web Start :