Before start create custom layout manager , make sure exist layout manager meet requirement . In particular , layout manager GridBagLayout , SpringLayout , BoxLayout flexible enough work many case . You also find layout manager source , Internet . Finally , simplify layout group component container panel . Note : This lesson cover write layout code hand , challenge . If interested learn detail layout management , might prefer use GroupLayout layout manager combine builder tool lay GUI . One builder tool NetBeans IDE . Otherwise , want code hand want use GroupLayout , GridBagLayout recommend next flexible powerful layout manager . If interested use JavaFX create GUI , see Working With Layouts JavaFX . To create custom layout manager , must create class implement LayoutManager interface . You either implement directly , implement subinterface , LayoutManager2 . Every layout manager must implement least following five method , require LayoutManager interface : void addLayoutComponent ( String , Component ) Called Container class 's add method . Layout manager associate string component generally nothing method . void removeLayoutComponent ( Component ) Called Container method remove removeAll . Layout manager override method clear internal state may associate Component . Dimension preferredLayoutSize ( Container ) Called Container class 's getPreferredSize method , call variety circumstance . This method calculate return ideal size container , assume component contain preferred size . This method must take account container 's internal border , return getInsets method . Dimension minimumLayoutSize ( Container ) Called Container getMinimumSize method , call variety circumstance . This method calculate return minimum size container , assume component contain minimum size . This method must take account container 's internal border , return getInsets method . void layoutContainer ( Container ) Called position size component container . A layout manager 's layoutContainer method actually draw component . It simply invoke one component 's setSize , setLocation , setBounds method set component 's size position . This method must take account container 's internal border , return getInsets method . If appropriate , also take container 's orientation ( return getComponentOrientation method ) account . You assume preferredLayoutSize minimumLayoutSize method call layoutContainer call . Besides implement precede five method , layout manager generally implement least one public constructor toString method . If wish support component constraint , maximum size , alignment , layout manager implement LayoutManager2 interface . In fact , reason among many others , nearly modern layout manager need implement LayoutManager2 . That interface add five method require LayoutManager : addLayoutComponent ( Component , Object ) getLayoutAlignmentX ( Container ) getLayoutAlignmentY ( Container ) invalidateLayout ( Container ) maximumLayoutSize ( Container ) Of method , important addLayoutComponent ( Component , Object ) invalidateLayout ( Container ) . The addLayoutComponent method use add component layout , use specify constraint object . The invalidateLayout method use invalidate layout , layout manager cache information , discard . For information LayoutManager2 , see LayoutManager2 API documentation . Finally , whenever create custom layout manager , careful keep reference Component instance longer child Container . Namely , layout manager override removeLayoutComponent clear cached state relate Component . Example Custom Layout The example CustomLayoutDemo use custom layout manager call DiagonalLayout . You find layout manager 's source code DiagonalLayout.java . DialogLayout lay component diagonally , leave right , one component per row . Here picture CustomLayoutDemo use DialogLayout lay five button . Click Launch button run CustomLayoutDemo use Javaâ„¢ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index .