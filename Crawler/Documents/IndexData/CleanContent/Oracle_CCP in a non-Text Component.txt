If implement cut , copy paste use one Swing component one text component additional setup . First , need install cut , copy , paste action action map . The following method show : private void setMappings ( JList list ) { ActionMap map = list.getActionMap ( ) ; map.put ( TransferHandler.getCutAction ( ) .getValue ( Action.NAME ) , TransferHandler.getCutAction ( ) ) ; map.put ( TransferHandler.getCopyAction ( ) .getValue ( Action.NAME ) , TransferHandler.getCopyAction ( ) ) ; map.put ( TransferHandler.getPasteAction ( ) .getValue ( Action.NAME ) , TransferHandler.getPasteAction ( ) ) ; When set Edit menu , also choose add menu accelerator , user type Control-C initiate copy , example . In following code snippet , bolded text show set menu accelerator cut action : menuItem = new JMenuItem ( `` Cut '' ) ; menuItem.setActionCommand ( ( String ) TransferHandler.getCutAction ( ) . getValue ( Action.NAME ) ) ; menuItem.addActionListener ( actionListener ) ; menuItem.setAccelerator ( KeyStroke.getKeyStroke ( KeyEvent.VK_X , ActionEvent.CTRL_MASK ) ) ; menuItem.setMnemonic ( KeyEvent.VK_T ) ; mainMenu.add ( menuItem ) ; If set menu accelerator CCP action , next step redundant . If set menu accelerator , need add CCP binding input map . The following code snippet show : // required set menu accelerator InputMap imap = this.getInputMap ( ) ; imap.put ( KeyStroke.getKeyStroke ( `` ctrl X '' ) , TransferHandler.getCutAction ( ) .getValue ( Action.NAME ) ) ; imap.put ( KeyStroke.getKeyStroke ( `` ctrl C '' ) , TransferHandler.getCopyAction ( ) .getValue ( Action.NAME ) ) ; imap.put ( KeyStroke.getKeyStroke ( `` ctrl V '' ) , TransferHandler.getPasteAction ( ) .getValue ( Action.NAME ) ) ; Once binding instal Edit menu set , another issue address : When user initiate cut , copy paste , component receive action ? In case text component , DefaultEditorKit remembers component last focus forward action component . The following class , TransferActionListener , perform function non-text Swing component . This class drop application : public class TransferActionListener implement ActionListener , PropertyChangeListener { private JComponent focusOwner = null ; public TransferActionListener ( ) { KeyboardFocusManager manager = KeyboardFocusManager . getCurrentKeyboardFocusManager ( ) ; manager.addPropertyChangeListener ( `` permanentFocusOwner '' , ) ; } public void propertyChange ( PropertyChangeEvent e ) { Object = e.getNewValue ( ) ; ( instanceof JComponent ) { focusOwner = ( JComponent ) ; } else { focusOwner = null ; } } public void actionPerformed ( ActionEvent e ) { ( focusOwner == null ) return ; String action = ( String ) e.getActionCommand ( ) ; Action = focusOwner.getActionMap ( ) .get ( action ) ; ( ! = null ) { a.actionPerformed ( new ActionEvent ( focusOwner , ActionEvent.ACTION_PERFORMED , null ) ) ; } } } Finally , decide handle paste . In case drag drop , insert data drop location . In case paste , benefit user point desire paste location . You need decide make sense application — insert data current selection might best solution . The following demo , ListCutPaste , show implement CCP instance JList . As see screen shot three list cut , copy , paste list . They also support drag drop . For demo , paste data insert current selection . If current selection , data append end list . Try : Click Launch button run ListCutPaste use Java™ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Select item one list . Use Edit menu keyboard equivalent cut copy list item source . Select list item want item paste . Paste text use menu keyboard equivalent . The item paste current selection . Perform operation use drag drop .