Many method JNDI package throw NamingException need indicate operation request perform . Commonly , see try/catch wrapper around method throw NamingException : try { Context ctx = new InitialContext ( ) ; Object obj = ctx.lookup ( `` somename '' ) ; } catch ( NamingException e ) { // Handle error System.err.println ( e ) ; } Exception Class Hierarchy The JNDI rich exception hierarchy stem NamingException class . The class name exception self-explanatory list . To handle particular subclass NamingException specially , catch subclass separately . For example , following code specially treat AuthenticationException subclass . try { Context ctx = new InitialContext ( ) ; Object obj = ctx.lookup ( `` somename '' ) ; } catch ( AuthenticationException e ) { // attempt reacquire authentication information ... } catch ( NamingException e ) { // Handle error System.err.println ( e ) ; } Enumerations Operations Context.list ( ) DirContext.search ( ) return NamingEnumeration . In case , error occur result return , NamingException one appropriate subclass throw time method invoke . If error occur result return , NamingEnumeration return get result . When result exhaust , invoke NamingEnumeration.hasMore ( ) cause NamingException ( one subclass ) throw indicate error . At point , enumeration become invalid method invoke . For example , perform search ( ) specify count limit ( n ) many answer return , search ( ) return enumeration consisting n result . If number result exceeds n , NamingEnumeration.hasMore ( ) invoke n+1 time , SizeLimitExceededException throw . See Result Count lesson sample code . Examples This Tutorial In inline sample code embed within text tutorial , try/catch clause usually omit sake readability . Typically , code fragment show , line directly useful illustrate concept include . You see appropriate placement try/catch clause NamingException look source file accompany tutorial . The Exceptions javax.naming package find .