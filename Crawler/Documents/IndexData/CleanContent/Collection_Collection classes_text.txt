There direct implementation thejava.util.Collectioninterface . The Collection interface five sub interface . Figure 1 : The five sub interface thejava.util.Collectioninterface . Set [ edit ] A set collection contain unique element , duplicate allow . It similar mathematical Set . When add new item set , set call methodint hashCode ( ) item compare result hash code already inserted item . If hash code find , item add . If hash code find , set call theboolean equal ( Object obj ) ; method set item hashcode new item . If equal-calls return false , new item insert set . If equal-call return true , new item insert set . Figure 2 : Set class diagram . java.util.HashSet < E > This basic implementation theSetinterface . Not synchronize . Allows thenullelementsjava.util.TreeSet < E > Elements sort , synchronized.nullnot allowedjava.util.CopyOnWriteArraySet < E > Thread safe , fresh copy create modification operation . Add , update , delete expensive.java.util.EnumSet < E extend Enum < E > > All element enum set must come single enum type specify , explicitly implicitly , set create . Enum set represent internally bit vectors.java.util.LinkedHashSet < E > Same HashSet , plus define iteration ordering , order element insert set . Detecting duplicate object Sets [ edit ] Setcannot duplicate . You may wonder duplicate detect add object theSet . We see object exist Set . It enough check object reference , object ' value check well . To , fortunately , java object theboolean equal ( Object obj ) , method available inherit fromObject . You need override . That method call Set implementation compare two object see equal . There problem , though . What I put two different type object Set . I put Apple Orange . They compare . Calling theequals ( ) method would cause aClassCastException . There two solution : Solution one : Override theint hashCode ( ) method return value type object return different value different type object . Theequals ( ) method use compare object value hashCode . So object add , Set implementation need : find object Set hashCode candidate object hashCodeand , call theequals ( ) method pass candidate objectif return true , object add Set . Solution two : Create super class Apple Orange , let 's call Fruit class . Put Fruits Set . You need following : Do override theequals ( ) andhashCode ( ) method Apple Orange classesCreateappleEquals ( ) method Apple class , createorangeEquals ( ) method Orange classOverride thehashCode ( ) method Fruit class return value , theequals ( ) call Set implementationOverride theequals ( ) method Fruit class something like . Note : Only object hashCode compared.You responsible override theequals ( ) andhashCode ( ) method . The default implementation Object wo n't work.Only override thehashCode ( ) method want eliminate value duplicates.Do override thehashCode ( ) method know value object different , want prevent add exactly object.Beware thehashCode ( ) may use collection implementation , like Hashtable find object fast . Overriding defaulthashCode ( ) method may affect performance there.The default hashCodes unique object create , decide override thehashCode ( ) method , point override theequals ( ) method , wo n't call . SortedSet [ edit ] TheSortedSetinterface Set interface plus element SortedSet sort . It extend Set Interface . All element SortedSet must implement Comparable Interface , furthermore element must mutually comparable . Note ordering maintain sorted set must consistent equal sorted set correctly implement Set interface . This Set interface define term equal operation , sorted set performs element comparison use compare method , two element deem equal method , standpoint sorted set , equal . The SortedSet interface additional method due sorted nature 'Set ' . Those : E first ( ) ; return first elementE last ( ) ; return last elementSortedSet headSet ( E toElement ) ; return first , exclusive toElementSortedSet tailSet ( E fromElement ) ; return inclusive fromElement endSortedSet subSet ( E fromElement , E toElement ) ; return element range fromElement , inclusive , toElement , exclusive . ( If fromElement toElement equal , return sorted set empty . ) List [ edit ] In list collection , element put certain order , access index . Duplicates allow , element add twice list . It following implementation : Figure 3 : List class diagram . java.util.Vector < E > Synchronized , use multiple thread access , otherwise useArrayList.java.util.Stack < E > It extend class Vector five operation allow vector treat stack . It represent last-in-first-out ( LIFO ) stack objects.java.util.ArrayList < E > The basic implementation theListinterface theArrayList . The ArrayList synchronize , thread safe.Vectoris synchronize , thread safe.Vectoris slower , extra overhead make thread safe . When one thread access list , use ArrayList . Whenever insert remove element list , extra overhead reindex list . When large list , lot insert remove , consider use theLinkedList.java.util.LinkedList < E > Non-synchronized , update operation faster list , easy use stack , queue , double-ended queue . The nameLinkedListimplies special data structure elements/nodes connect pointer . Head Node 1 Node 2 Node n ______ | Size | _________________ _______________ _____________ |______| | | point | | | point | | | | | First| -- -- -- -- > | Data | next | -- -- -- > | Data | next| -- ... -- > | Data | null | | elem | |______|_________| |______|________| |______|______| |______| ^ | Last | | | elem | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |______| Each node relate item link list . To remove element link list pointer need rearrange . After remove Node 2 : Head Node 1 Node 2 Node n ______ _____________________ | Size | _________________ | _______________ | ______________ |_- 1__| | | point | | | | point | | | | | | First| -- -- -- -- > | Data | next | -- -- | Data | next| - ... -- > | Data | null | | elem | |______|_________| |______|________| |______|______| |______| ^ | Last | | | elem | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |______| javax.management.AtributeList < E > Represents list value attribute MBean . The method use insertion Attribute object AttributeList override corresponding method superclass ArrayList . This need order insure object contain AttributeList Attribute objects.javax.management.relation.RoleList < E > A RoleList represent list role ( Role object ) . It use parameter create relation , try set several role relation ( via 'setRoles ( ) ' method ) . It return part RoleResult , provide role successfully retrieved.javax.management.relation.RoleUnresolvedList < E > A RoleUnresolvedList represent list RoleUnresolved object , represent role retrieve relation due problem encounter try access ( read write role ) .