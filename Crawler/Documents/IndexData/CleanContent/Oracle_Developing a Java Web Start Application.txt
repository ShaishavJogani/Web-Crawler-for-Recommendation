Software design use component-based architecture easily develop deploy Java Web Start application . Consider example Java Web Start application Swing-based graphical user interface ( GUI ) . With component-based design , GUI build small building block component . The following general step use create application 's GUI : Create MyTopJPanel class subclass JPanel . Lay application 's GUI component constructor MyTopJPanel class . Create class call MyApplication subclass JFrame class . In main method MyApplication class , instantiate MyTopJPanel class set content pane JFrame . The following section explore step great detail use Dynamic Tree Demo application . If familiar Swing , see Creating GUI Swing learn use Swing GUI component . Click following Launch button launch Dynamic Tree Demo application . // < ! [ CDATA [ var url = `` http : //docs.oracle.com/javase/tutorialJWS/samples/deployment/dynamictree_webstartJWSProject/dynamictree_webstart.jnlp '' ; deployJava.createWebStartLaunchButton ( url , '1.7.0 ' ) ; // ] ] > A browser JavaScript enable require page operate properly . Note : If n't see example running , might need enable JavaScript interpreter browser Deployment Toolkit script function properly . Creating Top JPanel Class Create class subclass JPanel . This top JPanel act container UI component . In following example , DynamicTreePanel class topmost JPanel . The constructor DynamicTreePanel class invoke method create lay UI control properly . public class DynamicTreePanel extend JPanel implement ActionListener { private int newNodeSuffix = 1 ; private static String ADD_COMMAND = `` add '' ; private static String REMOVE_COMMAND = `` remove '' ; private static String CLEAR_COMMAND = `` clear '' ; private DynamicTree treePanel ; public DynamicTreePanel ( ) { super ( new BorderLayout ( ) ) ; //Create component . treePanel = new DynamicTree ( ) ; populateTree ( treePanel ) ; JButton addButton = new JButton ( `` Add '' ) ; addButton.setActionCommand ( ADD_COMMAND ) ; addButton.addActionListener ( ) ; JButton removeButton = new JButton ( `` Remove '' ) ; ... . JButton clearButton = new JButton ( `` Clear '' ) ; ... //Lay everything . treePanel.setPreferredSize ( new Dimension ( 300 , 150 ) ) ; add ( treePanel , BorderLayout.CENTER ) ; JPanel panel = new JPanel ( new GridLayout ( 0,3 ) ) ; panel.add ( addButton ) ; panel.add ( removeButton ) ; panel.add ( clearButton ) ; add ( panel , BorderLayout.SOUTH ) ; } // ... } Creating Application For application Swing-based GUI , create class subclass javax.swing.JFrame . Instantiate top JPanel class set content pane JFrame application 's main method . The main method DynamicTreeApplication class invoke createGUI method AWT Event Dispatcher thread . package webstartComponentArch ; import javax.swing.JFrame ; public class DynamicTreeApplication extend JFrame { public static void main ( String [ ] args ) { DynamicTreeApplication app = new DynamicTreeApplication ( ) ; app.createGUI ( ) ; } private void createGUI ( ) { //Create set content pane . DynamicTreePanel newContentPane = new DynamicTreePanel ( ) ; newContentPane.setOpaque ( true ) ; setContentPane ( newContentPane ) ; setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; pack ( ) ; setVisible ( true ) ; } } Benefits Separating Core Functionality From Final Deployment Mechanism Another way create application remove layer abstraction ( separate top JPanel ) lay control application 's main method . The downside create GUI directly application 's main method difficult deploy functionality applet , choose later . In Dynamic Tree Demo example , core functionality separate DynamicTreePanel class . It trivial drop DynamicTreePanel class JApplet deploy applet . Hence , preserve portability keep deployment option open , follow component-based design describe topic . Download source code Dynamic Tree Demo example experiment far .