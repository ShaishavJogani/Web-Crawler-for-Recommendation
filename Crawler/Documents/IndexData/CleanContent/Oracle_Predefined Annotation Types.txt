A set annotation type predefined Java SE API . Some annotation type use Java compiler , apply annotation . Annotation Types Used Java Language The predefined annotation type define java.lang @ Deprecated , @ Override , @ SuppressWarnings . @ Deprecated @ Deprecated annotation indicate marked element deprecate longer use . The compiler generate warning whenever program use method , class , field @ Deprecated annotation . When element deprecate , also document use Javadoc @ deprecate tag , show following example . The use sign ( @ ) Javadoc comment annotation coincidental : relate conceptually . Also , note Javadoc tag start lowercase annotation start uppercase D. // Javadoc comment follow /** * @ deprecate * explanation deprecate */ @ Deprecated static void deprecatedMethod ( ) { } } @ Override @ Override annotation inform compiler element mean override element declare superclass . Overriding method discuss Interfaces Inheritance . // mark method superclass method // overridden @ Override int overriddenMethod ( ) { } While require use annotation override method , help prevent error . If method mark @ Override fail correctly override method one superclass , compiler generate error . @ SuppressWarnings @ SuppressWarnings annotation tell compiler suppress specific warning would otherwise generate . In following example , deprecated method use , compiler usually generate warning . In case , however , annotation cause warning suppress . // use deprecated method tell // compiler generate warning @ SuppressWarnings ( `` deprecation '' ) void useDeprecatedMethod ( ) { // deprecation warn // - suppress objectOne.deprecatedMethod ( ) ; } Every compiler warn belongs category . The Java Language Specification list two category : deprecation unchecked . The unchecked warning occur interfacing legacy code write advent generic . To suppress multiple category warning , use following syntax : @ SuppressWarnings ( { `` unchecked '' , `` deprecation '' } ) @ SafeVarargs @ SafeVarargs annotation , apply method constructor , assert code perform potentially unsafe operation varargs parameter . When annotation type use , unchecked warning relate varargs usage suppress . @ FunctionalInterface @ FunctionalInterface annotation , introduce Java SE 8 , indicate type declaration intend functional interface , define Java Language Specification . Annotations That Apply Other Annotations Annotations apply annotation call meta-annotations . There several meta-annotation type define java.lang.annotation . @ Retention @ Retention annotation specify marked annotation store : RetentionPolicy.SOURCE – The marked annotation retain source level ignore compiler . RetentionPolicy.CLASS – The marked annotation retain compiler compile time , ignore Java Virtual Machine ( JVM ) . RetentionPolicy.RUNTIME – The marked annotation retain JVM use runtime environment . @ Documented @ Documented annotation indicate whenever specify annotation use element document use Javadoc tool . ( By default , annotation include Javadoc . ) For information , see Javadoc tool page . @ Target @ Target annotation mark another annotation restrict kind Java elements annotation apply . A target annotation specify one following element type value : ElementType.ANNOTATION_TYPE apply annotation type . ElementType.CONSTRUCTOR apply constructor . ElementType.FIELD apply field property . ElementType.LOCAL_VARIABLE apply local variable . ElementType.METHOD apply method-level annotation . ElementType.PACKAGE apply package declaration . ElementType.PARAMETER apply parameter method . ElementType.TYPE apply element class . @ Inherited @ Inherited annotation indicate annotation type inherit super class . ( This true default . ) When user query annotation type class annotation type , class ' superclass query annotation type . This annotation apply class declaration . @ Repeatable @ Repeatable annotation , introduce Java SE 8 , indicate marked annotation apply declaration type use . For information , see Repeating Annotations .