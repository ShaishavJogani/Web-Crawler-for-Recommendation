You obtain name formal parameter method constructor method java.lang.reflect.Executable.getParameters . ( The class Method Constructor extend class Executable therefore inherit method Executable.getParameters . ) However , .class file store formal parameter name default . This many tool produce consume class file may expect large static dynamic footprint .class file contain parameter name . In particular , tool would handle large .class file , Java Virtual Machine ( JVM ) would use memory . In addition , parameter name , secret password , may expose information security-sensitive method . To store formal parameter name particular .class file , thus enable Reflection API retrieve formal parameter name , compile source file -parameters option javac compiler . The MethodParameterSpy example illustrate retrieve name formal parameter constructor method give class . The example also print information parameter . The following command print formal parameter name constructor method class ExampleMethods . Note : Remember compile example ExampleMethods -parameters compiler option : java MethodParameterSpy ExampleMethods This command print following : Number constructor : 1 Constructor # 1 public ExampleMethods ( ) Number declared constructor : 1 Declared constructor # 1 public ExampleMethods ( ) Number method : 4 Method # 1 public boolean ExampleMethods.simpleMethod ( java.lang.String , int ) Return type : boolean Generic return type : boolean Parameter class : class java.lang.String Parameter name : stringParam Modifiers : 0 Is implicit ? : false Is name present ? : true Is synthetic ? : false Parameter class : int Parameter name : intParam Modifiers : 0 Is implicit ? : false Is name present ? : true Is synthetic ? : false Method # 2 public int ExampleMethods.varArgsMethod ( java.lang.String ... ) Return type : int Generic return type : int Parameter class : class [ Ljava.lang.String ; Parameter name : manyStrings Modifiers : 0 Is implicit ? : false Is name present ? : true Is synthetic ? : false Method # 3 public boolean ExampleMethods.methodWithList ( java.util.List < java.lang.String > ) Return type : boolean Generic return type : boolean Parameter class : interface java.util.List Parameter name : listParam Modifiers : 0 Is implicit ? : false Is name present ? : true Is synthetic ? : false Method # 4 public < T > void ExampleMethods.genericMethod ( T [ ] , java.util.Collection < T > ) Return type : void Generic return type : void Parameter class : class [ Ljava.lang.Object ; Parameter name : Modifiers : 0 Is implicit ? : false Is name present ? : true Is synthetic ? : false Parameter class : interface java.util.Collection Parameter name : c Modifiers : 0 Is implicit ? : false Is name present ? : true Is synthetic ? : false The MethodParameterSpy example use following method Parameter class : getType : Returns Class object identify declared type parameter . getName : Returns name parameter . If parameter 's name present , method return name provide .class file . Otherwise , method synthesize name form argN , N index parameter descriptor method declare parameter . For example , suppose compile class ExampleMethods without specify -parameters compiler option . The example MethodParameterSpy would print following method ExampleMethods.simpleMethod : public boolean ExampleMethods.simpleMethod ( java.lang.String , int ) Return type : boolean Generic return type : boolean Parameter class : class java.lang.String Parameter name : arg0 Modifiers : 0 Is implicit ? : false Is name present ? : false Is synthetic ? : false Parameter class : int Parameter name : arg1 Modifiers : 0 Is implicit ? : false Is name present ? : false Is synthetic ? : false getModifiers : Returns integer represent various characteristic formal parameter posse . This value sum following value , applicable formal parameter : Value ( decimal ) Value ( hexadecimal Description 16 0x0010 The formal parameter declare final 4096 0x1000 The formal parameter synthetic . Alternatively , invoke method isSynthetic . 32768 0x8000 The parameter implicitly declare source code . Alternatively , invoke method isImplicit isImplicit : Returns true parameter implicitly declare source code . See section Implicit Synthetic Parameters information . isNamePresent : Returns true parameter name accord .class file . isSynthetic : Returns true parameter neither implicitly explicitly declare source code . See section Implicit Synthetic Parameters information . Implicit Synthetic Parameters Certain construct implicitly declare source code write explicitly . For example , ExampleMethods example contain constructor . A default constructor implicitly declare . The MethodParameterSpy example print information implicitly declare constructor ExampleMethods : Number declared constructor : 1 public ExampleMethods ( ) Consider follow excerpt MethodParameterExamples : public class MethodParameterExamples { public class InnerClass { } } The class InnerClass non-static nested class inner class . A constructor inner class also implicitly declare . However , constructor contain parameter . When Java compiler compiles InnerClass , create .class file represent code similar following : public class MethodParameterExamples { public class InnerClass { final MethodParameterExamples parent ; InnerClass ( final MethodParameterExamples $ 0 ) { parent = $ 0 ; } } } The InnerClass constructor contain parameter whose type class enclose InnerClass , MethodParameterExamples . Consequently , example MethodParameterExamples print following : public MethodParameterExamples $ InnerClass ( MethodParameterExamples ) Parameter class : class MethodParameterExamples Parameter name : $ 0 Modifiers : 32784 Is implicit ? : true Is name present ? : true Is synthetic ? : false Because constructor class InnerClass implicitly declare , parameter implicit well . Note : The Java compiler create formal parameter constructor inner class enable compiler pass reference ( represent immediately enclose instance ) creation expression member class 's constructor . The value 32784 mean parameter InnerClass constructor final ( 16 ) implicit ( 32768 ) . The Java programming language allow variable name dollar sign ( $ ) ; however , convention , dollar sign use variable name . Constructs emit Java compiler mark synthetic correspond construct declare explicitly implicitly source code , unless class initialization method . Synthetic construct artifact generate compiler vary among different implementation . Consider follow excerpt MethodParameterExamples : public class MethodParameterExamples { enum Colors { RED , WHITE ; } } When Java compiler encounter enum construct , create several method compatible .class file structure provide expected functionality enum construct . For example , Java compiler would create .class file enum construct Colors represent code similar following : final class Colors extend java.lang.Enum < Colors > { public final static Colors RED = new Colors ( `` RED '' , 0 ) ; public final static Colors BLUE = new Colors ( `` WHITE '' , 1 ) ; private final static value = new Colors [ ] { RED , BLUE } ; private Colors ( String name , int ordinal ) { super ( name , ordinal ) ; } public static Colors [ ] value ( ) { return value ; } public static Colors valueOf ( String name ) { return ( Colors ) java.lang.Enum.valueOf ( Colors.class , name ) ; } } The Java compiler create three constructor method enum construct : Colors ( String name , int ordinal ) , Colors [ ] value ( ) , Colors valueOf ( String name ) . The method value valueOf implicitly declare . Consequently , formal parameter name implicitly declare well . The enum constructor Colors ( String name , int ordinal ) default constructor implicitly declare . However , formal parameter constructor ( name ordinal ) implicitly declare . Because formal parameter neither explicitly implicitly declare , synthetic . ( The formal parameter default constructor enum construct implicitly declare different compiler need agree form constructor ; another Java compiler might specify different formal parameter . When compiler compile expression use enum constant , rely public static field enum construct , implicitly declare , constructor constant initialize . ) Consequently , example MethodParameterExample print follow enum construct Colors : enum Colors : Number constructor : 0 Number declared constructor : 1 Declared constructor # 1 private MethodParameterExamples $ Colors ( ) Parameter class : class java.lang.String Parameter name : $ enum $ name Modifiers : 4096 Is implicit ? : false Is name present ? : true Is synthetic ? : true Parameter class : int Parameter name : $ enum $ ordinal Modifiers : 4096 Is implicit ? : false Is name present ? : true Is synthetic ? : true Number method : 2 Method # 1 public static MethodParameterExamples $ Colors [ ] MethodParameterExamples $ Colors.values ( ) Return type : class [ LMethodParameterExamples $ Colors ; Generic return type : class [ LMethodParameterExamples $ Colors ; Method # 2 public static MethodParameterExamples $ Colors MethodParameterExamples $ Colors.valueOf ( java.lang.String ) Return type : class MethodParameterExamples $ Colors Generic return type : class MethodParameterExamples $ Colors Parameter class : class java.lang.String Parameter name : name Modifiers : 32768 Is implicit ? : true Is name present ? : true Is synthetic ? : false Refer Java Language Specification information implicitly declare construct , include parameter appear implicit Reflection API .