Digest-MD5 authentication required authentication mechanism LDAP v3 server ( RFC 2829 ) . Because use SASL part LDAP v3 ( RFC 2251 ) , server support LDAP v2 support Digest-MD5 . The Digest-MD5 mechanism describe RFC 2831 . It base HTTP Digest Authentication ( RFC 2251 ) . In Digest-MD5 , LDAP server send data include various authentication option willing support plus special token LDAP client . The client responds send encrypted response indicate authentication option select . The response encrypt way prove client know password . The LDAP server decrypts verify client 's response . To use Digest-MD5 authentication mechanism , must set authentication environment property follow . Context.SECURITY_AUTHENTICATION . Set string `` DIGEST-MD5 '' . Context.SECURITY_PRINCIPAL . Set principal name . This server-specific format . Some server support login user id format , define UNIX Windows login screen . Others accept distinguish name . Yet others use authorization id format define RFC 2829 . In RFC , name either string `` dn : '' , follow fully qualified DN entity authenticate , string `` u : '' , follow user id . Some server accept multiple format . Examples format `` cuser '' , `` dn : cn=C . User , ou=NewHires , o=JNDITutorial '' , `` u : cuser '' The data type property must java.lang.String . Context.SECURITY_CREDENTIALS . Set password principal ( e.g. , `` mysecret '' ) . It type java.lang.String , char array ( char [ ] ) , byte array ( byte [ ] ) . If password java.lang.String char [ ] , encode use UTF-8 transmission server . If password byte [ ] , transmit server . The following example show client perform authentication use Digest-MD5 LDAP server . // Set environment create initial context Hashtable < String , Object > env = new Hashtable < String , Object > ( ) ; env.put ( Context.INITIAL_CONTEXT_FACTORY , `` com.sun.jndi.ldap.LdapCtxFactory '' ) ; env.put ( Context.PROVIDER_URL , `` ldap : //localhost:389/o=JNDITutorial '' ) ; // Authenticate C. User password `` mysecret '' env.put ( Context.SECURITY_AUTHENTICATION , `` DIGEST-MD5 '' ) ; env.put ( Context.SECURITY_PRINCIPAL , `` dn : cn=C . User , ou=NewHires , o=JNDITutorial '' ) ; env.put ( Context.SECURITY_CREDENTIALS , `` mysecret '' ) ; // Create initial context DirContext ctx = new InitialDirContext ( env ) ; // ... something useful ctx Note : The Oracle Directory Server , v5.2 support Digest-MD5 authentication mechanism user clear-text password . You must set password encryption mode create user . If already create user , delete recreate . To set password encryption mode use Administration Console , select Configuration tab Data node . In Passwords pane , select `` No encryption ( CLEAR ) '' option `` Password encryption . '' The server accept simple user name ( , value `` uid '' attribute entry one ) `` dn : '' format user name . See server 's documentation detailed information . Specifying Realm A realm define namespace authentication entity ( value Context.SECURITY_PRINCIPAL property ) select . A server might multiple realm . For example , server university might configure two realm , one student user another faculty user . Realm configuration directory administrator . Some directory default single realm . For example , Oracle Directory Server , v5.2 , use fully qualified hostname machine default realm . In Digest-MD5 authentication , must authenticate specific realm . You may use following authentication environment property specify realm . If specify realm , one realm offer server use . java.naming.security.sasl.realm Set realm principal . This deployment-specific and/or server-specific case-sensitive string . It identify realm domain principal name ( Context.SECURITY_PRINCIPAL ) choose . If realm match one realm offer server , authentication fail . The following example show set environment property perform authentication use Digest-MD5 specified realm . To make example work environment , must change source code realm value reflect configure directory server . // Authenticate C. User password `` mysecret '' realm `` JNDITutorial '' env.put ( Context.SECURITY_AUTHENTICATION , `` DIGEST-MD5 '' ) ; env.put ( Context.SECURITY_PRINCIPAL , `` dn : cn=C . User , ou=NewHires , o=JNDITutorial '' ) ; env.put ( Context.SECURITY_CREDENTIALS , `` mysecret '' ) ; env.put ( `` java.naming.security.sasl.realm '' , `` JNDITutorial '' ) ; If need use privacy protection SASL property , discuss JNDI Tutorial .