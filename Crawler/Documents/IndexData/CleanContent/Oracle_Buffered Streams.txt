Most example 've see far use unbuffered I/O . This mean read write request handle directly underlying OS . This make program much less efficient , since request often trigger disk access , network activity , operation relatively expensive . To reduce kind overhead , Java platform implement buffer I/O stream . Buffered input stream read data memory area know buffer ; native input API call buffer empty . Similarly , buffer output stream write data buffer , native output API call buffer full . A program convert unbuffered stream buffered stream use wrap idiom 've use several time , unbuffered stream object pass constructor buffered stream class . Here 's might modify constructor invocation CopyCharacters example use buffered I/O : inputStream = new BufferedReader ( new FileReader ( `` xanadu.txt '' ) ) ; outputStream = new BufferedWriter ( new FileWriter ( `` characteroutput.txt '' ) ) ; There four buffered stream class use wrap unbuffered stream : BufferedInputStream BufferedOutputStream create buffer byte stream , BufferedReader BufferedWriter create buffer character stream . Flushing Buffered Streams It often make sense write buffer critical point , without wait fill . This know flush buffer . Some buffer output class support autoflush , specify optional constructor argument . When autoflush enable , certain key event cause buffer flush . For example , autoflush PrintWriter object flush buffer every invocation println format . See Formatting method . To flush stream manually , invoke flush method . The flush method valid output stream , effect unless stream buffer .