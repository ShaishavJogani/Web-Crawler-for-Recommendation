Anonymous class enable make code concise . They enable declare instantiate class time . They like local class except name . Use need use local class . This section cover following topic : Declaring Anonymous Classes Syntax Anonymous Classes Accessing Local Variables Enclosing Scope , Declaring Accessing Members Anonymous Class Examples Anonymous Classes Declaring Anonymous Classes While local class class declaration , anonymous class expression , mean define class another expression . The following example , HelloWorldAnonymousClasses , use anonymous class initialization statement local variable frenchGreeting spanishGreeting , use local class initialization variable englishGreeting : public class HelloWorldAnonymousClasses { interface HelloWorld { public void greet ( ) ; public void greetSomeone ( String someone ) ; } public void sayHello ( ) { class EnglishGreeting implement HelloWorld { String name = `` world '' ; public void greet ( ) { greetSomeone ( `` world '' ) ; } public void greetSomeone ( String someone ) { name = someone ; System.out.println ( `` Hello `` + name ) ; } } HelloWorld englishGreeting = new EnglishGreeting ( ) ; HelloWorld frenchGreeting = new HelloWorld ( ) { String name = `` tout le monde '' ; public void greet ( ) { greetSomeone ( `` tout le monde '' ) ; } public void greetSomeone ( String someone ) { name = someone ; System.out.println ( `` Salut `` + name ) ; } } ; HelloWorld spanishGreeting = new HelloWorld ( ) { String name = `` mundo '' ; public void greet ( ) { greetSomeone ( `` mundo '' ) ; } public void greetSomeone ( String someone ) { name = someone ; System.out.println ( `` Hola , `` + name ) ; } } ; englishGreeting.greet ( ) ; frenchGreeting.greetSomeone ( `` Fred '' ) ; spanishGreeting.greet ( ) ; } public static void main ( String ... args ) { HelloWorldAnonymousClasses myApp = new HelloWorldAnonymousClasses ( ) ; myApp.sayHello ( ) ; } } Syntax Anonymous Classes As mention previously , anonymous class expression . The syntax anonymous class expression like invocation constructor , except class definition contain block code . Consider instantiation frenchGreeting object : HelloWorld frenchGreeting = new HelloWorld ( ) { String name = `` tout le monde '' ; public void greet ( ) { greetSomeone ( `` tout le monde '' ) ; } public void greetSomeone ( String someone ) { name = someone ; System.out.println ( `` Salut `` + name ) ; } } ; The anonymous class expression consist following : The new operator The name interface implement class extend . In example , anonymous class implement interface HelloWorld . Parentheses contain argument constructor , like normal class instance creation expression . Note : When implement interface , constructor , use empty pair parenthesis , example . A body , class declaration body . More specifically , body , method declaration allow statement . Because anonymous class definition expression , must part statement . In example , anonymous class expression part statement instantiate frenchGreeting object . ( This explain semicolon closing brace . ) Accessing Local Variables Enclosing Scope , Declaring Accessing Members Anonymous Class Like local class , anonymous class capture variable ; access local variable enclose scope : An anonymous class access member enclose class . An anonymous class access local variable enclose scope declare final effectively final . Like nested class , declaration type ( variable ) anonymous class shadow declaration enclose scope name . See Shadowing information . Anonymous class also restriction local class respect member : You declare static initializers member interface anonymous class . An anonymous class static member provide constant variable . Note declare following anonymous class : Fields Extra method ( even implement method supertype ) Instance initializers Local class However , declare constructor anonymous class . Examples Anonymous Classes Anonymous class often use graphical user interface ( GUI ) application . Consider JavaFX example HelloWorld.java ( section Hello World , JavaFX Style Getting Started JavaFX ) . This sample create frame contain Say 'Hello World' button . The anonymous class expression highlight : import javafx.event.ActionEvent ; import javafx.event.EventHandler ; import javafx.scene.Scene ; import javafx.scene.control.Button ; import javafx.scene.layout.StackPane ; import javafx.stage.Stage ; public class HelloWorld extend Application { public static void main ( String [ ] args ) { launch ( args ) ; } @ Override public void start ( Stage primaryStage ) { primaryStage.setTitle ( `` Hello World ! `` ) ; Button btn = new Button ( ) ; btn.setText ( `` Say 'Hello World ' '' ) ; btn.setOnAction ( new EventHandler < ActionEvent > ( ) { @ Override public void handle ( ActionEvent event ) { System.out.println ( `` Hello World ! `` ) ; } } ) ; StackPane root = new StackPane ( ) ; root.getChildren ( ) .add ( btn ) ; primaryStage.setScene ( new Scene ( root , 300 , 250 ) ) ; primaryStage.show ( ) ; } } In example , method invocation btn.setOnAction specify happen select Say 'Hello World ' button . This method require object type EventHandler < ActionEvent > . The EventHandler < ActionEvent > interface contain one method , handle . Instead implement method new class , example use anonymous class expression . Notice expression argument pass btn.setOnAction method . Because EventHandler < ActionEvent > interface contain one method , use lambda expression instead anonymous class expression . See section Lambda Expressions information . Anonymous class ideal implement interface contain two method . The following JavaFX example section Customization UI Controls . The highlighted code create text field accept numeric value . It redefine default implementation TextField class anonymous class override replaceText replaceSelection method inherit TextInputControl class . import javafx.application.Application ; import javafx.event.ActionEvent ; import javafx.event.EventHandler ; import javafx.geometry.Insets ; import javafx.scene.Group ; import javafx.scene.Scene ; import javafx.scene.control . * ; import javafx.scene.layout.GridPane ; import javafx.scene.layout.HBox ; import javafx.stage.Stage ; public class CustomTextFieldSample extend Application { final static Label label = new Label ( ) ; @ Override public void start ( Stage stage ) { Group root = new Group ( ) ; Scene scene = new Scene ( root , 300 , 150 ) ; stage.setScene ( scene ) ; stage.setTitle ( `` Text Field Sample '' ) ; GridPane grid = new GridPane ( ) ; grid.setPadding ( new Insets ( 10 , 10 , 10 , 10 ) ) ; grid.setVgap ( 5 ) ; grid.setHgap ( 5 ) ; scene.setRoot ( grid ) ; final Label dollar = new Label ( `` $ '' ) ; GridPane.setConstraints ( dollar , 0 , 0 ) ; grid.getChildren ( ) .add ( dollar ) ; final TextField sum = new TextField ( ) { @ Override public void replaceText ( int start , int end , String text ) { ( ! text.matches ( `` [ a-z , A-Z ] '' ) ) { super.replaceText ( start , end , text ) ; } label.setText ( `` Enter numeric value '' ) ; } @ Override public void replaceSelection ( String text ) { ( ! text.matches ( `` [ a-z , A-Z ] '' ) ) { super.replaceSelection ( text ) ; } } } ; sum.setPromptText ( `` Enter total '' ) ; sum.setPrefColumnCount ( 10 ) ; GridPane.setConstraints ( sum , 1 , 0 ) ; grid.getChildren ( ) .add ( sum ) ; Button submit = new Button ( `` Submit '' ) ; GridPane.setConstraints ( submit , 2 , 0 ) ; grid.getChildren ( ) .add ( submit ) ; submit.setOnAction ( new EventHandler < ActionEvent > ( ) { @ Override public void handle ( ActionEvent e ) { label.setText ( null ) ; } } ) ; GridPane.setConstraints ( label , 0 , 1 ) ; GridPane.setColumnSpan ( label , 3 ) ; grid.getChildren ( ) .add ( label ) ; scene.setRoot ( grid ) ; stage.show ( ) ; } public static void main ( String [ ] args ) { launch ( args ) ; } }