Local class class define block , group zero statement balanced brace . You typically find local class define body method . This section cover following topic : Declaring Local Classes Accessing Members Enclosing Class Shadowing Local Classes Local Classes Are Similar To Inner Classes Declaring Local Classes You define local class inside block ( see Expressions , Statements , Blocks information ) . For example , define local class method body , loop , clause . The following example , LocalClassExample , validate two phone number . It define local class PhoneNumber method validatePhoneNumber : public class LocalClassExample { static String regularExpression = `` [ ^0-9 ] '' ; public static void validatePhoneNumber ( String phoneNumber1 , String phoneNumber2 ) { final int numberLength = 10 ; // Valid JDK 8 later : // int numberLength = 10 ; class PhoneNumber { String formattedPhoneNumber = null ; PhoneNumber ( String phoneNumber ) { // numberLength = 7 ; String currentNumber = phoneNumber.replaceAll ( regularExpression , `` '' ) ; ( currentNumber.length ( ) == numberLength ) formattedPhoneNumber = currentNumber ; else formattedPhoneNumber = null ; } public String getNumber ( ) { return formattedPhoneNumber ; } // Valid JDK 8 later : // public void printOriginalNumbers ( ) { // System.out.println ( `` Original number `` + phoneNumber1 + // `` `` + phoneNumber2 ) ; // } } PhoneNumber myNumber1 = new PhoneNumber ( phoneNumber1 ) ; PhoneNumber myNumber2 = new PhoneNumber ( phoneNumber2 ) ; // Valid JDK 8 later : // myNumber1.printOriginalNumbers ( ) ; ( myNumber1.getNumber ( ) == null ) System.out.println ( `` First number invalid '' ) ; else System.out.println ( `` First number `` + myNumber1.getNumber ( ) ) ; ( myNumber2.getNumber ( ) == null ) System.out.println ( `` Second number invalid '' ) ; else System.out.println ( `` Second number `` + myNumber2.getNumber ( ) ) ; } public static void main ( String ... args ) { validatePhoneNumber ( `` 123-456-7890 '' , `` 456-7890 '' ) ; } } The example validate phone number first remove character phone number except digit 0 9 . After , check whether phone number contain exactly ten digit ( length phone number North America ) . This example print following : First number 1234567890 Second number invalid Accessing Members Enclosing Class A local class access member enclose class . In previous example , PhoneNumber constructor access member LocalClassExample.regularExpression . In addition , local class access local variable . However , local class access local variable declare final . When local class access local variable parameter enclose block , capture variable parameter . For example , PhoneNumber constructor access local variable numberLength declared final ; numberLength captured variable . However , start Java SE 8 , local class access local variable parameter enclose block final effectively final . A variable parameter whose value never change initialize effectively final . For example , suppose variable numberLength declare final , add highlighted assignment statement PhoneNumber constructor change length valid phone number 7 digit : PhoneNumber ( String phoneNumber ) { numberLength = 7 ; String currentNumber = phoneNumber.replaceAll ( regularExpression , `` '' ) ; ( currentNumber.length ( ) == numberLength ) formattedPhoneNumber = currentNumber ; else formattedPhoneNumber = null ; } Because assignment statement , variable numberLength effectively final anymore . As result , Java compiler generate error message similar '' local variable reference inner class must final effectively final '' inner class PhoneNumber try access numberLength variable : ( currentNumber.length ( ) == numberLength ) Starting Java SE 8 , declare local class method , access method 's parameter . For example , define following method PhoneNumber local class : public void printOriginalNumbers ( ) { System.out.println ( `` Original number `` + phoneNumber1 + `` `` + phoneNumber2 ) ; } The method printOriginalNumbers access parameter phoneNumber1 phoneNumber2 method validatePhoneNumber . Shadowing Local Classes Declarations type ( variable ) local class shadow declaration enclose scope name . See Shadowing information . Local Classes Are Similar To Inner Classes Local class similar inner class define declare static member . Local class static method , class PhoneNumber , define static method validatePhoneNumber , refer static member enclose class . For example , define member variable regularExpression static , Java compiler generate error similar `` non-static variable regularExpression reference static context . '' Local class non-static access instance member enclose block . Consequently , contain kind static declaration . You declare interface inside block ; interface inherently static . For example , following code excerpt compile interface HelloThere define inside body method greetInEnglish : public void greetInEnglish ( ) { interface HelloThere { public void greet ( ) ; } class EnglishHelloThere implement HelloThere { public void greet ( ) { System.out.println ( `` Hello `` + name ) ; } } HelloThere myGreeting = new EnglishHelloThere ( ) ; myGreeting.greet ( ) ; } You declare static initializers member interface local class . The following code excerpt compile method EnglishGoodbye.sayGoodbye declare static . The compiler generate error similar `` modifier 'static ' allow constant variable declaration '' encounter method definition : public void sayGoodbyeInEnglish ( ) { class EnglishGoodbye { public static void sayGoodbye ( ) { System.out.println ( `` Bye bye '' ) ; } } EnglishGoodbye.sayGoodbye ( ) ; } A local class static member provide constant variable . ( A constant variable variable primitive type type String declare final initialized compile-time constant expression . A compile-time constant expression typically string arithmetic expression evaluate compile time . See Understanding Class Members information . ) The following code excerpt compiles static member EnglishGoodbye.farewell constant variable : public void sayGoodbyeInEnglish ( ) { class EnglishGoodbye { public static final String farewell = `` Bye bye '' ; public void sayGoodbye ( ) { System.out.println ( farewell ) ; } } EnglishGoodbye myEnglishGoodbye = new EnglishGoodbye ( ) ; myEnglishGoodbye.sayGoodbye ( ) ; }