Now look demo use custom transfer handler implement drop list component . Although default transfer handler list implement export , create custom transfer handler implement import , re-implement export well . As see screen shot , DropDemo contain editable text area , list , combo box allow select drop mode list . Try : Click Launch button run DropDemo use Javaâ„¢ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Select text text area drop onto list . The select list entry replace item become current selection . This USE_SELECTION work provide backwards compatibility otherwise recommend . Change List Drop Mode ON try action . Once , select list item replace , current selection move . Change List Drop Mode INSERT repeat action . The added text insert drop location . In mode possible modify exist list item . Change List Drop Mode ON_OR_INSERT . Depending cursor position , either insert new text replace exist text . Here ListTransferHandler implementation DropDemo.java . The transfer handler list support copy move reimplements drag support list provide default . public class ListTransferHandler extend TransferHandler { private int [ ] index = null ; private int addIndex = -1 ; //Location item added private int addCount = 0 ; //Number item add . /** * We support import string . */ public boolean canImport ( TransferHandler.TransferSupport info ) { // Check String flavor ( ! info.isDataFlavorSupported ( DataFlavor.stringFlavor ) ) { return false ; } return true ; } /** * Bundle select item single list export . * Each line separate newline . */ protect Transferable createTransferable ( JComponent c ) { JList list = ( JList ) c ; index = list.getSelectedIndices ( ) ; Object [ ] value = list.getSelectedValues ( ) ; StringBuffer buff = new StringBuffer ( ) ; ( int = 0 ; < values.length ; i++ ) { Object val = value [ ] ; buff.append ( val == null ? `` '' : val.toString ( ) ) ; ( ! = values.length - 1 ) { buff.append ( `` \n '' ) ; } } return new StringSelection ( buff.toString ( ) ) ; } /** * We support copy move action . */ public int getSourceActions ( JComponent c ) { return TransferHandler.COPY_OR_MOVE ; } /** * Perform actual import . This demo support drag drop . */ public boolean importData ( TransferHandler.TransferSupport info ) { ( ! info.isDrop ( ) ) { return false ; } JList list = ( JList ) info.getComponent ( ) ; DefaultListModel listModel = ( DefaultListModel ) list.getModel ( ) ; JList.DropLocation dl = ( JList.DropLocation ) info.getDropLocation ( ) ; int index = dl.getIndex ( ) ; boolean insert = dl.isInsert ( ) ; // Get string drop . Transferable = info.getTransferable ( ) ; String data ; try { data = ( String ) t.getTransferData ( DataFlavor.stringFlavor ) ; } catch ( Exception e ) { return false ; } // Wherever newline incoming data , // break separate item list . String [ ] value = data.split ( `` \n '' ) ; addIndex = index ; addCount = values.length ; // Perform actual import . ( int = 0 ; < values.length ; i++ ) { ( insert ) { listModel.add ( index++ , value [ ] ) ; } else { // If item go beyond end current // list , add . ( index < listModel.getSize ( ) ) { listModel.set ( index++ , value [ ] ) ; } else { listModel.add ( index++ , value [ ] ) ; } } } return true ; } /** * Remove item move list . */ protect void exportDone ( JComponent c , Transferable data , int action ) { JList source = ( JList ) c ; DefaultListModel listModel = ( DefaultListModel ) source.getModel ( ) ; ( action == TransferHandler.MOVE ) { ( int = indices.length - 1 ; > = 0 ; -- ) { listModel.remove ( index [ ] ) ; } } index = null ; addCount = 0 ; addIndex = -1 ; } } Next look target choose drop action .