Java™ Standard Edition version 6 narrow gap performance integration native application Java application . Along new system tray functionality , splash screen support , enhance printing JTables , Java SE version 6 provide Desktop API ( java.awt.Desktop ) API , allow Java application interact default application associate specific file type host platform . New functionality provide Desktop class . The API arise JDesktop Integration Components ( JDIC ) project . The goal JDIC project make `` Java technology-based application first-class citizen '' desktop , enable seamless integration . JDIC provide Java application access functionality facility provide native desktop . Regarding new Desktop API , mean Java application perform following operation : Launch host system 's default browser specific Uniform Resource Identifier ( URI ) Launch host system 's default email client Launch application open , edit , print file associate application Note : The Desktop API use host operating system 's file association launch application associate specific file type . For example , OpenDocument text ( .odt ) file extension associate OpenOffice Writer application , Java application could launch OpenOffice Writer open , edit , even print file association . Depending host system , different application may associate different action . For example , particular file print , check first whether extension printing association give operating system . Use isDesktopSupported ( ) method determine whether Desktop API available . On Solaris Operating System Linux platform , API dependent Gnome library . If library unavailable , method return false . After determine Desktop API support , , isDesktopSupported ( ) return true , application retrieve Desktop instance use static method getDesktop ( ) . If application run environment without keyboard , mouse , monitor ( `` headless '' environment ) , getDesktop ( ) method throw java.awt.HeadlessException . Once retrieve , Desktop instance allow application browse , mail , open , edit , even print file URI , retrieve Desktop instance support activity . Each activity call action , represent Desktop.Action enumeration instance : BROWSE — Represents browse action perform host 's default browser . MAIL — Represents mail action perform host 's default email client . OPEN — Represents open action perform application associate open specific file type . EDIT — Represents edit action perform application associate edit specific file type PRINT — Represents print action perform application associate print specific file type . Different application may register different action even file type . For example , Firefox browser may launch OPEN action , Emacs EDIT action , yet different application PRINT action . Your host desktop 's association use determine application invoke . The ability manipulate desktop file association possible current version Desktop API JDK 6 , association create change platform-dependent tool time . The following example show capability mention . Try : Compile run example , consult example index . The DesktopDemo dialog box appear . Enter URI value URI text field , example – http : //docs.oracle.com/javase/tutorial . Press Launch Browser button . Ensure default browser window open Tutorial main page load . Change URI arbitrary value , press Launch Browser button , ensure web page request load successfully . Switch back DesktopDemo dialog box enter mail recipient name E-mail text field . You also use mailto scheme support CC , BCC , SUBJECT , BODY field , example – duke @ example.com ? SUBJECT=Hello Duke ! . Press Launch Mail button . The compositing dialog box default email client appear . Be sure To Subject field follow . You continue compose message try enter different combination mail schema E-mail field . Switch back DesktopDemo dialog box press ellipsis button choose text file . Select either Open , Edit , Print set type operation , press Launch Application button . Be sure operation complete correctly . Try file format , example .odt , .html , .pdf . Note : If try edit .pdf file , DesktopDemo return following message : Can perform give operation < file name > file The following code snippet provide detail DeskDemo application implementation . The DesktopDemo constructor disable component right instantiate UI check whether Desktop API available . public DesktopDemo ( ) { // init gui component initComponents ( ) ; // disable button launch browser , email client , // disable button open , edit , print file disableActions ( ) ; // Desktop APIs use , first check whether API // support particular VM particular host ( Desktop.isDesktopSupported ( ) ) { desktop = Desktop.getDesktop ( ) ; // enable button action support . enableSupportedActions ( ) ; } ... /** * Disable graphical component know * whether functionality support . */ private void disableActions ( ) { txtBrowserURI.setEnabled ( false ) ; btnLaunchBrowser.setEnabled ( false ) ; txtMailTo.setEnabled ( false ) ; btnLaunchEmail.setEnabled ( false ) ; rbEdit.setEnabled ( false ) ; rbOpen.setEnabled ( false ) ; rbPrint.setEnabled ( false ) ; txtFile.setEnabled ( false ) ; btnLaunchApplication.setEnabled ( false ) ; } ... Once Desktop object acquire , query object find specific action support . If Desktop object support specific action , Desktop API unsupported , DesktopDemo simply keep affected graphical component disable . /** * Enable action support host . * The action following : open browser , * open email client , open , edit , print * file use associate application . */ private void enableSupportedActions ( ) { ( desktop.isSupported ( Desktop.Action.BROWSE ) ) { txtBrowserURI.setEnabled ( true ) ; btnLaunchBrowser.setEnabled ( true ) ; } ( desktop.isSupported ( Desktop.Action.MAIL ) ) { txtMailTo.setEnabled ( true ) ; btnLaunchEmail.setEnabled ( true ) ; } ( desktop.isSupported ( Desktop.Action.OPEN ) ) { rbOpen.setEnabled ( true ) ; } ( desktop.isSupported ( Desktop.Action.EDIT ) ) { rbEdit.setEnabled ( true ) ; } ( desktop.isSupported ( Desktop.Action.PRINT ) ) { rbPrint.setEnabled ( true ) ; } ( rbEdit.isEnabled ( ) || rbOpen.isEnabled ( ) || rbPrint.isEnabled ( ) ) { txtFile.setEnabled ( true ) ; btnLaunchApplication.setEnabled ( true ) ; } } The browse ( uri ) method throw variety exception , include NullPointerException URI null , UnsupportedOperationException BROWSE action unsupported . This method throw IOException default browser application find launch , SecurityException security manager deny invocation . private void onLaunchBrowser ( ActionEvent evt ) { URI uri = null ; try { uri = new URI ( txtBrowserURI.getText ( ) ) ; desktop.browse ( uri ) ; } catch ( IOException ioe ) { System.out.println ( `` The system find `` + uri + `` file specify '' ) ; //ioe.printStackTrace ( ) ; } catch ( URISyntaxException use ) { System.out.println ( `` Illegal character path '' ) ; //use.printStackTrace ( ) ; } } Applications launch host 's default email client , action support , call mail ( uriMailTo ) method Desktop instance . private void onLaunchMail ( ActionEvent evt ) { String mailTo = txtMailTo.getText ( ) ; URI uriMailTo = null ; try { ( mailTo.length ( ) > 0 ) { uriMailTo = new URI ( `` mailto '' , mailTo , null ) ; desktop.mail ( uriMailTo ) ; } else { desktop.mail ( ) ; } } catch ( IOException ioe ) { ioe.printStackTrace ( ) ; } catch ( URISyntaxException use ) { use.printStackTrace ( ) ; } } Java application open , edit , print file associate application use open ( ) , edit ( ) , print ( ) method Desktop class , respectively . private void onLaunchDefaultApplication ( ActionEvent evt ) { String fileName = txtFile.getText ( ) ; File file = new File ( fileName ) ; try { switch ( action ) { case OPEN : desktop.open ( file ) ; break ; case EDIT : desktop.edit ( file ) ; break ; case PRINT : desktop.print ( file ) ; break ; } } catch ( IOException ioe ) { //ioe.printStackTrace ( ) ; System.out.println ( `` Can perform give operation `` + file + `` file '' ) ; } } The complete code demo available DesktopDemo.java file . The Desktop API The Desktop class allow Java application launch native desktop application handle URIs file . Method Purpose isDesktopSupported ( ) Tests whether class support current platform . If support , use getDesktop ( ) retrieve instance . getDesktop ( ) Returns Desktop instance current browser context . On platform Desktop API may support . Use isDesktopSupported ( ) method determine current desktop support . isSupported ( Desktop.Action ) Tests whether action support current platform . Use following constans Desktop.Action enum : BROWSE , EDIT , MAIL , OPEN , PRINT . browse ( URI ) Launches default browser display URI . If default browser able handle specified URI , application register handle URIs specified type invoke . The application determine protocol path URI , define URI class . mail ( URI ) Launches mail compose window user default mail client , fill message field specify mailto : URI . open ( File ) Launches associated application open file . edit ( File ) Launches associated editor application open file edit . print ( File ) Prints file native desktop printing facility , use associated application 's print command . Examples That Use Desktop API The follow table list example use Desktop class integration . Example Where Described Notes DesktopDemo This section Launches host system 's default browser specify URI default email client ; launch application open , edit , print file . « Previous • Trail • Next »