The previous section discuss use predefined rule locale compare string . These collation rule determine sort order string . If predefined collation rule meet need , design rule assign RuleBasedCollator object . Customized collation rule contain String object pass RuleBasedCollator constructor . Here 's simple example : String simpleRule = `` < < b < c < '' ; RuleBasedCollator simpleCollator = new RuleBasedCollator ( simpleRule ) ; For simpleCollator object previous example , less b , less c , forth . The simpleCollator.compare method reference rule compare string . The full syntax use construct collation rule flexible complex simple example . For full description syntax , refer API documentation RuleBasedCollator class . The example follow sort list Spanish word two collators . Full source code example RulesDemo.java . The RulesDemo program start define collation rule English Spanish . The program sort Spanish word traditional manner . When sort traditional rule , letter ch uppercase equivalent position sort order . These character pair compare one character . For example , ch sort single letter , follow cz sort order . Note rule two collators differ : String englishRules = ( `` < , A < b , B < c , C < , D < e , E < f , F `` + `` < g , G < h , H < , I < j , J < k , K < l , L `` + `` < , M < n , N < , O < p , P < q , Q < r , R `` + `` < , S < , T < u , U < v , V < w , W < x , X `` + `` < , Y < z , Z '' ) ; String smallnTilde = new String ( `` \u00F1 '' ) ; // ñ String capitalNTilde = new String ( `` \u00D1 '' ) ; // Ñ String traditionalSpanishRules = ( `` < , A < b , B < c , C `` + `` < ch , cH , Ch , CH `` + `` < , D < e , E < f , F `` + `` < g , G < h , H < , I < j , J < k , K < l , L `` + `` < , lL , Ll , LL `` + `` < , M < n , N `` + `` < `` + smallnTilde + `` , '' + capitalNTilde + `` `` + `` < , O < p , P < q , Q < r , R `` + `` < , S < , T < u , U < v , V < w , W < x , X `` + `` < , Y < z , Z '' ) ; The following line code create collators invoke sort routine : try { RuleBasedCollator enCollator = new RuleBasedCollator ( englishRules ) ; RuleBasedCollator spCollator = new RuleBasedCollator ( traditionalSpanishRules ) ; sortStrings ( enCollator , word ) ; printStrings ( word ) ; System.out.println ( ) ; sortStrings ( spCollator , word ) ; printStrings ( word ) ; } catch ( ParseException pe ) { System.out.println ( `` Parse exception rule '' ) ; } The sort routine , call sortStrings , generic . It sort array word accord rule Collator object : public static void sortStrings ( Collator collator , String [ ] word ) { String tmp ; ( int = 0 ; < words.length ; i++ ) { ( int j = + 1 ; j < words.length ; j++ ) { ( collator.compare ( word [ ] , word [ j ] ) > 0 ) { tmp = word [ ] ; word [ ] = word [ j ] ; word [ j ] = tmp ; } } } } When sort English collation rule , array word follow : chalina curioso llama luz Compare precede list following , sort accord traditional Spanish rule collation : curioso chalina luz llama