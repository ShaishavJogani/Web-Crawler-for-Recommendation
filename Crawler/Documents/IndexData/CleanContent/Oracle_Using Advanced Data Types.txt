The advanced data type introduce section give relational database flexibility use value table column . For example , column use store BLOB ( binary large object ) value , store large amount data raw byte . A column also type CLOB ( character large object ) , capable store large amount data character format . The late version ANSI/ISO SQL standard commonly refer SQL:2003 . This standard specify following data type : SQL92 built-in type , consist familiar SQL column type CHAR , FLOAT , DATE SQL99 built-in type , consist type add SQL99 : BOOLEAN : Boolean ( true false ) value BLOB : Binary large Bobject CLOB : Character large object New built-in type add SQL:2003 : XML : XML object User define type : Structured type : User-defined type ; example : CREATE TYPE PLANE_POINT AS ( X FLOAT , Y FLOAT ) NOT FINAL DISTINCT type : User-defined type base built-in type ; example : CREATE TYPE MONEY AS NUMERIC ( 10,2 ) FINAL Constructed type : New type base give base type : REF ( structured-type ) : Pointer persistently denote instance structured type reside database base-type ARRAY [ n ] : Array n base-type element Locators : Entities logical pointer data reside database server . A locator exist client computer transient , logical pointer data server . A locator typically refer data large materialize client , image audio . ( Materialized view query result store `` materialize '' advance schema object . ) There operator define SQL level retrieve randomly accessed piece data denote locator : LOCATOR ( structured-type ) : Locator structured instance server LOCATOR ( array ) : Locator array server LOCATOR ( blob ) : Locator binary large object server LOCATOR ( clob ) : Locator character large object server Datalink : Type manage data external data source . Datalink value part SQL MED ( Management External Data ) , part SQL ANSI/ISO standard specification . Mapping Advanced Data Types The JDBC API provide default mapping advanced data type specify SQL:2003 standard . The following list give data type interface class map : BLOB : Blob interface CLOB : Clob interface NCLOB : NClob interface ARRAY : Array interface XML : SQLXML interface Structured type : Struct interface REF ( structure type ) : Ref interface ROWID : RowId interface DISTINCT : Type base type map . For example , DISTINCT value base SQL NUMERIC type map java.math.BigDecimal type NUMERIC map BigDecimal Java programming language . DATALINK : java.net.URL object Using Advanced Data Types You retrieve , store , update advanced data type way handle data type . You use either ResultSet.getDataType CallableStatement.getDataType method retrieve , PreparedStatement.setDataType method store , ResultSet.updateDataType method update . ( The variable DataType name Java interface class map advanced data type . ) Probably 90 percent operation perform advanced data type involve use getDataType , setDataType , updateDataType method . The follow table show method use : Advanced Data Type getDataType Method setDataType method updateDataType Method BLOB getBlob setBlob updateBlob CLOB getClob setClob updateClob NCLOB getNClob setNClob updateNClob ARRAY getArray setArray updateArray XML getSQLXML setSQLXML updateSQLXML Structured type getObject setObject updateObject REF ( structure type ) getRef setRef updateRef ROWID getRowId setRowId updateRowId DISTINCT getBigDecimal setBigDecimal updateBigDecimal DATALINK getURL setURL updateURL Note : The DISTINCT data type behaves differently advanced SQL data type . Being user-defined type base already exist built-in type , interface mapping Java programming language . Consequently , use method correspond Java type DISTINCT data type base . See Using DISTINCT Data Type information . For example , following code fragment retrieve SQL ARRAY value . For example , suppose column SCORES table STUDENTS contain value type ARRAY . The variable stmt Statement object . ResultSet r = stmt.executeQuery ( `` SELECT SCORES FROM STUDENTS `` + `` WHERE ID = 002238 '' ) ; rs.next ( ) ; Array score = rs.getArray ( `` SCORES '' ) ; The variable score logical pointer SQL ARRAY object store table STUDENTS row student 002238 . If want store value database , use appropriate set method . For example , following code fragment , r ResultSet object , store Clob object : Clob note = rs.getClob ( `` NOTES '' ) ; PreparedStatement pstmt = con.prepareStatement ( `` UPDATE MARKETS SET COMMENTS = ? `` + `` WHERE SALES < 1000000 '' ) ; pstmt.setClob ( 1 , note ) ; pstmt.executeUpdate ( ) ; This code set note first parameter update statement send database . The Clob value designate note store table MARKETS column COMMENTS every row value column SALES less one million .