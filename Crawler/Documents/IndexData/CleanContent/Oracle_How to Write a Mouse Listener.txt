Mouse event notify user use mouse ( similar input device ) interact component . Mouse event occur cursor enters exit component 's onscreen area user press release one mouse button . Tracking cursor 's motion involve significantly system overhead track mouse event . That mouse-motion event separate Mouse Motion listener type ( see How Write Mouse Motion Listener ) . To track mouse wheel event , register mouse-wheel listener . See How Write Mouse Wheel Listener information . If application require detection mouse event mouse-motion event , use MouseInputAdapter class . This class implement MouseInputListener , convenient interface implement MouseListener MouseMotionListener interface . However , MouseInputListener interface implement MouseWheelListener interface . Alternatively , use corresponding AWT MouseAdapter class , implement MouseListener , MouseMotionListener , MouseWheelListener interface . The following example show mouse listener . At top window blank area ( implement class name BlankArea ) . The mouse listener listen event BlankArea container , instance MouseEventDemo . Each time mouse event occur , descriptive message display blank area . By move cursor top blank area occasionally press mouse button , fire mouse event . Try : Click Launch button run MouseEventDemo use Javaâ„¢ Web Start ( download JDK 7 later ) . Alternatively , compile run example , consult example index . Move cursor yellow rectangle top window . You see one mouse-entered event . Press hold left mouse button without move mouse . You see mouse-pressed event . You might see extra mouse event , mouse-exited mouse-entered . Release mouse button . You see mouse-released event . If move mouse , mouse-clicked event follow . Press hold mouse button , drag mouse cursor end outside window . Release mouse button . You see mouse-pressed event , follow mouse-exited event , follow mouse-released event . You notify cursor 's motion . To get mouse-motion event , need implement mouse-motion listener . You find demo 's code MouseEventDemo.java BlankArea.java . Here demo 's mouse event handle code : public class MouseEventDemo ... implement MouseListener { //where initialization occur : //Register mouse event blankArea panel . blankArea.addMouseListener ( ) ; addMouseListener ( ) ; ... public void mousePressed ( MouseEvent e ) { saySomething ( `` Mouse press ; # click : `` + e.getClickCount ( ) , e ) ; } public void mouseReleased ( MouseEvent e ) { saySomething ( `` Mouse release ; # click : `` + e.getClickCount ( ) , e ) ; } public void mouseEntered ( MouseEvent e ) { saySomething ( `` Mouse enter '' , e ) ; } public void mouseExited ( MouseEvent e ) { saySomething ( `` Mouse exit '' , e ) ; } public void mouseClicked ( MouseEvent e ) { saySomething ( `` Mouse click ( # click : `` + e.getClickCount ( ) + `` ) '' , e ) ; } void saySomething ( String eventDescription , MouseEvent e ) { textArea.append ( eventDescription + `` detect `` + e.getComponent ( ) .getClass ( ) .getName ( ) + `` . '' + newline ) ; } } The Mouse Listener API The MouseListener Interface Method Purpose mouseClicked ( MouseEvent ) Called user click listened-to component . mouseEntered ( MouseEvent ) Called cursor enter bound listened-to component . mouseExited ( MouseEvent ) Called cursor exit bound listened-to component . mousePressed ( MouseEvent ) Called user press mouse button cursor listened-to component . mouseReleased ( MouseEvent ) Called user release mouse button mouse press listened-to component . The MouseAdapter class ( AWT adapter class ) abstract . All method empty body . So developer define method event specific application . You also use MouseInputAdapter class , method available MouseListener MouseMotionListener . The MouseEvent Class Method Purpose int getClickCount ( ) Returns number quick , consecutive click user make ( include event ) . For example , return 2 double click . int getX ( ) int getY ( ) Point getPoint ( ) Return ( x , ) position event occur , relative component fire event . int getXOnScreen ( ) int getYOnScreen ( ) int getLocationOnScreen ( ) Return absolute ( x , ) position event . These coordinate relative virtual coordinate system multi-screen environment . Otherwise , coordinate relative coordinate system associate Component 's Graphics Configuration . int getButton ( ) Returns mouse button , , change state . One following constant return : NOBUTTON , BUTTON1 , BUTTON2 , BUTTON3 . boolean isPopupTrigger ( ) Returns true mouse event cause popup menu appear . Because popup trigger platform dependent , program use popup menu , call isPopupTrigger mouse-pressed mouse-released event fire component popup appear . See Bringing Up Popup Menu information popup menu . String getMouseModifiersText ( int ) Returns String describe modifier key mouse button active event , `` Shift '' , `` Ctrl+Shift '' . These string localize use awt.properties file . The InputEvent Class The MouseEvent class inherit many useful method InputEvent couple handy method ComponentEvent AWTEvent class . Method Purpose int getID ( ) ( java.awt.AWTEvent ) Returns event type , define particular action . For example , MouseEvent id reflect state mouse button every mouse event . The following state could specify MouseEvent id : MouseEvent.MOUSE_PRESSED , MouseEvent.MOUSE_RELEASED , MouseEvent.MOUSE_CLICKED . Component getComponent ( ) ( ComponentEvent ) Returns component fire event . You use method instead getSource method . int getWhen ( ) Returns timestamp event occur . The high timestamp , recently event occur . boolean isAltDown ( ) boolean isControlDown ( ) boolean isMetaDown ( ) boolean isShiftDown ( ) Return state individual modifier key time event fire . int getModifiers ( ) Returns state modifier key mouse button event fire . You use method determine mouse button press ( release ) mouse event fire . The InputEvent class define constant use getModifiers method : ALT_MASK , BUTTON1_MASK , BUTTON2_MASK , BUTTON3_MASK , CTRL_MASK , META_MASK , SHIFT_MASK . For example , following expression true right button press : ( mouseEvent.getModifiers ( ) & InputEvent.BUTTON3_MASK ) == InputEvent.BUTTON3_MASK int getModifiersEx ( ) Returns extended modifier mask event . Extended modifier represent state mouse button modal key , ALT , CTRL , META , event occur . You check status modifier use one following predefined bitmasks : SHIFT_DOWN_MASK , CTRL_DOWN_MASK , META_DOWN_MASK , ALT_DOWN_MASK , BUTTON1_DOWN_MASK , BUTTON2_DOWN_MASK , BUTTON3_DOWN_MASK , ALT_GRAPH_DOWN_MASK . For example , check button 1 , button 2 3 , would use following code snippet : ( event.getModifiersEx ( ) & ( BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK | BUTTON3_DOWN_MASK ) == BUTTON1_DOWN_MASK ) { ... } int getModifiersExText ( int ) Returns string describe extend modifier key mouse button , `` Shift '' , `` Button1 '' , `` Ctrl+Shift '' . These string localize change awt.properties file . The MouseInfo Class The MouseInfo class provide method obtain information mouse pointer location time application run . Method Purpose getPointerInfo ( ) Returns PointerInfo instance represent current location mouse pointer . getNumberOfButtons ( ) Returns number button mouse -1 , system support mouse . Examples That Use Mouse Listeners The follow table list example use mouse listener . Example Where Described Notes MouseEventDemo This section Reports mouse event occur within blank panel demonstrate circumstance mouse event fire . GlassPaneDemo How Use Root Panes Uses subclass MouseInputAdapter listen mouse event mouse-motion event root pane 's glass pane . Re-dispatches event underlying component . TableSortDemo How Use Tables Listens mouse event table header . Sorts data selected column . PopupMenuDemo How Use Menus Displays popup menu response mouse click . TrackFocusDemo How Use Focus Subsystem The custom component , Picture , implement mouse listener request focus user click component .