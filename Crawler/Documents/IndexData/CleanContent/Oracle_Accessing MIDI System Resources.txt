The Java Sound API offer flexible model MIDI system configuration , configuration sampled-audio system . An implementation Java Sound API provide different sort MIDI device , additional one supply service provider instal user . You write program way make assumption specific MIDI device instal computer . Instead , program take advantage MIDI system 's default , allow user select whatever device happen available . This section show program learn MIDI resource instal , get access desire one . After 've access open device , connect , discuss later Transmitting Receiving MIDI Messages . The MidiSystem Class The role MidiSystem class Java Sound API 's MIDI package directly analogous role AudioSystem sampled-audio package . MidiSystem act clearinghouse access installed MIDI resource . You query MidiSystem learn sort device instal , iterate available device obtain access desire one . For example , application program might start ask MidiSystem synthesizer available , display list , user select one . A simple application program might use system 's default synthesizer . The MidiSystem class also provide method translate MIDI file Sequences . It report file format MIDI file write file different type . An application program obtain following resource MidiSystem : Sequencers Synthesizers Transmitters ( associate MIDI input port ) Receivers ( associate MIDI output port ) Data standard MIDI file Data soundbank file This page focus first four type resource . The others discuss later tutorial . Obtaining Default Devices A typical MIDI application program use Java Sound API begin obtain device need , consist one sequencer , synthesizer , input port , output port . There default synthesizer device , default sequencer device , default transmit device , default receive device . The latter two device normally represent MIDI input output port , respectively , available system . ( It 's easy get confuse directionality . Think port ' transmission reception relation software , relation external physical device connect physical port . A MIDI input port transmits data external device Java Sound API Receiver , likewise MIDI output port receive data software object relay data external device . ) A simple application program might use default instead explore installed device . The MidiSystem class include following method retrieve default resource : static Sequencer getSequencer ( ) static Synthesizer getSynthesizer ( ) static Receiver getReceiver ( ) static Transmitter getTransmitter ( ) The first two method obtain system 's default sequencing synthesis resource , either represent physical device implement wholly software . The getReceiver method obtain Receiver object take MIDI message send relay default receive device . Similarly , getTransmitter method obtain Transmitter object send MIDI message receiver behalf default transmit device . Learning What Devices Are Installed Instead use default device , thorough approach select desired device full set device instal system . An application program select desired device programmatically , display list available device let user select one use . The MidiSystem class provide method learn device instal , corresponding method obtain device give type . Here method learn installed device : tatic MidiDevice.Info [ ] getMidiDeviceInfo ( ) As see , return array information object . Each return MidiDevice.Info object identify one type sequencer , synthesizer , port , device instal . ( Usually system one instance give type . For example , give model synthesizer certain vendor instal . ) The MidiDevice.Info include following string describe device : Name Version number Vendor ( company create device ) A description device You display string user interface let user select list device . However , use string programmatically select device ( oppose display string user ) , need know advance might . The company provide device include information documentation . An application program require prefers particular device use information locate device . This approach drawback limit program device implementation know advance . Another , general , approach go ahead iterate MidiDevice.Info object , obtain corresponding device , determine programmatically whether 's suitable use ( least suitable include list user choose ) . The next section describe . Obtaining Desired Device Once appropriate device 's info object find , application program invoke following MidiSystem method obtain corresponding device : static MidiDevice getMidiDevice ( MidiDevice.Info info ) You use method 've already find info object describe device need . However , ca n't interpret info object return getMidiDeviceInfo determine device need , n't want display information device user , might able follow instead : Iterate MidiDevice.Info object return getMidiDeviceInfo , get corresponding device use method , test device see whether 's suitable . In word , query device class capability include list display user , way decide upon device programmatically without involve user . For example , program need synthesizer , obtain installed device , see instance class implement Synthesizer interface , display list user choose one , follow : // Obtain information installed synthesizer . Vector synthInfos ; MidiDevice device ; MidiDevice.Info [ ] info = MidiSystem.getMidiDeviceInfo ( ) ; ( int = 0 ; < infos.length ; i++ ) { try { device = MidiSystem.getMidiDevice ( infos [ ] ) ; } catch ( MidiUnavailableException e ) { // Handle throw exception ... } ( device instanceof Synthesizer ) { synthInfos.add ( infos [ ] ) ; } } // Now , display string synthInfos list GUI . As another example , might choose device programmatically , without involve user . Let 's suppose want obtain synthesizer play note simultaneously . You iterate MidiDevice.Info object , , determine device synthesizer , query capability invoke getMaxPolyphony method Synthesizer . You reserve synthesizer great polyphony , describe next section . Even though 're ask user choose synthesizer , might still display string chosen MidiDevice.Info object , user 's information . Opening Devices The previous section show get installed device . However , device might instal unavailable . For example , another application program might exclusive use . To actually reserve device program , need use MidiDevice method open : ( ! ( device.isOpen ( ) ) ) { try { device.open ( ) ; } catch ( MidiUnavailableException e ) { // Handle throw exception ... } } Once 've access device reserve open , 'll probably want connect one device let MIDI data flow . This procedure describe later Transmitting Receiving MIDI Messages . When device , release program ' use invoke close method MidiDevice .