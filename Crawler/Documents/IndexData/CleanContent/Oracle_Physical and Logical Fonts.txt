There two type font : physical font logical font . Physical font actual font library consist , example , TrueType PostScript Type 1 font . The physical font may Time , Helvetica , Courier , number font , include international font . Logical font following five font family : Serif , SansSerif , Monospaced , Dialog , DialogInput . These logical font actual font library . Instead , logical font name map physical font Java runtime environment . This section help determine type font use application . It cover following topic : Physical Fonts Lucidia Fonts Bundling Physical Fonts Your Application Logical Fonts Advantages Disadvantages Using Physical Logical Fonts Font Configuration Files Physical Fonts Physical font actual font library contain glyph data table map character sequence glyph sequence , use font technology TrueType PostScript Type 1 . To obtain name available font family instal system , call following : GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment ( ) ; String [ ] fontFamilies = ge.getAvailableFontFamilyNames ( ) ; The FontSelector sample program ( available FontSelector.java ) illustrate locate select font . Note : Applications assume particular physical font present . However , logical font safe choice always present . See Logical Fonts information . Note : If n't see applet running , need install least Java SE Development Kit ( JDK ) 7 release . Lucidia Fonts Oracle 's JREs contain family physical font , also license use implementation Java platform . These font physical font , depend host operating system . Applications use font achieve look wherever font available . Also , font cover large range language ( especially European Middle Eastern ) , create fully multilingual application supported language . However , font may available JREs . Also , currently cover complete Unicode character set ; particular , Chinese , Japanese , Korean support . Bundling Physical Fonts Your Application Sometimes , application depend font instal system , usually font custom font otherwise available . In case , must bundle font file application . Use one method create Font object exist physical font : Font java.awt.Font.createFont ( int fontFormat , InputStream ) ; Font java.awt.Font.createFont ( int fontFormat , File fontFile ) ; To create Font object TrueType font , formal parameter fontFormat must constant Font.TRUETYPE_FONT . The following example create Font object TrueType font file A.ttf : Font font = Font.createFont ( Font.TRUETYPE_FONT , new File ( `` A.ttf '' ) ) ; Accessing font directly file simple convenient . However , might require InputStream object code unable access file system resource , font package Java Archive ( JAR ) file along rest application applet . The createFont method create new Font object point size 1 style PLAIN . This base font use Font.deriveFont method derive new Font object vary size , style , transforms font feature . For example : try { //Returned font pt size 1 Font font = Font.createFont ( Font.TRUETYPE_FONT , new File ( `` A.ttf '' ) ) ; //Derive return 12 pt version : //Need use float otherwise //it would interpret style return font.deriveFont ( 12f ) ; } catch ( IOException|FontFormatException e ) { // Handle exception } It important use deriveFont method font create application part set font know underlie font system . Because deriveFont method work originally create font , limitation . The solution problem register created font graphic environment . For example : try { GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment ( ) ; ge.registerFont ( Font.createFont ( Font.TRUETYPE_FONT , new File ( `` A.ttf '' ) ) ; } catch ( IOException|FontFormatException e ) { //Handle exception } After register font graphic environment , font available call getAvailableFontFamilyNames ( ) use font constructor . Logical Fonts Java SE define following five logical font family : Dialog DialogInput Monospaced Serif SansSerif These font available Java platform think alias underlying font property imply name . A Serif font font similar Times New Roman , commonly use print . A Sans Serif font typical onscreen use . These font customize locale user . In addition font support wide range code point ( Unicode character ) . Apart family , font attribute , important style size . Styles Bold Italic . The default font use Java 2D API 12 pt Dialog . This font typical point size read text normal 72â€“120 DPI display device . An application create instance font directly specify following : Font font = new Font ( `` Dialog '' , Font.PLAIN , 12 ) ; Advantages Disadvantages Using Physical Logical Fonts Physical font enable application take full advantage available font , accomplish different text appearance maximum language coverage . However , substantially difficult create application use physical font . Bundling physical font application enable create application look everywhere , full control application want support . However , bundle font may quite big , especially want application support Chinese , Japanese , Korean . In addition , may need resolve licensing issue . Logical font name guarantee work anywhere , enable text rendering least language host operating system localize ( often much large range language ) . However , The physical font use render text vary different implementation , host operate system , locale , application achieve look everywhere . Also , mapping mechanism occasionally limit range character render . The latter use big problem JRE version 5.0 : example , Japanese text could render Japanese localize host operate system , localize system even Japanese font instal . For application use 2D font rendering , problem much rarer JRE version 5.0 later , mapping mechanism generally recognize use font supported write system instal . Font Configuration Files The Java SE runtime environment use font configuration file map logical font name physical font . There several file support different mapping depend host operating system version . The file locate lib directory within JRE installation . You edit create font configuration file adjust mapping particular system setup . See Font Configuration Files information .