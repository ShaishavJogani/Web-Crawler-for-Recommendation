Below complete policy file user want run ExampleGame . The policy file syntax describe ; interested , see Default Policy Implementation Policy File Syntax page . You n't need know syntax ; always use Policy Tool create policy file , show Creating Policy File , Quick Tour Controlling Applications , Signing Code Granting It Permissions lesson . Below sample policy file , follow description individual entry . Assume The policy file Kim 's computer , Kim 's keystore name kim.keystore . ExampleGame sign game creator Terry 's private key , corresponding public key keystore entry aliased `` terry '' . The HighScore HighScorePermissions class sign private key person implement ( Chris ) , corresponding public key keystore entry aliased `` chris '' . Here policy file : kim.policy keystore `` kim.keystore '' ; // Here permission ExampleGame need . // It grant code sign `` terry '' // HighScorePermission , // HighScorePermission sign `` chris '' grant SignedBy `` terry '' { permission com.scoredev.scores.HighScorePermission `` ExampleGame '' , signedBy `` chris '' ; } ; // Here set permission HighScore // class need : grant SignedBy `` chris '' { // The HighScore class need permission read // `` user.home '' find location // highscore file permission java.util.PropertyPermission `` user.home '' , `` read '' ; // It need permission read write // high score file permission java.io.FilePermission `` $ { user.home } $ { / } .highscore '' , `` read , write '' ; // It need get grant permission , // call checkPermission // see caller permission . // Only grant permission // permission sign // `` chris '' permission com.scoredev.scores.HighScorePermission `` * '' , signedBy `` chris '' ; } ; The Keystore Entry A keystore repository key certificate , use look public key signer specify policy file ( `` terry '' `` chris '' example ) . The keytool utility use create administer keystores . For lesson , assume Kim would like play ExampleGame . If Kim 's keystore name kim.keystore , Kim 's policy file need following line beginning : keystore `` kim.keystore '' ; The ExampleGame Entry A policy file entry specify one permission code particular code source - either code particular location ( URL ) , code sign particular entity , . Our policy file need entry game , grant code sign key game 's creator HighScorePermission whose name game name . That permission allow game call HighScore method get update user 's high score value particular game . The entry require ExampleGame : grant SignedBy `` terry '' { permission com.scoredev.scores.HighScorePermission `` ExampleGame '' , signedBy `` chris '' ; } ; Requiring ExampleGame sign `` terry '' enable Kim know game actual game Terry develop . For work , Kim must already store Terry 's public key certificate kim.keystore use alias `` terry '' . Notice HighScorePermission need sign `` chris '' , person actually implement permission . This ensure ExampleGame grant actual permission implement `` chris '' , someone else . As , work Kim must already store Chris 's public key certificate kim.keystore use alias `` chris '' . The HighScore Entry The final entry policy file grant permission HighScore class . More specifically , grant permission code sign `` chris '' , create sign class . Requiring class sign `` chris '' ensures ExampleGame call upon class update user 's high score , ExampleGame know sure use original class implement `` chris '' . To update user 's high score value game call upon , HighScore class require three permission : 1 . Permission read `` user.home '' property value . The HighScore class store user 's high score value .highscore file user 's home directory . Therefore class need java.util.PropertyPermission allow read `` user.home '' property value find exactly user 's home directory resides : permission java.util.PropertyPermission `` user.home '' , `` read '' ; 2 . Permission read write high score file . This permission need HighScore getHighScore setHighScore method access user 's .highscore file get set , respectively , current high score current game . Here required permission : permission java.io.FilePermission `` $ { user.home } $ { / } .highscore '' , `` read , write '' ; Note : The notation $ { propName } specify value property . Thus , $ { user.home } replace value `` user.home '' property . The notation $ { / } platform-independent way specify file separator . 3 . All HighScorePermissions ( i.e , HighScorePermissions name ) . This permission need HighScore check ensure call game grant HighScorePermission whose name game name work . That , HighScore class must also grant permission , since permission check require code currently stack specify permission . Here required permission : permission com.scoredev.scores.HighScorePermission `` * '' , signedBy `` chris '' ; As , HighScorePermission need sign `` chris '' , person actually implement permission .