The definition metadata `` data data . '' With file system , data contain file directory , metadata track information object : Is regular file , directory , link ? What size , creation date , last modified date , file owner , group owner , access permission ? A file system 's metadata typically refer file attribute . The Files class include method use obtain single attribute file , set attribute . Methods Comment size ( Path ) Returns size specify file byte . isDirectory ( Path , LinkOption ) Returns true specify Path locate file directory . isRegularFile ( Path , LinkOption ... ) Returns true specify Path locate file regular file . isSymbolicLink ( Path ) Returns true specify Path locate file symbolic link . isHidden ( Path ) Returns true specify Path locate file consider hidden file system . getLastModifiedTime ( Path , LinkOption ... ) setLastModifiedTime ( Path , FileTime ) Returns set specify file 's last modified time . getOwner ( Path , LinkOption ... ) setOwner ( Path , UserPrincipal ) Returns set owner file . getPosixFilePermissions ( Path , LinkOption ... ) setPosixFilePermissions ( Path , Set < PosixFilePermission > ) Returns set file 's POSIX file permission . getAttribute ( Path , String , LinkOption ... ) setAttribute ( Path , String , Object , LinkOption ... ) Returns set value file attribute . If program need multiple file attribute around time , inefficient use method retrieve single attribute . Repeatedly access file system retrieve single attribute adversely affect performance . For reason , Files class provide two readAttributes method fetch file 's attribute one bulk operation . Method Comment readAttributes ( Path , String , LinkOption ... ) Reads file 's attribute bulk operation . The String parameter identify attribute read . readAttributes ( Path , Class < A > , LinkOption ... ) Reads file 's attribute bulk operation . The Class < A > parameter type attribute request method return object class . Before show example readAttributes method , mention different file system different notion attribute track . For reason , relate file attribute group together view . A view map particular file system implementation , POSIX DOS , common functionality , file ownership . The supported view follow : BasicFileAttributeView – Provides view basic attribute require support file system implementation . DosFileAttributeView – Extends basic attribute view standard four bit support file system support DOS attribute . PosixFileAttributeView – Extends basic attribute view attribute support file system support POSIX family standard , UNIX . These attribute include file owner , group owner , nine related access permission . FileOwnerAttributeView – Supported file system implementation support concept file owner . AclFileAttributeView – Supports reading update file 's Access Control Lists ( ACL ) . The NFSv4 ACL model support . Any ACL model , Windows ACL model , well-defined mapping NFSv4 model might also support . UserDefinedFileAttributeView – Enables support metadata user define . This view map extension mechanism system support . In Solaris OS , example , use view store MIME type file . A specific file system implementation might support basic file attribute view , may support several file attribute view . A file system implementation might support attribute view include API . In instance , deal directly FileAttributeView interface . ( If need work directly FileAttributeView , access via getFileAttributeView ( Path , Class < V > , LinkOption ... ) method . ) The readAttributes method use generic use read attribute file attribute view . The example rest page use readAttributes method . The remainder section cover following topic : Basic File Attributes Setting Time Stamps DOS File Attributes POSIX File Permissions Setting File Group Owner User-Defined File Attributes File Store Attributes Basic File Attributes As mention previously , read basic attribute file , use one Files.readAttributes method , read basic attribute one bulk operation . This far efficient access file system separately read individual attribute . The varargs argument currently support LinkOption enum , NOFOLLOW_LINKS . Use option want symbolic link follow . A word time stamp : The set basic attribute include three time stamp : creationTime , lastModifiedTime , lastAccessTime . Any time stamp might support particular implementation , case corresponding accessor method return implementation-specific value . When support , time stamp return FileTime object . The following code snippet read print basic file attribute give file use method BasicFileAttributes class . Path file = ... ; BasicFileAttributes attr = Files.readAttributes ( file , BasicFileAttributes.class ) ; System.out.println ( `` creationTime : `` + attr.creationTime ( ) ) ; System.out.println ( `` lastAccessTime : `` + attr.lastAccessTime ( ) ) ; System.out.println ( `` lastModifiedTime : `` + attr.lastModifiedTime ( ) ) ; System.out.println ( `` isDirectory : `` + attr.isDirectory ( ) ) ; System.out.println ( `` isOther : `` + attr.isOther ( ) ) ; System.out.println ( `` isRegularFile : `` + attr.isRegularFile ( ) ) ; System.out.println ( `` isSymbolicLink : `` + attr.isSymbolicLink ( ) ) ; System.out.println ( `` size : `` + attr.size ( ) ) ; In addition accessor method show example , fileKey method return either object uniquely identify file null file key available . Setting Time Stamps The following code snippet set last modified time millisecond : Path file = ... ; BasicFileAttributes attr = Files.readAttributes ( file , BasicFileAttributes.class ) ; long currentTime = System.currentTimeMillis ( ) ; FileTime ft = FileTime.fromMillis ( currentTime ) ; Files.setLastModifiedTime ( file , ft ) ; } DOS File Attributes DOS file attribute also support file system DOS , Samba . The following snippet use method DosFileAttributes class . Path file = ... ; try { DosFileAttributes attr = Files.readAttributes ( file , DosFileAttributes.class ) ; System.out.println ( `` isReadOnly `` + attr.isReadOnly ( ) ) ; System.out.println ( `` isHidden `` + attr.isHidden ( ) ) ; System.out.println ( `` isArchive `` + attr.isArchive ( ) ) ; System.out.println ( `` isSystem `` + attr.isSystem ( ) ) ; } catch ( UnsupportedOperationException x ) { System.err.println ( `` DOS file '' + `` attribute support : '' + x ) ; } However , set DOS attribute use setAttribute ( Path , String , Object , LinkOption ... ) method , follow : Path file = ... ; Files.setAttribute ( file , `` : hidden '' , true ) ; POSIX File Permissions POSIX acronym Portable Operating System Interface UNIX set IEEE ISO standard design ensure interoperability among different flavor UNIX . If program conforms POSIX standard , easily port POSIX-compliant operate system . Besides file owner group owner , POSIX support nine file permission : read , write , execute permission file owner , member group , `` everyone else . '' The following code snippet read POSIX file attribute give file print standard output . The code use method PosixFileAttributes class . Path file = ... ; PosixFileAttributes attr = Files.readAttributes ( file , PosixFileAttributes.class ) ; System.out.format ( `` % % % % n '' , attr.owner ( ) .getName ( ) , attr.group ( ) .getName ( ) , PosixFilePermissions.toString ( attr.permissions ( ) ) ) ; The PosixFilePermissions helper class provide several useful method , follow : The toString method , use previous code snippet , convert file permission string ( example , rw-r -- r -- ) . The fromString method accept string represent file permission construct Set file permission . The asFileAttribute method accept Set file permission construct file attribute pass Path.createFile Path.createDirectory method . The following code snippet read attribute one file create new file , assign attribute original file new file : Path sourceFile = ... ; Path newFile = ... ; PosixFileAttributes attrs = Files.readAttributes ( sourceFile , PosixFileAttributes.class ) ; FileAttribute < Set < PosixFilePermission > > attr = PosixFilePermissions.asFileAttribute ( attrs.permissions ( ) ) ; Files.createFile ( file , attr ) ; The asFileAttribute method wrap permission FileAttribute . The code attempt create new file permission . Note umask also apply , new file might secure permission request . To set file 's permission value represent hard-coded string , use following code : Path file = ... ; Set < PosixFilePermission > perm = PosixFilePermissions.fromString ( `` rw -- -- -- - '' ) ; FileAttribute < Set < PosixFilePermission > > attr = PosixFilePermissions.asFileAttribute ( perm ) ; Files.setPosixFilePermissions ( file , perm ) ; The Chmod example recursively change permission file manner similar chmod utility . Setting File Group Owner To translate name object store file owner group owner , use UserPrincipalLookupService service . This service look name group name string return UserPrincipal object represent string . You obtain user principal look-up service default file system use FileSystem.getUserPrincipalLookupService method . The following code snippet show set file owner use setOwner method : Path file = ... ; UserPrincipal owner = file.GetFileSystem ( ) .getUserPrincipalLookupService ( ) .lookupPrincipalByName ( `` sally '' ) ; Files.setOwner ( file , owner ) ; There special-purpose method Files class set group owner . However , safe way directly POSIX file attribute view , follow : Path file = ... ; GroupPrincipal group = file.getFileSystem ( ) .getUserPrincipalLookupService ( ) .lookupPrincipalByGroupName ( `` green '' ) ; Files.getFileAttributeView ( file , PosixFileAttributeView.class ) .setGroup ( group ) ; User-Defined File Attributes If file attribute support file system implementation n't sufficient need , use UserDefinedAttributeView create track file attribute . Some implementation map concept feature like NTFS Alternative Data Streams extend attribute file system ext3 ZFS . Most implementation impose restriction size value , example , ext3 limit size 4 kilobyte . A file 's MIME type store user-defined attribute use code snippet : Path file = ... ; UserDefinedFileAttributeView view = Files .getFileAttributeView ( file , UserDefinedFileAttributeView.class ) ; view.write ( `` user.mimetype '' , Charset.defaultCharset ( ) .encode ( `` text/html '' ) ; To read MIME type attribute , would use code snippet : Path file = ... ; UserDefinedFileAttributeView view = Files .getFileAttributeView ( file , UserDefinedFileAttributeView.class ) ; String name = `` user.mimetype '' ; ByteBuffer buf = ByteBuffer.allocate ( view.size ( name ) ) ; view.read ( name , buf ) ; buf.flip ( ) ; String value = Charset.defaultCharset ( ) .decode ( buf ) .toString ( ) ; The Xdd example show get , set , delete user-defined attribute . Note : In Linux , might enable extended attribute user-defined attribute work . If receive UnsupportedOperationException try access user-defined attribute view , need remount file system . The following command remount root partition extended attribute ext3 file system . If command work flavor Linux , consult documentation . $ sudo mount -o remount , user_xattr / If want make change permanent , add entry /etc/fstab . File Store Attributes You use FileStore class learn information file store , much space available . The getFileStore ( Path ) method fetch file store specify file . The following code snippet print space usage file store particular file resides : Path file = ... ; FileStore store = Files.getFileStore ( file ) ; long total = store.getTotalSpace ( ) / 1024 ; long use = ( store.getTotalSpace ( ) - store.getUnallocatedSpace ( ) ) / 1024 ; long avail = store.getUsableSpace ( ) / 1024 ; The DiskUsage example use API print disk space information store default file system . This example use getFileStores method FileSystem class fetch file store file system .