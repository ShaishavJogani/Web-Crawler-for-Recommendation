Data stream support binary I/O primitive data type value ( boolean , char , byte , short , int , long , float , double ) well String value . All data stream implement either DataInput interface DataOutput interface . This section focus widely-used implementation interface , DataInputStream DataOutputStream . The DataStreams example demonstrate data stream write set data record , read . Each record consist three value relate item invoice , show following table : Order record Data type Data description Output Method Input Method Sample Value 1 double Item price DataOutputStream.writeDouble DataInputStream.readDouble 19.99 2 int Unit count DataOutputStream.writeInt DataInputStream.readInt 12 3 String Item description DataOutputStream.writeUTF DataInputStream.readUTF '' Java T-Shirt '' Let 's examine crucial code DataStreams . First , program define constant contain name data file data write : static final String dataFile = `` invoicedata '' ; static final double [ ] price = { 19.99 , 9.99 , 15.99 , 3.99 , 4.99 } ; static final int [ ] unit = { 12 , 8 , 13 , 29 , 50 } ; static final String [ ] descs = { `` Java T-shirt '' , `` Java Mug '' , `` Duke Juggling Dolls '' , `` Java Pin '' , `` Java Key Chain '' } ; Then DataStreams open output stream . Since DataOutputStream create wrapper exist byte stream object , DataStreams provide buffered file output byte stream . = new DataOutputStream ( new BufferedOutputStream ( new FileOutputStream ( dataFile ) ) ) ; DataStreams write record close output stream . ( int = 0 ; < prices.length ; ++ ) { out.writeDouble ( price [ ] ) ; out.writeInt ( unit [ ] ) ; out.writeUTF ( descs [ ] ) ; } The writeUTF method write String value modified form UTF-8 . This variable-width character encode need single byte common Western character . Now DataStreams read data back . First must provide input stream , variable hold input data . Like DataOutputStream , DataInputStream must construct wrapper byte stream . = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( dataFile ) ) ) ; double price ; int unit ; String desc ; double total = 0.0 ; Now DataStreams read record stream , report data encounter . try { ( true ) { price = in.readDouble ( ) ; unit = in.readInt ( ) ; desc = in.readUTF ( ) ; System.out.format ( `` You order % '' + `` unit % $ % .2f % n '' , unit , desc , price ) ; total += unit * price ; } } catch ( EOFException e ) { } Notice DataStreams detect end-of-file condition catch EOFException , instead test invalid return value . All implementation DataInput method use EOFException instead return value . Also notice specialized write DataStreams exactly match corresponding specialized read . It programmer make sure output type input type match way : The input stream consist simple binary data , nothing indicate type individual value , begin stream . DataStreams use one bad programming technique : use float point number represent monetary value . In general , float point bad precise value . It 's particularly bad decimal fraction , common value ( 0.1 ) binary representation . The correct type use currency value java.math.BigDecimal . Unfortunately , BigDecimal object type , wo n't work data stream . However , BigDecimal work object stream , cover next section .