After construct DOM ( either parse XML file building programmatically ) frequently want save XML . This section show use Xalan transform package . Using package , create transformer object wire DOMSource StreamResult . You invoke transformer 's transform ( ) method write DOM XML data . Reading XML The first step create DOM memory parse XML file . By , get comfortable process . Note : The code discuss section file TransformationApp01.java . Download XSLT examlles unzip install-dir/jaxp-1_4_2-release-date/samples directory . The following code provide basic template start . It basically code use start Document Object Model lesson . import javax.xml.parsers.DocumentBuilder ; import javax.xml.parsers.DocumentBuilderFactory ; import javax.xml.parsers.FactoryConfigurationError ; import javax.xml.parsers.ParserConfigurationException ; import org.xml.sax.SAXException ; import org.xml.sax.SAXParseException ; import org.w3c.dom.Document ; import org.w3c.dom.DOMException ; import java.io . * ; public class TransformationApp01 { static Document document ; public static void main ( String argv [ ] ) { ( argv.length ! = 1 ) { System.err.println ( `` Usage : java TransformationApp01 filename '' ) ; System.exit ( 1 ) ; } DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance ( ) ; try { File f = new File ( argv [ 0 ] ) ; DocumentBuilder builder = factory.newDocumentBuilder ( ) ; document = builder.parse ( f ) ; } catch ( SAXParseException spe ) { // Error generate parser System.out.println ( `` \n** Parsing error '' + `` , line `` + spe.getLineNumber ( ) + `` , uri `` + spe.getSystemId ( ) ) ; System.out.println ( `` `` + spe.getMessage ( ) ) ; // Use contained exception , Exception x = spe ; ( spe.getException ( ) ! = null ) x = spe.getException ( ) ; x.printStackTrace ( ) ; } catch ( SAXException sxe ) { // Error generate application // ( parser-initialization error ) Exception x = sxe ; ( sxe.getException ( ) ! = null ) x = sxe.getException ( ) ; x.printStackTrace ( ) ; } catch ( ParserConfigurationException pce ) { // Parser specify option // build pce.printStackTrace ( ) ; } catch ( IOException ioe ) { // I/O error ioe.printStackTrace ( ) ; } } } Creating Transformer The next step create transformer use transmit XML System.out . To begin , follow import statement require . import javax.xml.transform.Transformer ; import javax.xml.transform.TransformerFactory ; import javax.xml.transform.TransformerException ; import javax.xml.transform.TransformerConfigurationException ; import javax.xml.transform.dom.DOMSource ; import javax.xml.transform.stream.StreamResult ; import java.io . * ; Here , add series class form standard pattern : entity ( Transformer ) , factory create ( TransformerFactory ) , exception generate . Because transformation always source result , import class necessary use DOM source ( DOMSource ) output stream result ( StreamResult ) . Next , add code carry transformation : try { File f = new File ( argv [ 0 ] ) ; DocumentBuilder builder = factory.newDocumentBuilder ( ) ; document = builder.parse ( f ) ; // Use Transformer output TransformerFactory tFactory = TransformerFactory.newInstance ( ) ; Transformer transformer = tFactory.newTransformer ( ) ; DOMSource source = new DOMSource ( document ) ; StreamResult result = new StreamResult ( System.out ) ; transformer.transform ( source , result ) ; } Here , create transformer object , use DOM construct source object , use System.out construct result object . You tell transformer operate source object output result object . In case , `` transformer '' actually change anything . In XSLT terminology , use identity transform , mean `` transformation '' generate copy source , unchanged . Note : You specify variety output property transformer object , define W3C specification http : //www.w3.org/TR/xslt # output . For example , get indented output , invoke following method : % transformer.setOutputProperty ( OutputKeys.INDENT , `` yes '' ) ; Finally , follow highlight code catch new error generate : } catch ( TransformerConfigurationException tce ) { System.out.println ( `` * Transformer Factory error '' ) ; System.out.println ( `` `` + tce.getMessage ( ) ) ; Throwable x = tce ; ( tce.getException ( ) ! = null ) x = tce.getException ( ) ; x.printStackTrace ( ) ; } catch ( TransformerException te ) { System.out.println ( `` * Transformation error '' ) ; System.out.println ( `` `` + te.getMessage ( ) ) ; Throwable x = te ; ( te.getException ( ) ! = null ) x = te.getException ( ) ; x.printStackTrace ( ) ; } catch ( SAXParseException spe ) { // ... } Notes TransformerExceptions throw transformer object . TransformerConfigurationExceptions throw factory . To preserve XML document 's DOCTYPE setting , also necessary add following code : import javax.xml.transform.OutputKeys ; ... ( document.getDoctype ( ) ! = null ) { String systemValue = ( new File ( document.getDoctype ( ) .getSystemId ( ) ) ) .getName ( ) ; transformer.setOutputProperty ( OutputKeys.DOCTYPE_SYSTEM , systemValue ) ; } To find configure factory handle validation error , see Reading XML Data DOM . Running TransformationApp01 Sample Navigate sample directory . % cd install-dir/jaxp-1_4_2-release-date/samples . Download XSLT example click link unzip install-dir/jaxp-1_4_2-release-date/samples directory . Navigate xslt directory . % cd xslt Compile TransformationApp01 sample . Type following command : % javac TransformationApp01.java Run TransformationApp01 sample XML file . In case , TransformationApp01 run file foo.xml , find xslt/data directory unzip sample bundle . % java TransformationApp01 data/foo.xml You see following output : < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' '' ? > < doc > < name first= '' David '' last= '' Marston '' / > < name first= '' David '' last= '' Bertoni '' / > < name first= '' Donald '' last= '' Leslie '' / > < name first= '' Emily '' last= '' Farmer '' / > < name first= '' Joseph '' last= '' Kesselman '' / > < name first= '' Myriam '' last= '' Midy '' / > < name first= '' Paul '' last= '' Dick '' / > < name first= '' Stephen '' last= '' Auriemma '' / > < name first= '' Scott '' last= '' Boag '' / > < name first= '' Shane '' last= '' Curcuru '' / > As mention Creating Transformer , transformer actually change anything , rather perform identity transform , generate copy source . A real transformation perform Generating XML Arbitrary Data Structure . Writing Out Subtree DOM It also possible operate subtree DOM . In section , experiment option . Note : The code discuss section TranformationApp02.java . If already , download XSLT example unzip install-dir/jaxp-1_4_2-release-date/samples directory . The difference process create DOMSource use node DOM , rather entire DOM . The first step import class need get node want , show following highlighted code : import org.w3c.dom.Document ; import org.w3c.dom.DOMException ; import org.w3c.dom.Node ; import org.w3c.dom.NodeList ; The next step find good node experiment . The following highlighted code select first < name > element . try { File f = new File ( argv [ 0 ] ) ; DocumentBuilder builder = factory.newDocumentBuilder ( ) ; document = builder.parse ( f ) ; NodeList list = document.getElementsByTagName ( `` name '' ) ; Node node = list.item ( 0 ) ; } In Creating Transformer , source object construct entire document following line code DOMSource source = new DOMSource ( document ) ; However , highlighted line code construct source object consist subtree root particular node . DOMSource source = new DOMSource ( node ) ; StreamResult result = new StreamResult ( System.out ) ; transformer.transform ( source , result ) ; Running TranformationApp02 Sample Navigate sample directory . % cd install-dir/jaxp-1_4_2-release-date/samples . Download XSLT example click link unzip install-dir/jaxp-1_4_2-release-date/samples directory . Navigate xslt directory . cd xslt Compile TranformationApp02 sample . Type following command : % javac xslt/TranformationApp02.java Run TranformationApp02 sample XML file . In case , TranformationApp02 run file foo.xml , find xslt/data directory unzip sample bundle . % java TranformationApp02 data/foo.xml You see following output : < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' '' ? > < doc > < name first= '' David '' last= '' Marston '' / > This time , first < name > element print . At point , see use transformer write DOM use subtree DOM source object transformation . In next section , see use transformer create XML data structure capable parse .