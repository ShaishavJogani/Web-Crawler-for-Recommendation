Understanding Devices , Transmitters , Receivers The Java Sound API specify message-routing architecture MIDI data 's flexible easy use , understand work . The system base module-connection design : distinct module , perform specific task , interconnect ( network ) , enable data flow one module another . The base module Java Sound API 's messaging system MidiDevice interface . MidiDevices include sequencer ( record , play , load , edit sequence time-stamped MIDI message ) , synthesizer ( generate sound trigger MIDI message ) , MIDI input output port , data come go external MIDI device . The functionality typically require MIDI port describe base MidiDevice interface . The Sequencer Synthesizer interface extend MidiDevice interface describe additional functionality characteristic MIDI sequencer synthesizer , respectively . Concrete class function sequencer synthesizer implement interface . A MidiDevice typically one ancillary object implement Receiver Transmitter interface . These interface represent `` plug '' `` portal '' connect device together , permit data flow . By connect Transmitter one MidiDevice Receiver another , create network module data flow one another . The MidiDevice interface include method determine many transmitter receiver object device support concurrently , method access object . A MIDI output port normally least one Receiver outgoing message may receive ; similarly , synthesizer normally respond message sent Receiver Receivers . A MIDI input port normally least one Transmitter , propagate incoming message . A full-featured sequencer support Receivers , receive message recording , Transmitters , send message playback . The Transmitter interface include method set query receiver transmitter send MidiMessages . Setting receiver establish connection two . The Receiver interface contain method send MidiMessage receiver . Typically , method invoke Transmitter . Both Transmitter Receiver interface include close method free previously connect transmitter receiver , make available different connection . We 'll examine use transmitter receiver . Before get typical case connect two device ( hook sequencer synthesizer ) , 'll examine simpler case send MIDI message directly application program device . Studying simple scenario make easy understand Java Sound API arrange send MIDI message two device . Sending Message Receiver without Using Transmitter Let 's say want create MIDI message scratch send receiver . You create new , blank ShortMessage fill MIDI data use following ShortMessage method : void setMessage ( int command , int channel , int data1 , int data2 ) Once message ready send , send Receiver object , use Receiver method : void send ( MidiMessage message , long timeStamp ) The time-stamp argument explain momentarily . For , 'll mention value set -1 n't care specify precise time . In case , device receive message try respond message soon possible . An application program obtain receiver MidiDevice invoke device 's getReceiver method . If device ca n't provide receiver program ( typically device 's receiver already use ) , MidiUnavailableException throw . Otherwise , receiver return method available immediate use program . When program finish use receiver , call receiver 's close method . If program attempt invoke method receiver call close , IllegalStateException may throw . As concrete simple example send message without use transmitter , let 's send Note On message default receiver , typically associate device MIDI output port synthesizer . We create suitable ShortMessage pass argument Receiver 's send method : ShortMessage myMsg = new ShortMessage ( ) ; // Start play note Middle C ( 60 ) , // moderately loud ( velocity = 93 ) . myMsg.setMessage ( ShortMessage.NOTE_ON , 0 , 60 , 93 ) ; long timeStamp = -1 ; Receiver rcvr = MidiSystem.getReceiver ( ) ; rcvr.send ( myMsg , timeStamp ) ; This code use static integer field ShortMessage , namely , NOTE_ON , use MIDI message 's status byte . The part MIDI message give explicit numeric value argument setMessage method . The zero indicate note play use MIDI channel number 1 ; 60 indicate note Middle C ; 93 arbitrary key-down velocity value , typically indicate synthesizer eventually play note play somewhat loudly . ( The MIDI specification leave exact interpretation velocity synthesizer 's implementation current instrument . ) This MIDI message send receiver time stamp -1 . We need examine exactly time stamp parameter mean , subject next section . Understanding Time Stamps As already know , MIDI specification different part . One part describe MIDI `` wire '' protocol ( message send device real time ) , another part describe Standard MIDI Files ( message store event `` sequence '' ) . In latter part specification , event store standard MIDI file tag timing value indicate event play . By contrast , message MIDI wire protocol always suppose process immediately , soon 're receive device , accompany timing value . The Java Sound API add additional twist . It come surprise time value present MidiEvent object store sequence ( might read MIDI file ) , Standard MIDI Files specification . But Java Sound API , even message send devicesâin word , message correspond MIDI wire protocolâcan give time value , know time stamp . It time stamp concern u . Time Stamps Messages Sent Devices The time stamp optionally accompany message send device Java Sound API quite different timing value standard MIDI file . The timing value MIDI file often base musical concept beat tempo , event 's timing measure time elapse since previous event . In contrast , time stamp message send device 's Receiver object always measure absolute time microsecond . Specifically , measure number microsecond elapse since device receiver open . This kind time stamp design help compensate latency introduce operating system application program . It 's important realize time stamp use minor adjustment timing , implement complex queue schedule event completely arbitrary time ( MidiEvent time value ) . The time stamp message send device ( Receiver ) provide precise time information device . The device might use information process message . For example , might adjust event 's timing millisecond match information time stamp . On hand , device support time stamp , device might completely ignore message 's time stamp . Even device support time stamp , might schedule event exactly time request . You ca n't expect send message whose time stamp far future device handle intend , certainly ca n't expect device correctly schedule message whose time stamp past ! It 's device decide handle time stamp far future past . The sender n't know device considers far , whether device problem time stamp . This ignorance mimic behavior external MIDI hardware device , send message without ever know whether receive correctly . ( MIDI wire protocol unidirectional . ) Some device send time-stamped message ( via Transmitter ) . For example , message send MIDI input port might stamp time incoming message arrive port . On system , event-handling mechanism cause certain amount time precision lose subsequent processing message . The message 's time stamp allow original timing information preserve . To learn whether device support time stamp , invoke following method MidiDevice : long getMicrosecondPosition ( ) This method return -1 device ignores time stamp . Otherwise , return device 's current notion time , sender use offset determine time stamp message subsequently send . For example , want send message time stamp five millisecond future , get device 's current position microsecond , add 5000 microsecond , use time stamp . Keep mind MidiDevice 's notion time always place time zero time device open . Now , explanation time stamp background , let 's return send method Receiver : void send ( MidiMessage message , long timeStamp ) The timeStamp argument express microsecond , accord receive device 's notion time . If device n't support time stamp , simply ignore timeStamp argument . You n't require time-stamp message send receiver . You use -1 timeStamp argument indicate n't care adjust exact timing ; 're leave receive device process message soon . However , 's advisable send -1 message explicit time stamp message send receiver . Doing likely cause irregularity resultant timing . Connecting Transmitters Receivers We 've see send MIDI message directly receiver , without use transmitter . Now let 's look common case , n't create MIDI message scratch , simply connect device together one send MIDI message . Connecting Single Device The specific case 'll take first example connect sequencer synthesizer . After connection make , start sequencer run cause synthesizer generate audio event sequencer 's current sequence . For , 'll ignore process load sequence MIDI file sequencer . Also , wo n't go mechanism play sequence . Loading play sequence discuss detail Playing , Recording , Editing MIDI Sequences . Loading instrument synthesizer discuss Synthesizing Sound . For , 're interested make connection sequencer synthesizer . This serve illustration general process connect one device 's transmitter another device 's receiver . For simplicity , 'll use default sequencer default synthesizer . Sequencer seq ; Transmitter seqTrans ; Synthesizer synth ; Receiver synthRcvr ; try { seq = MidiSystem.getSequencer ( ) ; seqTrans = seq.getTransmitter ( ) ; synth = MidiSystem.getSynthesizer ( ) ; synthRcvr = synth.getReceiver ( ) ; seqTrans.setReceiver ( synthRcvr ) ; } catch ( MidiUnavailableException e ) { // handle throw exception } An implementation might actually single object serve default sequencer default synthesizer . In word , implementation might use class implement Sequencer interface Synthesizer interface . In case , probably would n't necessary make explicit connection code . For portability , though , 's safe assume configuration . If desire , test condition , course : ( seq instanceof Synthesizer ) although explicit connection work case . Connecting More One Device The previous code example illustrate one-to-one connection transmitter receiver . But , need send MIDI message multiple receiver ? For example , suppose want capture MIDI data external device drive internal synthesizer simultaneously record data sequence . This form connection , sometimes refer `` fan '' `` splitter , '' straightforward . The following statement show create fan-out connection , MIDI message arrive MIDI input port send Synthesizer object Sequencer object . We assume 've already obtain open three device : input port , sequencer , synthesizer . ( To obtain input port , 'll need iterate item return MidiSystem.getMidiDeviceInfo . ) Synthesizer synth ; Sequencer seq ; MidiDevice inputPort ; // [ obtain open three device ... ] Transmitter inPortTrans1 , inPortTrans2 ; Receiver synthRcvr ; Receiver seqRcvr ; try { inPortTrans1 = inputPort.getTransmitter ( ) ; synthRcvr = synth.getReceiver ( ) ; inPortTrans1.setReceiver ( synthRcvr ) ; inPortTrans2 = inputPort.getTransmitter ( ) ; seqRcvr = seq.getReceiver ( ) ; inPortTrans2.setReceiver ( seqRcvr ) ; } catch ( MidiUnavailableException e ) { // handle throw exception } This code introduce dual invocation MidiDevice.getTransmitter method , assign result inPortTrans1 inPortTrans2 . As mention earlier , device multiple transmitter receiver . Each time MidiDevice.getTransmitter ( ) invoke give device , another transmitter return , available , time exception throw . To learn many transmitter receiver device support , use following MidiDevice method : int getMaxTransmitters ( ) int getMaxReceivers ( ) These method return total number device , number currently available . A transmitter transmit MIDI message one receiver time . ( Every time call Transmitter 's setReceiver method , exist Receiver , , replace newly specify one . You tell whether transmitter currently receiver invoke Transmitter.getReceiver . ) However , device multiple transmitter , send data one device time , connect transmitter different receiver , saw case input port . Similarly , device use multiple receiver receive one device time . The multiple-receiver code 's require straightforward , directly analogous multiple-transmitter code . It 's also possible single receiver receive message one transmitter time . Closing Connections Once 're connection , free resource invoke close method transmitter receiver 've obtain . The Transmitter Receiver interface close method . Note invoke Transmitter.setReceiver n't close transmitter 's current receiver . The receiver leave open , still receive message transmitter 's connect . If 're also device , similarly make available application program invoke MidiDevice.close ( ) . Closing device automatically close transmitter receiver .