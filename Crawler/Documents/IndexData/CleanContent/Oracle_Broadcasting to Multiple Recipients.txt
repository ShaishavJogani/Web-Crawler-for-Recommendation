In addition DatagramSocket , let program send packet one another , java.net include class call MulticastSocket . This kind socket use client-side listen packet server broadcast multiple client . Let 's rewrite quote server broadcast DatagramPackets multiple recipient . Instead send quote specific client make request , new server need broadcast quote regular interval . The client need modify passively listen quote MulticastSocket . This example comprise three class modification three class previous example : MulticastServer , MulticastServerThread , MulticastClient . This discussion highlight interesting part class . Here new version server 's main program . The difference code previous version , QuoteServer , show bold : import java.io . * ; public class MulticastServer { public static void main ( String [ ] args ) throw IOException { new MulticastServerThread ( ) .start ( ) ; } } Basically , server get new name create MulticastServerThread instead QuoteServerThread . Now let 's look MulticastServerThread contain heart server . Here 's class declaration : public class MulticastServerThread extend QuoteServerThread { // ... } We 've make class subclass QuoteServerThread use constructor , inherit member variable getNextQuote method . Recall QuoteServerThread create DatagramSocket bound port 4445 open quote file . The DatagramSocket 's port number n't actually matter example client never send anything server . The method explicitly implement MulticastServerThread run method . The difference run method one QuoteServerThread show bold : public void run ( ) { ( moreQuotes ) { try { byte [ ] buf = new byte [ 256 ] ; // n't wait request ... send quote String dString = null ; ( == null ) dString = new Date ( ) .toString ( ) ; else dString = getNextQuote ( ) ; buf = dString.getBytes ( ) ; InetAddress group = InetAddress.getByName ( `` 203.0.113.0 '' ) ; DatagramPacket packet ; packet = new DatagramPacket ( buf , buf.length , group , 4446 ) ; socket.send ( packet ) ; try { sleep ( ( long ) Math.random ( ) * FIVE_SECONDS ) ; } catch ( InterruptedException e ) { } } catch ( IOException e ) { e.printStackTrace ( ) ; moreQuotes = false ; } } socket.close ( ) ; } The interesting change DatagramPacket construct , particular , InetAddress port use construct DatagramPacket . Recall previous example retrieve InetAddress port number packet send server client . This server need reply directly client . Now , server need address multiple client . So time InetAddress port number hard-coded . The hard-coded port number 4446 ( client must MulticastSocket bound port ) . The hard-coded InetAddress DatagramPacket `` 203.0.113.0 '' group identifier ( rather Internet address machine single client run ) . This particular address arbitrarily choose reserve purpose . Created way , DatagramPacket destine client listen port number 4446 member `` 203.0.113.0 '' group . To listen port number 4446 , new client program create MulticastSocket port number . To become member `` 203.0.113.0 '' group , client call MulticastSocket 's joinGroup method InetAddress identify group . Now , client set receive DatagramPackets destine port group specify . Here 's relevant code new client program ( also rewrite passively receive quote rather actively request ) . The bold statement one interact MulticastSocket : MulticastSocket socket = new MulticastSocket ( 4446 ) ; InetAddress group = InetAddress.getByName ( `` 203.0.113.0 '' ) ; socket.joinGroup ( group ) ; DatagramPacket packet ; ( int = 0 ; < 5 ; i++ ) { byte [ ] buf = new byte [ 256 ] ; packet = new DatagramPacket ( buf , buf.length ) ; socket.receive ( packet ) ; String receive = new String ( packet.getData ( ) ) ; System.out.println ( `` Quote Moment : `` + receive ) ; } socket.leaveGroup ( group ) ; socket.close ( ) ; Notice server use DatagramSocket broadcast packet receive client MulticastSocket . Alternatively , could use MulticastSocket . The socket use server send DatagramPacket important . What 's important broadcast packet address information contain DatagramPacket , socket use client listen Try : Run MulticastServer several client . Watch client get quote .