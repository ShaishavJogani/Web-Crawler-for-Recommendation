BasicControl The javax.naming.ldap.BasicControl implement javax.naming.ldap.Control serve base implementation extend control . Paged Results Control The paged result control useful LDAP client want receive search result controlled manner limit page size . The page size configure client per availability resource , like bandwidth processing capability . The server use cookie ( similar HTTP session cookie mechanism ) maintain state search request order track result send client . The paged result control specify RFC 2696 . The class provide functionality require support paged result control . javax.naming.ldap.PagedResultsControl javax.naming.ldap.PagedResultsResponseControl How use Paged Results Control ? The example illustrate client-server interaction client search request page size limit 5 . The entire result set return server contain 21 entry . Client send search request ask page result page size 5 . // Activate page result int pageSize = 5 ; // 5 entry per page byte [ ] cookie = null ; int total ; ctx.setRequestControls ( new Control [ ] { new PagedResultsControl ( pageSize , Control.CRITICAL ) } ) ; // Perform search NamingEnumeration result = ctx.search ( `` '' , `` ( objectclass=* ) '' , new SearchControls ( ) ) ; The server respond entry plus indication 21 total entry search result opaque cookie use client retrieve subsequent page . // Iterate batch search result send server ( result ! = null & & results.hasMore ( ) ) { // Display entry SearchResult entry = ( SearchResult ) results.next ( ) ; System.out.println ( entry.getName ( ) ) ; // Handle entry 's response control ( ) ( entry instanceof HasControls ) { // ( ( HasControls ) entry ) .getControls ( ) ; } } // Examine paged result control response Control [ ] control = ctx.getResponseControls ( ) ; ( control ! = null ) { ( int = 0 ; < controls.length ; i++ ) { ( control [ ] instanceof PagedResultsResponseControl ) { PagedResultsResponseControl prrc = ( PagedResultsResponseControl ) control [ ] ; total = prrc.getResultSize ( ) ; cookie = prrc.getCookie ( ) ; } else { // Handle response control ( ) } } } Client send identical search request , return opaque cookie , ask next page . // Re-activate page result ctx.setRequestControls ( new Control [ ] { new PagedResultsControl ( pageSize , cookie , Control.CRITICAL ) } ) ; Server respond five entry plus indication entry The client repeat search perform step 4 null cookie return server , indicate entry send server . The complete JNDI example find . Note : The Paged Search Control support Windows Active Directory Server . It 's support Oracle Directory Server version 5.2