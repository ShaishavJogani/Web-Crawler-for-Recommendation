An application often respond exception throw another exception . In effect , first exception cause second exception . It helpful know one exception cause another . Chained Exceptions help programmer . The following method constructor Throwable support chain exception . Throwable getCause ( ) Throwable initCause ( Throwable ) Throwable ( String , Throwable ) Throwable ( Throwable ) The Throwable argument initCause Throwable constructor exception cause current exception . getCause return exception cause current exception , initCause set current exception 's cause . The following example show use chained exception . try { } catch ( IOException e ) { throw new SampleException ( `` Other IOException '' , e ) ; } In example , IOException catch , new SampleException exception create original cause attach chain exception throw next high level exception handler . Accessing Stack Trace Information Now let 's suppose higher-level exception handler want dump stack trace format . Definition : A stack trace provide information execution history current thread list name class method call point exception occur . A stack trace useful debugging tool 'll normally take advantage exception throw . The following code show call getStackTrace method exception object . catch ( Exception cause ) { StackTraceElement element [ ] = cause.getStackTrace ( ) ; ( int = 0 , n = elements.length ; < n ; i++ ) { System.err.println ( element [ ] .getFileName ( ) + `` : '' + element [ ] .getLineNumber ( ) + `` > > `` + element [ ] .getMethodName ( ) + `` ( ) '' ) ; } } Logging API The next code snippet log exception occur within catch block . However , rather manually parse stack trace send output System.err ( ) , send output file use log facility java.util.logging package . try { Handler handler = new FileHandler ( `` OutFile.log '' ) ; Logger.getLogger ( `` '' ) .addHandler ( handler ) ; } catch ( IOException e ) { Logger logger = Logger.getLogger ( `` package.name '' ) ; StackTraceElement element [ ] = e.getStackTrace ( ) ; ( int = 0 , n = elements.length ; < n ; i++ ) { logger.log ( Level.WARNING , elements [ ] .getMethodName ( ) ) ; } }